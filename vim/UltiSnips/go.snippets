snippet A "A(x *int)"
A( ${1:x *int})
endsnippet

snippet A2 "A2(int)"
A2( ${1:int})
endsnippet

snippet AcceptConnections "AcceptConnections(job *engine.Job)"
AcceptConnections( ${1:job *engine.Job})
endsnippet

snippet ActivateDevice "ActivateDevice(poolName string, name string, deviceId int, size uint64)"
ActivateDevice( ${1:poolName string}, ${2:name string}, ${3:deviceId int}, ${4:size uint64})
endsnippet

snippet ActivityRewardHandle "ActivityRewardHandle(user *User, object interface{}, code int16)"
ActivityRewardHandle( ${1:user *User}, ${2:object interface{}}, ${3:code int16})
endsnippet

snippet AdHocTypeSwitch "AdHocTypeSwitch(x interface{})"
AdHocTypeSwitch( ${1:x interface{}})
endsnippet

snippet Add "Add(type int16, attack_info *AttackInfo, def_user_id int32, def_city_id int32, timeout int64)"
Add( ${1:type int16}, ${2:attack_info *AttackInfo}, ${3:def_user_id int32}, ${4:def_city_id int32}, ${5:timeout int64})
endsnippet

snippet AddActivitySecurityScore "AddActivitySecurityScore(user *User, star int32, score int32)"
AddActivitySecurityScore( ${1:user *User}, ${2:star int32}, ${3:score int32})
endsnippet

snippet AddCommand "AddCommand(f Flag, sig os.Signal, handler SignalHandlerFunc)"
AddCommand( ${1:f Flag}, ${2:sig os.Signal}, ${3:handler SignalHandlerFunc})
endsnippet

snippet AddCommitToPerfTodo "AddCommitToPerfTodo(c appengine.Context, com *Commit)"
AddCommitToPerfTodo( ${1:c appengine.Context}, ${2:com *Commit})
endsnippet

snippet AddDefaultGw "AddDefaultGw(ip, device string)"
AddDefaultGw( ${1:ip}, ${2:device string})
endsnippet

snippet AddEdge "AddEdge(caller *Node, site ssa.CallInstruction, callee *Node)"
AddEdge( ${1:caller *Node}, ${2:site ssa.CallInstruction}, ${3:callee *Node})
endsnippet

snippet AddEvent "AddEvent(_type int16, uid int32, params []byte, scope []int32, start, end int64, end_coordinate int32)"
AddEvent( ${1:_type int16}, ${2:uid int32}, ${3:params []byte}, ${4:scope []int32}, ${5:start}, ${6:end int64}, ${7:end_coordinate int32})
endsnippet

snippet AddExpToHero "AddExpToHero(user *User, _hero *hero.Hero, exp int32)"
AddExpToHero( ${1:user *User}, ${2:_hero *hero.Hero}, ${3:exp int32})
endsnippet

snippet AddFlag "AddFlag(f Flag, sig os.Signal)"
AddFlag( ${1:f Flag}, ${2:sig os.Signal})
endsnippet

snippet AddGatherExpToArmyInfo "AddGatherExpToArmyInfo(_army *ArmyInfo, take_resource int32, resource_name string)"
AddGatherExpToArmyInfo( ${1:_army *ArmyInfo}, ${2:take_resource int32}, ${3:resource_name string})
endsnippet

snippet AddHook "AddHook(hook Hook)"
AddHook( ${1:hook Hook})
endsnippet

snippet AddImport "AddImport(fset *token.FileSet, f *ast.File, ipath string)"
AddImport( ${1:fset *token.FileSet}, ${2:f *ast.File}, ${3:ipath string})
endsnippet

snippet AddKeySetFile "AddKeySetFile(filename string, key PublicKey)"
AddKeySetFile( ${1:filename string}, ${2:key PublicKey})
endsnippet

snippet AddKillSoldiers "AddKillSoldiers(user *User, soldier_map map[string]*soldier.Soldier, hero *hero.Hero)"
AddKillSoldiers( ${1:user *User}, ${2:soldier_map map[string]*soldier.Soldier}, ${3:hero *hero.Hero})
endsnippet

snippet AddMarketSoldSum "AddMarketSoldSum(resource_name string, add_point float32)"
AddMarketSoldSum( ${1:resource_name string}, ${2:add_point float32})
endsnippet

snippet AddMemeberToRoom "AddMemeberToRoom(server_id T_server_id, room_name string, chat_account string)"
AddMemeberToRoom( ${1:server_id T_server_id}, ${2:room_name string}, ${3:chat_account string})
endsnippet

snippet AddMoraleToWinner "AddMoraleToWinner(hero *hero.Hero)"
AddMoraleToWinner( ${1:hero *hero.Hero})
endsnippet

snippet AddNamedImport "AddNamedImport(fset *token.FileSet, f *ast.File, name, ipath string)"
AddNamedImport( ${1:fset *token.FileSet}, ${2:f *ast.File}, ${3:name}, ${4:ipath string})
endsnippet

snippet AddRequiredHeadersToRedirectedRequests "AddRequiredHeadersToRedirectedRequests(req *http.Request, via []*http.Request)"
AddRequiredHeadersToRedirectedRequests( ${1:req *http.Request}, ${2:via []*http.Request})
endsnippet

snippet AddRoute "AddRoute(destination, source, gateway, device string)"
AddRoute( ${1:destination}, ${2:source}, ${3:gateway}, ${4:device string})
endsnippet

snippet AddSoldierToHero "AddSoldierToHero(hero *hero.Hero, left []soldiers_info, right []soldiers_info, middle []soldiers_info)"
AddSoldierToHero( ${1:hero *hero.Hero}, ${2:left []soldiers_info}, ${3:right []soldiers_info}, ${4:middle []soldiers_info})
endsnippet

snippet AddTime "AddTime(msg string, t int64)"
AddTime( ${1:msg string}, ${2:t int64})
endsnippet

snippet AddToBridge "AddToBridge(iface, master *net.Interface)"
AddToBridge( ${1:iface}, ${2:master *net.Interface})
endsnippet

snippet AddUserExp "AddUserExp(user *User, exp int32)"
AddUserExp( ${1:user *User}, ${2:exp int32})
endsnippet

snippet AdminFixBug "AdminFixBug(user *User, object interface{}, code int16)"
AdminFixBug( ${1:user *User}, ${2:object interface{}}, ${3:code int16})
endsnippet

snippet AdminHandle "AdminHandle(user *User, object interface{}, code int16)"
AdminHandle( ${1:user *User}, ${2:object interface{}}, ${3:code int16})
endsnippet

snippet AllFunctions "AllFunctions(prog *ssa.Program)"
AllFunctions( ${1:prog *ssa.Program})
endsnippet

snippet AllPackages "AllPackages(ctxt *build.Context)"
AllPackages( ${1:ctxt *build.Context})
endsnippet

snippet AllianceGetMemberPublicData "AllianceGetMemberPublicData(alliance *Alliance, member_id int32)"
AllianceGetMemberPublicData( ${1:alliance *Alliance}, ${2:member_id int32})
endsnippet

snippet AllocFloat32NBuf "AllocFloat32NBuf(nchans, n int)"
AllocFloat32NBuf( ${1:nchans}, ${2:n int})
endsnippet

snippet AllocNFloat32Buf "AllocNFloat32Buf(nchans, n int)"
AllocNFloat32Buf( ${1:nchans}, ${2:n int})
endsnippet

snippet Allocate "Allocate(job *engine.Job)"
Allocate( ${1:job *engine.Job})
endsnippet

snippet AllocatePort "AllocatePort(job *engine.Job)"
AllocatePort( ${1:job *engine.Job})
endsnippet

snippet Analyze "Analyze(config *Config)"
Analyze( ${1:config *Config})
endsnippet

snippet Any "Any(error)"
Any( ${1:error})
endsnippet

snippet AppendError "AppendError(err error)"
AppendError( ${1:err error})
endsnippet

snippet Apply "Apply(c *cgroups.Cgroup, pid int)"
Apply( ${1:c *cgroups.Cgroup}, ${2:pid int})
endsnippet

snippet ApplyDevices "ApplyDevices(c *cgroups.Cgroup, pid int)"
ApplyDevices( ${1:c *cgroups.Cgroup}, ${2:pid int})
endsnippet

snippet ApplyLayer "ApplyLayer(dest string, layer ArchiveReader)"
ApplyLayer( ${1:dest string}, ${2:layer ArchiveReader})
endsnippet

snippet ApplyProfile "ApplyProfile(name string)"
ApplyProfile( ${1:name string})
endsnippet

snippet Arg "Arg(i int)"
Arg( ${1:i int})
endsnippet

snippet ArmyBattleEndHandle "ArmyBattleEndHandle(user *User, object interface{}, code int16)"
ArmyBattleEndHandle( ${1:user *User}, ${2:object interface{}}, ${3:code int16})
endsnippet

snippet ArmyLevelUp "ArmyLevelUp(army *Army)"
ArmyLevelUp( ${1:army *Army})
endsnippet

snippet ArmyResetPower "ArmyResetPower(user *User, army *Army)"
ArmyResetPower( ${1:user *User}, ${2:army *Army})
endsnippet

snippet ArmyUpdateLevel "ArmyUpdateLevel(army *Army, now int64)"
ArmyUpdateLevel( ${1:army *Army}, ${2:now int64})
endsnippet

snippet ArrayOf "ArrayOf(t *Type)"
ArrayOf( ${1:t *Type})
endsnippet

snippet AsErrno "AsErrno(err error)"
AsErrno( ${1:err error})
endsnippet

snippet AssertNoOverlap "AssertNoOverlap(CIDRx string, CIDRy string, t *testing.T)"
AssertNoOverlap( ${1:CIDRx string}, ${2:CIDRy string}, ${3:t *testing.T})
endsnippet

snippet AssertOverlap "AssertOverlap(CIDRx string, CIDRy string, t *testing.T)"
AssertOverlap( ${1:CIDRx string}, ${2:CIDRy string}, ${3:t *testing.T})
endsnippet

snippet AssertableTo "AssertableTo(V *Interface, T Type)"
AssertableTo( ${1:V *Interface}, ${2:T Type})
endsnippet

snippet AssignableTo "AssignableTo(V, T Type)"
AssignableTo( ${1:V}, ${2:T Type})
endsnippet

snippet AttachLoopDevice "AttachLoopDevice(sparseName string)"
AttachLoopDevice( ${1:sparseName string})
endsnippet

snippet AttachProfiler "AttachProfiler(router *mux.Router)"
AttachProfiler( ${1:router *mux.Router})
endsnippet

snippet AuthAllow "AuthAllow(domain string, addresses ...string)"
AuthAllow( ${1:domain string}, ${2:addresses ...string})
endsnippet

snippet AuthCookieSha1 "AuthCookieSha1(user, home string)"
AuthCookieSha1( ${1:user}, ${2:home string})
endsnippet

snippet AuthCurveAdd "AuthCurveAdd(domain string, pubkeys ...string)"
AuthCurveAdd( ${1:domain string}, ${2:pubkeys ...string})
endsnippet

snippet AuthCurveRemove "AuthCurveRemove(domain string, pubkeys ...string)"
AuthCurveRemove( ${1:domain string}, ${2:pubkeys ...string})
endsnippet

snippet AuthCurveRemoveAll "AuthCurveRemoveAll(domain string)"
AuthCurveRemoveAll( ${1:domain string})
endsnippet

snippet AuthDeny "AuthDeny(domain string, addresses ...string)"
AuthDeny( ${1:domain string}, ${2:addresses ...string})
endsnippet

snippet AuthExternal "AuthExternal(user string)"
AuthExternal( ${1:user string})
endsnippet

snippet AuthHandler "AuthHandler(h dashHandler)"
AuthHandler( ${1:h dashHandler})
endsnippet

snippet AuthMetaBlob "AuthMetaBlob(key, value string)"
AuthMetaBlob( ${1:key}, ${2:value string})
endsnippet

snippet AuthPlainAdd "AuthPlainAdd(domain, username, password string)"
AuthPlainAdd( ${1:domain}, ${2:username}, ${3:password string})
endsnippet

snippet AuthPlainRemove "AuthPlainRemove(domain string, usernames ...string)"
AuthPlainRemove( ${1:domain string}, ${2:usernames ...string})
endsnippet

snippet AuthPlainRemoveAll "AuthPlainRemoveAll(domain string)"
AuthPlainRemoveAll( ${1:domain string})
endsnippet

snippet AuthSetMetadataHandler "AuthSetMetadataHandler($/;"	f
AuthSetVerbose	src/github.com/pebbe/zmq4/auth.go	/^func AuthSetVerbose(verbose bool)"
AuthSetMetadataHandler( ${1:$/;"	f
AuthSetVerbose	src/github.com/pebbe/zmq4/auth.go	/^func AuthSetVerbose(verbose bool})
endsnippet

snippet B "B(x *int)"
B( ${1:x *int})
endsnippet

snippet Bad "Bad(CustomLock)"
Bad( ${1:CustomLock})
endsnippet

snippet BadFunc "BadFunc(EmbeddedRWMutex)"
BadFunc( ${1:EmbeddedRWMutex})
endsnippet

snippet BadRead "BadRead(f *os.File, buf []byte)"
BadRead( ${1:f *os.File}, ${2:buf []byte})
endsnippet

snippet BanIP "BanIP(_ip net.IP)"
BanIP( ${1:_ip net.IP})
endsnippet

snippet Banned "Banned(name string)"
Banned( ${1:name string})
endsnippet

snippet Basic "Basic(username string, password string)"
Basic( ${1:username string}, ${2:password string})
endsnippet

snippet BasicFunc "BasicFunc(authfn func(string, string)"
BasicFunc( ${1:authfn func(string}, ${2:string})
endsnippet

snippet BattleUserQuest "BattleUserQuest(user *User, soldier_type string, count int32)"
BattleUserQuest( ${1:user *User}, ${2:soldier_type string}, ${3:count int32})
endsnippet

snippet BattleVillageQuest "BattleVillageQuest(user *User, resource_name string, count int32)"
BattleVillageQuest( ${1:user *User}, ${2:resource_name string}, ${3:count int32})
endsnippet

snippet Benchmark "Benchmark(*testing.B)"
Benchmark( ${1:*testing.B})
endsnippet

snippet Benchmark1kFilesTar "Benchmark1kFilesTar(b *testing.B)"
Benchmark1kFilesTar( ${1:b *testing.B})
endsnippet

snippet Benchmark1kFilesTarGzip "Benchmark1kFilesTarGzip(b *testing.B)"
Benchmark1kFilesTarGzip( ${1:b *testing.B})
endsnippet

snippet Benchmark1mbSingleFileTar "Benchmark1mbSingleFileTar(b *testing.B)"
Benchmark1mbSingleFileTar( ${1:b *testing.B})
endsnippet

snippet Benchmark1mbSingleFileTarGzip "Benchmark1mbSingleFileTarGzip(b *testing.B)"
Benchmark1mbSingleFileTarGzip( ${1:b *testing.B})
endsnippet

snippet Benchmark9kTar "Benchmark9kTar(b *testing.B)"
Benchmark9kTar( ${1:b *testing.B})
endsnippet

snippet Benchmark9kTarGzip "Benchmark9kTarGzip(b *testing.B)"
Benchmark9kTarGzip( ${1:b *testing.B})
endsnippet

snippet BenchmarkA "BenchmarkA(b *testing.B)"
BenchmarkA( ${1:b *testing.B})
endsnippet

snippet BenchmarkAdd "BenchmarkAdd(b *testing.B)"
BenchmarkAdd( ${1:b *testing.B})
endsnippet

snippet BenchmarkAllocatePorts "BenchmarkAllocatePorts(b *testing.B)"
BenchmarkAllocatePorts( ${1:b *testing.B})
endsnippet

snippet BenchmarkAppendTo "BenchmarkAppendTo(b *testing.B)"
BenchmarkAppendTo( ${1:b *testing.B})
endsnippet

snippet BenchmarkB "BenchmarkB(*testing.B)"
BenchmarkB( ${1:*testing.B})
endsnippet

snippet BenchmarkBF "BenchmarkBF(b *testing.B)"
BenchmarkBF( ${1:b *testing.B})
endsnippet

snippet BenchmarkBool "BenchmarkBool(b *testing.B)"
BenchmarkBool( ${1:b *testing.B})
endsnippet

snippet BenchmarkBroadcastWriter "BenchmarkBroadcastWriter(b *testing.B)"
BenchmarkBroadcastWriter( ${1:b *testing.B})
endsnippet

snippet BenchmarkBufferFullSmallReads "BenchmarkBufferFullSmallReads(b *testing.B)"
BenchmarkBufferFullSmallReads( ${1:b *testing.B})
endsnippet

snippet BenchmarkBufferNotEmptyWriteRead "BenchmarkBufferNotEmptyWriteRead(b *testing.B)"
BenchmarkBufferNotEmptyWriteRead( ${1:b *testing.B})
endsnippet

snippet BenchmarkBytes "BenchmarkBytes(b *testing.B)"
BenchmarkBytes( ${1:b *testing.B})
endsnippet

snippet BenchmarkCSV "BenchmarkCSV(b *testing.B)"
BenchmarkCSV( ${1:b *testing.B})
endsnippet

snippet BenchmarkCSVMsgpack "BenchmarkCSVMsgpack(b *testing.B)"
BenchmarkCSVMsgpack( ${1:b *testing.B})
endsnippet

snippet BenchmarkCall "BenchmarkCall(b *testing.B)"
BenchmarkCall( ${1:b *testing.B})
endsnippet

snippet BenchmarkCallAsync "BenchmarkCallAsync(b *testing.B)"
BenchmarkCallAsync( ${1:b *testing.B})
endsnippet

snippet BenchmarkCompression "BenchmarkCompression(b *testing.B)"
BenchmarkCompression( ${1:b *testing.B})
endsnippet

snippet BenchmarkCopyT1 "BenchmarkCopyT1(b *testing.B)"
BenchmarkCopyT1( ${1:b *testing.B})
endsnippet

snippet BenchmarkCopyT2 "BenchmarkCopyT2(b *testing.B)"
BenchmarkCopyT2( ${1:b *testing.B})
endsnippet

snippet BenchmarkCopyT3 "BenchmarkCopyT3(b *testing.B)"
BenchmarkCopyT3( ${1:b *testing.B})
endsnippet

snippet BenchmarkCopyT4 "BenchmarkCopyT4(b *testing.B)"
BenchmarkCopyT4( ${1:b *testing.B})
endsnippet

snippet BenchmarkCopyT5 "BenchmarkCopyT5(b *testing.B)"
BenchmarkCopyT5( ${1:b *testing.B})
endsnippet

snippet BenchmarkCreateUser "BenchmarkCreateUser(b *testing.B)"
BenchmarkCreateUser( ${1:b *testing.B})
endsnippet

snippet BenchmarkDH "BenchmarkDH(b *testing.B)"
BenchmarkDH( ${1:b *testing.B})
endsnippet

snippet BenchmarkDecode "BenchmarkDecode(b *testing.B)"
BenchmarkDecode( ${1:b *testing.B})
endsnippet

snippet BenchmarkDecodeMessageBig "BenchmarkDecodeMessageBig(b *testing.B)"
BenchmarkDecodeMessageBig( ${1:b *testing.B})
endsnippet

snippet BenchmarkDecodeMessageSmall "BenchmarkDecodeMessageSmall(b *testing.B)"
BenchmarkDecodeMessageSmall( ${1:b *testing.B})
endsnippet

snippet BenchmarkDice "BenchmarkDice(b *testing.B)"
BenchmarkDice( ${1:b *testing.B})
endsnippet

snippet BenchmarkDivision "BenchmarkDivision(b *testing.B)"
BenchmarkDivision( ${1:b *testing.B})
endsnippet

snippet BenchmarkDuration "BenchmarkDuration(b *testing.B)"
BenchmarkDuration( ${1:b *testing.B})
endsnippet

snippet BenchmarkEncode "BenchmarkEncode(b *testing.B)"
BenchmarkEncode( ${1:b *testing.B})
endsnippet

snippet BenchmarkEncodeMessageBig "BenchmarkEncodeMessageBig(b *testing.B)"
BenchmarkEncodeMessageBig( ${1:b *testing.B})
endsnippet

snippet BenchmarkEncodeMessageSmall "BenchmarkEncodeMessageSmall(b *testing.B)"
BenchmarkEncodeMessageSmall( ${1:b *testing.B})
endsnippet

snippet BenchmarkFNV "BenchmarkFNV(b *testing.B)"
BenchmarkFNV( ${1:b *testing.B})
endsnippet

snippet BenchmarkFilter "BenchmarkFilter(b *testing.B)"
BenchmarkFilter( ${1:b *testing.B})
endsnippet

snippet BenchmarkFoo "BenchmarkFoo(b *testing.B)"
BenchmarkFoo( ${1:b *testing.B})
endsnippet

snippet BenchmarkGacheHeroLv3 "BenchmarkGacheHeroLv3(b *testing.B)"
BenchmarkGacheHeroLv3( ${1:b *testing.B})
endsnippet

snippet BenchmarkGeoIP "BenchmarkGeoIP(b *testing.B)"
BenchmarkGeoIP( ${1:b *testing.B})
endsnippet

snippet BenchmarkGet "BenchmarkGet(b *testing.B)"
BenchmarkGet( ${1:b *testing.B})
endsnippet

snippet BenchmarkGetJson "BenchmarkGetJson(b *testing.B)"
BenchmarkGetJson( ${1:b *testing.B})
endsnippet

snippet BenchmarkGetSignatureLong "BenchmarkGetSignatureLong(b *testing.B)"
BenchmarkGetSignatureLong( ${1:b *testing.B})
endsnippet

snippet BenchmarkGetSignatureSimple "BenchmarkGetSignatureSimple(b *testing.B)"
BenchmarkGetSignatureSimple( ${1:b *testing.B})
endsnippet

snippet BenchmarkHashTable "BenchmarkHashTable(b *testing.B)"
BenchmarkHashTable( ${1:b *testing.B})
endsnippet

snippet BenchmarkHighLevelTokenizer "BenchmarkHighLevelTokenizer(b *testing.B)"
BenchmarkHighLevelTokenizer( ${1:b *testing.B})
endsnippet

snippet BenchmarkIPC "BenchmarkIPC(b *testing.B)"
BenchmarkIPC( ${1:b *testing.B})
endsnippet

snippet BenchmarkInt "BenchmarkInt(b *testing.B)"
BenchmarkInt( ${1:b *testing.B})
endsnippet

snippet BenchmarkIntBinary "BenchmarkIntBinary(b *testing.B)"
BenchmarkIntBinary( ${1:b *testing.B})
endsnippet

snippet BenchmarkIntMsgpack2 "BenchmarkIntMsgpack2(b *testing.B)"
BenchmarkIntMsgpack2( ${1:b *testing.B})
endsnippet

snippet BenchmarkIntMsgpack3 "BenchmarkIntMsgpack3(b *testing.B)"
BenchmarkIntMsgpack3( ${1:b *testing.B})
endsnippet

snippet BenchmarkLargeColoredTextFormatter "BenchmarkLargeColoredTextFormatter(b *testing.B)"
BenchmarkLargeColoredTextFormatter( ${1:b *testing.B})
endsnippet

snippet BenchmarkLargeJSONFormatter "BenchmarkLargeJSONFormatter(b *testing.B)"
BenchmarkLargeJSONFormatter( ${1:b *testing.B})
endsnippet

snippet BenchmarkLargeTextFormatter "BenchmarkLargeTextFormatter(b *testing.B)"
BenchmarkLargeTextFormatter( ${1:b *testing.B})
endsnippet

snippet BenchmarkLookup "BenchmarkLookup(b *testing.B)"
BenchmarkLookup( ${1:b *testing.B})
endsnippet

snippet BenchmarkLooper "BenchmarkLooper(b *testing.B)"
BenchmarkLooper( ${1:b *testing.B})
endsnippet

snippet BenchmarkLowLevelTokenizer "BenchmarkLowLevelTokenizer(b *testing.B)"
BenchmarkLowLevelTokenizer( ${1:b *testing.B})
endsnippet

snippet BenchmarkMapIntInt "BenchmarkMapIntInt(b *testing.B)"
BenchmarkMapIntInt( ${1:b *testing.B})
endsnippet

snippet BenchmarkMapStringString "BenchmarkMapStringString(b *testing.B)"
BenchmarkMapStringString( ${1:b *testing.B})
endsnippet

snippet BenchmarkMapStringStringPtr "BenchmarkMapStringStringPtr(b *testing.B)"
BenchmarkMapStringStringPtr( ${1:b *testing.B})
endsnippet

snippet BenchmarkMutex1 "BenchmarkMutex1(b *testing.B)"
BenchmarkMutex1( ${1:b *testing.B})
endsnippet

snippet BenchmarkMutex2 "BenchmarkMutex2(b *testing.B)"
BenchmarkMutex2( ${1:b *testing.B})
endsnippet

snippet BenchmarkMutex3 "BenchmarkMutex3(b *testing.B)"
BenchmarkMutex3( ${1:b *testing.B})
endsnippet

snippet BenchmarkMutex4 "BenchmarkMutex4(b *testing.B)"
BenchmarkMutex4( ${1:b *testing.B})
endsnippet

snippet BenchmarkMutex5 "BenchmarkMutex5(b *testing.B)"
BenchmarkMutex5( ${1:b *testing.B})
endsnippet

snippet BenchmarkMutex6 "BenchmarkMutex6(b *testing.B)"
BenchmarkMutex6( ${1:b *testing.B})
endsnippet

snippet BenchmarkMutexSameReadWrite1 "BenchmarkMutexSameReadWrite1(b *testing.B)"
BenchmarkMutexSameReadWrite1( ${1:b *testing.B})
endsnippet

snippet BenchmarkMutexSameReadWrite2 "BenchmarkMutexSameReadWrite2(b *testing.B)"
BenchmarkMutexSameReadWrite2( ${1:b *testing.B})
endsnippet

snippet BenchmarkMutexSameReadWrite4 "BenchmarkMutexSameReadWrite4(b *testing.B)"
BenchmarkMutexSameReadWrite4( ${1:b *testing.B})
endsnippet

snippet BenchmarkMux "BenchmarkMux(b *testing.B)"
BenchmarkMux( ${1:b *testing.B})
endsnippet

snippet BenchmarkNoCompression "BenchmarkNoCompression(b *testing.B)"
BenchmarkNoCompression( ${1:b *testing.B})
endsnippet

snippet BenchmarkOne "BenchmarkOne(b *testing.B)"
BenchmarkOne( ${1:b *testing.B})
endsnippet

snippet BenchmarkPacketTransfer "BenchmarkPacketTransfer(b *testing.B)"
BenchmarkPacketTransfer( ${1:b *testing.B})
endsnippet

snippet BenchmarkPacketWriter "BenchmarkPacketWriter(b *testing.B)"
BenchmarkPacketWriter( ${1:b *testing.B})
endsnippet

snippet BenchmarkParser "BenchmarkParser(b *testing.B)"
BenchmarkParser( ${1:b *testing.B})
endsnippet

snippet BenchmarkPipeTransfer "BenchmarkPipeTransfer(b *testing.B)"
BenchmarkPipeTransfer( ${1:b *testing.B})
endsnippet

snippet BenchmarkPrint "BenchmarkPrint(b *testing.B)"
BenchmarkPrint( ${1:b *testing.B})
endsnippet

snippet BenchmarkPublicSuffix "BenchmarkPublicSuffix(b *testing.B)"
BenchmarkPublicSuffix( ${1:b *testing.B})
endsnippet

snippet BenchmarkQueue "BenchmarkQueue(b *testing.B)"
BenchmarkQueue( ${1:b *testing.B})
endsnippet

snippet BenchmarkRand "BenchmarkRand(b *testing.B)"
BenchmarkRand( ${1:b *testing.B})
endsnippet

snippet BenchmarkRawLevelTokenizer "BenchmarkRawLevelTokenizer(b *testing.B)"
BenchmarkRawLevelTokenizer( ${1:b *testing.B})
endsnippet

snippet BenchmarkReadString "BenchmarkReadString(b *testing.B)"
BenchmarkReadString( ${1:b *testing.B})
endsnippet

snippet BenchmarkReadWriteIPv4UDP "BenchmarkReadWriteIPv4UDP(b *testing.B)"
BenchmarkReadWriteIPv4UDP( ${1:b *testing.B})
endsnippet

snippet BenchmarkReadWriteIPv6UDP "BenchmarkReadWriteIPv6UDP(b *testing.B)"
BenchmarkReadWriteIPv6UDP( ${1:b *testing.B})
endsnippet

snippet BenchmarkReadWriteNetUDP "BenchmarkReadWriteNetUDP(b *testing.B)"
BenchmarkReadWriteNetUDP( ${1:b *testing.B})
endsnippet

snippet BenchmarkReaderCopyNoWriteTo "BenchmarkReaderCopyNoWriteTo(b *testing.B)"
BenchmarkReaderCopyNoWriteTo( ${1:b *testing.B})
endsnippet

snippet BenchmarkReaderCopyOptimal "BenchmarkReaderCopyOptimal(b *testing.B)"
BenchmarkReaderCopyOptimal( ${1:b *testing.B})
endsnippet

snippet BenchmarkReaderCopyUnoptimal "BenchmarkReaderCopyUnoptimal(b *testing.B)"
BenchmarkReaderCopyUnoptimal( ${1:b *testing.B})
endsnippet

snippet BenchmarkRegExpLoop "BenchmarkRegExpLoop(b *testing.B)"
BenchmarkRegExpLoop( ${1:b *testing.B})
endsnippet

snippet BenchmarkRenderConsoleBlended "BenchmarkRenderConsoleBlended(b *testing.B)"
BenchmarkRenderConsoleBlended( ${1:b *testing.B})
endsnippet

snippet BenchmarkRenderConsoleSolid "BenchmarkRenderConsoleSolid(b *testing.B)"
BenchmarkRenderConsoleSolid( ${1:b *testing.B})
endsnippet

snippet BenchmarkRequestIP "BenchmarkRequestIP(b *testing.B)"
BenchmarkRequestIP( ${1:b *testing.B})
endsnippet

snippet BenchmarkRunParallel "BenchmarkRunParallel(b *testing.B)"
BenchmarkRunParallel( ${1:b *testing.B})
endsnippet

snippet BenchmarkRunSequential "BenchmarkRunSequential(b *testing.B)"
BenchmarkRunSequential( ${1:b *testing.B})
endsnippet

snippet BenchmarkSP "BenchmarkSP(b *testing.B)"
BenchmarkSP( ${1:b *testing.B})
endsnippet

snippet BenchmarkSendReceive1Binproc "BenchmarkSendReceive1Binproc(b *testing.B)"
BenchmarkSendReceive1Binproc( ${1:b *testing.B})
endsnippet

snippet BenchmarkSendReceive1Btcp "BenchmarkSendReceive1Btcp(b *testing.B)"
BenchmarkSendReceive1Btcp( ${1:b *testing.B})
endsnippet

snippet BenchmarkSendReceive1KBinproc "BenchmarkSendReceive1KBinproc(b *testing.B)"
BenchmarkSendReceive1KBinproc( ${1:b *testing.B})
endsnippet

snippet BenchmarkSendReceive1KBtcp "BenchmarkSendReceive1KBtcp(b *testing.B)"
BenchmarkSendReceive1KBtcp( ${1:b *testing.B})
endsnippet

snippet BenchmarkSendReceive1MBinproc "BenchmarkSendReceive1MBinproc(b *testing.B)"
BenchmarkSendReceive1MBinproc( ${1:b *testing.B})
endsnippet

snippet BenchmarkSendReceive1MBtcp "BenchmarkSendReceive1MBtcp(b *testing.B)"
BenchmarkSendReceive1MBtcp( ${1:b *testing.B})
endsnippet

snippet BenchmarkServe "BenchmarkServe(b *testing.B)"
BenchmarkServe( ${1:b *testing.B})
endsnippet

snippet BenchmarkServeAsync "BenchmarkServeAsync(b *testing.B)"
BenchmarkServeAsync( ${1:b *testing.B})
endsnippet

snippet BenchmarkServeSameConn "BenchmarkServeSameConn(b *testing.B)"
BenchmarkServeSameConn( ${1:b *testing.B})
endsnippet

snippet BenchmarkServeSameConnAsync "BenchmarkServeSameConnAsync(b *testing.B)"
BenchmarkServeSameConnAsync( ${1:b *testing.B})
endsnippet

snippet BenchmarkSet "BenchmarkSet(b *testing.B)"
BenchmarkSet( ${1:b *testing.B})
endsnippet

snippet BenchmarkSetJson "BenchmarkSetJson(b *testing.B)"
BenchmarkSetJson( ${1:b *testing.B})
endsnippet

snippet BenchmarkSmallColoredTextFormatter "BenchmarkSmallColoredTextFormatter(b *testing.B)"
BenchmarkSmallColoredTextFormatter( ${1:b *testing.B})
endsnippet

snippet BenchmarkSmallJSONFormatter "BenchmarkSmallJSONFormatter(b *testing.B)"
BenchmarkSmallJSONFormatter( ${1:b *testing.B})
endsnippet

snippet BenchmarkSmallTextFormatter "BenchmarkSmallTextFormatter(b *testing.B)"
BenchmarkSmallTextFormatter( ${1:b *testing.B})
endsnippet

snippet BenchmarkSparseBitVector "BenchmarkSparseBitVector(b *testing.B)"
BenchmarkSparseBitVector( ${1:b *testing.B})
endsnippet

snippet BenchmarkStringSlice "BenchmarkStringSlice(b *testing.B)"
BenchmarkStringSlice( ${1:b *testing.B})
endsnippet

snippet BenchmarkStringSlicePtr "BenchmarkStringSlicePtr(b *testing.B)"
BenchmarkStringSlicePtr( ${1:b *testing.B})
endsnippet

snippet BenchmarkStruct "BenchmarkStruct(b *testing.B)"
BenchmarkStruct( ${1:b *testing.B})
endsnippet

snippet BenchmarkStructGOB "BenchmarkStructGOB(b *testing.B)"
BenchmarkStructGOB( ${1:b *testing.B})
endsnippet

snippet BenchmarkStructJSON "BenchmarkStructJSON(b *testing.B)"
BenchmarkStructJSON( ${1:b *testing.B})
endsnippet

snippet BenchmarkStructManual "BenchmarkStructManual(b *testing.B)"
BenchmarkStructManual( ${1:b *testing.B})
endsnippet

snippet BenchmarkStructMsgpack2 "BenchmarkStructMsgpack2(b *testing.B)"
BenchmarkStructMsgpack2( ${1:b *testing.B})
endsnippet

snippet BenchmarkStructMsgpack3 "BenchmarkStructMsgpack3(b *testing.B)"
BenchmarkStructMsgpack3( ${1:b *testing.B})
endsnippet

snippet BenchmarkTail "BenchmarkTail(b *testing.B)"
BenchmarkTail( ${1:b *testing.B})
endsnippet

snippet BenchmarkTarUntar "BenchmarkTarUntar(b *testing.B)"
BenchmarkTarUntar( ${1:b *testing.B})
endsnippet

snippet BenchmarkTarUntarWithLinks "BenchmarkTarUntarWithLinks(b *testing.B)"
BenchmarkTarUntarWithLinks( ${1:b *testing.B})
endsnippet

snippet BenchmarkTime "BenchmarkTime(b *testing.B)"
BenchmarkTime( ${1:b *testing.B})
endsnippet

snippet BenchmarkTimer "BenchmarkTimer(b *testing.B)"
BenchmarkTimer( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexAdd100 "BenchmarkTruncIndexAdd100(b *testing.B)"
BenchmarkTruncIndexAdd100( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexAdd250 "BenchmarkTruncIndexAdd250(b *testing.B)"
BenchmarkTruncIndexAdd250( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexAdd500 "BenchmarkTruncIndexAdd500(b *testing.B)"
BenchmarkTruncIndexAdd500( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexAddGet100 "BenchmarkTruncIndexAddGet100(b *testing.B)"
BenchmarkTruncIndexAddGet100( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexAddGet250 "BenchmarkTruncIndexAddGet250(b *testing.B)"
BenchmarkTruncIndexAddGet250( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexAddGet500 "BenchmarkTruncIndexAddGet500(b *testing.B)"
BenchmarkTruncIndexAddGet500( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexDelete100 "BenchmarkTruncIndexDelete100(b *testing.B)"
BenchmarkTruncIndexDelete100( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexDelete250 "BenchmarkTruncIndexDelete250(b *testing.B)"
BenchmarkTruncIndexDelete250( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexDelete500 "BenchmarkTruncIndexDelete500(b *testing.B)"
BenchmarkTruncIndexDelete500( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexGet100 "BenchmarkTruncIndexGet100(b *testing.B)"
BenchmarkTruncIndexGet100( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexGet250 "BenchmarkTruncIndexGet250(b *testing.B)"
BenchmarkTruncIndexGet250( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexGet500 "BenchmarkTruncIndexGet500(b *testing.B)"
BenchmarkTruncIndexGet500( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexNew100 "BenchmarkTruncIndexNew100(b *testing.B)"
BenchmarkTruncIndexNew100( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexNew250 "BenchmarkTruncIndexNew250(b *testing.B)"
BenchmarkTruncIndexNew250( ${1:b *testing.B})
endsnippet

snippet BenchmarkTruncIndexNew500 "BenchmarkTruncIndexNew500(b *testing.B)"
BenchmarkTruncIndexNew500( ${1:b *testing.B})
endsnippet

snippet BenchmarkUnmarhsalMap "BenchmarkUnmarhsalMap(b *testing.B)"
BenchmarkUnmarhsalMap( ${1:b *testing.B})
endsnippet

snippet BenchmarkUnmarhsalStruct "BenchmarkUnmarhsalStruct(b *testing.B)"
BenchmarkUnmarhsalStruct( ${1:b *testing.B})
endsnippet

snippet BenchmarkWiz "BenchmarkWiz(b *testing.B)"
BenchmarkWiz( ${1:b *testing.B})
endsnippet

snippet BenchmarkWrite "BenchmarkWrite(b *testing.B)"
BenchmarkWrite( ${1:b *testing.B})
endsnippet

snippet BenchmarkWriteLog "BenchmarkWriteLog(b *testing.B)"
BenchmarkWriteLog( ${1:b *testing.B})
endsnippet

snippet BenchmarkWriterCopyNoReadFrom "BenchmarkWriterCopyNoReadFrom(b *testing.B)"
BenchmarkWriterCopyNoReadFrom( ${1:b *testing.B})
endsnippet

snippet BenchmarkWriterCopyOptimal "BenchmarkWriterCopyOptimal(b *testing.B)"
BenchmarkWriterCopyOptimal( ${1:b *testing.B})
endsnippet

snippet BenchmarkWriterCopyUnoptimal "BenchmarkWriterCopyUnoptimal(b *testing.B)"
BenchmarkWriterCopyUnoptimal( ${1:b *testing.B})
endsnippet

snippet Benchmark__Binc_NoSym_Decode "Benchmark__Binc_NoSym_Decode(b *testing.B)"
Benchmark__Binc_NoSym_Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Binc_NoSym_Encode "Benchmark__Binc_NoSym_Encode(b *testing.B)"
Benchmark__Binc_NoSym_Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Binc_Sym___Decode "Benchmark__Binc_Sym___Decode(b *testing.B)"
Benchmark__Binc_Sym___Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Binc_Sym___Encode "Benchmark__Binc_Sym___Encode(b *testing.B)"
Benchmark__Binc_Sym___Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Bson_____Decode "Benchmark__Bson_____Decode(b *testing.B)"
Benchmark__Bson_____Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Bson_____Encode "Benchmark__Bson_____Encode(b *testing.B)"
Benchmark__Bson_____Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Bson_______Decode "Benchmark__Bson_______Decode(b *testing.B)"
Benchmark__Bson_______Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Bson_______Encode "Benchmark__Bson_______Encode(b *testing.B)"
Benchmark__Bson_______Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Gob______Decode "Benchmark__Gob______Decode(b *testing.B)"
Benchmark__Gob______Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Gob______Encode "Benchmark__Gob______Encode(b *testing.B)"
Benchmark__Gob______Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Gob________Decode "Benchmark__Gob________Decode(b *testing.B)"
Benchmark__Gob________Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Gob________Encode "Benchmark__Gob________Encode(b *testing.B)"
Benchmark__Gob________Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Json_____Decode "Benchmark__Json_____Decode(b *testing.B)"
Benchmark__Json_____Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Json_____Encode "Benchmark__Json_____Encode(b *testing.B)"
Benchmark__Json_____Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Json_______Decode "Benchmark__Json_______Decode(b *testing.B)"
Benchmark__Json_______Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Json_______Encode "Benchmark__Json_______Encode(b *testing.B)"
Benchmark__Json_______Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Msgpack__Decode "Benchmark__Msgpack__Decode(b *testing.B)"
Benchmark__Msgpack__Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Msgpack__Encode "Benchmark__Msgpack__Encode(b *testing.B)"
Benchmark__Msgpack__Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Msgpack____Decode "Benchmark__Msgpack____Decode(b *testing.B)"
Benchmark__Msgpack____Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Msgpack____Encode "Benchmark__Msgpack____Encode(b *testing.B)"
Benchmark__Msgpack____Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Simple_____Decode "Benchmark__Simple_____Decode(b *testing.B)"
Benchmark__Simple_____Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__Simple_____Encode "Benchmark__Simple_____Encode(b *testing.B)"
Benchmark__Simple_____Encode( ${1:b *testing.B})
endsnippet

snippet Benchmark__VMsgpack___Decode "Benchmark__VMsgpack___Decode(b *testing.B)"
Benchmark__VMsgpack___Decode( ${1:b *testing.B})
endsnippet

snippet Benchmark__VMsgpack___Encode "Benchmark__VMsgpack___Encode(b *testing.B)"
Benchmark__VMsgpack___Encode( ${1:b *testing.B})
endsnippet

snippet BinaryOp "BinaryOp(x Value, op token.Token, y Value)"
BinaryOp( ${1:x Value}, ${2:op token.Token}, ${3:y Value})
endsnippet

snippet Bind "Bind(obj interface{}, ifacePtr ...interface{})"
Bind( ${1:obj interface{}}, ${2:ifacePtr ...interface{}})
endsnippet

snippet BitLen "BitLen(x Value)"
BitLen( ${1:x Value})
endsnippet

snippet BlockDeviceDiscard "BlockDeviceDiscard(path string)"
BlockDeviceDiscard( ${1:path string})
endsnippet

snippet BodyIs "BodyIs(t *testing.T, r *httptest.ResponseRecorder, expectedBody string)"
BodyIs( ${1:t *testing.T}, ${2:r *httptest.ResponseRecorder}, ${3:expectedBody string})
endsnippet

snippet Bool "Bool(names []string, value bool, usage string)"
Bool( ${1:names []string}, ${2:value bool}, ${3:usage string})
endsnippet

snippet BoolFlag "BoolFlag(f *bool)"
BoolFlag( ${1:f *bool})
endsnippet

snippet BoolVal "BoolVal(x Value)"
BoolVal( ${1:x Value})
endsnippet

snippet BoolVar "BoolVar(p *bool, names []string, value bool, usage string)"
BoolVar( ${1:p *bool}, ${2:names []string}, ${3:value bool}, ${4:usage string})
endsnippet

snippet Border "Border(dst Image, r Rectangle, w int, src image.Image, sp Point)"
Border( ${1:dst Image}, ${2:r Rectangle}, ${3:w int}, ${4:src image.Image}, ${5:sp Point})
endsnippet

snippet BorderOp "BorderOp(dst draw.Image, r image.Rectangle, w int, src image.Image, sp image.Point, op draw.Op)"
BorderOp( ${1:dst draw.Image}, ${2:r image.Rectangle}, ${3:w int}, ${4:src image.Image}, ${5:sp image.Point}, ${6:op draw.Op})
endsnippet

snippet Box "Box(width, height int, col image.Image, border int, borderCol image.Image)"
Box( ${1:width}, ${2:height int}, ${3:col image.Image}, ${4:border int}, ${5:borderCol image.Image})
endsnippet

snippet Broadcast "Broadcast(service int16, object interface{})"
Broadcast( ${1:service int16}, ${2:object interface{}})
endsnippet

snippet BuffAttack "BuffAttack(user *User, key string, num int32, city_id int32)"
BuffAttack( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet BuffDefense "BuffDefense(user *User, key string, num int32, city_id int32)"
BuffDefense( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet BuffFood "BuffFood(user *User, key string, num int32, city_id int32)"
BuffFood( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet BuffGather "BuffGather(user *User, key string, num int32, city_id int32)"
BuffGather( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet BuffGold "BuffGold(user *User, key string, num int32, city_id int32)"
BuffGold( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet BuffHungry "BuffHungry(user *User, key string, num int32, city_id int32)"
BuffHungry( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet BuffIron "BuffIron(user *User, key string, num int32, city_id int32)"
BuffIron( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet BuffProduce "BuffProduce(user *User, key string, num int32, city_id int32)"
BuffProduce( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet BuffStone "BuffStone(user *User, key string, num int32, city_id int32)"
BuffStone( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet BuffWood "BuffWood(user *User, key string, num int32, city_id int32)"
BuffWood( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet Build "Build(ctxt *build.Context)"
Build( ${1:ctxt *build.Context})
endsnippet

snippet BuildingSpeedUp "BuildingSpeedUp(user *User, alliance *Alliance, city *City, b *building.Building, now int64)"
BuildingSpeedUp( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:b *building.Building}, ${5:now int64})
endsnippet

snippet BuildingUpdateLevel "BuildingUpdateLevel(user *User, alliance *Alliance, city *City, b *building.Building, now int64)"
BuildingUpdateLevel( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:b *building.Building}, ${5:now int64})
endsnippet

snippet ByCmd "ByCmd(cmd string)"
ByCmd( ${1:cmd string})
endsnippet

snippet Bytes "Bytes(x Value)"
Bytes( ${1:x Value})
endsnippet

snippet BytesPerLine "BytesPerLine(r image.Rectangle, depth int)"
BytesPerLine( ${1:r image.Rectangle}, ${2:depth int})
endsnippet

snippet BytesSize "BytesSize(size float64)"
BytesSize( ${1:size float64})
endsnippet

snippet C "C(collection string)"
C( ${1:collection string})
endsnippet

snippet CalBattleHeroAddExpBook "CalBattleHeroAddExpBook(battle_message *BattleMessage, attack_army_info *ArmyInfo, defense_army_info *ArmyInfo)"
CalBattleHeroAddExpBook( ${1:battle_message *BattleMessage}, ${2:attack_army_info *ArmyInfo}, ${3:defense_army_info *ArmyInfo})
endsnippet

snippet CalBattleNpcHeroAddExpBookAndResource "CalBattleNpcHeroAddExpBookAndResource(battle_message *BattleMessage, attack_army_info *ArmyInfo, defense_army_info *ArmyInfo)"
CalBattleNpcHeroAddExpBookAndResource( ${1:battle_message *BattleMessage}, ${2:attack_army_info *ArmyInfo}, ${3:defense_army_info *ArmyInfo})
endsnippet

snippet CalCaptureSoldiers "CalCaptureSoldiers(army_info *ArmyInfo, defense_city *City)"
CalCaptureSoldiers( ${1:army_info *ArmyInfo}, ${2:defense_city *City})
endsnippet

snippet CalCritEffectHeroSkill3 "CalCritEffectHeroSkill3(hero *hero.Hero, attacker *ArmyInfo, battle_info *BattleInfo)"
CalCritEffectHeroSkill3( ${1:hero *hero.Hero}, ${2:attacker *ArmyInfo}, ${3:battle_info *BattleInfo})
endsnippet

snippet CalDeadSoldierAllToWounded "CalDeadSoldierAllToWounded(army_info *ArmyInfo, max_wounded_num int32)"
CalDeadSoldierAllToWounded( ${1:army_info *ArmyInfo}, ${2:max_wounded_num int32})
endsnippet

snippet CalDeadSoldierSomeToWounded "CalDeadSoldierSomeToWounded(army_info *ArmyInfo, max_wounded_num int32, revive_percent float32)"
CalDeadSoldierSomeToWounded( ${1:army_info *ArmyInfo}, ${2:max_wounded_num int32}, ${3:revive_percent float32})
endsnippet

snippet CalDefenseCityHeroReduceEnemyEffect "CalDefenseCityHeroReduceEnemyEffect(hero *hero.Hero, attacker *ArmyInfo)"
CalDefenseCityHeroReduceEnemyEffect( ${1:hero *hero.Hero}, ${2:attacker *ArmyInfo})
endsnippet

snippet CalHero2ReduceEnemyEffect "CalHero2ReduceEnemyEffect(hero *hero.Hero, defenser *ArmyInfo, defense_soldier *Soldier)"
CalHero2ReduceEnemyEffect( ${1:hero *hero.Hero}, ${2:defenser *ArmyInfo}, ${3:defense_soldier *Soldier})
endsnippet

snippet CalHero4_1_SkillEffect "CalHero4_1_SkillEffect(hero *hero.Hero, battle_info *BattleInfo, skill_type string)"
CalHero4_1_SkillEffect( ${1:hero *hero.Hero}, ${2:battle_info *BattleInfo}, ${3:skill_type string})
endsnippet

snippet CalHero4_246_SkillEffect "CalHero4_246_SkillEffect(attack_hero *hero.Hero, attacker_battle_info *BattleInfo, defenser_battle_info *BattleInfo, defense_soldier *Soldier, attacker *ArmyInfo, defenser *ArmyInfo, skill_type string)"
CalHero4_246_SkillEffect( ${1:attack_hero *hero.Hero}, ${2:attacker_battle_info *BattleInfo}, ${3:defenser_battle_info *BattleInfo}, ${4:defense_soldier *Soldier}, ${5:attacker *ArmyInfo}, ${6:defenser *ArmyInfo}, ${7:skill_type string})
endsnippet

snippet CalHero4_3_SkillEffect "CalHero4_3_SkillEffect(hero *hero.Hero, battle_info *BattleInfo, skill_type string)"
CalHero4_3_SkillEffect( ${1:hero *hero.Hero}, ${2:battle_info *BattleInfo}, ${3:skill_type string})
endsnippet

snippet CalHero4_5_SkillEffect "CalHero4_5_SkillEffect(hero *hero.Hero, battle_info *BattleInfo, attacker *ArmyInfo, soldier *Soldier, skill_type string)"
CalHero4_5_SkillEffect( ${1:hero *hero.Hero}, ${2:battle_info *BattleInfo}, ${3:attacker *ArmyInfo}, ${4:soldier *Soldier}, ${5:skill_type string})
endsnippet

snippet CalHeroSkillBuff "CalHeroSkillBuff(city *City, hero *hero.Hero)"
CalHeroSkillBuff( ${1:city *City}, ${2:hero *hero.Hero})
endsnippet

snippet CalHeroSkillEffectLoser "CalHeroSkillEffectLoser(hero *hero.Hero, enemy_hero *hero.Hero, owner *ArmyInfo, enemy *ArmyInfo, battle_info *BattleInfo)"
CalHeroSkillEffectLoser( ${1:hero *hero.Hero}, ${2:enemy_hero *hero.Hero}, ${3:owner *ArmyInfo}, ${4:enemy *ArmyInfo}, ${5:battle_info *BattleInfo})
endsnippet

snippet CalHeroSkillEffectWinner "CalHeroSkillEffectWinner(hero *hero.Hero, enemy_hero *hero.Hero, attacker *ArmyInfo, defenser *ArmyInfo, battle_info *BattleInfo)"
CalHeroSkillEffectWinner( ${1:hero *hero.Hero}, ${2:enemy_hero *hero.Hero}, ${3:attacker *ArmyInfo}, ${4:defenser *ArmyInfo}, ${5:battle_info *BattleInfo})
endsnippet

snippet CalHeroSoldierNumLeftAndKillNumber "CalHeroSoldierNumLeftAndKillNumber(is_defense_city bool, battle_info *BattleInfo, soldier *Soldier, attacker *ArmyInfo, enemy_attacker *ArmyInfo)"
CalHeroSoldierNumLeftAndKillNumber( ${1:is_defense_city bool}, ${2:battle_info *BattleInfo}, ${3:soldier *Soldier}, ${4:attacker *ArmyInfo}, ${5:enemy_attacker *ArmyInfo})
endsnippet

snippet CalKillNumberAndLeftNumber "CalKillNumberAndLeftNumber(is_defense_city bool, soldier_type string, enemy_kill_number int32, attacker *ArmyInfo, enemy_attacker *ArmyInfo)"
CalKillNumberAndLeftNumber( ${1:is_defense_city bool}, ${2:soldier_type string}, ${3:enemy_kill_number int32}, ${4:attacker *ArmyInfo}, ${5:enemy_attacker *ArmyInfo})
endsnippet

snippet Call "Call(o *dbus.Object)"
Call( ${1:o *dbus.Object})
endsnippet

snippet CallGraph "CallGraph(prog *ssa.Program)"
CallGraph( ${1:prog *ssa.Program})
endsnippet

snippet CallZmq "CallZmq(request interface{}, reply interface{})"
CallZmq( ${1:request interface{}}, ${2:reply interface{}})
endsnippet

snippet CalleesOf "CalleesOf(caller *Node)"
CalleesOf( ${1:caller *Node})
endsnippet

snippet Caller "Caller(skip int)"
Caller( ${1:skip int})
endsnippet

snippet Callers "Callers(n, max int)"
Callers( ${1:n}, ${2:max int})
endsnippet

snippet CamelCase "CamelCase(str string)"
CamelCase( ${1:str string})
endsnippet

snippet CanHaveDynamicTypes "CanHaveDynamicTypes(T types.Type)"
CanHaveDynamicTypes( ${1:T types.Type})
endsnippet

snippet CanPoint "CanPoint(T types.Type)"
CanPoint( ${1:T types.Type})
endsnippet

snippet CancelEvent "CancelEvent(id int32)"
CancelEvent( ${1:id int32})
endsnippet

snippet CaseWithMultiplePreds "CaseWithMultiplePreds(x int)"
CaseWithMultiplePreds( ${1:x int})
endsnippet

snippet CatchAll "CatchAll(sigc chan os.Signal)"
CatchAll( ${1:sigc chan os.Signal})
endsnippet

snippet Cause "Cause(err error)"
Cause( ${1:err error})
endsnippet

snippet ChallengeQuest "ChallengeQuest(user *User, content string)"
ChallengeQuest( ${1:user *User}, ${2:content string})
endsnippet

snippet ChanOf "ChanOf(ChanDir, Type)"
ChanOf( ${1:ChanDir}, ${2:Type})
endsnippet

snippet ChangArmyBackToIdle "ChangArmyBackToIdle(user *User, army_id T_obj_id, city_id T_obj_id)"
ChangArmyBackToIdle( ${1:user *User}, ${2:army_id T_obj_id}, ${3:city_id T_obj_id})
endsnippet

snippet ChangHeroBackToIdle "ChangHeroBackToIdle(user *User, hero_id T_obj_id, city_id T_obj_id, source string)"
ChangHeroBackToIdle( ${1:user *User}, ${2:hero_id T_obj_id}, ${3:city_id T_obj_id}, ${4:source string})
endsnippet

snippet ChangeAllDefenseHeroToIdle "ChangeAllDefenseHeroToIdle(user *User, city_id T_obj_id)"
ChangeAllDefenseHeroToIdle( ${1:user *User}, ${2:city_id T_obj_id})
endsnippet

snippet ChangeColor "ChangeColor(fg Color, fgBright bool, bg Color, bgBright bool)"
ChangeColor( ${1:fg Color}, ${2:fgBright bool}, ${3:bg Color}, ${4:bgBright bool})
endsnippet

snippet ChangeHeroToDefenseInMap "ChangeHeroToDefenseInMap(hero *hero.Hero, x, y T_coordinate)"
ChangeHeroToDefenseInMap( ${1:hero *hero.Hero}, ${2:x}, ${3:y T_coordinate})
endsnippet

snippet ChangeHeroToDefenseVillage "ChangeHeroToDefenseVillage(hero *hero.Hero, x, y T_coordinate)"
ChangeHeroToDefenseVillage( ${1:hero *hero.Hero}, ${2:x}, ${3:y T_coordinate})
endsnippet

snippet ChangeInterfaceName "ChangeInterfaceName(old, newName string)"
ChangeInterfaceName( ${1:old}, ${2:newName string})
endsnippet

snippet ChangeName "ChangeName(iface *net.Interface, newName string)"
ChangeName( ${1:iface *net.Interface}, ${2:newName string})
endsnippet

snippet ChangePublicDataToMemberData "ChangePublicDataToMemberData(publicdata UserPublicData)"
ChangePublicDataToMemberData( ${1:publicdata UserPublicData})
endsnippet

snippet Changes "Changes(layers []string, rw string)"
Changes( ${1:layers []string}, ${2:rw string})
endsnippet

snippet ChangesDirs "ChangesDirs(newDir, oldDir string)"
ChangesDirs( ${1:newDir}, ${2:oldDir string})
endsnippet

snippet ChangesSize "ChangesSize(newDir string, changes []Change)"
ChangesSize( ${1:newDir string}, ${2:changes []Change})
endsnippet

snippet Chcon "Chcon(fpath string, scon string, recurse bool)"
Chcon( ${1:fpath string}, ${2:scon string}, ${3:recurse bool})
endsnippet

snippet Check "Check(path string, fset *token.FileSet, files []*ast.File)"
Check( ${1:path string}, ${2:fset *token.FileSet}, ${3:files []*ast.File})
endsnippet

snippet CheckCanGetMonthLoginRewards "CheckCanGetMonthLoginRewards(user *User, num int32)"
CheckCanGetMonthLoginRewards( ${1:user *User}, ${2:num int32})
endsnippet

snippet CheckNameserverOverlaps "CheckNameserverOverlaps(nameservers []string, toCheck *net.IPNet)"
CheckNameserverOverlaps( ${1:nameservers []string}, ${2:toCheck *net.IPNet})
endsnippet

snippet CheckRouteOverlaps "CheckRouteOverlaps(toCheck *net.IPNet)"
CheckRouteOverlaps( ${1:toCheck *net.IPNet})
endsnippet

snippet CityAdd585Resource "CityAdd585Resource(user *User, city *City, now int64)"
CityAdd585Resource( ${1:user *User}, ${2:city *City}, ${3:now int64})
endsnippet

snippet CityBattleEndHandle "CityBattleEndHandle(user *User, object interface{}, code int16)"
CityBattleEndHandle( ${1:user *User}, ${2:object interface{}}, ${3:code int16})
endsnippet

snippet CityUpdateBarracksRecruitEvents "CityUpdateBarracksRecruitEvents(user *User, city *City, now int64)"
CityUpdateBarracksRecruitEvents( ${1:user *User}, ${2:city *City}, ${3:now int64})
endsnippet

snippet CityUpdateHunterhallRecruitEvents "CityUpdateHunterhallRecruitEvents(user *User, city *City, now int64)"
CityUpdateHunterhallRecruitEvents( ${1:user *User}, ${2:city *City}, ${3:now int64})
endsnippet

snippet CityUpdateMarketRecruitEvents "CityUpdateMarketRecruitEvents(user *User, city *City, now int64)"
CityUpdateMarketRecruitEvents( ${1:user *User}, ${2:city *City}, ${3:now int64})
endsnippet

snippet CityUpdateMarketStatus "CityUpdateMarketStatus(user *User, city *City, now int64)"
CityUpdateMarketStatus( ${1:user *User}, ${2:city *City}, ${3:now int64})
endsnippet

snippet CityUpdateRecruitEvents "CityUpdateRecruitEvents(user *User, alliance *Alliance, city *City, now int64)"
CityUpdateRecruitEvents( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:now int64})
endsnippet

snippet CityUpdateResource "CityUpdateResource(user *User, city *City, now int64)"
CityUpdateResource( ${1:user *User}, ${2:city *City}, ${3:now int64})
endsnippet

snippet CityUpdateReviveEvents "CityUpdateReviveEvents(user *User, alliance *Alliance, city *City, now int64)"
CityUpdateReviveEvents( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:now int64})
endsnippet

snippet CityUpdateWallRecruitEvents "CityUpdateWallRecruitEvents(user *User, city *City, now int64)"
CityUpdateWallRecruitEvents( ${1:user *User}, ${2:city *City}, ${3:now int64})
endsnippet

snippet CleanUidOnMap "CleanUidOnMap(uid int32)"
CleanUidOnMap( ${1:uid int32})
endsnippet

snippet CleanUserDataWithUid "CleanUserDataWithUid(uid int32)"
CleanUserDataWithUid( ${1:uid int32})
endsnippet

snippet Clear "Clear(r *http.Request)"
Clear( ${1:r *http.Request})
endsnippet

snippet ClearHandler "ClearHandler(h http.Handler)"
ClearHandler( ${1:h http.Handler})
endsnippet

snippet ClientTask "ClientTask(pipe chan<- bool)"
ClientTask( ${1:pipe chan<- bool})
endsnippet

snippet Close "Close(fd int)"
Close( ${1:fd int})
endsnippet

snippet CloseExecFrom "CloseExecFrom(minFd int)"
CloseExecFrom( ${1:minFd int})
endsnippet

snippet CmdStream "CmdStream(cmd *exec.Cmd, input io.Reader)"
CmdStream( ${1:cmd *exec.Cmd}, ${2:input io.Reader})
endsnippet

snippet CodeIs "CodeIs(t *testing.T, r *httptest.ResponseRecorder, expectedCode int)"
CodeIs( ${1:t *testing.T}, ${2:r *httptest.ResponseRecorder}, ${3:expectedCode int})
endsnippet

snippet CollapseStatements "CollapseStatements(statements []*Statement, useExpired bool)"
CollapseStatements( ${1:statements []*Statement}, ${2:useExpired bool})
endsnippet

snippet Command "Command(args ...string)"
Command( ${1:args ...string})
endsnippet

snippet CommandLine "CommandLine(w io.Writer, fs vfs.NameSpace, pres *Presentation, args []string)"
CommandLine( ${1:w io.Writer}, ${2:fs vfs.NameSpace}, ${3:pres *Presentation}, ${4:args []string})
endsnippet

snippet Comparable "Comparable(T Type)"
Comparable( ${1:T Type})
endsnippet

snippet Compare "Compare(x Value, op token.Token, y Value)"
Compare( ${1:x Value}, ${2:op token.Token}, ${3:y Value})
endsnippet

snippet CompareKernelVersion "CompareKernelVersion(a, b *KernelVersionInfo)"
CompareKernelVersion( ${1:a}, ${2:b *KernelVersionInfo})
endsnippet

snippet CompressStream "CompressStream(dest io.WriteCloser, compression Compression)"
CompressStream( ${1:dest io.WriteCloser}, ${2:compression Compression})
endsnippet

snippet Connect "Connect(table string)"
Connect( ${1:table string})
endsnippet

snippet ConnectTest "ConnectTest(table string)"
ConnectTest( ${1:table string})
endsnippet

snippet ConstResourcePerGem "ConstResourcePerGem(resource_name string)"
ConstResourcePerGem( ${1:resource_name string})
endsnippet

snippet ConstTimeGemInTotal "ConstTimeGemInTotal(sec int64)"
ConstTimeGemInTotal( ${1:sec int64})
endsnippet

snippet ContainerConfigFromJob "ContainerConfigFromJob(job *engine.Job)"
ContainerConfigFromJob( ${1:job *engine.Job})
endsnippet

snippet ContainerHostConfigFromJob "ContainerHostConfigFromJob(job *engine.Job)"
ContainerHostConfigFromJob( ${1:job *engine.Job})
endsnippet

snippet ContainingPackage "ContainingPackage(ctxt *build.Context, dir, filename string)"
ContainingPackage( ${1:ctxt *build.Context}, ${2:dir}, ${3:filename string})
endsnippet

snippet ContainsWildcards "ContainsWildcards(name string)"
ContainsWildcards( ${1:name string})
endsnippet

snippet ContentEncodingIsGzip "ContentEncodingIsGzip(t *testing.T, r *httptest.ResponseRecorder)"
ContentEncodingIsGzip( ${1:t *testing.T}, ${2:r *httptest.ResponseRecorder})
endsnippet

snippet ContentTypeIsJson "ContentTypeIsJson(t *testing.T, r *httptest.ResponseRecorder)"
ContentTypeIsJson( ${1:t *testing.T}, ${2:r *httptest.ResponseRecorder})
endsnippet

snippet Converter "Converter(input Widget, f Format)"
Converter( ${1:input Widget}, ${2:f Format})
endsnippet

snippet ConvertibleTo "ConvertibleTo(V, T Type)"
ConvertibleTo( ${1:V}, ${2:T Type})
endsnippet

snippet CoordinateToId "CoordinateToId(x, y T_coordinate)"
CoordinateToId( ${1:x}, ${2:y T_coordinate})
endsnippet

snippet Copy "Copy(obj interface{})"
Copy( ${1:obj interface{}})
endsnippet

snippet CopyDir "CopyDir(srcPath, destPath string, filters ...func(filePath string)"
CopyDir( ${1:srcPath}, ${2:destPath string}, ${3:filters ...func(filePath string})
endsnippet

snippet CopyEscapable "CopyEscapable(dst io.Writer, src io.ReadCloser)"
CopyEscapable( ${1:dst io.Writer}, ${2:src io.ReadCloser})
endsnippet

snippet CopyFile "CopyFile(src, dst string)"
CopyFile( ${1:src}, ${2:dst string})
endsnippet

snippet CopyFileWithTar "CopyFileWithTar(src, dst string)"
CopyFileWithTar( ${1:src}, ${2:dst string})
endsnippet

snippet CopyLevel "CopyLevel(src, dest string)"
CopyLevel( ${1:src}, ${2:dest string})
endsnippet

snippet CopyWithTar "CopyWithTar(src, dst string)"
CopyWithTar( ${1:src}, ${2:dst string})
endsnippet

snippet Correlate "Correlate(before, after BenchSet)"
Correlate( ${1:before}, ${2:after BenchSet})
endsnippet

snippet Count "Count(table string, condition bson.M)"
Count( ${1:table string}, ${2:condition bson.M})
endsnippet

snippet Create "Create(iprog *loader.Program, mode BuilderMode)"
Create( ${1:iprog *loader.Program}, ${2:mode BuilderMode})
endsnippet

snippet CreateAccount "CreateAccount(server_id T_server_id, uid int32, uname string)"
CreateAccount( ${1:server_id T_server_id}, ${2:uid int32}, ${3:uname string})
endsnippet

snippet CreateBridge "CreateBridge(name string, setMacAddr bool)"
CreateBridge( ${1:name string}, ${2:setMacAddr bool})
endsnippet

snippet CreateDevice "CreateDevice(poolName string, deviceId int)"
CreateDevice( ${1:poolName string}, ${2:deviceId int})
endsnippet

snippet CreateDeviceNode "CreateDeviceNode(rootfs string, node *devices.Device)"
CreateDeviceNode( ${1:rootfs string}, ${2:node *devices.Device})
endsnippet

snippet CreateDeviceNodes "CreateDeviceNodes(rootfs string, nodesToCreate []*devices.Device)"
CreateDeviceNodes( ${1:rootfs string}, ${2:nodesToCreate []*devices.Device})
endsnippet

snippet CreatePidFile "CreatePidFile(pidfile string)"
CreatePidFile( ${1:pidfile string})
endsnippet

snippet CreatePool "CreatePool(poolName string, dataFile, metadataFile *os.File, poolBlockSize uint32)"
CreatePool( ${1:poolName string}, ${2:dataFile}, ${3:metadataFile *os.File}, ${4:poolBlockSize uint32})
endsnippet

snippet CreateRoom "CreateRoom(server_id T_server_id, room_id string, room_title string, room_type string)"
CreateRoom( ${1:server_id T_server_id}, ${2:room_id string}, ${3:room_title string}, ${4:room_type string})
endsnippet

snippet CreateSnapDevice "CreateSnapDevice(poolName string, deviceId int, baseName string, baseDeviceId int)"
CreateSnapDevice( ${1:poolName string}, ${2:deviceId int}, ${3:baseName string}, ${4:baseDeviceId int})
endsnippet

snippet CreateStatement "CreateStatement(grants, revocations io.Reader, expiration time.Duration, key libtrust.PrivateKey, chain []*x509.Certificate)"
CreateStatement( ${1:grants}, ${2:revocations io.Reader}, ${3:expiration time.Duration}, ${4:key libtrust.PrivateKey}, ${5:chain []*x509.Certificate})
endsnippet

snippet CreateVethPair "CreateVethPair(name1, name2 string, txQueueLen int)"
CreateVethPair( ${1:name1}, ${2:name2 string}, ${3:txQueueLen int})
endsnippet

snippet CurrentRoute "CurrentRoute(r *http.Request)"
CurrentRoute( ${1:r *http.Request})
endsnippet

snippet CustomType "CustomType(name string)"
CustomType( ${1:name string})
endsnippet

snippet CustomWave "CustomWave(rate int, samples []float32)"
CustomWave( ${1:rate int}, ${2:samples []float32})
endsnippet

snippet DEBUG "DEBUG(v ...interface{})"
DEBUG( ${1:v ...interface{}})
endsnippet

snippet DHGenKey "DHGenKey(G, P *big.Int)"
DHGenKey( ${1:G}, ${2:P *big.Int})
endsnippet

snippet Daemonize "Daemonize(child ...bool)"
Daemonize( ${1:child ...bool})
endsnippet

snippet Debug "Debug(args ...interface{})"
Debug( ${1:args ...interface{}})
endsnippet

snippet Debugf "Debugf(format string, args ...interface{})"
Debugf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet Debugln "Debugln(args ...interface{})"
Debugln( ${1:args ...interface{}})
endsnippet

snippet DecCommandAsString "DecCommandAsString(s string)"
DecCommandAsString( ${1:s string})
endsnippet

snippet DeclPos "DeclPos(obj *ast.Object)"
DeclPos( ${1:obj *ast.Object})
endsnippet

snippet Decode "Decode(s string)"
Decode( ${1:s string})
endsnippet

snippet DecodeDatastoreKey "DecodeDatastoreKey(d *Decoder)"
DecodeDatastoreKey( ${1:d *Decoder})
endsnippet

snippet DecodeJsonPayload "DecodeJsonPayload(r *httptest.ResponseRecorder, v interface{})"
DecodeJsonPayload( ${1:r *httptest.ResponseRecorder}, ${2:v interface{}})
endsnippet

snippet DecodeMapStringInterface "DecodeMapStringInterface(d *msgpack.Decoder)"
DecodeMapStringInterface( ${1:d *msgpack.Decoder})
endsnippet

snippet DecodeMessage "DecodeMessage(rd io.Reader)"
DecodeMessage( ${1:rd io.Reader})
endsnippet

snippet DecompressStream "DecompressStream(archive io.Reader)"
DecompressStream( ${1:archive io.Reader})
endsnippet

snippet DeepCopy "DeepCopy(src interface{}, dest interface{})"
DeepCopy( ${1:src interface{}}, ${2:dest interface{}})
endsnippet

snippet DeepDiff "DeepDiff(a1, a2 interface{})"
DeepDiff( ${1:a1}, ${2:a2 interface{}})
endsnippet

snippet DeepEqual "DeepEqual(a1, a2 interface{})"
DeepEqual( ${1:a1}, ${2:a2 interface{}})
endsnippet

snippet DefaultAppComplete "DefaultAppComplete(c *Context)"
DefaultAppComplete( ${1:c *Context})
endsnippet

snippet DefaultCreateCommand "DefaultCreateCommand(container *libcontainer.Config, console, dataPath, init string, pipe *os.File, args []string)"
DefaultCreateCommand( ${1:container *libcontainer.Config}, ${2:console}, ${3:dataPath}, ${4:init string}, ${5:pipe *os.File}, ${6:args []string})
endsnippet

snippet DefaultImporter "DefaultImporter(path string)"
DefaultImporter( ${1:path string})
endsnippet

snippet DefaultType "DefaultType(typ types.Type)"
DefaultType( ${1:typ types.Type})
endsnippet

snippet Delay "Delay(input Widget, delay int)"
Delay( ${1:input Widget}, ${2:delay int})
endsnippet

snippet Delete "Delete(id int32)"
Delete( ${1:id int32})
endsnippet

snippet DeleteAccount "DeleteAccount(server_id T_server_id, uid int32)"
DeleteAccount( ${1:server_id T_server_id}, ${2:uid int32})
endsnippet

snippet DeleteBridge "DeleteBridge(name string)"
DeleteBridge( ${1:name string})
endsnippet

snippet DeleteConfigOption "DeleteConfigOption(section, key string)"
DeleteConfigOption( ${1:section}, ${2:key string})
endsnippet

snippet DeleteDevice "DeleteDevice(poolName string, deviceId int)"
DeleteDevice( ${1:poolName string}, ${2:deviceId int})
endsnippet

snippet DeleteHeroInList "DeleteHeroInList(city *City, order int32)"
DeleteHeroInList( ${1:city *City}, ${2:order int32})
endsnippet

snippet DeleteImport "DeleteImport(fset *token.FileSet, f *ast.File, path string)"
DeleteImport( ${1:fset *token.FileSet}, ${2:f *ast.File}, ${3:path string})
endsnippet

snippet DeleteInterfaceIp "DeleteInterfaceIp(name string, rawIp string)"
DeleteInterfaceIp( ${1:name string}, ${2:rawIp string})
endsnippet

snippet DeleteMemeberFromRoom "DeleteMemeberFromRoom(server_id T_server_id, room_name string, chat_account string)"
DeleteMemeberFromRoom( ${1:server_id T_server_id}, ${2:room_name string}, ${3:chat_account string})
endsnippet

snippet DeleteRoom "DeleteRoom(server_id T_server_id, room_name string)"
DeleteRoom( ${1:server_id T_server_id}, ${2:room_name string})
endsnippet

snippet DeleteState "DeleteState(basePath string)"
DeleteState( ${1:basePath string})
endsnippet

snippet Denom "Denom(x Value)"
Denom( ${1:x Value})
endsnippet

snippet Dependencies "Dependencies(pkgs ...*types.Package)"
Dependencies( ${1:pkgs ...*types.Package})
endsnippet

snippet Details "Details(err error)"
Details( ${1:err error})
endsnippet

snippet DetectCompression "DetectCompression(source []byte)"
DetectCompression( ${1:source []byte})
endsnippet

snippet DetermineEncoding "DetermineEncoding(content []byte, contentType string)"
DetermineEncoding( ${1:content []byte}, ${2:contentType string})
endsnippet

snippet Device "Device(t DeviceType, in, out *Socket)"
Device( ${1:t DeviceType}, ${2:in}, ${3:out *Socket})
endsnippet

snippet DeviceIdExists "DeviceIdExists(err error)"
DeviceIdExists( ${1:err error})
endsnippet

snippet DevmapperLogCallback "DevmapperLogCallback(level C.int, file *C.char, line C.int, dm_errno_or_class C.int, message *C.char)"
DevmapperLogCallback( ${1:level C.int}, ${2:file *C.char}, ${3:line C.int}, ${4:dm_errno_or_class C.int}, ${5:message *C.char})
endsnippet

snippet Dial "Dial(network, addr string)"
Dial( ${1:network}, ${2:addr string})
endsnippet

snippet DialConfig "DialConfig(config *Config)"
DialConfig( ${1:config *Config})
endsnippet

snippet DialService "DialService(service string)"
DialService( ${1:service string})
endsnippet

snippet DialWithInfo "DialWithInfo(info *DialInfo)"
DialWithInfo( ${1:info *DialInfo})
endsnippet

snippet DialWithTimeout "DialWithTimeout(url string, timeout time.Duration)"
DialWithTimeout( ${1:url string}, ${2:timeout time.Duration})
endsnippet

snippet Dice "Dice(probability float32)"
Dice( ${1:probability float32})
endsnippet

snippet DisableEcho "DisableEcho(fd uintptr, state *State)"
DisableEcho( ${1:fd uintptr}, ${2:state *State})
endsnippet

snippet DisplayJSONMessagesStream "DisplayJSONMessagesStream(in io.Reader, out io.Writer, terminalFd uintptr, isTerminal bool)"
DisplayJSONMessagesStream( ${1:in io.Reader}, ${2:out io.Writer}, ${3:terminalFd uintptr}, ${4:isTerminal bool})
endsnippet

snippet DisplayablePorts "DisplayablePorts(ports *engine.Table)"
DisplayablePorts( ${1:ports *engine.Table})
endsnippet

snippet DistanceBetweenCityAndVillage "DistanceBetweenCityAndVillage(city *City, village_x T_coordinate, village_y T_coordinate)"
DistanceBetweenCityAndVillage( ${1:city *City}, ${2:village_x T_coordinate}, ${3:village_y T_coordinate})
endsnippet

snippet DistanceBetweenTwoCities "DistanceBetweenTwoCities(city *City, other_city *City)"
DistanceBetweenTwoCities( ${1:city *City}, ${2:other_city *City})
endsnippet

snippet DnsSearchListVar "DnsSearchListVar(values *[]string, names []string, usage string)"
DnsSearchListVar( ${1:values *[]string}, ${2:names []string}, ${3:usage string})
endsnippet

snippet Do "Do(f interface{}, x interface{})"
Do( ${1:f interface{}}, ${2:x interface{}})
endsnippet

snippet DoSomething "DoSomething(ctx context.Context)"
DoSomething( ${1:ctx context.Context})
endsnippet

snippet DockerInitPath "DockerInitPath(localCopy string)"
DockerInitPath( ${1:localCopy string})
endsnippet

snippet DonutRank "DonutRank(d Donut)"
DonutRank( ${1:d Donut})
endsnippet

snippet Download "Download(url string)"
Download( ${1:url string})
endsnippet

snippet Draggable "Draggable(it MoveableItem)"
Draggable( ${1:it MoveableItem})
endsnippet

snippet Draw "Draw(dst Image, r Rectangle, src image.Image, sp Point)"
Draw( ${1:dst Image}, ${2:r Rectangle}, ${3:src image.Image}, ${4:sp Point})
endsnippet

snippet DrawMask "DrawMask(dst Image, r Rectangle, src image.Image, sp Point, mask image.Image, mp Point, op Op)"
DrawMask( ${1:dst Image}, ${2:r Rectangle}, ${3:src image.Image}, ${4:sp Point}, ${5:mask image.Image}, ${6:mp Point}, ${7:op Op})
endsnippet

snippet DrawOp "DrawOp(dst draw.Image, r image.Rectangle, src image.Image, sp image.Point, op draw.Op)"
DrawOp( ${1:dst draw.Image}, ${2:r image.Rectangle}, ${3:src image.Image}, ${4:sp image.Point}, ${5:op draw.Op})
endsnippet

snippet DriverTestCreateBase "DriverTestCreateBase(t *testing.T, drivername string)"
DriverTestCreateBase( ${1:t *testing.T}, ${2:drivername string})
endsnippet

snippet DriverTestCreateEmpty "DriverTestCreateEmpty(t *testing.T, drivername string)"
DriverTestCreateEmpty( ${1:t *testing.T}, ${2:drivername string})
endsnippet

snippet DriverTestCreateSnap "DriverTestCreateSnap(t *testing.T, drivername string)"
DriverTestCreateSnap( ${1:t *testing.T}, ${2:drivername string})
endsnippet

snippet DropAll "DropAll(mongourl string)"
DropAll( ${1:mongourl string})
endsnippet

snippet DropBoundingSet "DropBoundingSet(capabilities []string)"
DropBoundingSet( ${1:capabilities []string})
endsnippet

snippet DropCapabilities "DropCapabilities(capList []string)"
DropCapabilities( ${1:capList []string})
endsnippet

snippet DupSecOpt "DupSecOpt(src string)"
DupSecOpt( ${1:src string})
endsnippet

snippet DuplicateConstantsAreNotEliminated "DuplicateConstantsAreNotEliminated(x int)"
DuplicateConstantsAreNotEliminated( ${1:x int})
endsnippet

snippet DuplicateTypesAreNotEliminated "DuplicateTypesAreNotEliminated(x interface{})"
DuplicateTypesAreNotEliminated( ${1:x interface{}})
endsnippet

snippet Duration "Duration(names []string, value time.Duration, usage string)"
Duration( ${1:names []string}, ${2:value time.Duration}, ${3:usage string})
endsnippet

snippet DurationVar "DurationVar(p *time.Duration, names []string, value time.Duration, usage string)"
DurationVar( ${1:p *time.Duration}, ${2:names []string}, ${3:value time.Duration}, ${4:usage string})
endsnippet

snippet ERR "ERR(v ...interface{})"
ERR( ${1:v ...interface{}})
endsnippet

snippet E_activity_rank_reward_event "E_activity_rank_reward_event(event *Event)"
E_activity_rank_reward_event( ${1:event *Event})
endsnippet

snippet E_flush_npc "E_flush_npc(event *Event)"
E_flush_npc( ${1:event *Event})
endsnippet

snippet E_flush_village "E_flush_village(event *Event)"
E_flush_village( ${1:event *Event})
endsnippet

snippet E_help_alliance_resource_event "E_help_alliance_resource_event(event *Event)"
E_help_alliance_resource_event( ${1:event *Event})
endsnippet

snippet E_move_on_map "E_move_on_map(event *Event)"
E_move_on_map( ${1:event *Event})
endsnippet

snippet E_occupy_village "E_occupy_village(event *Event)"
E_occupy_village( ${1:event *Event})
endsnippet

snippet EchoServer "EchoServer(ws *websocket.Conn)"
EchoServer( ${1:ws *websocket.Conn})
endsnippet

snippet EffectiveTLDPlusOne "EffectiveTLDPlusOne(domain string)"
EffectiveTLDPlusOne( ${1:domain string})
endsnippet

snippet Elements "Elements(name string)"
Elements( ${1:name string})
endsnippet

snippet EncCommandAsString "EncCommandAsString(s string, vname string)"
EncCommandAsString( ${1:s string}, ${2:vname string})
endsnippet

snippet EnclosingFunction "EnclosingFunction(pkg *Package, path []ast.Node)"
EnclosingFunction( ${1:pkg *Package}, ${2:path []ast.Node})
endsnippet

snippet Encode "Encode(path string)"
Encode( ${1:path string})
endsnippet

snippet EncodeDatastoreKey "EncodeDatastoreKey(e *Encoder, key *ds.Key)"
EncodeDatastoreKey( ${1:e *Encoder}, ${2:key *ds.Key})
endsnippet

snippet EnhanceHero "EnhanceHero(user *User, hero *hero.Hero)"
EnhanceHero( ${1:user *User}, ${2:hero *hero.Hero})
endsnippet

snippet EnterCgroups "EnterCgroups(state *libcontainer.State, pid int)"
EnterCgroups( ${1:state *libcontainer.State}, ${2:pid int})
endsnippet

snippet EnterPid "EnterPid(cgroupPaths map[string]string, pid int)"
EnterPid( ${1:cgroupPaths map[string]string}, ${2:pid int})
endsnippet

snippet Envelope "Envelope(t0 int64, rate int, attack, decay, sustain, release int64, sustainlev float32)"
Envelope( ${1:t0 int64}, ${2:rate int}, ${3:attack}, ${4:decay}, ${5:sustain}, ${6:release int64}, ${7:sustainlev float32})
endsnippet

snippet Equal "Equal(a, b []byte)"
Equal( ${1:a}, ${2:b []byte})
endsnippet

snippet Error "Error(args ...interface{})"
Error( ${1:args ...interface{}})
endsnippet

snippet ErrorHandler "ErrorHandler(errs Errors, resp http.ResponseWriter)"
ErrorHandler( ${1:errs Errors}, ${2:resp http.ResponseWriter})
endsnippet

snippet Errorf "Errorf(format string, args ...interface{})"
Errorf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet Errorln "Errorln(args ...interface{})"
Errorln( ${1:args ...interface{}})
endsnippet

snippet EscapeString "EscapeString(s string)"
EscapeString( ${1:s string})
endsnippet

snippet Eval "Eval(str string, pkg *Package, scope *Scope)"
Eval( ${1:str string}, ${2:pkg *Package}, ${3:scope *Scope})
endsnippet

snippet EvalNode "EvalNode(fset *token.FileSet, node ast.Expr, pkg *Package, scope *Scope)"
EvalNode( ${1:fset *token.FileSet}, ${2:node ast.Expr}, ${3:pkg *Package}, ${4:scope *Scope})
endsnippet

snippet Every "Every(duration time.Duration)"
Every( ${1:duration time.Duration})
endsnippet

snippet ExampleD "ExampleD(t *testing.T)"
ExampleD( ${1:t *testing.T})
endsnippet

snippet ExampleGetter "ExampleGetter(t *testing.T)"
ExampleGetter( ${1:t *testing.T})
endsnippet

snippet Exec "Exec(s string)"
Exec( ${1:s string})
endsnippet

snippet Exec2 "Exec2(s string)"
Exec2( ${1:s string})
endsnippet

snippet ExecCmd "ExecCmd(cmdName string, args ...string)"
ExecCmd( ${1:cmdName string}, ${2:args ...string})
endsnippet

snippet ExecCmdBytes "ExecCmdBytes(cmdName string, args ...string)"
ExecCmdBytes( ${1:cmdName string}, ${2:args ...string})
endsnippet

snippet ExecCmdDir "ExecCmdDir(dir, cmdName string, args ...string)"
ExecCmdDir( ${1:dir}, ${2:cmdName string}, ${3:args ...string})
endsnippet

snippet ExecCmdDirBytes "ExecCmdDirBytes(dir, cmdName string, args ...string)"
ExecCmdDirBytes( ${1:dir}, ${2:cmdName string}, ${3:args ...string})
endsnippet

snippet ExecConfigFromJob "ExecConfigFromJob(job *engine.Job)"
ExecConfigFromJob( ${1:job *engine.Job})
endsnippet

snippet ExecIn "ExecIn(container *libcontainer.Config, state *libcontainer.State, userArgs []string, initPath, action string,$/;"	f
ExecInterrupt	src/github.com/sirnewton01/gdblib/exec.go	/^func (gdb *GDB)"
ExecIn( ${1:container *libcontainer.Config}, ${2:state *libcontainer.State}, ${3:userArgs []string}, ${4:initPath}, ${5:action string}, ${6:$/;"	f
ExecInterrupt	src/github.com/sirnewton01/gdblib/exec.go	/^func (gdb *GDB})
endsnippet

snippet Execv "Execv(cmd string, args []string, env []string)"
Execv( ${1:cmd string}, ${2:args []string}, ${3:env []string})
endsnippet

snippet Exists "Exists(args ...string)"
Exists( ${1:args ...string})
endsnippet

snippet ExpBuild "ExpBuild(cname string, level int32)"
ExpBuild( ${1:cname string}, ${2:level int32})
endsnippet

snippet ExpEquip "ExpEquip(cname string, level int32)"
ExpEquip( ${1:cname string}, ${2:level int32})
endsnippet

snippet Expand "Expand(template string, match map[string]string, subs ...string)"
Expand( ${1:template string}, ${2:match map[string]string}, ${3:subs ...string})
endsnippet

snippet ExportChanges "ExportChanges(dir string, changes []Change)"
ExportChanges( ${1:dir string}, ${2:changes []Change})
endsnippet

snippet ExportData "ExportData(pkg *types.Package)"
ExportData( ${1:pkg *types.Package})
endsnippet

snippet ExprString "ExprString(x ast.Expr)"
ExprString( ${1:x ast.Expr})
endsnippet

snippet ExprType "ExprType(e ast.Expr, importer Importer)"
ExprType( ${1:e ast.Expr}, ${2:importer Importer})
endsnippet

snippet ExtractTo "ExtractTo(srcPath, destPath string, entries ...string)"
ExtractTo( ${1:srcPath}, ${2:destPath string}, ${3:entries ...string})
endsnippet

snippet ExtractToFunc "ExtractToFunc(srcPath, destPath string, fn cae.HookFunc, entries ...string)"
ExtractToFunc( ${1:srcPath}, ${2:destPath string}, ${3:fn cae.HookFunc}, ${4:entries ...string})
endsnippet

snippet F "F(x int, y struct{})"
F( ${1:x int}, ${2:y struct{}})
endsnippet

snippet F2 "F2(x int)"
F2( ${1:x int})
endsnippet

snippet F5 "F5(a, b, c int, u, v, w struct{ x, y T1 }, more ...interface{})"
F5( ${1:a}, ${2:b}, ${3:c int}, ${4:u}, ${5:v}, ${6:w struct{ x}, ${7:y T1 }}, ${8:more ...interface{}})
endsnippet

snippet FD_ISSET "FD_ISSET(p *syscall.FdSet, i int)"
FD_ISSET( ${1:p *syscall.FdSet}, ${2:i int})
endsnippet

snippet FD_SET "FD_SET(p *syscall.FdSet, i int)"
FD_SET( ${1:p *syscall.FdSet}, ${2:i int})
endsnippet

snippet FD_ZERO "FD_ZERO(p *syscall.FdSet)"
FD_ZERO( ${1:p *syscall.FdSet})
endsnippet

snippet FNV1a "FNV1a(str string)"
FNV1a( ${1:str string})
endsnippet

snippet FastMarshalJSON "FastMarshalJSON(t time.Time)"
FastMarshalJSON( ${1:t time.Time})
endsnippet

snippet Fatal "Fatal(args ...interface{})"
Fatal( ${1:args ...interface{}})
endsnippet

snippet Fatalf "Fatalf(format string, args ...interface{})"
Fatalf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet Fatalln "Fatalln(args ...interface{})"
Fatalln( ${1:args ...interface{}})
endsnippet

snippet FileExists "FileExists(ctxt *build.Context, path string)"
FileExists( ${1:ctxt *build.Context}, ${2:path string})
endsnippet

snippet FileExports "FileExports(src *File)"
FileExports( ${1:src *File})
endsnippet

snippet FileInfoHeader "FileInfoHeader(fi os.FileInfo, link string)"
FileInfoHeader( ${1:fi os.FileInfo}, ${2:link string})
endsnippet

snippet Files "Files(unsetEnv bool)"
Files( ${1:unsetEnv bool})
endsnippet

snippet Filter "Filter(sentence string)"
Filter( ${1:sentence string})
endsnippet

snippet FilterByHosts "FilterByHosts(keys []PublicKey, host string, includeEmpty bool)"
FilterByHosts( ${1:keys []PublicKey}, ${2:host string}, ${3:includeEmpty bool})
endsnippet

snippet FilterDecl "FilterDecl(decl Decl, f Filter)"
FilterDecl( ${1:decl Decl}, ${2:f Filter})
endsnippet

snippet FilterFile "FilterFile(src *File, f Filter)"
FilterFile( ${1:src *File}, ${2:f Filter})
endsnippet

snippet FilterPackage "FilterPackage(pkg *Package, f Filter)"
FilterPackage( ${1:pkg *Package}, ${2:f Filter})
endsnippet

snippet FilterStatements "FilterStatements(grants []*Grant)"
FilterStatements( ${1:grants []*Grant})
endsnippet

snippet FinalizeNamespace "FinalizeNamespace(container *libcontainer.Config)"
FinalizeNamespace( ${1:container *libcontainer.Config})
endsnippet

snippet FinalizeSetns "FinalizeSetns(container *libcontainer.Config, args []string)"
FinalizeSetns( ${1:container *libcontainer.Config}, ${2:args []string})
endsnippet

snippet FindCgroupMountpoint "FindCgroupMountpoint(subsystem string)"
FindCgroupMountpoint( ${1:subsystem string})
endsnippet

snippet FindExportData "FindExportData(r *bufio.Reader)"
FindExportData( ${1:r *bufio.Reader})
endsnippet

snippet FindLoopDeviceFor "FindLoopDeviceFor(file *os.File)"
FindLoopDeviceFor( ${1:file *os.File})
endsnippet

snippet FindPath "FindPath(from_x, from_y, to_x, to_y T_coordinate, can_move_map_type T_map_type)"
FindPath( ${1:from_x}, ${2:from_y}, ${3:to_x}, ${4:to_y T_coordinate}, ${5:can_move_map_type T_map_type})
endsnippet

snippet FindPkg "FindPkg(path, srcDir string)"
FindPkg( ${1:path}, ${2:srcDir string})
endsnippet

snippet FindTests "FindTests(pkgs []*Package)"
FindTests( ${1:pkgs []*Package})
endsnippet

snippet FininshBattleChallengeQuest "FininshBattleChallengeQuest(user *User, win_times int32)"
FininshBattleChallengeQuest( ${1:user *User}, ${2:win_times int32})
endsnippet

snippet FixBugAmyUpdateStatus "FixBugAmyUpdateStatus(user *User, army *Army, now int64)"
FixBugAmyUpdateStatus( ${1:user *User}, ${2:army *Army}, ${3:now int64})
endsnippet

snippet FixBugHeroUpdateStatus "FixBugHeroUpdateStatus(user *User, _hero *hero.Hero, now int64)"
FixBugHeroUpdateStatus( ${1:user *User}, ${2:_hero *hero.Hero}, ${3:now int64})
endsnippet

snippet FixedGacha "FixedGacha(user *User, item_key string, num int32, city_id int32)"
FixedGacha( ${1:user *User}, ${2:item_key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet Float32 "Float32(param interface{})"
Float32( ${1:param interface{}})
endsnippet

snippet Float32Val "Float32Val(x Value)"
Float32Val( ${1:x Value})
endsnippet

snippet Float64 "Float64(names []string, value float64, usage string)"
Float64( ${1:names []string}, ${2:value float64}, ${3:usage string})
endsnippet

snippet Float64Multiply "Float64Multiply(x float64)"
Float64Multiply( ${1:x float64})
endsnippet

snippet Float64ToString "Float64ToString(printf, scanf string)"
Float64ToString( ${1:printf}, ${2:scanf string})
endsnippet

snippet Float64Val "Float64Val(x Value)"
Float64Val( ${1:x Value})
endsnippet

snippet Float64Var "Float64Var(p *float64, names []string, value float64, usage string)"
Float64Var( ${1:p *float64}, ${2:names []string}, ${3:value float64}, ${4:usage string})
endsnippet

snippet FollowSymlinkInScope "FollowSymlinkInScope(path, root string)"
FollowSymlinkInScope( ${1:path}, ${2:root string})
endsnippet

snippet ForEachPackage "ForEachPackage(ctxt *build.Context, found func(importPath string, err error)"
ForEachPackage( ${1:ctxt *build.Context}, ${2:found func(importPath string}, ${3:err error})
endsnippet

snippet ForceMount "ForceMount(device, target, mType, options string)"
ForceMount( ${1:device}, ${2:target}, ${3:mType}, ${4:options string})
endsnippet

snippet ForceUnmount "ForceUnmount(target string)"
ForceUnmount( ${1:target string})
endsnippet

snippet Form "Form(formStruct interface{}, ifacePtr ...interface{})"
Form( ${1:formStruct interface{}}, ${2:ifacePtr ...interface{}})
endsnippet

snippet Format "Format(i int64, units int)"
Format( ${1:i int64}, ${2:units int})
endsnippet

snippet FormatBytes "FormatBytes(i int64)"
FormatBytes( ${1:i int64})
endsnippet

snippet FormatMountLabel "FormatMountLabel(src string, mountLabel string)"
FormatMountLabel( ${1:src string}, ${2:mountLabel string})
endsnippet

snippet FormatSelections "FormatSelections(w io.Writer, text []byte, lw LinkWriter, links Selection, sw SegmentWriter, selections ...Selection)"
FormatSelections( ${1:w io.Writer}, ${2:text []byte}, ${3:lw LinkWriter}, ${4:links Selection}, ${5:sw SegmentWriter}, ${6:selections ...Selection})
endsnippet

snippet FormatText "FormatText(w io.Writer, text []byte, line int, goSource bool, pattern string, selection Selection)"
FormatText( ${1:w io.Writer}, ${2:text []byte}, ${3:line int}, ${4:goSource bool}, ${5:pattern string}, ${6:selection Selection})
endsnippet

snippet Fprint "Fprint(w io.Writer, fset *token.FileSet, x interface{}, f FieldFilter)"
Fprint( ${1:w io.Writer}, ${2:fset *token.FileSet}, ${3:x interface{}}, ${4:f FieldFilter})
endsnippet

snippet Fprintln "Fprintln(a ...interface{})"
Fprintln( ${1:a ...interface{}})
endsnippet

snippet FreeLxcContexts "FreeLxcContexts(scon string)"
FreeLxcContexts( ${1:scon string})
endsnippet

snippet Freeze "Freeze(c *cgroups.Cgroup, state cgroups.FreezerState)"
Freeze( ${1:c *cgroups.Cgroup}, ${2:state cgroups.FreezerState})
endsnippet

snippet FromContext "FromContext(ctx context.Context)"
FromContext( ${1:ctx context.Context})
endsnippet

snippet FromCryptoPrivateKey "FromCryptoPrivateKey(cryptoPrivateKey crypto.PrivateKey)"
FromCryptoPrivateKey( ${1:cryptoPrivateKey crypto.PrivateKey})
endsnippet

snippet FromCryptoPublicKey "FromCryptoPublicKey(cryptoPublicKey crypto.PublicKey)"
FromCryptoPublicKey( ${1:cryptoPublicKey crypto.PublicKey})
endsnippet

snippet FromDir "FromDir(dir, srcRoot string)"
FromDir( ${1:dir}, ${2:srcRoot string})
endsnippet

snippet FromHumanSize "FromHumanSize(size string)"
FromHumanSize( ${1:size string})
endsnippet

snippet FromParam "FromParam(p string)"
FromParam( ${1:p string})
endsnippet

snippet FromURL "FromURL(u *url.URL, forward Dialer)"
FromURL( ${1:u *url.URL}, ${2:forward Dialer})
endsnippet

snippet Fstat "Fstat(fd int, stat *Stat_t)"
Fstat( ${1:fd int}, ${2:stat *Stat_t})
endsnippet

snippet GacheHeroLv1 "GacheHeroLv1(user *User)"
GacheHeroLv1( ${1:user *User})
endsnippet

snippet GacheHeroLv2 "GacheHeroLv2(user *User)"
GacheHeroLv2( ${1:user *User})
endsnippet

snippet GacheHeroLv3 "GacheHeroLv3(user *User)"
GacheHeroLv3( ${1:user *User})
endsnippet

snippet GathaHeroSkill "GathaHeroSkill(index int, skill_name string, const_name string, _hero *Hero, select_skill_type_map map[string]bool)"
GathaHeroSkill( ${1:index int}, ${2:skill_name string}, ${3:const_name string}, ${4:_hero *Hero}, ${5:select_skill_type_map map[string]bool})
endsnippet

snippet GenDrawOp "GenDrawOp(dst *Image, r image.Rectangle, src *Image, p0 image.Point, mask *Image, p1 image.Point, op Op)"
GenDrawOp( ${1:dst *Image}, ${2:r image.Rectangle}, ${3:src *Image}, ${4:p0 image.Point}, ${5:mask *Image}, ${6:p1 image.Point}, ${7:op Op})
endsnippet

snippet GenLabels "GenLabels(options string)"
GenLabels( ${1:options string})
endsnippet

snippet Generate "Generate(input ...string)"
Generate( ${1:input ...string})
endsnippet

snippet GenerateCACert "GenerateCACert(signer PrivateKey, trustedKey PublicKey)"
GenerateCACert( ${1:signer PrivateKey}, ${2:trustedKey PublicKey})
endsnippet

snippet GenerateCACertPool "GenerateCACertPool(signer PrivateKey, trustedKeys []PublicKey)"
GenerateCACertPool( ${1:signer PrivateKey}, ${2:trustedKeys []PublicKey})
endsnippet

snippet GenerateIntermediate "GenerateIntermediate(key crypto.PublicKey, parentKey crypto.PrivateKey, parent *x509.Certificate)"
GenerateIntermediate( ${1:key crypto.PublicKey}, ${2:parentKey crypto.PrivateKey}, ${3:parent *x509.Certificate})
endsnippet

snippet GenerateRandomName "GenerateRandomName(prefix string, size int)"
GenerateRandomName( ${1:prefix string}, ${2:size int})
endsnippet

snippet GenerateSelfSignedClientCert "GenerateSelfSignedClientCert(key PrivateKey)"
GenerateSelfSignedClientCert( ${1:key PrivateKey})
endsnippet

snippet GenerateSelfSignedServerCert "GenerateSelfSignedServerCert(key PrivateKey, domains []string, ipAddresses []net.IP)"
GenerateSelfSignedServerCert( ${1:key PrivateKey}, ${2:domains []string}, ${3:ipAddresses []net.IP})
endsnippet

snippet GenerateTrustCA "GenerateTrustCA(pub crypto.PublicKey, priv crypto.PrivateKey)"
GenerateTrustCA( ${1:pub crypto.PublicKey}, ${2:priv crypto.PrivateKey})
endsnippet

snippet GenerateTrustCert "GenerateTrustCert(key crypto.PublicKey, parentKey crypto.PrivateKey, parent *x509.Certificate)"
GenerateTrustCert( ${1:key crypto.PublicKey}, ${2:parentKey crypto.PrivateKey}, ${3:parent *x509.Certificate})
endsnippet

snippet Get "Get(r *http.Request, now uint64, name string, value interface{})"
Get( ${1:r *http.Request}, ${2:now uint64}, ${3:name string}, ${4:value interface{}})
endsnippet

snippet GetAccount "GetAccount(server_id T_server_id, uid int32, uname string)"
GetAccount( ${1:server_id T_server_id}, ${2:uid int32}, ${3:uname string})
endsnippet

snippet GetActByType "GetActByType(t int32, s int32)"
GetActByType( ${1:t int32}, ${2:s int32})
endsnippet

snippet GetActivity "GetActivity(id int32)"
GetActivity( ${1:id int32})
endsnippet

snippet GetActivityByType "GetActivityByType(t int32)"
GetActivityByType( ${1:t int32})
endsnippet

snippet GetActivityNotReward "GetActivityNotReward(id int32)"
GetActivityNotReward( ${1:id int32})
endsnippet

snippet GetAll "GetAll(userid int32)"
GetAll( ${1:userid int32})
endsnippet

snippet GetAllBy "GetAllBy(collection string, fieldname string, value int32, all interface{})"
GetAllBy( ${1:collection string}, ${2:fieldname string}, ${3:value int32}, ${4:all interface{}})
endsnippet

snippet GetAllByServerId "GetAllByServerId(server_id T_server_id)"
GetAllByServerId( ${1:server_id T_server_id})
endsnippet

snippet GetAllOk "GetAllOk(r *http.Request)"
GetAllOk( ${1:r *http.Request})
endsnippet

snippet GetAllPushed "GetAllPushed(max_id int32)"
GetAllPushed( ${1:max_id int32})
endsnippet

snippet GetAllSended "GetAllSended(max_id int32)"
GetAllSended( ${1:max_id int32})
endsnippet

snippet GetAllUserMail "GetAllUserMail(userid int32)"
GetAllUserMail( ${1:userid int32})
endsnippet

snippet GetAllianceAddrById "GetAllianceAddrById(alliance_id int32)"
GetAllianceAddrById( ${1:alliance_id int32})
endsnippet

snippet GetArmyInfoFromAttackInfo "GetArmyInfoFromAttackInfo(attack_info *AttackInfo)"
GetArmyInfoFromAttackInfo( ${1:attack_info *AttackInfo})
endsnippet

snippet GetAtkPower "GetAtkPower(soldier_name string)"
GetAtkPower( ${1:soldier_name string})
endsnippet

snippet GetAttackInfoFromArmyInfo "GetAttackInfoFromArmyInfo(army_info *ArmyInfo)"
GetAttackInfoFromArmyInfo( ${1:army_info *ArmyInfo})
endsnippet

snippet GetAutoSpeedUp "GetAutoSpeedUp(sec int32)"
GetAutoSpeedUp( ${1:sec int32})
endsnippet

snippet GetBlockDeviceSize "GetBlockDeviceSize(file *os.File)"
GetBlockDeviceSize( ${1:file *os.File})
endsnippet

snippet GetBy "GetBy(collection string, fieldname string, value int32, data interface{})"
GetBy( ${1:collection string}, ${2:fieldname string}, ${3:value int32}, ${4:data interface{}})
endsnippet

snippet GetByType "GetByType(t int32)"
GetByType( ${1:t int32})
endsnippet

snippet GetCallerName "GetCallerName(depth int)"
GetCallerName( ${1:depth int})
endsnippet

snippet GetCapability "GetCapability(key string)"
GetCapability( ${1:key string})
endsnippet

snippet GetCityDeals "GetCityDeals(sell_ids []int32)"
GetCityDeals( ${1:sell_ids []int32})
endsnippet

snippet GetCommitRun "GetCommitRun(c appengine.Context, commitNum int)"
GetCommitRun( ${1:c appengine.Context}, ${2:commitNum int})
endsnippet

snippet GetCommits "GetCommits(c appengine.Context, startCommitNum, n int)"
GetCommits( ${1:c appengine.Context}, ${2:startCommitNum}, ${3:n int})
endsnippet

snippet GetConsoleMode "GetConsoleMode(fileDesc uintptr)"
GetConsoleMode( ${1:fileDesc uintptr})
endsnippet

snippet GetConsoleScreenBufferInfo "GetConsoleScreenBufferInfo(fileDesc uintptr)"
GetConsoleScreenBufferInfo( ${1:fileDesc uintptr})
endsnippet

snippet GetDealList "GetDealList(user_id int32, server_id int32, refresh_max_value int32, refresh_count int32)"
GetDealList( ${1:user_id int32}, ${2:server_id int32}, ${3:refresh_max_value int32}, ${4:refresh_count int32})
endsnippet

snippet GetDefPower "GetDefPower(soldier_name string)"
GetDefPower( ${1:soldier_name string})
endsnippet

snippet GetDeps "GetDeps(name string)"
GetDeps( ${1:name string})
endsnippet

snippet GetDevice "GetDevice(path, cgroupPermissions string)"
GetDevice( ${1:path}, ${2:cgroupPermissions string})
endsnippet

snippet GetDeviceNumberString "GetDeviceNumberString(deviceNumber int64)"
GetDeviceNumberString( ${1:deviceNumber int64})
endsnippet

snippet GetDisplayAreaUids "GetDisplayAreaUids(x, y T_coordinate)"
GetDisplayAreaUids( ${1:x}, ${2:y T_coordinate})
endsnippet

snippet GetDriver "GetDriver(name, home string, options []string)"
GetDriver( ${1:name}, ${2:home string}, ${3:options []string})
endsnippet

snippet GetExecUser "GetExecUser(userSpec string, defaults *ExecUser, passwd, group io.Reader)"
GetExecUser( ${1:userSpec string}, ${2:defaults *ExecUser}, ${3:passwd}, ${4:group io.Reader})
endsnippet

snippet GetExecUserPath "GetExecUserPath(userSpec string, defaults *ExecUser, passwdPath, groupPath string)"
GetExecUserPath( ${1:userSpec string}, ${2:defaults *ExecUser}, ${3:passwdPath}, ${4:groupPath string})
endsnippet

snippet GetExp "GetExp(soldier_name string)"
GetExp( ${1:soldier_name string})
endsnippet

snippet GetFdName "GetFdName(fd uintptr)"
GetFdName( ${1:fd uintptr})
endsnippet

snippet GetFloat "GetFloat(tblname string, rowname string, fieldname string)"
GetFloat( ${1:tblname string}, ${2:rowname string}, ${3:fieldname string})
endsnippet

snippet GetFullContainerName "GetFullContainerName(name string)"
GetFullContainerName( ${1:name string})
endsnippet

snippet GetFunctionName "GetFunctionName(i interface{})"
GetFunctionName( ${1:i interface{}})
endsnippet

snippet GetHeroMaxQueueCount "GetHeroMaxQueueCount(hero *Hero)"
GetHeroMaxQueueCount( ${1:hero *Hero})
endsnippet

snippet GetIfaceAddr "GetIfaceAddr(name string)"
GetIfaceAddr( ${1:name string})
endsnippet

snippet GetImporter "GetImporter(searchpaths []string, initmap map[*types.Package]InitData)"
GetImporter( ${1:searchpaths []string}, ${2:initmap map[*types.Package]InitData})
endsnippet

snippet GetInfo "GetInfo(name string)"
GetInfo( ${1:name string})
endsnippet

snippet GetInitCgroupDir "GetInitCgroupDir(subsystem string)"
GetInitCgroupDir( ${1:subsystem string})
endsnippet

snippet GetInt "GetInt(tblname string, rowname string, fieldname string)"
GetInt( ${1:tblname string}, ${2:rowname string}, ${3:fieldname string})
endsnippet

snippet GetInt32 "GetInt32(tblname string, rowname string, fieldname string)"
GetInt32( ${1:tblname string}, ${2:rowname string}, ${3:fieldname string})
endsnippet

snippet GetInt64 "GetInt64(tblname string, rowname string, fieldname string)"
GetInt64( ${1:tblname string}, ${2:rowname string}, ${3:fieldname string})
endsnippet

snippet GetItemEffect "GetItemEffect(key string)"
GetItemEffect( ${1:key string})
endsnippet

snippet GetItemPrice "GetItemPrice(key string)"
GetItemPrice( ${1:key string})
endsnippet

snippet GetLastOne "GetLastOne(userid int32)"
GetLastOne( ${1:userid int32})
endsnippet

snippet GetLocalIp "GetLocalIp(debug bool)"
GetLocalIp( ${1:debug bool})
endsnippet

snippet GetLogger "GetLogger(path string)"
GetLogger( ${1:path string})
endsnippet

snippet GetMaxActionPoint "GetMaxActionPoint(level int32)"
GetMaxActionPoint( ${1:level int32})
endsnippet

snippet GetMaxBeHelpedCount "GetMaxBeHelpedCount(user *User)"
GetMaxBeHelpedCount( ${1:user *User})
endsnippet

snippet GetMaxBeHelpedTime "GetMaxBeHelpedTime(user *User)"
GetMaxBeHelpedTime( ${1:user *User})
endsnippet

snippet GetMaxLoyalty "GetMaxLoyalty(level T_level)"
GetMaxLoyalty( ${1:level T_level})
endsnippet

snippet GetMaxSupply "GetMaxSupply(level T_level)"
GetMaxSupply( ${1:level T_level})
endsnippet

snippet GetMemberPublicData "GetMemberPublicData(user_id int32, server_id T_server_id)"
GetMemberPublicData( ${1:user_id int32}, ${2:server_id T_server_id})
endsnippet

snippet GetMyKey "GetMyKey(r *http.Request)"
GetMyKey( ${1:r *http.Request})
endsnippet

snippet GetNameservers "GetNameservers(resolvConf []byte)"
GetNameservers( ${1:resolvConf []byte})
endsnippet

snippet GetNameserversAsCIDR "GetNameserversAsCIDR(resolvConf []byte)"
GetNameserversAsCIDR( ${1:resolvConf []byte})
endsnippet

snippet GetNamespaceFlags "GetNamespaceFlags(namespaces libcontainer.Namespaces)"
GetNamespaceFlags( ${1:namespaces libcontainer.Namespaces})
endsnippet

snippet GetNearEmptyArea "GetNearEmptyArea(x, y T_coordinate)"
GetNearEmptyArea( ${1:x}, ${2:y T_coordinate})
endsnippet

snippet GetOk "GetOk(r *http.Request, key interface{})"
GetOk( ${1:r *http.Request}, ${2:key interface{}})
endsnippet

snippet GetPackage "GetPackage(c appengine.Context, path string)"
GetPackage( ${1:c appengine.Context}, ${2:path string})
endsnippet

snippet GetParseData "GetParseData(e string)"
GetParseData( ${1:e string})
endsnippet

snippet GetPerfConfig "GetPerfConfig(c appengine.Context, r *http.Request)"
GetPerfConfig( ${1:c appengine.Context}, ${2:r *http.Request})
endsnippet

snippet GetPerfMetricRun "GetPerfMetricRun(c appengine.Context, builder, benchmark, metric string, commitNum int)"
GetPerfMetricRun( ${1:c appengine.Context}, ${2:builder}, ${3:benchmark}, ${4:metric string}, ${5:commitNum int})
endsnippet

snippet GetPerfMetricsForCommits "GetPerfMetricsForCommits(c appengine.Context, builder, benchmark, metric string, startCommitNum, n int)"
GetPerfMetricsForCommits( ${1:c appengine.Context}, ${2:builder}, ${3:benchmark}, ${4:metric string}, ${5:startCommitNum}, ${6:n int})
endsnippet

snippet GetPidLabel "GetPidLabel(pid int)"
GetPidLabel( ${1:pid int})
endsnippet

snippet GetPids "GetPids(c *cgroups.Cgroup)"
GetPids( ${1:c *cgroups.Cgroup})
endsnippet

snippet GetPkgFullPath "GetPkgFullPath(short string)"
GetPkgFullPath( ${1:short string})
endsnippet

snippet GetPopulation "GetPopulation(soldier_name string)"
GetPopulation( ${1:soldier_name string})
endsnippet

snippet GetPower "GetPower(soldier_name string)"
GetPower( ${1:soldier_name string})
endsnippet

snippet GetProcessStartTime "GetProcessStartTime(pid int)"
GetProcessStartTime( ${1:pid int})
endsnippet

snippet GetRandomName "GetRandomName(retry int)"
GetRandomName( ${1:retry int})
endsnippet

snippet GetRefreshNpcTime "GetRefreshNpcTime(star int32)"
GetRefreshNpcTime( ${1:star int32})
endsnippet

snippet GetRefreshVillageTime "GetRefreshVillageTime(level T_level)"
GetRefreshVillageTime( ${1:level T_level})
endsnippet

snippet GetRewardsData "GetRewardsData(e string)"
GetRewardsData( ${1:e string})
endsnippet

snippet GetRoomMembers "GetRoomMembers(server_id T_server_id, room_name string)"
GetRoomMembers( ${1:server_id T_server_id}, ${2:room_name string})
endsnippet

snippet GetRootPath "GetRootPath(name string)"
GetRootPath( ${1:name string})
endsnippet

snippet GetSearchDomains "GetSearchDomains(resolvConf []byte)"
GetSearchDomains( ${1:resolvConf []byte})
endsnippet

snippet GetServerApiAddrById "GetServerApiAddrById(server_id T_server_id)"
GetServerApiAddrById( ${1:server_id T_server_id})
endsnippet

snippet GetServerInfo "GetServerInfo(server_id T_server_id)"
GetServerInfo( ${1:server_id T_server_id})
endsnippet

snippet GetServiceIpAndPort "GetServiceIpAndPort(service_type string)"
GetServiceIpAndPort( ${1:service_type string})
endsnippet

snippet GetServiceUrl "GetServiceUrl(service_type string)"
GetServiceUrl( ${1:service_type string})
endsnippet

snippet GetSpeedUpItemTime "GetSpeedUpItemTime(key string)"
GetSpeedUpItemTime( ${1:key string})
endsnippet

snippet GetState "GetState(basePath string)"
GetState( ${1:basePath string})
endsnippet

snippet GetStats "GetStats(container *Config, state *State)"
GetStats( ${1:container *Config}, ${2:state *State})
endsnippet

snippet GetStatus "GetStatus(name string)"
GetStatus( ${1:name string})
endsnippet

snippet GetStrategy "GetStrategy(tpe string)"
GetStrategy( ${1:tpe string})
endsnippet

snippet GetString "GetString(tblname string, rowname string, fieldname string)"
GetString( ${1:tblname string}, ${2:rowname string}, ${3:fieldname string})
endsnippet

snippet GetTag "GetTag(c appengine.Context, tag string)"
GetTag( ${1:c appengine.Context}, ${2:tag string})
endsnippet

snippet GetTestImage "GetTestImage(daemon *daemon.Daemon)"
GetTestImage( ${1:daemon *daemon.Daemon})
endsnippet

snippet GetThisCgroupDir "GetThisCgroupDir(subsystem string)"
GetThisCgroupDir( ${1:subsystem string})
endsnippet

snippet GetTier "GetTier(soldier_name string)"
GetTier( ${1:soldier_name string})
endsnippet

snippet GetTime "GetTime(tblname string, rowname string, fieldname string)"
GetTime( ${1:tblname string}, ${2:rowname string}, ${3:fieldname string})
endsnippet

snippet GetUnreadCount "GetUnreadCount(userid int32)"
GetUnreadCount( ${1:userid int32})
endsnippet

snippet GetUnreadMailCount "GetUnreadMailCount(userid int32)"
GetUnreadMailCount( ${1:userid int32})
endsnippet

snippet GetUser "GetUser(w rest.ResponseWriter, req *rest.Request)"
GetUser( ${1:w rest.ResponseWriter}, ${2:req *rest.Request})
endsnippet

snippet GetUserFromMac "GetUserFromMac(mac string, language string, countrycode string)"
GetUserFromMac( ${1:mac string}, ${2:language string}, ${3:countrycode string})
endsnippet

snippet GetValueSum "GetValueSum(rank_name string)"
GetValueSum( ${1:rank_name string})
endsnippet

snippet GetVcsName "GetVcsName(dirPath string)"
GetVcsName( ${1:dirPath string})
endsnippet

snippet GetVersionFromTarsum "GetVersionFromTarsum(tarsum string)"
GetVersionFromTarsum( ${1:tarsum string})
endsnippet

snippet GetWarehouseCurrentVolume "GetWarehouseCurrentVolume(user *User, city *City)"
GetWarehouseCurrentVolume( ${1:user *User}, ${2:city *City})
endsnippet

snippet GetWinsize "GetWinsize(fd uintptr)"
GetWinsize( ${1:fd uintptr})
endsnippet

snippet GetWithEndCoordinateAndTypeNotUser "GetWithEndCoordinateAndTypeNotUser(end_coordinate int32, _type int16, uid int32, server_id T_server_id)"
GetWithEndCoordinateAndTypeNotUser( ${1:end_coordinate int32}, ${2:_type int16}, ${3:uid int32}, ${4:server_id T_server_id})
endsnippet

snippet GetWithLocal "GetWithLocal(local string, key string, args ...interface{})"
GetWithLocal( ${1:local string}, ${2:key string}, ${3:args ...interface{}})
endsnippet

snippet GetWithName "GetWithName(name string)"
GetWithName( ${1:name string})
endsnippet

snippet GetWithScope "GetWithScope(scope []int32)"
GetWithScope( ${1:scope []int32})
endsnippet

snippet GetWithScopeAndType "GetWithScopeAndType(scope []int32, _type int16, server_id T_server_id)"
GetWithScopeAndType( ${1:scope []int32}, ${2:_type int16}, ${3:server_id T_server_id})
endsnippet

snippet GetWithUid "GetWithUid(uid int32)"
GetWithUid( ${1:uid int32})
endsnippet

snippet GetWithUidAndType "GetWithUidAndType(uid int32, _type int16)"
GetWithUidAndType( ${1:uid int32}, ${2:_type int16})
endsnippet

snippet Getfilecon "Getfilecon(path string)"
Getfilecon( ${1:path string})
endsnippet

snippet Getlist "Getlist(rank_name string, A, B int)"
Getlist( ${1:rank_name string}, ${2:A}, ${3:B int})
endsnippet

snippet Getpidcon "Getpidcon(pid int)"
Getpidcon( ${1:pid int})
endsnippet

snippet Getsize "Getsize(t *os.File)"
Getsize( ${1:t *os.File})
endsnippet

snippet Getxattr "Getxattr(path, attr string)"
Getxattr( ${1:path}, ${2:attr string})
endsnippet

snippet Gint32 "Gint32(buf []byte)"
Gint32( ${1:buf []byte})
endsnippet

snippet Go "Go(f func()"
Go( ${1:f func(})
endsnippet

snippet GotoBasedSwitch "GotoBasedSwitch(x int)"
GotoBasedSwitch( ${1:x int})
endsnippet

snippet GraphVisitEdges "GraphVisitEdges(g *Graph, edge func(*Edge)"
GraphVisitEdges( ${1:g *Graph}, ${2:edge func(*Edge})
endsnippet

snippet HTTPRequestFactory "HTTPRequestFactory(metaHeaders map[string][]string)"
HTTPRequestFactory( ${1:metaHeaders map[string][]string})
endsnippet

snippet HackPingDelay "HackPingDelay(newDelay time.Duration)"
HackPingDelay( ${1:newDelay time.Duration})
endsnippet

snippet HackSocketsPerServer "HackSocketsPerServer(newLimit int)"
HackSocketsPerServer( ${1:newLimit int})
endsnippet

snippet HackSyncSocketTimeout "HackSyncSocketTimeout(newTimeout time.Duration)"
HackSyncSocketTimeout( ${1:newTimeout time.Duration})
endsnippet

snippet Handler "Handler(target string)"
Handler( ${1:target string})
endsnippet

snippet HasEnclosingFunction "HasEnclosingFunction(pkg *Package, path []ast.Node)"
HasEnclosingFunction( ${1:pkg *Package}, ${2:path []ast.Node})
endsnippet

snippet HasPrefix "HasPrefix(name string, prefixes []string)"
HasPrefix( ${1:name string}, ${2:prefixes []string})
endsnippet

snippet HashData "HashData(src io.Reader)"
HashData( ${1:src io.Reader})
endsnippet

snippet HeaderIs "HeaderIs(t *testing.T, r *httptest.ResponseRecorder, headerKey, expectedValue string)"
HeaderIs( ${1:t *testing.T}, ${2:r *httptest.ResponseRecorder}, ${3:headerKey}, ${4:expectedValue string})
endsnippet

snippet HelloServer "HelloServer(w http.ResponseWriter, req *http.Request)"
HelloServer( ${1:w http.ResponseWriter}, ${2:req *http.Request})
endsnippet

snippet HeroResetPower "HeroResetPower(user *User, _hero *hero.Hero)"
HeroResetPower( ${1:user *User}, ${2:_hero *hero.Hero})
endsnippet

snippet HireHero "HireHero(user *User, new_hero *hero.Hero)"
HireHero( ${1:user *User}, ${2:new_hero *hero.Hero})
endsnippet

snippet HostListVar "HostListVar(values *[]string, names []string, usage string)"
HostListVar( ${1:values *[]string}, ${2:names []string}, ${3:usage string})
endsnippet

snippet HttpGet "HttpGet(client *http.Client, url string, header http.Header)"
HttpGet( ${1:client *http.Client}, ${2:url string}, ${3:header http.Header})
endsnippet

snippet HttpGetBytes "HttpGetBytes(client *http.Client, url string, header http.Header)"
HttpGetBytes( ${1:client *http.Client}, ${2:url string}, ${3:header http.Header})
endsnippet

snippet HttpGetJSON "HttpGetJSON(client *http.Client, url string, v interface{})"
HttpGetJSON( ${1:client *http.Client}, ${2:url string}, ${3:v interface{}})
endsnippet

snippet HumanDuration "HumanDuration(d time.Duration)"
HumanDuration( ${1:d time.Duration})
endsnippet

snippet HumanSize "HumanSize(size float64)"
HumanSize( ${1:size float64})
endsnippet

snippet INFO "INFO(v ...interface{})"
INFO( ${1:v ...interface{}})
endsnippet

snippet IPBanned "IPBanned(_ip net.IP)"
IPBanned( ${1:_ip net.IP})
endsnippet

snippet IPCRequestProxy "IPCRequestProxy(sess *Session, p *IPCObject)"
IPCRequestProxy( ${1:sess *Session}, ${2:p *IPCObject})
endsnippet

snippet IPC_chat "IPC_chat(sess *Session, obj *IPCObject)"
IPC_chat( ${1:sess *Session}, ${2:obj *IPCObject})
endsnippet

snippet IPC_notification "IPC_notification(sess *Session, obj *IPCObject)"
IPC_notification( ${1:sess *Session}, ${2:obj *IPCObject})
endsnippet

snippet IPC_ping "IPC_ping(sess *Session, obj *IPCObject)"
IPC_ping( ${1:sess *Session}, ${2:obj *IPCObject})
endsnippet

snippet IPC_worldchat "IPC_worldchat(sess *Session, obj *IPCObject)"
IPC_worldchat( ${1:sess *Session}, ${2:obj *IPCObject})
endsnippet

snippet IPListVar "IPListVar(values *[]string, names []string, usage string)"
IPListVar( ${1:values *[]string}, ${2:names []string}, ${3:usage string})
endsnippet

snippet IPVar "IPVar(value *net.IP, names []string, defaultValue, usage string)"
IPVar( ${1:value *net.IP}, ${2:names []string}, ${3:defaultValue}, ${4:usage string})
endsnippet

snippet IPv6PseudoHeader "IPv6PseudoHeader(src, dst net.IP)"
IPv6PseudoHeader( ${1:src}, ${2:dst net.IP})
endsnippet

snippet Id "Id(pkg *Package, name string)"
Id( ${1:pkg *Package}, ${2:name string})
endsnippet

snippet IdToCoordinate "IdToCoordinate(index int32)"
IdToCoordinate( ${1:index int32})
endsnippet

snippet Identical "Identical(x, y Type)"
Identical( ${1:x}, ${2:y Type})
endsnippet

snippet IfElseBasedSwitch "IfElseBasedSwitch(x int)"
IfElseBasedSwitch( ${1:x int})
endsnippet

snippet Imag "Imag(x Value)"
Imag( ${1:x Value})
endsnippet

snippet ImageOf "ImageOf(it Item)"
ImageOf( ${1:it Item})
endsnippet

snippet Implements "Implements(V Type, T *Interface)"
Implements( ${1:V Type}, ${2:T *Interface})
endsnippet

snippet ImplicitSwitches "ImplicitSwitches(x, y int)"
ImplicitSwitches( ${1:x}, ${2:y int})
endsnippet

snippet Import "Import(imports map[string]*types.Package, path string)"
Import( ${1:imports map[string]*types.Package}, ${2:path string})
endsnippet

snippet ImportData "ImportData(imports map[string]*types.Package, filename, id string, data io.Reader)"
ImportData( ${1:imports map[string]*types.Package}, ${2:filename}, ${3:id string}, ${4:data io.Reader})
endsnippet

snippet ImportPathToName "ImportPathToName(p string)"
ImportPathToName( ${1:p string})
endsnippet

snippet Imports "Imports(fset *token.FileSet, f *ast.File)"
Imports( ${1:fset *token.FileSet}, ${2:f *ast.File})
endsnippet

snippet IndexByte "IndexByte(s []byte, c byte)"
IndexByte( ${1:s []byte}, ${2:c byte})
endsnippet

snippet Indirect "Indirect(v Value)"
Indirect( ${1:v Value})
endsnippet

snippet Info "Info(args ...interface{})"
Info( ${1:args ...interface{}})
endsnippet

snippet Infof "Infof(format string, args ...interface{})"
Infof( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet Infoln "Infoln(args ...interface{})"
Infoln( ${1:args ...interface{}})
endsnippet

snippet Init "Init(errch chan<- error, fontname, label, winsize string)"
Init( ${1:errch chan<- error}, ${2:fontname}, ${3:label}, ${4:winsize string})
endsnippet

snippet InitCityHeroSkillBuff "InitCityHeroSkillBuff(user *User, city *City)"
InitCityHeroSkillBuff( ${1:user *User}, ${2:city *City})
endsnippet

snippet InitCityResourceStatus "InitCityResourceStatus(user *User, alliance *Alliance)"
InitCityResourceStatus( ${1:user *User}, ${2:alliance *Alliance})
endsnippet

snippet InitDriver "InitDriver(job *engine.Job)"
InitDriver( ${1:job *engine.Job})
endsnippet

snippet InitFluent "InitFluent(fluent_addr string)"
InitFluent( ${1:fluent_addr string})
endsnippet

snippet InitHeroSkillBuff "InitHeroSkillBuff(user *User)"
InitHeroSkillBuff( ${1:user *User})
endsnippet

snippet InitLabels "InitLabels(options []string)"
InitLabels( ${1:options []string})
endsnippet

snippet InitRread "InitRread(fc *Fcall, count uint32)"
InitRread( ${1:fc *Fcall}, ${2:count uint32})
endsnippet

snippet InitUserAllMoveEvents "InitUserAllMoveEvents(user *User)"
InitUserAllMoveEvents( ${1:user *User})
endsnippet

snippet InitUserCityBeAttackedEvent "InitUserCityBeAttackedEvent(user *User)"
InitUserCityBeAttackedEvent( ${1:user *User})
endsnippet

snippet InitUserHeroBeAttackedEvent "InitUserHeroBeAttackedEvent(user *User)"
InitUserHeroBeAttackedEvent( ${1:user *User})
endsnippet

snippet InitUserMoveEvents "InitUserMoveEvents(user *User)"
InitUserMoveEvents( ${1:user *User})
endsnippet

snippet InitUserVillageBeAttackedEvent "InitUserVillageBeAttackedEvent(user *User)"
InitUserVillageBeAttackedEvent( ${1:user *User})
endsnippet

snippet InitUserVillageEvents "InitUserVillageEvents(user *User)"
InitUserVillageEvents( ${1:user *User})
endsnippet

snippet InitializeMountNamespace "InitializeMountNamespace(rootfs, console string, sysReadonly bool, mountConfig *MountConfig)"
InitializeMountNamespace( ${1:rootfs}, ${2:console string}, ${3:sysReadonly bool}, ${4:mountConfig *MountConfig})
endsnippet

snippet InitializeNetworking "InitializeNetworking(container *libcontainer.Config, nspid int, networkState *network.NetworkState)"
InitializeNetworking( ${1:container *libcontainer.Config}, ${2:nspid int}, ${3:networkState *network.NetworkState})
endsnippet

snippet Inspect "Inspect(node Node, f func(Node)"
Inspect( ${1:node Node}, ${2:f func(Node})
endsnippet

snippet Int "Int(names []string, value int, usage string)"
Int( ${1:names []string}, ${2:value int}, ${3:usage string})
endsnippet

snippet Int32 "Int32(param interface{})"
Int32( ${1:param interface{}})
endsnippet

snippet Int64 "Int64(names []string, value int64, usage string)"
Int64( ${1:names []string}, ${2:value int64}, ${3:usage string})
endsnippet

snippet Int64Val "Int64Val(x Value)"
Int64Val( ${1:x Value})
endsnippet

snippet Int64Var "Int64Var(p *int64, names []string, value int64, usage string)"
Int64Var( ${1:p *int64}, ${2:names []string}, ${3:value int64}, ${4:usage string})
endsnippet

snippet IntCosSin "IntCosSin(deg int)"
IntCosSin( ${1:deg int})
endsnippet

snippet IntCosSin2 "IntCosSin2(x, y int)"
IntCosSin2( ${1:x}, ${2:y int})
endsnippet

snippet IntToMcs "IntToMcs(id int, catRange uint32)"
IntToMcs( ${1:id int}, ${2:catRange uint32})
endsnippet

snippet IntVar "IntVar(p *int, names []string, value int, usage string)"
IntVar( ${1:p *int}, ${2:names []string}, ${3:value int}, ${4:usage string})
endsnippet

snippet Interact "Interact(interactions []Interactor)"
Interact( ${1:interactions []Interactor})
endsnippet

snippet InterfaceDown "InterfaceDown(name string)"
InterfaceDown( ${1:name string})
endsnippet

snippet InterfaceOf "InterfaceOf(value interface{})"
InterfaceOf( ${1:value interface{}})
endsnippet

snippet InterfaceUp "InterfaceUp(name string)"
InterfaceUp( ${1:name string})
endsnippet

snippet Interpret "Interpret(mainpkg *ssa.Package, mode Mode, sizes types.Sizes, filename string, args []string)"
Interpret( ${1:mainpkg *ssa.Package}, ${2:mode Mode}, ${3:sizes types.Sizes}, ${4:filename string}, ${5:args []string})
endsnippet

snippet Ints "Ints(a []int)"
Ints( ${1:a []int})
endsnippet

snippet IntuitiveMethodSet "IntuitiveMethodSet(T types.Type, msets *types.MethodSetCache)"
IntuitiveMethodSet( ${1:T types.Type}, ${2:msets *types.MethodSetCache})
endsnippet

snippet Ioctl "Ioctl(fd uintptr, flag, data uintptr)"
Ioctl( ${1:fd uintptr}, ${2:flag}, ${3:data uintptr})
endsnippet

snippet Is "Is(err error)"
Is( ${1:err error})
endsnippet

snippet IsAbsPath "IsAbsPath(ctxt *build.Context, path string)"
IsAbsPath( ${1:ctxt *build.Context}, ${2:path string})
endsnippet

snippet IsActive "IsActive(activity_type int32)"
IsActive( ${1:activity_type int32})
endsnippet

snippet IsAllianceQuestLevelUp "IsAllianceQuestLevelUp(level T_level, exp int32)"
IsAllianceQuestLevelUp( ${1:level T_level}, ${2:exp int32})
endsnippet

snippet IsAllianceTechnologyExists "IsAllianceTechnologyExists(technology_type string)"
IsAllianceTechnologyExists( ${1:technology_type string})
endsnippet

snippet IsAmbiguousWidth "IsAmbiguousWidth(r rune)"
IsAmbiguousWidth( ${1:r rune})
endsnippet

snippet IsArchive "IsArchive(header []byte)"
IsArchive( ${1:header []byte})
endsnippet

snippet IsArmyHaveSoldier "IsArmyHaveSoldier(army *ArmyInfo)"
IsArmyHaveSoldier( ${1:army *ArmyInfo})
endsnippet

snippet IsBarracksSoldier "IsBarracksSoldier(soldier_type string)"
IsBarracksSoldier( ${1:soldier_type string})
endsnippet

snippet IsBuffItem "IsBuffItem(key string)"
IsBuffItem( ${1:key string})
endsnippet

snippet IsBuildingCan585 "IsBuildingCan585(_building *building.Building, now int64)"
IsBuildingCan585( ${1:_building *building.Building}, ${2:now int64})
endsnippet

snippet IsBuildingExists "IsBuildingExists(city *City, building_type string)"
IsBuildingExists( ${1:city *City}, ${2:building_type string})
endsnippet

snippet IsBuildingReachTheLevel "IsBuildingReachTheLevel(city *City, building_type string, level T_level)"
IsBuildingReachTheLevel( ${1:city *City}, ${2:building_type string}, ${3:level T_level})
endsnippet

snippet IsBuildingUnlock "IsBuildingUnlock(city *City, building_type string, level int32)"
IsBuildingUnlock( ${1:city *City}, ${2:building_type string}, ${3:level int32})
endsnippet

snippet IsCanSellResourceName "IsCanSellResourceName(resource_name string)"
IsCanSellResourceName( ${1:resource_name string})
endsnippet

snippet IsChangeHeroConfigSoldiersEnough "IsChangeHeroConfigSoldiersEnough(user *User, old_hero_soldiers map[string]int32, soldiers map[string]int32)"
IsChangeHeroConfigSoldiersEnough( ${1:user *User}, ${2:old_hero_soldiers map[string]int32}, ${3:soldiers map[string]int32})
endsnippet

snippet IsCityChangeHeroDefenseSoldiersEnough "IsCityChangeHeroDefenseSoldiersEnough(user *User, old_hero_soldiers map[string]int32, soldiers map[string]int32)"
IsCityChangeHeroDefenseSoldiersEnough( ${1:user *User}, ${2:old_hero_soldiers map[string]int32}, ${3:soldiers map[string]int32})
endsnippet

snippet IsCityExists "IsCityExists(user *User, city_id int16)"
IsCityExists( ${1:user *User}, ${2:city_id int16})
endsnippet

snippet IsCityShrineLevelUp "IsCityShrineLevelUp(level T_level, max_level T_level, exp int32)"
IsCityShrineLevelUp( ${1:level T_level}, ${2:max_level T_level}, ${3:exp int32})
endsnippet

snippet IsCityTechnologyExists "IsCityTechnologyExists(city *City, technology_type string)"
IsCityTechnologyExists( ${1:city *City}, ${2:technology_type string})
endsnippet

snippet IsConfigWokerBuilding "IsConfigWokerBuilding(building_type string)"
IsConfigWokerBuilding( ${1:building_type string})
endsnippet

snippet IsCoordinateInMap "IsCoordinateInMap(x, y T_coordinate)"
IsCoordinateInMap( ${1:x}, ${2:y T_coordinate})
endsnippet

snippet IsDailyQuestLevelUp "IsDailyQuestLevelUp(level T_level, exp int32)"
IsDailyQuestLevelUp( ${1:level T_level}, ${2:exp int32})
endsnippet

snippet IsDir "IsDir(dir string)"
IsDir( ${1:dir string})
endsnippet

snippet IsDup "IsDup(err error)"
IsDup( ${1:err error})
endsnippet

snippet IsEntry "IsEntry(name string, entries []string)"
IsEntry( ${1:name string}, ${2:entries []string})
endsnippet

snippet IsExist "IsExist(path string)"
IsExist( ${1:path string})
endsnippet

snippet IsExists "IsExists(key string)"
IsExists( ${1:key string})
endsnippet

snippet IsExported "IsExported(name string)"
IsExported( ${1:name string})
endsnippet

snippet IsFieldExists "IsFieldExists(tblname string, fieldname string)"
IsFieldExists( ${1:tblname string}, ${2:fieldname string})
endsnippet

snippet IsFile "IsFile(filePath string)"
IsFile( ${1:filePath string})
endsnippet

snippet IsFilter "IsFilter(name string)"
IsFilter( ${1:name string})
endsnippet

snippet IsGitTransport "IsGitTransport(str string)"
IsGitTransport( ${1:str string})
endsnippet

snippet IsGitURL "IsGitURL(str string)"
IsGitURL( ${1:str string})
endsnippet

snippet IsGoRepoPath "IsGoRepoPath(name string)"
IsGoRepoPath( ${1:name string})
endsnippet

snippet IsHaveRoleHero "IsHaveRoleHero(user *User)"
IsHaveRoleHero( ${1:user *User})
endsnippet

snippet IsHeroHaveSoldier "IsHeroHaveSoldier(hero *hero.Hero)"
IsHeroHaveSoldier( ${1:hero *hero.Hero})
endsnippet

snippet IsHeroInList "IsHeroInList(city *City, order int32)"
IsHeroInList( ${1:city *City}, ${2:order int32})
endsnippet

snippet IsMulticastCapable "IsMulticastCapable(network string, ifi *net.Interface)"
IsMulticastCapable( ${1:network string}, ${2:ifi *net.Interface})
endsnippet

snippet IsNonUniqueNameError "IsNonUniqueNameError(err error)"
IsNonUniqueNameError( ${1:err error})
endsnippet

snippet IsNormalItem "IsNormalItem(key string)"
IsNormalItem( ${1:key string})
endsnippet

snippet IsNotFound "IsNotFound(err error)"
IsNotFound( ${1:err error})
endsnippet

snippet IsObjectIdHex "IsObjectIdHex(s string)"
IsObjectIdHex( ${1:s string})
endsnippet

snippet IsResourceBuilding "IsResourceBuilding(building_type string)"
IsResourceBuilding( ${1:building_type string})
endsnippet

snippet IsResourceEnough "IsResourceEnough(user *User, city *City, now int64, resource_map map[string]int32)"
IsResourceEnough( ${1:user *User}, ${2:city *City}, ${3:now int64}, ${4:resource_map map[string]int32})
endsnippet

snippet IsResourceName "IsResourceName(resource_name string)"
IsResourceName( ${1:resource_name string})
endsnippet

snippet IsResourceTech "IsResourceTech(tech_type string)"
IsResourceTech( ${1:tech_type string})
endsnippet

snippet IsRowExists "IsRowExists(tblname, rowname string)"
IsRowExists( ${1:tblname}, ${2:rowname string})
endsnippet

snippet IsSellUnitPriceInRange "IsSellUnitPriceInRange(price float32, resource_name string)"
IsSellUnitPriceInRange( ${1:price float32}, ${2:resource_name string})
endsnippet

snippet IsSet "IsSet(name string)"
IsSet( ${1:name string})
endsnippet

snippet IsSliceContainsStr "IsSliceContainsStr(sl []string, str string)"
IsSliceContainsStr( ${1:sl []string}, ${2:str string})
endsnippet

snippet IsSoldierExists "IsSoldierExists(soldier_type string)"
IsSoldierExists( ${1:soldier_type string})
endsnippet

snippet IsTechLimitBuilding "IsTechLimitBuilding(user *User, alliance *Alliance, city *City, building *building.Building)"
IsTechLimitBuilding( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:building *building.Building})
endsnippet

snippet IsTechLimitRecruitSoldier "IsTechLimitRecruitSoldier(user *User, city *City, soldier_type string, soldier_count int32)"
IsTechLimitRecruitSoldier( ${1:user *User}, ${2:city *City}, ${3:soldier_type string}, ${4:soldier_count int32})
endsnippet

snippet IsTechLimitRecruitWallSoldier "IsTechLimitRecruitWallSoldier(user *User, city *City, soldier_type string, soldier_count int32)"
IsTechLimitRecruitWallSoldier( ${1:user *User}, ${2:city *City}, ${3:soldier_type string}, ${4:soldier_count int32})
endsnippet

snippet IsTechReachTheLevel "IsTechReachTheLevel(city *City, tech_type string, level T_level)"
IsTechReachTheLevel( ${1:city *City}, ${2:tech_type string}, ${3:level T_level})
endsnippet

snippet IsTechUnlocked "IsTechUnlocked(city *City, tech_type string, level T_level)"
IsTechUnlocked( ${1:city *City}, ${2:tech_type string}, ${3:level T_level})
endsnippet

snippet IsTechnologyExists "IsTechnologyExists(technology_type string)"
IsTechnologyExists( ${1:technology_type string})
endsnippet

snippet IsTerminal "IsTerminal(fd uintptr)"
IsTerminal( ${1:fd uintptr})
endsnippet

snippet IsText "IsText(s []byte)"
IsText( ${1:s []byte})
endsnippet

snippet IsTextFile "IsTextFile(fs vfs.Opener, filename string)"
IsTextFile( ${1:fs vfs.Opener}, ${2:filename string})
endsnippet

snippet IsType "IsType(t interface{})"
IsType( ${1:t interface{}})
endsnippet

snippet IsURL "IsURL(str string)"
IsURL( ${1:str string})
endsnippet

snippet IsUpgradable "IsUpgradable(level int32, exp int32)"
IsUpgradable( ${1:level int32}, ${2:exp int32})
endsnippet

snippet IsUserHaveSoldiers "IsUserHaveSoldiers(user *User, soldiers map[string]int32)"
IsUserHaveSoldiers( ${1:user *User}, ${2:soldiers map[string]int32})
endsnippet

snippet IsUserLevelLimitBuilding "IsUserLevelLimitBuilding(city *City, building_type string, level T_level)"
IsUserLevelLimitBuilding( ${1:city *City}, ${2:building_type string}, ${3:level T_level})
endsnippet

snippet IsUserLevelUp "IsUserLevelUp(level T_level, max_level T_level, exp int32)"
IsUserLevelUp( ${1:level T_level}, ${2:max_level T_level}, ${3:exp int32})
endsnippet

snippet IsValidBuildingType "IsValidBuildingType(building_type string)"
IsValidBuildingType( ${1:building_type string})
endsnippet

snippet IsValidRemotePath "IsValidRemotePath(importPath string)"
IsValidRemotePath( ${1:importPath string})
endsnippet

snippet IsWallSoldierExists "IsWallSoldierExists(soldier_type string)"
IsWallSoldierExists( ${1:soldier_type string})
endsnippet

snippet Iter "Iter(r io.Reader, maxSize int, fn func(line []byte)"
Iter( ${1:r io.Reader}, ${2:maxSize int}, ${3:fn func(line []byte})
endsnippet

snippet JoinPath "JoinPath(ctxt *build.Context, path ...string)"
JoinPath( ${1:ctxt *build.Context}, ${2:path ...string})
endsnippet

snippet Json "Json(jsonStruct interface{}, ifacePtr ...interface{})"
Json( ${1:jsonStruct interface{}}, ${2:ifacePtr ...interface{}})
endsnippet

snippet JsonRpcServer "JsonRpcServer(w http.ResponseWriter, req *http.Request)"
JsonRpcServer( ${1:w http.ResponseWriter}, ${2:req *http.Request})
endsnippet

snippet JsonToMap "JsonToMap(data []byte)"
JsonToMap( ${1:data []byte})
endsnippet

snippet KeyIsExsit "KeyIsExsit(table string, key string, value string)"
KeyIsExsit( ${1:table string}, ${2:key string}, ${3:value string})
endsnippet

snippet Kill "Kill(pid int, sig Signal)"
Kill( ${1:pid int}, ${2:sig Signal})
endsnippet

snippet KillLxc "KillLxc(id string, sig int)"
KillLxc( ${1:id string}, ${2:sig int})
endsnippet

snippet LOG_ADD_SOLDIER "LOG_ADD_SOLDIER(uid int32, server_id int32, source string, category string, soldier_type string, soldier_num int32)"
LOG_ADD_SOLDIER( ${1:uid int32}, ${2:server_id int32}, ${3:source string}, ${4:category string}, ${5:soldier_type string}, ${6:soldier_num int32})
endsnippet

snippet LOG_BATTLE "LOG_BATTLE(att_uid int32, def_uid int32, server_id int32, source string, battle_result int32, soldier_info map[string]int32)"
LOG_BATTLE( ${1:att_uid int32}, ${2:def_uid int32}, ${3:server_id int32}, ${4:source string}, ${5:battle_result int32}, ${6:soldier_info map[string]int32})
endsnippet

snippet LOG_GEM "LOG_GEM(uid int32, server_id int32, source string, category string, num int32)"
LOG_GEM( ${1:uid int32}, ${2:server_id int32}, ${3:source string}, ${4:category string}, ${5:num int32})
endsnippet

snippet LOG_LOGIN "LOG_LOGIN(uid int32, server_id int32, login_time time.Time, logout_time time.Time)"
LOG_LOGIN( ${1:uid int32}, ${2:server_id int32}, ${3:login_time time.Time}, ${4:logout_time time.Time})
endsnippet

snippet LOG_RESOURCE "LOG_RESOURCE(uid int32, server_id int32, source string, category string, resource map[string]int32)"
LOG_RESOURCE( ${1:uid int32}, ${2:server_id int32}, ${3:source string}, ${4:category string}, ${5:resource map[string]int32})
endsnippet

snippet LUtimesNano "LUtimesNano(path string, ts []syscall.Timespec)"
LUtimesNano( ${1:path string}, ${2:ts []syscall.Timespec})
endsnippet

snippet LabelListVar "LabelListVar(values *[]string, names []string, usage string)"
LabelListVar( ${1:values *[]string}, ${2:names []string}, ${3:usage string})
endsnippet

snippet LabelString "LabelString(*types.Package, Label)"
LabelString( ${1:*types.Package}, ${2:Label})
endsnippet

snippet LayoutConverter "LayoutConverter(input Widget, layout int)"
LayoutConverter( ${1:input Widget}, ${2:layout int})
endsnippet

snippet Len "Len(rank_name string)"
Len( ${1:rank_name string})
endsnippet

snippet LetSoldierDie "LetSoldierDie(user, soldier_type string, soldier_num int32)"
LetSoldierDie( ${1:user}, ${2:soldier_type string}, ${3:soldier_num int32})
endsnippet

snippet Level "Level(level float32, rate int)"
Level( ${1:level float32}, ${2:rate int})
endsnippet

snippet LevelUpBuildingQuest "LevelUpBuildingQuest(user *User, building_name string, level T_level)"
LevelUpBuildingQuest( ${1:user *User}, ${2:building_name string}, ${3:level T_level})
endsnippet

snippet LevelUpHeroQuest "LevelUpHeroQuest(user *User, level T_level)"
LevelUpHeroQuest( ${1:user *User}, ${2:level T_level})
endsnippet

snippet LevelUpTechQuest "LevelUpTechQuest(user *User, tech_name string, level T_level)"
LevelUpTechQuest( ${1:user *User}, ${2:tech_name string}, ${3:level T_level})
endsnippet

snippet LevelUpUserQuest "LevelUpUserQuest(user *User)"
LevelUpUserQuest( ${1:user *User})
endsnippet

snippet Lgetxattr "Lgetxattr(path string, attr string)"
Lgetxattr( ${1:path string}, ${2:attr string})
endsnippet

snippet LimitListener "LimitListener(l net.Listener, n int)"
LimitListener( ${1:l net.Listener}, ${2:n int})
endsnippet

snippet LinkContainers "LinkContainers(job *engine.Job)"
LinkContainers( ${1:job *engine.Job})
endsnippet

snippet Linkify "Linkify(out io.Writer, src []byte)"
Linkify( ${1:out io.Writer}, ${2:src []byte})
endsnippet

snippet LinkifyText "LinkifyText(w io.Writer, text []byte, n ast.Node)"
LinkifyText( ${1:w io.Writer}, ${2:text []byte}, ${3:n ast.Node})
endsnippet

snippet List "List(param interface{})"
List( ${1:param interface{}})
endsnippet

snippet ListI32 "ListI32(param interface{})"
ListI32( ${1:param interface{}})
endsnippet

snippet ListImports "ListImports(importPath, rootPath, vendorPath, srcPath string, isTest bool)"
ListImports( ${1:importPath}, ${2:rootPath}, ${3:vendorPath}, ${4:srcPath string}, ${5:isTest bool})
endsnippet

snippet ListTar "ListTar(f io.Reader)"
ListTar( ${1:f io.Reader})
endsnippet

snippet ListVar "ListVar(values *[]string, names []string, usage string)"
ListVar( ${1:values *[]string}, ${2:names []string}, ${3:usage string})
endsnippet

snippet Listen "Listen(port int)"
Listen( ${1:port int})
endsnippet

snippet ListenFD "ListenFD(addr string)"
ListenFD( ${1:addr string})
endsnippet

snippet ListenOpts "ListenOpts(netw, laddr string, inOpts, outOpts Options)"
ListenOpts( ${1:netw}, ${2:laddr string}, ${3:inOpts}, ${4:outOpts Options})
endsnippet

snippet ListenPacket "ListenPacket(network, address string)"
ListenPacket( ${1:network}, ${2:address string})
endsnippet

snippet Listeners "Listeners(unsetEnv bool)"
Listeners( ${1:unsetEnv bool})
endsnippet

snippet Listxattr "Listxattr(path string)"
Listxattr( ${1:path string})
endsnippet

snippet Llistxattr "Llistxattr(path string, dest []byte)"
Llistxattr( ${1:path string}, ${2:dest []byte})
endsnippet

snippet Load "Load(id int32)"
Load( ${1:id int32})
endsnippet

snippet LoadAllianceWithId "LoadAllianceWithId(alliance_id int32)"
LoadAllianceWithId( ${1:alliance_id int32})
endsnippet

snippet LoadAreaFromDb "LoadAreaFromDb(x, y T_coordinate)"
LoadAreaFromDb( ${1:x}, ${2:y T_coordinate})
endsnippet

snippet LoadCertificateBundle "LoadCertificateBundle(filename string)"
LoadCertificateBundle( ${1:filename string})
endsnippet

snippet LoadCertificatePool "LoadCertificatePool(filename string)"
LoadCertificatePool( ${1:filename string})
endsnippet

snippet LoadChangeMap "LoadChangeMap(filename string)"
LoadChangeMap( ${1:filename string})
endsnippet

snippet LoadConfig "LoadConfig(rootPath string)"
LoadConfig( ${1:rootPath string})
endsnippet

snippet LoadConfigFile "LoadConfigFile(fileName string, moreFiles ...string)"
LoadConfigFile( ${1:fileName string}, ${2:moreFiles ...string})
endsnippet

snippet LoadContainerEnvironment "LoadContainerEnvironment(container *libcontainer.Config)"
LoadContainerEnvironment( ${1:container *libcontainer.Config})
endsnippet

snippet LoadDbCreateAllianceMemeory "LoadDbCreateAllianceMemeory(alliance_id int32)"
LoadDbCreateAllianceMemeory( ${1:alliance_id int32})
endsnippet

snippet LoadDbCreateUser "LoadDbCreateUser(user_id int32)"
LoadDbCreateUser( ${1:user_id int32})
endsnippet

snippet LoadEvent "LoadEvent(event Event)"
LoadEvent( ${1:event Event})
endsnippet

snippet LoadFromData "LoadFromData(data []byte)"
LoadFromData( ${1:data []byte})
endsnippet

snippet LoadGopmfile "LoadGopmfile(fileName string)"
LoadGopmfile( ${1:fileName string})
endsnippet

snippet LoadIPCObjects "LoadIPCObjects(user_id int32, MQ chan IPCObject)"
LoadIPCObjects( ${1:user_id int32}, ${2:MQ chan IPCObject})
endsnippet

snippet LoadImage "LoadImage(root string)"
LoadImage( ${1:root string})
endsnippet

snippet LoadJSON "LoadJSON(filename string)"
LoadJSON( ${1:filename string})
endsnippet

snippet LoadKeyFile "LoadKeyFile(filename string)"
LoadKeyFile( ${1:filename string})
endsnippet

snippet LoadKeySetFile "LoadKeySetFile(filename string)"
LoadKeySetFile( ${1:filename string})
endsnippet

snippet LoadMailWithId "LoadMailWithId(mail_id int32)"
LoadMailWithId( ${1:mail_id int32})
endsnippet

snippet LoadManual "LoadManual(version string, funcname string)"
LoadManual( ${1:version string}, ${2:funcname string})
endsnippet

snippet LoadOrCreateTrustKey "LoadOrCreateTrustKey(trustKeyPath string)"
LoadOrCreateTrustKey( ${1:trustKeyPath string})
endsnippet

snippet LoadPublicKeyFile "LoadPublicKeyFile(filename string)"
LoadPublicKeyFile( ${1:filename string})
endsnippet

snippet LoadStatement "LoadStatement(r io.Reader, authority *x509.CertPool)"
LoadStatement( ${1:r io.Reader}, ${2:authority *x509.CertPool})
endsnippet

snippet LockPidFile "LockPidFile(path string, perm os.FileMode)"
LockPidFile( ${1:path string}, ${2:perm os.FileMode})
endsnippet

snippet LogAndAssertJSON "LogAndAssertJSON(t *testing.T, log func(*Logger)"
LogAndAssertJSON( ${1:t *testing.T}, ${2:log func(*Logger})
endsnippet

snippet LogAndAssertText "LogAndAssertText(t *testing.T, log func(*Logger)"
LogAndAssertText( ${1:t *testing.T}, ${2:log func(*Logger})
endsnippet

snippet LogInit "LogInit(logger DevmapperLogger)"
LogInit( ${1:logger DevmapperLogger})
endsnippet

snippet LogInitVerbose "LogInitVerbose(level int)"
LogInitVerbose( ${1:level int})
endsnippet

snippet Login "Login(authConfig *AuthConfig, factory *utils.HTTPRequestFactory)"
Login( ${1:authConfig *AuthConfig}, ${2:factory *utils.HTTPRequestFactory})
endsnippet

snippet LoginMac "LoginMac(mac string)"
LoginMac( ${1:mac string})
endsnippet

snippet LoginUserId "LoginUserId(user_id int32)"
LoginUserId( ${1:user_id int32})
endsnippet

snippet Lookup "Lookup(s []byte)"
Lookup( ${1:s []byte})
endsnippet

snippet LookupFieldOrMethod "LookupFieldOrMethod(T Type, addressable bool, pkg *Package, name string)"
LookupFieldOrMethod( ${1:T Type}, ${2:addressable bool}, ${3:pkg *Package}, ${4:name string})
endsnippet

snippet LookupGid "LookupGid(gid int)"
LookupGid( ${1:gid int})
endsnippet

snippet LookupGroup "LookupGroup(groupname string)"
LookupGroup( ${1:groupname string})
endsnippet

snippet LookupUid "LookupUid(uid int)"
LookupUid( ${1:uid int})
endsnippet

snippet LookupUser "LookupUser(username string)"
LookupUser( ${1:username string})
endsnippet

snippet LoopbackSetCapacity "LoopbackSetCapacity(file *os.File)"
LoopbackSetCapacity( ${1:file *os.File})
endsnippet

snippet Lsetxattr "Lsetxattr(path string, attr string, data []byte, flags int)"
Lsetxattr( ${1:path string}, ${2:attr string}, ${3:data []byte}, ${4:flags int})
endsnippet

snippet Lstat "Lstat(name string, stat *Stat_t)"
Lstat( ${1:name string}, ${2:stat *Stat_t})
endsnippet

snippet M "M(n *Node)"
M( ${1:n *Node})
endsnippet

snippet M_P_cancel_occupy_village "M_P_cancel_occupy_village(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_cancel_occupy_village( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet M_P_clean_user_data "M_P_clean_user_data(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_clean_user_data( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet M_P_end_move_obj "M_P_end_move_obj(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_end_move_obj( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet M_P_flush_npc "M_P_flush_npc(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_flush_npc( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet M_P_flush_village "M_P_flush_village(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_flush_village( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet M_P_move_city "M_P_move_city(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_move_city( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet M_P_obj_tp "M_P_obj_tp(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_obj_tp( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet M_P_occupy_village_done "M_P_occupy_village_done(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_occupy_village_done( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet M_P_set_to_city "M_P_set_to_city(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_set_to_city( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet M_P_set_to_empty "M_P_set_to_empty(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_set_to_empty( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet M_P_start_move_obj "M_P_start_move_obj(uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
M_P_start_move_obj( ${1:uid int32}, ${2:from_x}, ${3:from_y}, ${4:to_x}, ${5:to_y T_coordinate}, ${6:data interface{}})
endsnippet

snippet MagicCode "MagicCode(msg string, user *User)"
MagicCode( ${1:msg string}, ${2:user *User})
endsnippet

snippet Main "Main(ctxt *build.Context, offsetFlag, fromFlag, to string)"
Main( ${1:ctxt *build.Context}, ${2:offsetFlag}, ${3:fromFlag}, ${4:to string})
endsnippet

snippet Major "Major(devNumber int)"
Major( ${1:devNumber int})
endsnippet

snippet MakeBool "MakeBool(b bool)"
MakeBool( ${1:b bool})
endsnippet

snippet MakeChan "MakeChan(Type)"
MakeChan( ${1:Type})
endsnippet

snippet MakeDaemon "MakeDaemon(attrs *DaemonAttr)"
MakeDaemon( ${1:attrs *DaemonAttr})
endsnippet

snippet MakeFileMutex "MakeFileMutex(filename string)"
MakeFileMutex( ${1:filename string})
endsnippet

snippet MakeFloat64 "MakeFloat64(x float64)"
MakeFloat64( ${1:x float64})
endsnippet

snippet MakeFromBytes "MakeFromBytes(bytes []byte)"
MakeFromBytes( ${1:bytes []byte})
endsnippet

snippet MakeFromLiteral "MakeFromLiteral(lit string, tok token.Token)"
MakeFromLiteral( ${1:lit string}, ${2:tok token.Token})
endsnippet

snippet MakeHeroIdle "MakeHeroIdle(hero *hero.Hero)"
MakeHeroIdle( ${1:hero *hero.Hero})
endsnippet

snippet MakeImag "MakeImag(x Value)"
MakeImag( ${1:x Value})
endsnippet

snippet MakeInt64 "MakeInt64(x int64)"
MakeInt64( ${1:x int64})
endsnippet

snippet MakeInterfaceIsNotAConstant "MakeInterfaceIsNotAConstant(x interface{})"
MakeInterfaceIsNotAConstant( ${1:x interface{}})
endsnippet

snippet MakeMap "MakeMap(Type)"
MakeMap( ${1:Type})
endsnippet

snippet MakePerfResultCache "MakePerfResultCache(c appengine.Context, com *Commit, newer bool)"
MakePerfResultCache( ${1:c appengine.Context}, ${2:com *Commit}, ${3:newer bool})
endsnippet

snippet MakePix "MakePix(list ...int)"
MakePix( ${1:list ...int})
endsnippet

snippet MakePrivate "MakePrivate(mountPoint string)"
MakePrivate( ${1:mountPoint string})
endsnippet

snippet MakeRPrivate "MakeRPrivate(mountPoint string)"
MakeRPrivate( ${1:mountPoint string})
endsnippet

snippet MakeRShared "MakeRShared(mountPoint string)"
MakeRShared( ${1:mountPoint string})
endsnippet

snippet MakeRSlave "MakeRSlave(mountPoint string)"
MakeRSlave( ${1:mountPoint string})
endsnippet

snippet MakeRUnbindable "MakeRUnbindable(mountPoint string)"
MakeRUnbindable( ${1:mountPoint string})
endsnippet

snippet MakeRaw "MakeRaw(fd uintptr)"
MakeRaw( ${1:fd uintptr})
endsnippet

snippet MakeShared "MakeShared(mountPoint string)"
MakeShared( ${1:mountPoint string})
endsnippet

snippet MakeSimpleRequest "MakeSimpleRequest(method string, urlStr string, payload interface{})"
MakeSimpleRequest( ${1:method string}, ${2:urlStr string}, ${3:payload interface{}})
endsnippet

snippet MakeSlave "MakeSlave(mountPoint string)"
MakeSlave( ${1:mountPoint string})
endsnippet

snippet MakeSlice "MakeSlice(Type)"
MakeSlice( ${1:Type})
endsnippet

snippet MakeString "MakeString(s string)"
MakeString( ${1:s string})
endsnippet

snippet MakeUint64 "MakeUint64(x uint64)"
MakeUint64( ${1:x uint64})
endsnippet

snippet MakeUnbindable "MakeUnbindable(mountPoint string)"
MakeUnbindable( ${1:mountPoint string})
endsnippet

snippet MakeVariant "MakeVariant(v interface{})"
MakeVariant( ${1:v interface{}})
endsnippet

snippet Map "Map(container net.Addr, hostIP net.IP, hostPort int)"
Map( ${1:container net.Addr}, ${2:hostIP net.IP}, ${3:hostPort int})
endsnippet

snippet MapOf "MapOf(t *Type)"
MapOf( ${1:t *Type})
endsnippet

snippet MarkAsRead "MarkAsRead(battle_message *BattleMessage)"
MarkAsRead( ${1:battle_message *BattleMessage})
endsnippet

snippet MarketDealSoldHandle "MarketDealSoldHandle(user *User, object interface{}, code int16)"
MarketDealSoldHandle( ${1:user *User}, ${2:object interface{}}, ${3:code int16})
endsnippet

snippet Marshal "Marshal(v interface{})"
Marshal( ${1:v interface{}})
endsnippet

snippet Mask "Mask(underlying error, pass ...func(error)"
Mask( ${1:underlying error}, ${2:pass ...func(error})
endsnippet

snippet MaskFunc "MaskFunc(allow ...func(error)"
MaskFunc( ${1:allow ...func(error})
endsnippet

snippet Matches "Matches(relFilePath string, patterns []string)"
Matches( ${1:relFilePath string}, ${2:patterns []string})
endsnippet

snippet MatchesContentType "MatchesContentType(contentType, expectedType string)"
MatchesContentType( ${1:contentType}, ${2:expectedType string})
endsnippet

snippet Max "Max(a, b int64)"
Max( ${1:a}, ${2:b int64})
endsnippet

snippet Merge "Merge(userConf, imageConf *Config)"
Merge( ${1:userConf}, ${2:imageConf *Config})
endsnippet

snippet MergeConfigs "MergeConfigs(config *Config, hostConfig *HostConfig)"
MergeConfigs( ${1:config *Config}, ${2:hostConfig *HostConfig})
endsnippet

snippet MergePackageFiles "MergePackageFiles(pkg *Package, mode MergeMode)"
MergePackageFiles( ${1:pkg *Package}, ${2:mode MergeMode})
endsnippet

snippet Methods "Methods(v interface{})"
Methods( ${1:v interface{}})
endsnippet

snippet Minor "Minor(devNumber int)"
Minor( ${1:devNumber int})
endsnippet

snippet MirrorListVar "MirrorListVar(values *[]string, names []string, usage string)"
MirrorListVar( ${1:values *[]string}, ${2:names []string}, ${3:usage string})
endsnippet

snippet MissingMethod "MissingMethod(V Type, T *Interface, static bool)"
MissingMethod( ${1:V Type}, ${2:T *Interface}, ${3:static bool})
endsnippet

snippet Mixer "Mixer(carryOn bool, ws []Widget)"
Mixer( ${1:carryOn bool}, ${2:ws []Widget})
endsnippet

snippet Mkdev "Mkdev(major int64, minor int64)"
Mkdev( ${1:major int64}, ${2:minor int64})
endsnippet

snippet Mknod "Mknod(path string, mode uint32, dev int)"
Mknod( ${1:path string}, ${2:mode uint32}, ${3:dev int})
endsnippet

snippet Mount "Mount(network, addr string)"
Mount( ${1:network}, ${2:addr string})
endsnippet

snippet MountService "MountService(service string)"
MountService( ${1:service string})
endsnippet

snippet Mounted "Mounted(mountpoint string)"
Mounted( ${1:mountpoint string})
endsnippet

snippet MoveEventEndHandle "MoveEventEndHandle(user *User, object interface{}, code int16)"
MoveEventEndHandle( ${1:user *User}, ${2:object interface{}}, ${3:code int16})
endsnippet

snippet Moveable "Moveable(item Item)"
Moveable( ${1:item Item})
endsnippet

snippet MsMoveRoot "MsMoveRoot(rootfs string)"
MsMoveRoot( ${1:rootfs string})
endsnippet

snippet MsgPackRpcServ "MsgPackRpcServ(listener *net.TCPListener)"
MsgPackRpcServ( ${1:listener *net.TCPListener})
endsnippet

snippet MultipartForm "MultipartForm(formStruct interface{}, ifacePtr ...interface{})"
MultipartForm( ${1:formStruct interface{}}, ${2:ifacePtr ...interface{}})
endsnippet

snippet Multiplier "Multiplier(w0, w1 Widget)"
Multiplier( ${1:w0}, ${2:w1 Widget})
endsnippet

snippet MyHandler "MyHandler(w http.ResponseWriter, r *http.Request)"
MyHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet NOTICE "NOTICE(v ...interface{})"
NOTICE( ${1:v ...interface{}})
endsnippet

snippet NaiveDiffDriver "NaiveDiffDriver(driver ProtoDriver)"
NaiveDiffDriver( ${1:driver ProtoDriver})
endsnippet

snippet NaiveDiffDriverWithApply "NaiveDiffDriverWithApply(driver ApplyDiffProtoDriver)"
NaiveDiffDriverWithApply( ${1:driver ApplyDiffProtoDriver})
endsnippet

snippet NetPipe "NetPipe(opt0, opt1 Options)"
NetPipe( ${1:opt0}, ${2:opt1 Options})
endsnippet

snippet NetworkChangeName "NetworkChangeName(iface *net.Interface, newName string)"
NetworkChangeName( ${1:iface *net.Interface}, ${2:newName string})
endsnippet

snippet NetworkCreateVethPair "NetworkCreateVethPair(name1, name2 string, txQueueLen int)"
NetworkCreateVethPair( ${1:name1}, ${2:name2 string}, ${3:txQueueLen int})
endsnippet

snippet NetworkLinkAdd "NetworkLinkAdd(name string, linkType string)"
NetworkLinkAdd( ${1:name string}, ${2:linkType string})
endsnippet

snippet NetworkLinkAddIp "NetworkLinkAddIp(iface *net.Interface, ip net.IP, ipNet *net.IPNet)"
NetworkLinkAddIp( ${1:iface *net.Interface}, ${2:ip net.IP}, ${3:ipNet *net.IPNet})
endsnippet

snippet NetworkLinkAddMacVlan "NetworkLinkAddMacVlan(masterDev, macVlanDev string, mode string)"
NetworkLinkAddMacVlan( ${1:masterDev}, ${2:macVlanDev string}, ${3:mode string})
endsnippet

snippet NetworkLinkAddMacVtap "NetworkLinkAddMacVtap(masterDev, macVlanDev string, mode string)"
NetworkLinkAddMacVtap( ${1:masterDev}, ${2:macVlanDev string}, ${3:mode string})
endsnippet

snippet NetworkLinkAddVlan "NetworkLinkAddVlan(masterDev, vlanDev string, vlanId uint16)"
NetworkLinkAddVlan( ${1:masterDev}, ${2:vlanDev string}, ${3:vlanId uint16})
endsnippet

snippet NetworkLinkDel "NetworkLinkDel(name string)"
NetworkLinkDel( ${1:name string})
endsnippet

snippet NetworkLinkDelIp "NetworkLinkDelIp(iface *net.Interface, ip net.IP, ipNet *net.IPNet)"
NetworkLinkDelIp( ${1:iface *net.Interface}, ${2:ip net.IP}, ${3:ipNet *net.IPNet})
endsnippet

snippet NetworkLinkDown "NetworkLinkDown(iface *net.Interface)"
NetworkLinkDown( ${1:iface *net.Interface})
endsnippet

snippet NetworkLinkUp "NetworkLinkUp(iface *net.Interface)"
NetworkLinkUp( ${1:iface *net.Interface})
endsnippet

snippet NetworkOverlaps "NetworkOverlaps(netX *net.IPNet, netY *net.IPNet)"
NetworkOverlaps( ${1:netX *net.IPNet}, ${2:netY *net.IPNet})
endsnippet

snippet NetworkRange "NetworkRange(network *net.IPNet)"
NetworkRange( ${1:network *net.IPNet})
endsnippet

snippet NetworkSetMTU "NetworkSetMTU(iface *net.Interface, mtu int)"
NetworkSetMTU( ${1:iface *net.Interface}, ${2:mtu int})
endsnippet

snippet NetworkSetMacAddress "NetworkSetMacAddress(iface *net.Interface, macaddr string)"
NetworkSetMacAddress( ${1:iface *net.Interface}, ${2:macaddr string})
endsnippet

snippet NetworkSetMaster "NetworkSetMaster(iface, master *net.Interface)"
NetworkSetMaster( ${1:iface}, ${2:master *net.Interface})
endsnippet

snippet NetworkSetNoMaster "NetworkSetNoMaster(iface *net.Interface)"
NetworkSetNoMaster( ${1:iface *net.Interface})
endsnippet

snippet NetworkSetNsFd "NetworkSetNsFd(iface *net.Interface, fd int)"
NetworkSetNsFd( ${1:iface *net.Interface}, ${2:fd int})
endsnippet

snippet NetworkSetNsPid "NetworkSetNsPid(iface *net.Interface, nspid int)"
NetworkSetNsPid( ${1:iface *net.Interface}, ${2:nspid int})
endsnippet

snippet NetworkSetTxQueueLen "NetworkSetTxQueueLen(iface *net.Interface, txQueueLen int)"
NetworkSetTxQueueLen( ${1:iface *net.Interface}, ${2:txQueueLen int})
endsnippet

snippet New "New(root *ssa.Function)"
New( ${1:root *ssa.Function})
endsnippet

snippet New64 "New64(total int64)"
New64( ${1:total int64})
endsnippet

snippet NewAPIVersion "NewAPIVersion(input string)"
NewAPIVersion( ${1:input string})
endsnippet

snippet NewAllianceRpcArgs "NewAllianceRpcArgs(uid int32, aid int32, data interface{})"
NewAllianceRpcArgs( ${1:uid int32}, ${2:aid int32}, ${3:data interface{}})
endsnippet

snippet NewAnimation "NewAnimation(f func(t float64)"
NewAnimation( ${1:f func(t float64})
endsnippet

snippet NewArmy "NewArmy(userdata *User, army_id T_obj_id)"
NewArmy( ${1:userdata *User}, ${2:army_id T_obj_id})
endsnippet

snippet NewArray "NewArray(elem Type, len int64)"
NewArray( ${1:elem Type}, ${2:len int64})
endsnippet

snippet NewBackground "NewBackground(img draw.Image, bg image.Image, flush func(r image.Rectangle)"
NewBackground( ${1:img draw.Image}, ${2:bg image.Image}, ${3:flush func(r image.Rectangle})
endsnippet

snippet NewBackup "NewBackup(dst *Conn, dstTable string, src *Conn, srcTable string)"
NewBackup( ${1:dst *Conn}, ${2:dstTable string}, ${3:src *Conn}, ${4:srcTable string})
endsnippet

snippet NewBroker "NewBroker(verbose bool)"
NewBroker( ${1:verbose bool})
endsnippet

snippet NewBrowseHistory "NewBrowseHistory(console *clingon.Console, dirs []int, time time.Duration)"
NewBrowseHistory( ${1:console *clingon.Console}, ${2:dirs []int}, ${3:time time.Duration})
endsnippet

snippet NewBufReader "NewBufReader(r io.Reader)"
NewBufReader( ${1:r io.Reader})
endsnippet

snippet NewBufReaderWithDrainbufAndBuffer "NewBufReaderWithDrainbufAndBuffer(r io.Reader, drainBuffer []byte, buffer *bytes.Buffer)"
NewBufReaderWithDrainbufAndBuffer( ${1:r io.Reader}, ${2:drainBuffer []byte}, ${3:buffer *bytes.Buffer})
endsnippet

snippet NewBuffer "NewBuffer(conn net.Conn, ctrl chan bool)"
NewBuffer( ${1:conn net.Conn}, ${2:ctrl chan bool})
endsnippet

snippet NewBufferPool "NewBufferPool(size int)"
NewBufferPool( ${1:size int})
endsnippet

snippet NewBufferString "NewBufferString(s string)"
NewBufferString( ${1:s string})
endsnippet

snippet NewBuilder "NewBuilder(goroot *Repo, name string)"
NewBuilder( ${1:goroot *Repo}, ${2:name string})
endsnippet

snippet NewBytePool "NewBytePool(maxSize int, width int)"
NewBytePool( ${1:maxSize int}, ${2:width int})
endsnippet

snippet NewCanvas "NewCanvas(background color.Color, r image.Rectangle)"
NewCanvas( ${1:background color.Color}, ${2:r image.Rectangle})
endsnippet

snippet NewCgroupTestUtil "NewCgroupTestUtil(subsystem string, t *testing.T)"
NewCgroupTestUtil( ${1:subsystem string}, ${2:t *testing.T})
endsnippet

snippet NewChain "NewChain(name, bridge string, table Table)"
NewChain( ${1:name}, ${2:bridge string}, ${3:table Table})
endsnippet

snippet NewChan "NewChan(dir ChanDir, elem Type)"
NewChan( ${1:dir ChanDir}, ${2:elem Type})
endsnippet

snippet NewChanReader "NewChanReader(c <-chan []byte)"
NewChanReader( ${1:c <-chan []byte})
endsnippet

snippet NewChanWriter "NewChanWriter(c chan<- []byte)"
NewChanWriter( ${1:c chan<- []byte})
endsnippet

snippet NewChecker "NewChecker(conf *Config, fset *token.FileSet, pkg *Package, info *Info)"
NewChecker( ${1:conf *Config}, ${2:fset *token.FileSet}, ${3:pkg *Package}, ${4:info *Info})
endsnippet

snippet NewCity "NewCity(x T_coordinate, y T_coordinate, name string, id T_obj_id, user *User)"
NewCity( ${1:x T_coordinate}, ${2:y T_coordinate}, ${3:name string}, ${4:id T_obj_id}, ${5:user *User})
endsnippet

snippet NewClient "NewClient(config *Config, rwc io.ReadWriteCloser)"
NewClient( ${1:config *Config}, ${2:rwc io.ReadWriteCloser})
endsnippet

snippet NewClientCodec "NewClientCodec(conn io.ReadWriteCloser, enc filemarshal.Encoder, dec filemarshal.Decoder)"
NewClientCodec( ${1:conn io.ReadWriteCloser}, ${2:enc filemarshal.Encoder}, ${3:dec filemarshal.Decoder})
endsnippet

snippet NewCmdClient "NewCmdClient(c *exec.Cmd, log Logger)"
NewCmdClient( ${1:c *exec.Cmd}, ${2:log Logger})
endsnippet

snippet NewConfig "NewConfig(server, origin string)"
NewConfig( ${1:server}, ${2:origin string})
endsnippet

snippet NewConn "NewConn(c net.Conn)"
NewConn( ${1:c net.Conn})
endsnippet

snippet NewConsole "NewConsole(evaluator_orNil Evaluator)"
NewConsole( ${1:evaluator_orNil Evaluator})
endsnippet

snippet NewConst "NewConst(val exact.Value, typ types.Type)"
NewConst( ${1:val exact.Value}, ${2:typ types.Type})
endsnippet

snippet NewContext "NewContext(ctx context.Context, u *User)"
NewContext( ${1:ctx context.Context}, ${2:u *User})
endsnippet

snippet NewControlPoint "NewControlPoint(value, colValue values.Value)"
NewControlPoint( ${1:value}, ${2:colValue values.Value})
endsnippet

snippet NewCorpus "NewCorpus(fs vfs.FileSystem)"
NewCorpus( ${1:fs vfs.FileSystem})
endsnippet

snippet NewCtx "NewCtx(sd uint32)"
NewCtx( ${1:sd uint32})
endsnippet

snippet NewCustomRPCClientCodec "NewCustomRPCClientCodec(conn io.ReadWriteCloser, opts DecoderContainerResolver)"
NewCustomRPCClientCodec( ${1:conn io.ReadWriteCloser}, ${2:opts DecoderContainerResolver})
endsnippet

snippet NewCustomRPCServerCodec "NewCustomRPCServerCodec(conn io.ReadWriteCloser, opts DecoderContainerResolver)"
NewCustomRPCServerCodec( ${1:conn io.ReadWriteCloser}, ${2:opts DecoderContainerResolver})
endsnippet

snippet NewCycleQueue "NewCycleQueue(length int)"
NewCycleQueue( ${1:length int})
endsnippet

snippet NewDaemon "NewDaemon(config *Config, eng *engine.Engine)"
NewDaemon( ${1:config *Config}, ${2:eng *engine.Engine})
endsnippet

snippet NewDaemonFromDirectory "NewDaemonFromDirectory(config *Config, eng *engine.Engine)"
NewDaemonFromDirectory( ${1:config *Config}, ${2:eng *engine.Engine})
endsnippet

snippet NewDatabase "NewDatabase(conn *sql.DB)"
NewDatabase( ${1:conn *sql.DB})
endsnippet

snippet NewDecoder "NewDecoder(dec Decoder)"
NewDecoder( ${1:dec Decoder})
endsnippet

snippet NewDecoderBytes "NewDecoderBytes(in []byte, h Handle)"
NewDecoderBytes( ${1:in []byte}, ${2:h Handle})
endsnippet

snippet NewDefaultPkg "NewDefaultPkg(importPath string)"
NewDefaultPkg( ${1:importPath string})
endsnippet

snippet NewDeviceSet "NewDeviceSet(root string, doInit bool, options []string)"
NewDeviceSet( ${1:root string}, ${2:doInit bool}, ${3:options []string})
endsnippet

snippet NewDist "NewDist(num_samples int)"
NewDist( ${1:num_samples int})
endsnippet

snippet NewDockerCli "NewDockerCli(in io.ReadCloser, out, err io.Writer, key libtrust.PrivateKey, proto, addr string, tlsConfig *tls.Config)"
NewDockerCli( ${1:in io.ReadCloser}, ${2:out}, ${3:err io.Writer}, ${4:key libtrust.PrivateKey}, ${5:proto}, ${6:addr string}, ${7:tlsConfig *tls.Config})
endsnippet

snippet NewDockerClient "NewDockerClient(daemonUrl string, tlsConfig *tls.Config)"
NewDockerClient( ${1:daemonUrl string}, ${2:tlsConfig *tls.Config})
endsnippet

snippet NewDockerClientTimeout "NewDockerClientTimeout(daemonUrl string, tlsConfig *tls.Config, timeout time.Duration)"
NewDockerClientTimeout( ${1:daemonUrl string}, ${2:tlsConfig *tls.Config}, ${3:timeout time.Duration})
endsnippet

snippet NewDriver "NewDriver(name, root, initPath string, sysInfo *sysinfo.SysInfo)"
NewDriver( ${1:name}, ${2:root}, ${3:initPath string}, ${4:sysInfo *sysinfo.SysInfo})
endsnippet

snippet NewEchoServer "NewEchoServer(t *testing.T, proto, address string)"
NewEchoServer( ${1:t *testing.T}, ${2:proto}, ${3:address string})
endsnippet

snippet NewEllipse "NewEllipse(col image.Image, cr image.Point, ra, rb int, width float64)"
NewEllipse( ${1:col image.Image}, ${2:cr image.Point}, ${3:ra}, ${4:rb int}, ${5:width float64})
endsnippet

snippet NewEncoder "NewEncoder(enc Encoder)"
NewEncoder( ${1:enc Encoder})
endsnippet

snippet NewEncoderBytes "NewEncoderBytes(out *[]byte, h Handle)"
NewEncoderBytes( ${1:out *[]byte}, ${2:h Handle})
endsnippet

snippet NewEndpoint "NewEndpoint(hostname string, insecureRegistries []string)"
NewEndpoint( ${1:hostname string}, ${2:insecureRegistries []string})
endsnippet

snippet NewEnterCommand "NewEnterCommand(console *clingon.Console, command string, time time.Duration)"
NewEnterCommand( ${1:console *clingon.Console}, ${2:command string}, ${3:time time.Duration})
endsnippet

snippet NewEntry "NewEntry(logger *Logger)"
NewEntry( ${1:logger *Logger})
endsnippet

snippet NewErrCopyResource "NewErrCopyResource(name string)"
NewErrCopyResource( ${1:name string})
endsnippet

snippet NewErrDownload "NewErrDownload(name string)"
NewErrDownload( ${1:name string})
endsnippet

snippet NewErrInvalidPackage "NewErrInvalidPackage(name string)"
NewErrInvalidPackage( ${1:name string})
endsnippet

snippet NewErrPortAlreadyAllocated "NewErrPortAlreadyAllocated(ip string, port int)"
NewErrPortAlreadyAllocated( ${1:ip string}, ${2:port int})
endsnippet

snippet NewFcall "NewFcall(sz uint32)"
NewFcall( ${1:sz uint32})
endsnippet

snippet NewField "NewField(pos token.Pos, pkg *Package, name string, typ Type, anonymous bool)"
NewField( ${1:pos token.Pos}, ${2:pkg *Package}, ${3:name string}, ${4:typ Type}, ${5:anonymous bool})
endsnippet

snippet NewFile "NewFile(f *os.File)"
NewFile( ${1:f *os.File})
endsnippet

snippet NewFilter "NewFilter(M, N uint32)"
NewFilter( ${1:M}, ${2:N uint32})
endsnippet

snippet NewFlagSet "NewFlagSet(name string, errorHandling ErrorHandling)"
NewFlagSet( ${1:name string}, ${2:errorHandling ErrorHandling})
endsnippet

snippet NewFramer "NewFramer(w io.Writer, r io.Reader)"
NewFramer( ${1:w io.Writer}, ${2:r io.Reader})
endsnippet

snippet NewFunc "NewFunc(pos token.Pos, pkg *Package, name string, sig *Signature)"
NewFunc( ${1:pos token.Pos}, ${2:pkg *Package}, ${3:name string}, ${4:sig *Signature})
endsnippet

snippet NewGDB "NewGDB(program string, srcRoot string)"
NewGDB( ${1:program string}, ${2:srcRoot string})
endsnippet

snippet NewGetter "NewGetter(dest interface{}, scan Scanner)"
NewGetter( ${1:dest interface{}}, ${2:scan Scanner})
endsnippet

snippet NewGraph "NewGraph(root string, driver graphdriver.Driver)"
NewGraph( ${1:root string}, ${2:driver graphdriver.Driver})
endsnippet

snippet NewHTTPAuthDecorator "NewHTTPAuthDecorator(login, password string)"
NewHTTPAuthDecorator( ${1:login}, ${2:password string})
endsnippet

snippet NewHTTPRequestError "NewHTTPRequestError(msg string, res *http.Response)"
NewHTTPRequestError( ${1:msg string}, ${2:res *http.Response})
endsnippet

snippet NewHTTPRequestFactory "NewHTTPRequestFactory(d ...HTTPRequestDecorator)"
NewHTTPRequestFactory( ${1:d ...HTTPRequestDecorator})
endsnippet

snippet NewHTTPUserAgentDecorator "NewHTTPUserAgentDecorator(versions ...VersionInfo)"
NewHTTPUserAgentDecorator( ${1:versions ...VersionInfo})
endsnippet

snippet NewHandler "NewHandler(origin *url.URL)"
NewHandler( ${1:origin *url.URL})
endsnippet

snippet NewHero "NewHero(user_id int32, uid int32, hero_id int32, level T_level)"
NewHero( ${1:user_id int32}, ${2:uid int32}, ${3:hero_id int32}, ${4:level T_level})
endsnippet

snippet NewIdent "NewIdent(name string)"
NewIdent( ${1:name string})
endsnippet

snippet NewImage "NewImage(img image.Image, opaque bool, p image.Point)"
NewImage( ${1:img image.Image}, ${2:opaque bool}, ${3:p image.Point})
endsnippet

snippet NewImgJSON "NewImgJSON(src []byte)"
NewImgJSON( ${1:src []byte})
endsnippet

snippet NewInterface "NewInterface(methods []*Func, embeddeds []*Named)"
NewInterface( ${1:methods []*Func}, ${2:embeddeds []*Named})
endsnippet

snippet NewIntrospectable "NewIntrospectable(n *Node)"
NewIntrospectable( ${1:n *Node})
endsnippet

snippet NewIpOpt "NewIpOpt(ref *net.IP, defaultVal string)"
NewIpOpt( ${1:ref *net.IP}, ${2:defaultVal string})
endsnippet

snippet NewJSONSignature "NewJSONSignature(content []byte)"
NewJSONSignature( ${1:content []byte})
endsnippet

snippet NewJSONSignatureFromMap "NewJSONSignatureFromMap(content interface{})"
NewJSONSignatureFromMap( ${1:content interface{}})
endsnippet

snippet NewKvmsg "NewKvmsg(sequence int64)"
NewKvmsg( ${1:sequence int64})
endsnippet

snippet NewLabel "NewLabel(pos token.Pos, pkg *Package, name string)"
NewLabel( ${1:pos token.Pos}, ${2:pkg *Package}, ${3:name string})
endsnippet

snippet NewLens "NewLens(f, finv interface{})"
NewLens( ${1:f}, ${2:finv interface{}})
endsnippet

snippet NewLine "NewLine(fill image.Image, p0, p1 image.Point, width float64)"
NewLine( ${1:fill image.Image}, ${2:p0}, ${3:p1 image.Point}, ${4:width float64})
endsnippet

snippet NewLink "NewLink(parentIP, childIP, name string, env []string, exposedPorts map[nat.Port]struct{}, eng *engine.Engine)"
NewLink( ${1:parentIP}, ${2:childIP}, ${3:name string}, ${4:env []string}, ${5:exposedPorts map[nat.Port]struct{}}, ${6:eng *engine.Engine})
endsnippet

snippet NewListOpts "NewListOpts(validator ValidatorFctType)"
NewListOpts( ${1:validator ValidatorFctType})
endsnippet

snippet NewListenBuffer "NewListenBuffer(proto, addr string, activate chan struct{})"
NewListenBuffer( ${1:proto}, ${2:addr string}, ${3:activate chan struct{}})
endsnippet

snippet NewListener "NewListener(addr net.Addr)"
NewListener( ${1:addr net.Addr})
endsnippet

snippet NewLockFile "NewLockFile(file *os.File)"
NewLockFile( ${1:file *os.File})
endsnippet

snippet NewLooper "NewLooper(f func()"
NewLooper( ${1:f func(})
endsnippet

snippet NewMandelbrot "NewMandelbrot(r crect, wr draw.Rectangle, julia bool, jpoint complex128, iterations int)"
NewMandelbrot( ${1:r crect}, ${2:wr draw.Rectangle}, ${3:julia bool}, ${4:jpoint complex128}, ${5:iterations int})
endsnippet

snippet NewMap "NewMap(key, elem Type)"
NewMap( ${1:key}, ${2:elem Type})
endsnippet

snippet NewMdcli "NewMdcli(broker string, verbose bool)"
NewMdcli( ${1:broker string}, ${2:verbose bool})
endsnippet

snippet NewMdcli2 "NewMdcli2(broker string, verbose bool)"
NewMdcli2( ${1:broker string}, ${2:verbose bool})
endsnippet

snippet NewMdwrk "NewMdwrk(broker, service string, verbose bool)"
NewMdwrk( ${1:broker}, ${2:service string}, ${3:verbose bool})
endsnippet

snippet NewMemoryGraph "NewMemoryGraph(grants []*Grant)"
NewMemoryGraph( ${1:grants []*Grant})
endsnippet

snippet NewMethodSet "NewMethodSet(T Type)"
NewMethodSet( ${1:T Type})
endsnippet

snippet NewMockProxyCommand "NewMockProxyCommand(proto string, hostIP net.IP, hostPort int, containerIP net.IP, containerPort int)"
NewMockProxyCommand( ${1:proto string}, ${2:hostIP net.IP}, ${3:hostPort int}, ${4:containerIP net.IP}, ${5:containerPort int})
endsnippet

snippet NewMoveCursor "NewMoveCursor(console *clingon.Console, dirs []int, time time.Duration)"
NewMoveCursor( ${1:console *clingon.Console}, ${2:dirs []int}, ${3:time time.Duration})
endsnippet

snippet NewNamed "NewNamed(obj *TypeName, underlying Type, methods []*Func)"
NewNamed( ${1:obj *TypeName}, ${2:underlying Type}, ${3:methods []*Func})
endsnippet

snippet NewNode "NewNode($/;"	f
NewNotFoundError	src/github.com/docker/docker/vendor/src/github.com/docker/libcontainer/cgroups/cgroups.go	/^func NewNotFoundError(sub string)"
NewNode( ${1:$/;"	f
NewNotFoundError	src/github.com/docker/docker/vendor/src/github.com/docker/libcontainer/cgroups/cgroups.go	/^func NewNotFoundError(sub string})
endsnippet

snippet NewNpcHero "NewNpcHero(uid int32, level T_level, tile int32)"
NewNpcHero( ${1:uid int32}, ${2:level T_level}, ${3:tile int32})
endsnippet

snippet NewNpcUser "NewNpcUser(language string, npc_hero *hero.Hero, x T_coordinate, y T_coordinate, obj_id T_obj_id)"
NewNpcUser( ${1:language string}, ${2:npc_hero *hero.Hero}, ${3:x T_coordinate}, ${4:y T_coordinate}, ${5:obj_id T_obj_id})
endsnippet

snippet NewNsFile "NewNsFile(f seq.File)"
NewNsFile( ${1:f seq.File})
endsnippet

snippet NewObj "NewObj(kind ObjKind, name string)"
NewObj( ${1:kind ObjKind}, ${2:name string})
endsnippet

snippet NewObjectIdWithTime "NewObjectIdWithTime(t time.Time)"
NewObjectIdWithTime( ${1:t time.Time})
endsnippet

snippet NewOption "NewOption(fullname string)"
NewOption( ${1:fullname string})
endsnippet

snippet NewPackage "NewPackage(path, name string)"
NewPackage( ${1:path}, ${2:name string})
endsnippet

snippet NewPacketConn "NewPacketConn(c net.PacketConn)"
NewPacketConn( ${1:c net.PacketConn})
endsnippet

snippet NewPainter "NewPainter(dst draw.Image, src image.Image, op draw.Op)"
NewPainter( ${1:dst draw.Image}, ${2:src image.Image}, ${3:op draw.Op})
endsnippet

snippet NewPapertrailHook "NewPapertrailHook(host string, port int, appName string)"
NewPapertrailHook( ${1:host string}, ${2:port int}, ${3:appName string})
endsnippet

snippet NewParam "NewParam(pos token.Pos, pkg *Package, name string, typ Type)"
NewParam( ${1:pos token.Pos}, ${2:pkg *Package}, ${3:name string}, ${4:typ Type})
endsnippet

snippet NewPerHost "NewPerHost(defaultDialer, bypass Dialer)"
NewPerHost( ${1:defaultDialer}, ${2:bypass Dialer})
endsnippet

snippet NewPid "NewPid(pid int)"
NewPid( ${1:pid int})
endsnippet

snippet NewPipes "NewPipes(stdin io.ReadCloser, stdout, stderr io.Writer, useStdin bool)"
NewPipes( ${1:stdin io.ReadCloser}, ${2:stdout}, ${3:stderr io.Writer}, ${4:useStdin bool})
endsnippet

snippet NewPkg "NewPkg(importPath string, tp RevisionType, val string)"
NewPkg( ${1:importPath string}, ${2:tp RevisionType}, ${3:val string})
endsnippet

snippet NewPkgName "NewPkgName(pos token.Pos, pkg *Package, name string, imported *Package)"
NewPkgName( ${1:pos token.Pos}, ${2:pkg *Package}, ${3:name string}, ${4:imported *Package})
endsnippet

snippet NewPointer "NewPointer(elem Type)"
NewPointer( ${1:elem Type})
endsnippet

snippet NewPolygon "NewPolygon(fill image.Image, points []image.Point)"
NewPolygon( ${1:fill image.Image}, ${2:points []image.Point})
endsnippet

snippet NewPort "NewPort(proto, port string)"
NewPort( ${1:proto}, ${2:port string})
endsnippet

snippet NewPresentation "NewPresentation(c *Corpus)"
NewPresentation( ${1:c *Corpus})
endsnippet

snippet NewProxy "NewProxy(frontendAddr, backendAddr net.Addr)"
NewProxy( ${1:frontendAddr}, ${2:backendAddr net.Addr})
endsnippet

snippet NewProxyCommand "NewProxyCommand(proto string, hostIP net.IP, hostPort int, containerIP net.IP, containerPort int)"
NewProxyCommand( ${1:proto string}, ${2:hostIP net.IP}, ${3:hostPort int}, ${4:containerIP net.IP}, ${5:containerPort int})
endsnippet

snippet NewRPCClientCodec "NewRPCClientCodec(conn io.ReadWriteCloser, opts DecoderContainerResolver)"
NewRPCClientCodec( ${1:conn io.ReadWriteCloser}, ${2:opts DecoderContainerResolver})
endsnippet

snippet NewRPCServerCodec "NewRPCServerCodec(conn io.ReadWriteCloser, opts DecoderContainerResolver)"
NewRPCServerCodec( ${1:conn io.ReadWriteCloser}, ${2:opts DecoderContainerResolver})
endsnippet

snippet NewRawConn "NewRawConn(c net.PacketConn)"
NewRawConn( ${1:c net.PacketConn})
endsnippet

snippet NewReadCloserWrapper "NewReadCloserWrapper(r io.Reader, closer func()"
NewReadCloserWrapper( ${1:r io.Reader}, ${2:closer func(})
endsnippet

snippet NewReadWriter "NewReadWriter(r *Reader, w *Writer)"
NewReadWriter( ${1:r *Reader}, ${2:w *Writer})
endsnippet

snippet NewReader "NewReader(r io.Reader, contentType string)"
NewReader( ${1:r io.Reader}, ${2:contentType string})
endsnippet

snippet NewReaderErrWrapper "NewReaderErrWrapper(r io.Reader, closer func()"
NewReaderErrWrapper( ${1:r io.Reader}, ${2:closer func(})
endsnippet

snippet NewReaderSize "NewReaderSize(rd io.Reader, size int)"
NewReaderSize( ${1:rd io.Reader}, ${2:size int})
endsnippet

snippet NewReflectiveLens "NewReflectiveLens(f, finv func(reflect.Value)"
NewReflectiveLens( ${1:f}, ${2:finv func(reflect.Value})
endsnippet

snippet NewRepo "NewRepo(dir, url, path string)"
NewRepo( ${1:dir}, ${2:url}, ${3:path string})
endsnippet

snippet NewRepository "NewRepository(configPath string, driver graphdriver.Driver)"
NewRepository( ${1:configPath string}, ${2:driver graphdriver.Driver})
endsnippet

snippet NewRequest "NewRequest(cmd string, class string, obj string)"
NewRequest( ${1:cmd string}, ${2:class string}, ${3:obj string})
endsnippet

snippet NewResponseWriter "NewResponseWriter(rw http.ResponseWriter)"
NewResponseWriter( ${1:rw http.ResponseWriter})
endsnippet

snippet NewRun "NewRun(maxPar int)"
NewRun( ${1:maxPar int})
endsnippet

snippet NewRunner "NewRunner(tc *mgo.Collection)"
NewRunner( ${1:tc *mgo.Collection})
endsnippet

snippet NewSDLRenderer "NewSDLRenderer(surface *sdl.Surface, font *ttf.Font)"
NewSDLRenderer( ${1:surface *sdl.Surface}, ${2:font *ttf.Font})
endsnippet

snippet NewScanner "NewScanner(r io.ReadSeeker)"
NewScanner( ${1:r io.ReadSeeker})
endsnippet

snippet NewScope "NewScope(parent *Scope, comment string)"
NewScope( ${1:parent *Scope}, ${2:comment string})
endsnippet

snippet NewSentryHook "NewSentryHook(DSN string, levels []logrus.Level)"
NewSentryHook( ${1:DSN string}, ${2:levels []logrus.Level})
endsnippet

snippet NewServer "NewServer(cfg Config)"
NewServer( ${1:cfg Config})
endsnippet

snippet NewServerCodec "NewServerCodec(conn io.ReadWriteCloser, enc filemarshal.Encoder, dec filemarshal.Decoder)"
NewServerCodec( ${1:conn io.ReadWriteCloser}, ${2:enc filemarshal.Encoder}, ${3:dec filemarshal.Decoder})
endsnippet

snippet NewService "NewService(insecureRegistries []string)"
NewService( ${1:insecureRegistries []string})
endsnippet

snippet NewSession "NewSession(authConfig *AuthConfig, factory *utils.HTTPRequestFactory, endpoint *Endpoint, timeout bool)"
NewSession( ${1:authConfig *AuthConfig}, ${2:factory *utils.HTTPRequestFactory}, ${3:endpoint *Endpoint}, ${4:timeout bool})
endsnippet

snippet NewSignature "NewSignature(scope *Scope, recv *Var, params, results *Tuple, variadic bool)"
NewSignature( ${1:scope *Scope}, ${2:recv *Var}, ${3:params}, ${4:results *Tuple}, ${5:variadic bool})
endsnippet

snippet NewSlice "NewSlice(elem Type)"
NewSlice( ${1:elem Type})
endsnippet

snippet NewSlider "NewSlider(r image.Rectangle, fg, bg color.Color, value values.Value)"
NewSlider( ${1:r image.Rectangle}, ${2:fg}, ${3:bg color.Color}, ${4:value values.Value})
endsnippet

snippet NewSliderAnimation "NewSliderAnimation(length float64, distance float64)"
NewSliderAnimation( ${1:length float64}, ${2:distance float64})
endsnippet

snippet NewSnippet "NewSnippet(fset *token.FileSet, decl ast.Decl, id *ast.Ident)"
NewSnippet( ${1:fset *token.FileSet}, ${2:decl ast.Decl}, ${3:id *ast.Ident})
endsnippet

snippet NewSocket "NewSocket(t Type)"
NewSocket( ${1:t Type})
endsnippet

snippet NewSqliteConn "NewSqliteConn(root string)"
NewSqliteConn( ${1:root string})
endsnippet

snippet NewStdConsole "NewStdConsole(processConfig *ProcessConfig, pipes *Pipes)"
NewStdConsole( ${1:processConfig *ProcessConfig}, ${2:pipes *Pipes})
endsnippet

snippet NewStdWriter "NewStdWriter(w io.Writer, t StdType)"
NewStdWriter( ${1:w io.Writer}, ${2:t StdType})
endsnippet

snippet NewStreamArachive "NewStreamArachive(w io.Writer)"
NewStreamArachive( ${1:w io.Writer})
endsnippet

snippet NewStreamFormatter "NewStreamFormatter(json bool)"
NewStreamFormatter( ${1:json bool})
endsnippet

snippet NewStruct "NewStruct(fields []*Var, tags []string)"
NewStruct( ${1:fields []*Var}, ${2:tags []string})
endsnippet

snippet NewStubProxy "NewStubProxy(frontendAddr, backendAddr net.Addr)"
NewStubProxy( ${1:frontendAddr}, ${2:backendAddr net.Addr})
endsnippet

snippet NewSyslogHook "NewSyslogHook(network, raddr string, priority syslog.Priority, tag string)"
NewSyslogHook( ${1:network}, ${2:raddr string}, ${3:priority syslog.Priority}, ${4:tag string})
endsnippet

snippet NewTCPProxy "NewTCPProxy(frontendAddr, backendAddr *net.TCPAddr)"
NewTCPProxy( ${1:frontendAddr}, ${2:backendAddr *net.TCPAddr})
endsnippet

snippet NewTHash "NewTHash(name string, h func()"
NewTHash( ${1:name string}, ${2:h func(})
endsnippet

snippet NewTLSClient "NewTLSClient(endpoint string, cert, key, ca string)"
NewTLSClient( ${1:endpoint string}, ${2:cert}, ${3:key}, ${4:ca string})
endsnippet

snippet NewTable "NewTable(sortKey string, sizeHint int)"
NewTable( ${1:sortKey string}, ${2:sizeHint int})
endsnippet

snippet NewTagStore "NewTagStore(path string, graph *Graph, mirrors []string, insecureRegistries []string)"
NewTagStore( ${1:path string}, ${2:graph *Graph}, ${3:mirrors []string}, ${4:insecureRegistries []string})
endsnippet

snippet NewTarSum "NewTarSum(r io.Reader, dc bool, v Version)"
NewTarSum( ${1:r io.Reader}, ${2:dc bool}, ${3:v Version})
endsnippet

snippet NewTarSumHash "NewTarSumHash(r io.Reader, dc bool, v Version, tHash THash)"
NewTarSumHash( ${1:r io.Reader}, ${2:dc bool}, ${3:v Version}, ${4:tHash THash})
endsnippet

snippet NewTempArchive "NewTempArchive(src Archive, dir string)"
NewTempArchive( ${1:src Archive}, ${2:dir string})
endsnippet

snippet NewTestEngine "NewTestEngine(t Fataler)"
NewTestEngine( ${1:t Fataler})
endsnippet

snippet NewTestEnv "NewTestEnv(t *testing.T)"
NewTestEnv( ${1:t *testing.T})
endsnippet

snippet NewText "NewText(p image.Point, where Anchor, s string, font *truetype.Font, size float64, val values.Value)"
NewText( ${1:p image.Point}, ${2:where Anchor}, ${3:s string}, ${4:font *truetype.Font}, ${5:size float64}, ${6:val values.Value})
endsnippet

snippet NewThrottle "NewThrottle(r float64, dt time.Duration)"
NewThrottle( ${1:r float64}, ${2:dt time.Duration})
endsnippet

snippet NewTile "NewTile(r draw.Rectangle, calc Fractal, img *image.RGBA, wait bool)"
NewTile( ${1:r draw.Rectangle}, ${2:calc Fractal}, ${3:img *image.RGBA}, ${4:wait bool})
endsnippet

snippet NewTiler "NewTiler(calc Fractal, cache tileTable, tileSize int)"
NewTiler( ${1:calc Fractal}, ${2:cache tileTable}, ${3:tileSize int})
endsnippet

snippet NewTimeoutConn "NewTimeoutConn(conn net.Conn, timeout time.Duration)"
NewTimeoutConn( ${1:conn net.Conn}, ${2:timeout time.Duration})
endsnippet

snippet NewTokenizer "NewTokenizer(r io.Reader)"
NewTokenizer( ${1:r io.Reader})
endsnippet

snippet NewTokenizerFragment "NewTokenizerFragment(r io.Reader, contextTag string)"
NewTokenizerFragment( ${1:r io.Reader}, ${2:contextTag string})
endsnippet

snippet NewTransformer "NewTransformer(fset *token.FileSet, template *loader.PackageInfo, verbose bool)"
NewTransformer( ${1:fset *token.FileSet}, ${2:template *loader.PackageInfo}, ${3:verbose bool})
endsnippet

snippet NewTruncIndex "NewTruncIndex(ids []string)"
NewTruncIndex( ${1:ids []string})
endsnippet

snippet NewTrustStore "NewTrustStore(path string)"
NewTrustStore( ${1:path string})
endsnippet

snippet NewTtyConsole "NewTtyConsole(processConfig *execdriver.ProcessConfig, pipes *execdriver.Pipes)"
NewTtyConsole( ${1:processConfig *execdriver.ProcessConfig}, ${2:pipes *execdriver.Pipes})
endsnippet

snippet NewTuple "NewTuple(x ...*Var)"
NewTuple( ${1:x ...*Var})
endsnippet

snippet NewTypeName "NewTypeName(pos token.Pos, pkg *Package, name string, typ Type)"
NewTypeName( ${1:pos token.Pos}, ${2:pkg *Package}, ${3:name string}, ${4:typ Type})
endsnippet

snippet NewUDPProxy "NewUDPProxy(frontendAddr, backendAddr *net.UDPAddr)"
NewUDPProxy( ${1:frontendAddr}, ${2:backendAddr *net.UDPAddr})
endsnippet

snippet NewUnixClient "NewUnixClient(_net string, laddr, raddr *net.UnixAddr, log Logger)"
NewUnixClient( ${1:_net string}, ${2:laddr}, ${3:raddr *net.UnixAddr}, ${4:log Logger})
endsnippet

snippet NewValue "NewValue(initial interface{}, t reflect.Type)"
NewValue( ${1:initial interface{}}, ${2:t reflect.Type})
endsnippet

snippet NewVar "NewVar(pos token.Pos, pkg *Package, name string, typ Type)"
NewVar( ${1:pos token.Pos}, ${2:pkg *Package}, ${3:name string}, ${4:typ Type})
endsnippet

snippet NewVersionedClient "NewVersionedClient(endpoint string, apiVersionString string)"
NewVersionedClient( ${1:endpoint string}, ${2:apiVersionString string})
endsnippet

snippet NewVersionnedTLSClient "NewVersionnedTLSClient(endpoint string, cert, key, ca, apiVersionString string)"
NewVersionnedTLSClient( ${1:endpoint string}, ${2:cert}, ${3:key}, ${4:ca}, ${5:apiVersionString string})
endsnippet

snippet NewWindowDisplay "NewWindowDisplay(display string)"
NewWindowDisplay( ${1:display string})
endsnippet

snippet NewWriteCloserWrapper "NewWriteCloserWrapper(r io.Writer, closer func()"
NewWriteCloserWrapper( ${1:r io.Writer}, ${2:closer func(})
endsnippet

snippet NewWriteFlusher "NewWriteFlusher(w io.Writer)"
NewWriteFlusher( ${1:w io.Writer})
endsnippet

snippet NewWriter "NewWriter(w io.Writer)"
NewWriter( ${1:w io.Writer})
endsnippet

snippet NewWriterSize "NewWriterSize(wr io.Writer, size int)"
NewWriterSize( ${1:wr io.Writer}, ${2:size int})
endsnippet

snippet Newf "Newf(f string, a ...interface{})"
Newf( ${1:f string}, ${2:a ...interface{}})
endsnippet

snippet NextVal "NextVal(countername string)"
NextVal( ${1:countername string})
endsnippet

snippet NextVal64 "NextVal64(countername string)"
NextVal64( ${1:countername string})
endsnippet

snippet NodeDescription "NodeDescription(n ast.Node)"
NodeDescription( ${1:n ast.Node})
endsnippet

snippet NonblockingSelectDefaultCasePanics "NonblockingSelectDefaultCasePanics(ch chan int)"
NonblockingSelectDefaultCasePanics( ${1:ch chan int})
endsnippet

snippet NopWriteCloser "NopWriteCloser(w io.Writer)"
NopWriteCloser( ${1:w io.Writer})
endsnippet

snippet NotABenchmark "NotABenchmark(b *testing.B)"
NotABenchmark( ${1:b *testing.B})
endsnippet

snippet NotATest "NotATest(t *testing.T)"
NotATest( ${1:t *testing.T})
endsnippet

snippet NotFound "NotFound(w ResponseWriter, r *Request)"
NotFound( ${1:w ResponseWriter}, ${2:r *Request})
endsnippet

snippet NotNilFilter "NotNilFilter(_ string, v reflect.Value)"
NotNilFilter( ${1:_ string}, ${2:v reflect.Value})
endsnippet

snippet NoteMask "NoteMask(underlying error, msg string, pass ...func(error)"
NoteMask( ${1:underlying error}, ${2:msg string}, ${3:pass ...func(error})
endsnippet

snippet Notef "Notef(underlying error, f string, a ...interface{})"
Notef( ${1:underlying error}, ${2:f string}, ${3:a ...interface{}})
endsnippet

snippet NotifyOnOOM "NotifyOnOOM(s *State)"
NotifyOnOOM( ${1:s *State})
endsnippet

snippet Now "Now(c appengine.Context)"
Now( ${1:c appengine.Context})
endsnippet

snippet NullableOf "NullableOf(t *Type)"
NullableOf( ${1:t *Type})
endsnippet

snippet Num "Num(x Value)"
Num( ${1:x Value})
endsnippet

snippet OS "OS(root string)"
OS( ${1:root string})
endsnippet

snippet ObjMove "ObjMove(from_area, to_area *Area, t T_map_type, oid T_obj_id, level T_level, uid int32)"
ObjMove( ${1:from_area}, ${2:to_area *Area}, ${3:t T_map_type}, ${4:oid T_obj_id}, ${5:level T_level}, ${6:uid int32})
endsnippet

snippet ObjMoveWithoutLock "ObjMoveWithoutLock(from_area, to_area *Area, t T_map_type, oid T_obj_id, level T_level, uid int32)"
ObjMoveWithoutLock( ${1:from_area}, ${2:to_area *Area}, ${3:t T_map_type}, ${4:oid T_obj_id}, ${5:level T_level}, ${6:uid int32})
endsnippet

snippet ObjectIdHex "ObjectIdHex(s string)"
ObjectIdHex( ${1:s string})
endsnippet

snippet ObjectOf "ObjectOf(fields map[string]*Type)"
ObjectOf( ${1:fields map[string]*Type})
endsnippet

snippet ObjectPath "ObjectPath(path string)"
ObjectPath( ${1:path string})
endsnippet

snippet ObjectString "ObjectString(this *Package, obj Object)"
ObjectString( ${1:this *Package}, ${2:obj Object})
endsnippet

snippet Ok "Ok(*CustomLock)"
Ok( ${1:*CustomLock})
endsnippet

snippet OkFunc "OkFunc(*FieldMutex)"
OkFunc( ${1:*FieldMutex})
endsnippet

snippet Open "Open(path string, mode int, perm uint32)"
Open( ${1:path string}, ${2:mode int}, ${3:perm uint32})
endsnippet

snippet OpenAndDup "OpenAndDup(consolePath string)"
OpenAndDup( ${1:consolePath string})
endsnippet

snippet OpenFile "OpenFile(ctxt *build.Context, path string)"
OpenFile( ${1:ctxt *build.Context}, ${2:path string})
endsnippet

snippet OpenLockFile "OpenLockFile(name string, perm os.FileMode)"
OpenLockFile( ${1:name string}, ${2:perm os.FileMode})
endsnippet

snippet OpenTerminal "OpenTerminal(name string, flag int)"
OpenTerminal( ${1:name string}, ${2:flag int})
endsnippet

snippet OpenWavReader "OpenWavReader(filename string)"
OpenWavReader( ${1:filename string})
endsnippet

snippet Origin "Origin(config *Config, req *http.Request)"
Origin( ${1:config *Config}, ${2:req *http.Request})
endsnippet

snippet PANIC "PANIC(v ...interface{})"
PANIC( ${1:v ...interface{}})
endsnippet

snippet PKT_accept_join_alliance_report "PKT_accept_join_alliance_report(reader *packet.Packet)"
PKT_accept_join_alliance_report( ${1:reader *packet.Packet})
endsnippet

snippet PKT_activity_content "PKT_activity_content(reader *packet.Packet)"
PKT_activity_content( ${1:reader *packet.Packet})
endsnippet

snippet PKT_activity_list "PKT_activity_list(reader *packet.Packet)"
PKT_activity_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_admin_add_gems_indicate "PKT_admin_add_gems_indicate(reader *packet.Packet)"
PKT_admin_add_gems_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_all_log_in_config "PKT_all_log_in_config(reader *packet.Packet)"
PKT_all_log_in_config( ${1:reader *packet.Packet})
endsnippet

snippet PKT_all_log_in_reward "PKT_all_log_in_reward(reader *packet.Packet)"
PKT_all_log_in_reward( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_announce "PKT_alliance_announce(reader *packet.Packet)"
PKT_alliance_announce( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_application_reply "PKT_alliance_application_reply(reader *packet.Packet)"
PKT_alliance_application_reply( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_attack_action_event_info "PKT_alliance_attack_action_event_info(reader *packet.Packet)"
PKT_alliance_attack_action_event_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_basic_info "PKT_alliance_basic_info(reader *packet.Packet)"
PKT_alliance_basic_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_buff "PKT_alliance_buff(reader *packet.Packet)"
PKT_alliance_buff( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_daily_quest_indicate "PKT_alliance_daily_quest_indicate(reader *packet.Packet)"
PKT_alliance_daily_quest_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_defense_action_event_info "PKT_alliance_defense_action_event_info(reader *packet.Packet)"
PKT_alliance_defense_action_event_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_desc "PKT_alliance_desc(reader *packet.Packet)"
PKT_alliance_desc( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_donate_indicate "PKT_alliance_donate_indicate(reader *packet.Packet)"
PKT_alliance_donate_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_flag "PKT_alliance_flag(reader *packet.Packet)"
PKT_alliance_flag( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_id "PKT_alliance_id(reader *packet.Packet)"
PKT_alliance_id( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_log "PKT_alliance_log(reader *packet.Packet)"
PKT_alliance_log( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_member "PKT_alliance_member(reader *packet.Packet)"
PKT_alliance_member( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_member_info "PKT_alliance_member_info(reader *packet.Packet)"
PKT_alliance_member_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_member_list "PKT_alliance_member_list(reader *packet.Packet)"
PKT_alliance_member_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_official "PKT_alliance_official(reader *packet.Packet)"
PKT_alliance_official( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_public_info "PKT_alliance_public_info(reader *packet.Packet)"
PKT_alliance_public_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_quest "PKT_alliance_quest(reader *packet.Packet)"
PKT_alliance_quest( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_resource_event "PKT_alliance_resource_event(reader *packet.Packet)"
PKT_alliance_resource_event( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_resource_events "PKT_alliance_resource_events(reader *packet.Packet)"
PKT_alliance_resource_events( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_snapshot "PKT_alliance_snapshot(reader *packet.Packet)"
PKT_alliance_snapshot( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_speed_up_event "PKT_alliance_speed_up_event(reader *packet.Packet)"
PKT_alliance_speed_up_event( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_speed_up_event_indicate "PKT_alliance_speed_up_event_indicate(reader *packet.Packet)"
PKT_alliance_speed_up_event_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_speed_up_events "PKT_alliance_speed_up_events(reader *packet.Packet)"
PKT_alliance_speed_up_events( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_tech "PKT_alliance_tech(reader *packet.Packet)"
PKT_alliance_tech( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliance_tech_indicate "PKT_alliance_tech_indicate(reader *packet.Packet)"
PKT_alliance_tech_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_alliances_search_list "PKT_alliances_search_list(reader *packet.Packet)"
PKT_alliances_search_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_appoint_member_official_indicate "PKT_appoint_member_official_indicate(reader *packet.Packet)"
PKT_appoint_member_official_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_army_attack_indicate "PKT_army_attack_indicate(reader *packet.Packet)"
PKT_army_attack_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_army_change_result "PKT_army_change_result(reader *packet.Packet)"
PKT_army_change_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_army_indicate "PKT_army_indicate(reader *packet.Packet)"
PKT_army_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_army_info "PKT_army_info(reader *packet.Packet)"
PKT_army_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_army_move_path_info "PKT_army_move_path_info(reader *packet.Packet)"
PKT_army_move_path_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_ask_alliance_resource_indicate "PKT_ask_alliance_resource_indicate(reader *packet.Packet)"
PKT_ask_alliance_resource_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_attack_user_indicate "PKT_attack_user_indicate(reader *packet.Packet)"
PKT_attack_user_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_attack_village_indicate "PKT_attack_village_indicate(reader *packet.Packet)"
PKT_attack_village_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_battle_info "PKT_battle_info(reader *packet.Packet)"
PKT_battle_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_battle_message_detail "PKT_battle_message_detail(reader *packet.Packet)"
PKT_battle_message_detail( ${1:reader *packet.Packet})
endsnippet

snippet PKT_battle_message_indicate "PKT_battle_message_indicate(reader *packet.Packet)"
PKT_battle_message_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_battle_message_lists "PKT_battle_message_lists(reader *packet.Packet)"
PKT_battle_message_lists( ${1:reader *packet.Packet})
endsnippet

snippet PKT_battle_messages_title "PKT_battle_messages_title(reader *packet.Packet)"
PKT_battle_messages_title( ${1:reader *packet.Packet})
endsnippet

snippet PKT_battle_plot_ack_info "PKT_battle_plot_ack_info(reader *packet.Packet)"
PKT_battle_plot_ack_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_battle_plot_struct "PKT_battle_plot_struct(reader *packet.Packet)"
PKT_battle_plot_struct( ${1:reader *packet.Packet})
endsnippet

snippet PKT_battle_round "PKT_battle_round(reader *packet.Packet)"
PKT_battle_round( ${1:reader *packet.Packet})
endsnippet

snippet PKT_battle_turn "PKT_battle_turn(reader *packet.Packet)"
PKT_battle_turn( ${1:reader *packet.Packet})
endsnippet

snippet PKT_buff_info "PKT_buff_info(reader *packet.Packet)"
PKT_buff_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_build_speed_up_indicate "PKT_build_speed_up_indicate(reader *packet.Packet)"
PKT_build_speed_up_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_build_worker_info "PKT_build_worker_info(reader *packet.Packet)"
PKT_build_worker_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_building_indicate "PKT_building_indicate(reader *packet.Packet)"
PKT_building_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_building_info "PKT_building_info(reader *packet.Packet)"
PKT_building_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_building_operation_result "PKT_building_operation_result(reader *packet.Packet)"
PKT_building_operation_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_buy_deal_info "PKT_buy_deal_info(reader *packet.Packet)"
PKT_buy_deal_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_buy_item_indicate "PKT_buy_item_indicate(reader *packet.Packet)"
PKT_buy_item_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_buy_resource_indicate "PKT_buy_resource_indicate(reader *packet.Packet)"
PKT_buy_resource_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_cancel_deal_indicate "PKT_cancel_deal_indicate(reader *packet.Packet)"
PKT_cancel_deal_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_casino_content "PKT_casino_content(reader *packet.Packet)"
PKT_casino_content( ${1:reader *packet.Packet})
endsnippet

snippet PKT_casino_gems_config "PKT_casino_gems_config(reader *packet.Packet)"
PKT_casino_gems_config( ${1:reader *packet.Packet})
endsnippet

snippet PKT_casino_item_config "PKT_casino_item_config(reader *packet.Packet)"
PKT_casino_item_config( ${1:reader *packet.Packet})
endsnippet

snippet PKT_change_alliance_need_apply_indicate "PKT_change_alliance_need_apply_indicate(reader *packet.Packet)"
PKT_change_alliance_need_apply_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_change_hero_result "PKT_change_hero_result(reader *packet.Packet)"
PKT_change_hero_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_change_moral_method "PKT_change_moral_method(reader *packet.Packet)"
PKT_change_moral_method( ${1:reader *packet.Packet})
endsnippet

snippet PKT_change_name_indicate "PKT_change_name_indicate(reader *packet.Packet)"
PKT_change_name_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_chat_info "PKT_chat_info(reader *packet.Packet)"
PKT_chat_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_chat_message "PKT_chat_message(reader *packet.Packet)"
PKT_chat_message( ${1:reader *packet.Packet})
endsnippet

snippet PKT_city_indicate "PKT_city_indicate(reader *packet.Packet)"
PKT_city_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_city_info "PKT_city_info(reader *packet.Packet)"
PKT_city_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_city_time_buff_content "PKT_city_time_buff_content(reader *packet.Packet)"
PKT_city_time_buff_content( ${1:reader *packet.Packet})
endsnippet

snippet PKT_client_user_snapshot "PKT_client_user_snapshot(reader *packet.Packet)"
PKT_client_user_snapshot( ${1:reader *packet.Packet})
endsnippet

snippet PKT_command_result_info "PKT_command_result_info(reader *packet.Packet)"
PKT_command_result_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_config_army_indicate "PKT_config_army_indicate(reader *packet.Packet)"
PKT_config_army_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_config_hero_indicate "PKT_config_hero_indicate(reader *packet.Packet)"
PKT_config_hero_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_config_hero_result "PKT_config_hero_result(reader *packet.Packet)"
PKT_config_hero_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_contribution_info "PKT_contribution_info(reader *packet.Packet)"
PKT_contribution_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_country "PKT_country(reader *packet.Packet)"
PKT_country( ${1:reader *packet.Packet})
endsnippet

snippet PKT_country_name "PKT_country_name(reader *packet.Packet)"
PKT_country_name( ${1:reader *packet.Packet})
endsnippet

snippet PKT_create_alliance_request "PKT_create_alliance_request(reader *packet.Packet)"
PKT_create_alliance_request( ${1:reader *packet.Packet})
endsnippet

snippet PKT_create_building_indicate "PKT_create_building_indicate(reader *packet.Packet)"
PKT_create_building_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_daily_quest "PKT_daily_quest(reader *packet.Packet)"
PKT_daily_quest( ${1:reader *packet.Packet})
endsnippet

snippet PKT_daily_quest_indicate "PKT_daily_quest_indicate(reader *packet.Packet)"
PKT_daily_quest_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_deal_change_result "PKT_deal_change_result(reader *packet.Packet)"
PKT_deal_change_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_deal_lists "PKT_deal_lists(reader *packet.Packet)"
PKT_deal_lists( ${1:reader *packet.Packet})
endsnippet

snippet PKT_defense_city_indicate "PKT_defense_city_indicate(reader *packet.Packet)"
PKT_defense_city_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_disband_soldier_indicate "PKT_disband_soldier_indicate(reader *packet.Packet)"
PKT_disband_soldier_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_drop_village_indicate "PKT_drop_village_indicate(reader *packet.Packet)"
PKT_drop_village_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_effect_damage "PKT_effect_damage(reader *packet.Packet)"
PKT_effect_damage( ${1:reader *packet.Packet})
endsnippet

snippet PKT_effect_middle "PKT_effect_middle(reader *packet.Packet)"
PKT_effect_middle( ${1:reader *packet.Packet})
endsnippet

snippet PKT_email_addr "PKT_email_addr(reader *packet.Packet)"
PKT_email_addr( ${1:reader *packet.Packet})
endsnippet

snippet PKT_enhance_hero_indicate "PKT_enhance_hero_indicate(reader *packet.Packet)"
PKT_enhance_hero_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_fwd_battle_message_indicate "PKT_fwd_battle_message_indicate(reader *packet.Packet)"
PKT_fwd_battle_message_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_gacha_hero_indicate "PKT_gacha_hero_indicate(reader *packet.Packet)"
PKT_gacha_hero_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_game_config_list "PKT_game_config_list(reader *packet.Packet)"
PKT_game_config_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_game_config_list_indicate "PKT_game_config_list_indicate(reader *packet.Packet)"
PKT_game_config_list_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_get_items_result "PKT_get_items_result(reader *packet.Packet)"
PKT_get_items_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_get_month_login_rewards_indicate "PKT_get_month_login_rewards_indicate(reader *packet.Packet)"
PKT_get_month_login_rewards_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_get_month_login_rewards_result "PKT_get_month_login_rewards_result(reader *packet.Packet)"
PKT_get_month_login_rewards_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_get_quest_award_result "PKT_get_quest_award_result(reader *packet.Packet)"
PKT_get_quest_award_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_head_icon "PKT_head_icon(reader *packet.Packet)"
PKT_head_icon( ${1:reader *packet.Packet})
endsnippet

snippet PKT_help_alliance_resource_event_by_who "PKT_help_alliance_resource_event_by_who(reader *packet.Packet)"
PKT_help_alliance_resource_event_by_who( ${1:reader *packet.Packet})
endsnippet

snippet PKT_help_alliance_resource_indicate "PKT_help_alliance_resource_indicate(reader *packet.Packet)"
PKT_help_alliance_resource_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_help_alliance_speed_up_by_who "PKT_help_alliance_speed_up_by_who(reader *packet.Packet)"
PKT_help_alliance_speed_up_by_who( ${1:reader *packet.Packet})
endsnippet

snippet PKT_help_resource_event_info "PKT_help_resource_event_info(reader *packet.Packet)"
PKT_help_resource_event_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_hero_indicate "PKT_hero_indicate(reader *packet.Packet)"
PKT_hero_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_hero_info "PKT_hero_info(reader *packet.Packet)"
PKT_hero_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_hero_lv_up_push "PKT_hero_lv_up_push(reader *packet.Packet)"
PKT_hero_lv_up_push( ${1:reader *packet.Packet})
endsnippet

snippet PKT_hero_skill_info "PKT_hero_skill_info(reader *packet.Packet)"
PKT_hero_skill_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_hire_hero_indicate "PKT_hire_hero_indicate(reader *packet.Packet)"
PKT_hire_hero_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_hire_hero_result "PKT_hire_hero_result(reader *packet.Packet)"
PKT_hire_hero_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_item_config "PKT_item_config(reader *packet.Packet)"
PKT_item_config( ${1:reader *packet.Packet})
endsnippet

snippet PKT_join_alliance_application "PKT_join_alliance_application(reader *packet.Packet)"
PKT_join_alliance_application( ${1:reader *packet.Packet})
endsnippet

snippet PKT_join_alliance_condition "PKT_join_alliance_condition(reader *packet.Packet)"
PKT_join_alliance_condition( ${1:reader *packet.Packet})
endsnippet

snippet PKT_join_alliance_condition_info "PKT_join_alliance_condition_info(reader *packet.Packet)"
PKT_join_alliance_condition_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_location "PKT_location(reader *packet.Packet)"
PKT_location( ${1:reader *packet.Packet})
endsnippet

snippet PKT_log_in_config "PKT_log_in_config(reader *packet.Packet)"
PKT_log_in_config( ${1:reader *packet.Packet})
endsnippet

snippet PKT_log_in_reward "PKT_log_in_reward(reader *packet.Packet)"
PKT_log_in_reward( ${1:reader *packet.Packet})
endsnippet

snippet PKT_mail_id "PKT_mail_id(reader *packet.Packet)"
PKT_mail_id( ${1:reader *packet.Packet})
endsnippet

snippet PKT_map_area "PKT_map_area(reader *packet.Packet)"
PKT_map_area( ${1:reader *packet.Packet})
endsnippet

snippet PKT_map_area_coordinate "PKT_map_area_coordinate(reader *packet.Packet)"
PKT_map_area_coordinate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_map_area_response "PKT_map_area_response(reader *packet.Packet)"
PKT_map_area_response( ${1:reader *packet.Packet})
endsnippet

snippet PKT_map_battle_end_push "PKT_map_battle_end_push(reader *packet.Packet)"
PKT_map_battle_end_push( ${1:reader *packet.Packet})
endsnippet

snippet PKT_map_bookmark "PKT_map_bookmark(reader *packet.Packet)"
PKT_map_bookmark( ${1:reader *packet.Packet})
endsnippet

snippet PKT_map_bookmark_index "PKT_map_bookmark_index(reader *packet.Packet)"
PKT_map_bookmark_index( ${1:reader *packet.Packet})
endsnippet

snippet PKT_map_bookmark_list "PKT_map_bookmark_list(reader *packet.Packet)"
PKT_map_bookmark_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_map_change_push "PKT_map_change_push(reader *packet.Packet)"
PKT_map_change_push( ${1:reader *packet.Packet})
endsnippet

snippet PKT_map_move_event "PKT_map_move_event(reader *packet.Packet)"
PKT_map_move_event( ${1:reader *packet.Packet})
endsnippet

snippet PKT_move_army_and_attack_indicate "PKT_move_army_and_attack_indicate(reader *packet.Packet)"
PKT_move_army_and_attack_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_move_army_indicate "PKT_move_army_indicate(reader *packet.Packet)"
PKT_move_army_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_move_city_indicate "PKT_move_city_indicate(reader *packet.Packet)"
PKT_move_city_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_move_city_result "PKT_move_city_result(reader *packet.Packet)"
PKT_move_city_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_move_hero_back_to_city_indicate "PKT_move_hero_back_to_city_indicate(reader *packet.Packet)"
PKT_move_hero_back_to_city_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_new_chat_message "PKT_new_chat_message(reader *packet.Packet)"
PKT_new_chat_message( ${1:reader *packet.Packet})
endsnippet

snippet PKT_notification_message "PKT_notification_message(reader *packet.Packet)"
PKT_notification_message( ${1:reader *packet.Packet})
endsnippet

snippet PKT_outdate_quest_list "PKT_outdate_quest_list(reader *packet.Packet)"
PKT_outdate_quest_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_plot_info "PKT_plot_info(reader *packet.Packet)"
PKT_plot_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_quest_content "PKT_quest_content(reader *packet.Packet)"
PKT_quest_content( ${1:reader *packet.Packet})
endsnippet

snippet PKT_quest_list "PKT_quest_list(reader *packet.Packet)"
PKT_quest_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_rank_info "PKT_rank_info(reader *packet.Packet)"
PKT_rank_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_rank_list "PKT_rank_list(reader *packet.Packet)"
PKT_rank_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_rank_name "PKT_rank_name(reader *packet.Packet)"
PKT_rank_name( ${1:reader *packet.Packet})
endsnippet

snippet PKT_recruit_cart_indicate "PKT_recruit_cart_indicate(reader *packet.Packet)"
PKT_recruit_cart_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_recruit_event_info "PKT_recruit_event_info(reader *packet.Packet)"
PKT_recruit_event_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_recruit_raven_indicate "PKT_recruit_raven_indicate(reader *packet.Packet)"
PKT_recruit_raven_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_recruit_soldier_speed_up_indicate "PKT_recruit_soldier_speed_up_indicate(reader *packet.Packet)"
PKT_recruit_soldier_speed_up_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_recruit_soldier_unlock_positon_indicate "PKT_recruit_soldier_unlock_positon_indicate(reader *packet.Packet)"
PKT_recruit_soldier_unlock_positon_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_refresh_hero_list_indicate "PKT_refresh_hero_list_indicate(reader *packet.Packet)"
PKT_refresh_hero_list_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_refresh_hero_list_result "PKT_refresh_hero_list_result(reader *packet.Packet)"
PKT_refresh_hero_list_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_rename_army_indicate "PKT_rename_army_indicate(reader *packet.Packet)"
PKT_rename_army_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_reply_get_alliance_official_indicate "PKT_reply_get_alliance_official_indicate(reader *packet.Packet)"
PKT_reply_get_alliance_official_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_resource_info "PKT_resource_info(reader *packet.Packet)"
PKT_resource_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_resource_ship_indicate "PKT_resource_ship_indicate(reader *packet.Packet)"
PKT_resource_ship_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_return_thing "PKT_return_thing(reader *packet.Packet)"
PKT_return_thing( ${1:reader *packet.Packet})
endsnippet

snippet PKT_revive_event_info "PKT_revive_event_info(reader *packet.Packet)"
PKT_revive_event_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_revive_soldier_indicate "PKT_revive_soldier_indicate(reader *packet.Packet)"
PKT_revive_soldier_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_revive_soldier_speed_up_indicate "PKT_revive_soldier_speed_up_indicate(reader *packet.Packet)"
PKT_revive_soldier_speed_up_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_rob_resource "PKT_rob_resource(reader *packet.Packet)"
PKT_rob_resource( ${1:reader *packet.Packet})
endsnippet

snippet PKT_roulette_result "PKT_roulette_result(reader *packet.Packet)"
PKT_roulette_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_scout_indicate "PKT_scout_indicate(reader *packet.Packet)"
PKT_scout_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_search_words "PKT_search_words(reader *packet.Packet)"
PKT_search_words( ${1:reader *packet.Packet})
endsnippet

snippet PKT_select_role_hero_indicate "PKT_select_role_hero_indicate(reader *packet.Packet)"
PKT_select_role_hero_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_sell_deal_info "PKT_sell_deal_info(reader *packet.Packet)"
PKT_sell_deal_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_sell_hero_indicate "PKT_sell_hero_indicate(reader *packet.Packet)"
PKT_sell_hero_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_sell_resource_indicate "PKT_sell_resource_indicate(reader *packet.Packet)"
PKT_sell_resource_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_shout_on_map_indicate "PKT_shout_on_map_indicate(reader *packet.Packet)"
PKT_shout_on_map_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_simple_quest_content "PKT_simple_quest_content(reader *packet.Packet)"
PKT_simple_quest_content( ${1:reader *packet.Packet})
endsnippet

snippet PKT_single_battle_detail "PKT_single_battle_detail(reader *packet.Packet)"
PKT_single_battle_detail( ${1:reader *packet.Packet})
endsnippet

snippet PKT_soldier_buff "PKT_soldier_buff(reader *packet.Packet)"
PKT_soldier_buff( ${1:reader *packet.Packet})
endsnippet

snippet PKT_soldier_change_result "PKT_soldier_change_result(reader *packet.Packet)"
PKT_soldier_change_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_soldier_indicate "PKT_soldier_indicate(reader *packet.Packet)"
PKT_soldier_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_soldiers_info "PKT_soldiers_info(reader *packet.Packet)"
PKT_soldiers_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_swallow_hero_indicate "PKT_swallow_hero_indicate(reader *packet.Packet)"
PKT_swallow_hero_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_system_notification_list "PKT_system_notification_list(reader *packet.Packet)"
PKT_system_notification_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_system_notification_list_indicate "PKT_system_notification_list_indicate(reader *packet.Packet)"
PKT_system_notification_list_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_technology_indicate "PKT_technology_indicate(reader *packet.Packet)"
PKT_technology_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_technology_info "PKT_technology_info(reader *packet.Packet)"
PKT_technology_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_technology_operation_result "PKT_technology_operation_result(reader *packet.Packet)"
PKT_technology_operation_result( ${1:reader *packet.Packet})
endsnippet

snippet PKT_technology_speed_up_indicate "PKT_technology_speed_up_indicate(reader *packet.Packet)"
PKT_technology_speed_up_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_unlock_deal_queue_indicate "PKT_unlock_deal_queue_indicate(reader *packet.Packet)"
PKT_unlock_deal_queue_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_unlock_position_indicate "PKT_unlock_position_indicate(reader *packet.Packet)"
PKT_unlock_position_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_unlock_upgrade_queue_indicate "PKT_unlock_upgrade_queue_indicate(reader *packet.Packet)"
PKT_unlock_upgrade_queue_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_use_buff_result_info "PKT_use_buff_result_info(reader *packet.Packet)"
PKT_use_buff_result_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_use_item_indicate "PKT_use_item_indicate(reader *packet.Packet)"
PKT_use_item_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_use_speed_up_item_indicate "PKT_use_speed_up_item_indicate(reader *packet.Packet)"
PKT_use_speed_up_item_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_activity_info "PKT_user_activity_info(reader *packet.Packet)"
PKT_user_activity_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_alliance_info "PKT_user_alliance_info(reader *packet.Packet)"
PKT_user_alliance_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_basic_info "PKT_user_basic_info(reader *packet.Packet)"
PKT_user_basic_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_be_attacked_info "PKT_user_be_attacked_info(reader *packet.Packet)"
PKT_user_be_attacked_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_daily_status_info "PKT_user_daily_status_info(reader *packet.Packet)"
PKT_user_daily_status_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_guide_id "PKT_user_guide_id(reader *packet.Packet)"
PKT_user_guide_id( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_guide_progress "PKT_user_guide_progress(reader *packet.Packet)"
PKT_user_guide_progress( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_id "PKT_user_id(reader *packet.Packet)"
PKT_user_id( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_ids "PKT_user_ids(reader *packet.Packet)"
PKT_user_ids( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_info "PKT_user_info(reader *packet.Packet)"
PKT_user_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_item "PKT_user_item(reader *packet.Packet)"
PKT_user_item( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_item_list "PKT_user_item_list(reader *packet.Packet)"
PKT_user_item_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_item_list_indicate "PKT_user_item_list_indicate(reader *packet.Packet)"
PKT_user_item_list_indicate( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_list "PKT_user_list(reader *packet.Packet)"
PKT_user_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_login_info "PKT_user_login_info(reader *packet.Packet)"
PKT_user_login_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_mail "PKT_user_mail(reader *packet.Packet)"
PKT_user_mail( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_mail_info "PKT_user_mail_info(reader *packet.Packet)"
PKT_user_mail_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_mail_list "PKT_user_mail_list(reader *packet.Packet)"
PKT_user_mail_list( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_resource_info "PKT_user_resource_info(reader *packet.Packet)"
PKT_user_resource_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_short_snapshot "PKT_user_short_snapshot(reader *packet.Packet)"
PKT_user_short_snapshot( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_snapshot "PKT_user_snapshot(reader *packet.Packet)"
PKT_user_snapshot( ${1:reader *packet.Packet})
endsnippet

snippet PKT_user_status_info "PKT_user_status_info(reader *packet.Packet)"
PKT_user_status_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_version_info "PKT_version_info(reader *packet.Packet)"
PKT_version_info( ${1:reader *packet.Packet})
endsnippet

snippet PKT_village_event "PKT_village_event(reader *packet.Packet)"
PKT_village_event( ${1:reader *packet.Packet})
endsnippet

snippet PKT_world_map_info "PKT_world_map_info(reader *packet.Packet)"
PKT_world_map_info( ${1:reader *packet.Packet})
endsnippet

snippet P_accept_alliance_invite_req "P_accept_alliance_invite_req(user *User, reader *packet.Packet, code int16)"
P_accept_alliance_invite_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_activity_list_req "P_activity_list_req(user *User, reader *packet.Packet, code int16)"
P_activity_list_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_add_map_bookmark_req "P_add_map_bookmark_req(user *User, reader *packet.Packet, code int16)"
P_add_map_bookmark_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_alliance_donate_req "P_alliance_donate_req(user *User, reader *packet.Packet, code int16)"
P_alliance_donate_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_alliance_help_speed_up_all_req "P_alliance_help_speed_up_all_req(user *User, reader *packet.Packet, code int16)"
P_alliance_help_speed_up_all_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_alliance_help_speed_up_req "P_alliance_help_speed_up_req(user *User, reader *packet.Packet, code int16)"
P_alliance_help_speed_up_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_alliance_levelup_tech_req "P_alliance_levelup_tech_req(user *User, reader *packet.Packet, code int16)"
P_alliance_levelup_tech_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_alliance_public_info_req "P_alliance_public_info_req(user *User, reader *packet.Packet, code int16)"
P_alliance_public_info_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_appoint_member_official_req "P_appoint_member_official_req(user *User, reader *packet.Packet, code int16)"
P_appoint_member_official_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_army_attack_req "P_army_attack_req(user *User, reader *packet.Packet, code int16)"
P_army_attack_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_ask_alliance_resource_req "P_ask_alliance_resource_req(user *User, reader *packet.Packet, code int16)"
P_ask_alliance_resource_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_attack_user_req "P_attack_user_req(user *User, reader *packet.Packet, code int16)"
P_attack_user_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_attack_village_req "P_attack_village_req(user *User, reader *packet.Packet, code int16)"
P_attack_village_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_bind_user_email_addr_req "P_bind_user_email_addr_req(user *User, reader *packet.Packet, code int16)"
P_bind_user_email_addr_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_buy_item_req "P_buy_item_req(user *User, reader *packet.Packet, code int16)"
P_buy_item_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_buy_resource_req "P_buy_resource_req(user *User, reader *packet.Packet, code int16)"
P_buy_resource_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_cancel_alliance_resource_req "P_cancel_alliance_resource_req(user *User, reader *packet.Packet, code int16)"
P_cancel_alliance_resource_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_cancel_building_req "P_cancel_building_req(user *User, reader *packet.Packet, code int16)"
P_cancel_building_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_cancel_deal_req "P_cancel_deal_req(user *User, reader *packet.Packet, code int16)"
P_cancel_deal_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_change_alliance_desc_req "P_change_alliance_desc_req(user *User, reader *packet.Packet, code int16)"
P_change_alliance_desc_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_change_alliance_flag_req "P_change_alliance_flag_req(user *User, reader *packet.Packet, code int16)"
P_change_alliance_flag_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_change_alliance_need_apply_req "P_change_alliance_need_apply_req(user *User, reader *packet.Packet, code int16)"
P_change_alliance_need_apply_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_change_head_icon_req "P_change_head_icon_req(user *User, reader *packet.Packet, code int16)"
P_change_head_icon_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_change_name_req "P_change_name_req(user *User, reader *packet.Packet, code int16)"
P_change_name_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_config_hero_req "P_config_hero_req(user *User, reader *packet.Packet, code int16)"
P_config_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_create_alliance_req "P_create_alliance_req(user *User, reader *packet.Packet, code int16)"
P_create_alliance_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_create_building_req "P_create_building_req(user *User, reader *packet.Packet, code int16)"
P_create_building_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_defense_city_req "P_defense_city_req(user *User, reader *packet.Packet, code int16)"
P_defense_city_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_delete_alliance_req "P_delete_alliance_req(user *User, reader *packet.Packet, code int16)"
P_delete_alliance_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_delete_battle_message_req "P_delete_battle_message_req(user *User, reader *packet.Packet, code int16)"
P_delete_battle_message_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_delete_mail_req "P_delete_mail_req(user *User, reader *packet.Packet, code int16)"
P_delete_mail_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_delete_map_bookmark_req "P_delete_map_bookmark_req(user *User, reader *packet.Packet, code int16)"
P_delete_map_bookmark_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_demote_alliance_member_req "P_demote_alliance_member_req(user *User, reader *packet.Packet, code int16)"
P_demote_alliance_member_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_destroy_building_req "P_destroy_building_req(user *User, reader *packet.Packet, code int16)"
P_destroy_building_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_disband_wall_soldier_req "P_disband_wall_soldier_req(user *User, reader *packet.Packet, code int16)"
P_disband_wall_soldier_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_disband_wounded_soldier_req "P_disband_wounded_soldier_req(user *User, reader *packet.Packet, code int16)"
P_disband_wounded_soldier_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_drop_village_req "P_drop_village_req(user *User, reader *packet.Packet, code int16)"
P_drop_village_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_enhance_hero_req "P_enhance_hero_req(user *User, reader *packet.Packet, code int16)"
P_enhance_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_enter_585_building_req "P_enter_585_building_req(user *User, reader *packet.Packet, code int16)"
P_enter_585_building_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_finished_quest_list_notify "P_finished_quest_list_notify(user *User, reader *packet.Packet, code int16)"
P_finished_quest_list_notify( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_finished_quest_list_req "P_finished_quest_list_req(user *User, reader *packet.Packet, code int16)"
P_finished_quest_list_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_fire_alliance_member_req "P_fire_alliance_member_req(user *User, reader *packet.Packet, code int16)"
P_fire_alliance_member_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_fire_hero_req "P_fire_hero_req(user *User, reader *packet.Packet, code int16)"
P_fire_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_fwd_battle_message_req "P_fwd_battle_message_req(user *User, reader *packet.Packet, code int16)"
P_fwd_battle_message_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_fwd_mail_req "P_fwd_mail_req(user *User, reader *packet.Packet, code int16)"
P_fwd_mail_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_gacha_hero_req "P_gacha_hero_req(user *User, reader *packet.Packet, code int16)"
P_gacha_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_game_config_list_req "P_game_config_list_req(user *User, reader *packet.Packet, code int16)"
P_game_config_list_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_alliance_daily_quest_per_reward_req "P_get_alliance_daily_quest_per_reward_req(user *User, reader *packet.Packet, code int16)"
P_get_alliance_daily_quest_per_reward_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_alliance_daily_quest_reward_req "P_get_alliance_daily_quest_reward_req(user *User, reader *packet.Packet, code int16)"
P_get_alliance_daily_quest_reward_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_alliance_member_list_req "P_get_alliance_member_list_req(user *User, reader *packet.Packet, code int16)"
P_get_alliance_member_list_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_alliance_snapshot_req "P_get_alliance_snapshot_req(user *User, reader *packet.Packet, code int16)"
P_get_alliance_snapshot_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_army_move_path_req "P_get_army_move_path_req(user *User, reader *packet.Packet, code int16)"
P_get_army_move_path_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_battle_message_detail_req "P_get_battle_message_detail_req(user *User, reader *packet.Packet, code int16)"
P_get_battle_message_detail_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_battle_message_lists_req "P_get_battle_message_lists_req(user *User, reader *packet.Packet, code int16)"
P_get_battle_message_lists_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_daily_quest_reward_req "P_get_daily_quest_reward_req(user *User, reader *packet.Packet, code int16)"
P_get_daily_quest_reward_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_deal_lists_req "P_get_deal_lists_req(user *User, reader *packet.Packet, code int16)"
P_get_deal_lists_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_egg_award_req "P_get_egg_award_req(user *User, reader *packet.Packet, code int16)"
P_get_egg_award_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_global_rank_req "P_get_global_rank_req(user *User, reader *packet.Packet, code int16)"
P_get_global_rank_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_mail_goods_req "P_get_mail_goods_req(user *User, reader *packet.Packet, code int16)"
P_get_mail_goods_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_mail_list_req "P_get_mail_list_req(user *User, reader *packet.Packet, code int16)"
P_get_mail_list_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_map_bookmark_req "P_get_map_bookmark_req(user *User, reader *packet.Packet, code int16)"
P_get_map_bookmark_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_month_login_rewards_req "P_get_month_login_rewards_req(user *User, reader *packet.Packet, code int16)"
P_get_month_login_rewards_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_online_gift_req "P_get_online_gift_req(user *User, reader *packet.Packet, code int16)"
P_get_online_gift_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_quest_award_req "P_get_quest_award_req(user *User, reader *packet.Packet, code int16)"
P_get_quest_award_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_roulette_rewards_req "P_get_roulette_rewards_req(user *User, reader *packet.Packet, code int16)"
P_get_roulette_rewards_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_user_guide_award_req "P_get_user_guide_award_req(user *User, reader *packet.Packet, code int16)"
P_get_user_guide_award_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_user_public_info_req "P_get_user_public_info_req(user *User, reader *packet.Packet, code int16)"
P_get_user_public_info_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_get_user_rank_req "P_get_user_rank_req(user *User, reader *packet.Packet, code int16)"
P_get_user_rank_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_heart_beat_req "P_heart_beat_req(user *User, reader *packet.Packet, code int16)"
P_heart_beat_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_help_alliance_resource_req "P_help_alliance_resource_req(user *User, reader *packet.Packet, code int16)"
P_help_alliance_resource_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_hire_hero_req "P_hire_hero_req(user *User, reader *packet.Packet, code int16)"
P_hire_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_invite_user_join_alliance_req "P_invite_user_join_alliance_req(user *User, reader *packet.Packet, code int16)"
P_invite_user_join_alliance_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_item_product_list_req "P_item_product_list_req(user *User, reader *packet.Packet, code int16)"
P_item_product_list_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_join_alliance_req "P_join_alliance_req(user *User, reader *packet.Packet, code int16)"
P_join_alliance_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_level_up_building_req "P_level_up_building_req(user *User, reader *packet.Packet, code int16)"
P_level_up_building_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_lv_up_hero_req "P_lv_up_hero_req(user *User, reader *packet.Packet, code int16)"
P_lv_up_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_move_army_and_attack_req "P_move_army_and_attack_req(user *User, reader *packet.Packet, code int16)"
P_move_army_and_attack_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_move_army_req "P_move_army_req(user *User, reader *packet.Packet, code int16)"
P_move_army_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_move_city_req "P_move_city_req(user *User, reader *packet.Packet, code int16)"
P_move_city_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_move_hero_back_to_city_req "P_move_hero_back_to_city_req(user *User, reader *packet.Packet, code int16)"
P_move_hero_back_to_city_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_not_use_hero_req "P_not_use_hero_req(user *User, reader *packet.Packet, code int16)"
P_not_use_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_outdate_quest_list_req "P_outdate_quest_list_req(user *User, reader *packet.Packet, code int16)"
P_outdate_quest_list_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_publish_alliance_announce_req "P_publish_alliance_announce_req(user *User, reader *packet.Packet, code int16)"
P_publish_alliance_announce_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_quit_alliance_req "P_quit_alliance_req(user *User, reader *packet.Packet, code int16)"
P_quit_alliance_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_read_mail_req "P_read_mail_req(user *User, reader *packet.Packet, code int16)"
P_read_mail_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_recruit_cart_req "P_recruit_cart_req(user *User, reader *packet.Packet, code int16)"
P_recruit_cart_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_recruit_cart_speed_up_req "P_recruit_cart_speed_up_req(user *User, reader *packet.Packet, code int16)"
P_recruit_cart_speed_up_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_recruit_raven_req "P_recruit_raven_req(user *User, reader *packet.Packet, code int16)"
P_recruit_raven_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_recruit_raven_speed_up_req "P_recruit_raven_speed_up_req(user *User, reader *packet.Packet, code int16)"
P_recruit_raven_speed_up_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_recruit_soldier_req "P_recruit_soldier_req(user *User, reader *packet.Packet, code int16)"
P_recruit_soldier_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_recruit_soldier_speed_up_req "P_recruit_soldier_speed_up_req(user *User, reader *packet.Packet, code int16)"
P_recruit_soldier_speed_up_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_recruit_wall_soldier_req "P_recruit_wall_soldier_req(user *User, reader *packet.Packet, code int16)"
P_recruit_wall_soldier_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_recruit_wall_soldier_speed_up_req "P_recruit_wall_soldier_speed_up_req(user *User, reader *packet.Packet, code int16)"
P_recruit_wall_soldier_speed_up_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_refresh_alliance_snapshot_notify "P_refresh_alliance_snapshot_notify(user *User, reader *packet.Packet, code int16)"
P_refresh_alliance_snapshot_notify( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_refresh_daily_quests_req "P_refresh_daily_quests_req(user *User, reader *packet.Packet, code int16)"
P_refresh_daily_quests_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_refresh_hero_list_req "P_refresh_hero_list_req(user *User, reader *packet.Packet, code int16)"
P_refresh_hero_list_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_refresh_sell_lists_notify "P_refresh_sell_lists_notify(user *User, reader *packet.Packet, code int16)"
P_refresh_sell_lists_notify( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_refresh_user_notify "P_refresh_user_notify(user *User, reader *packet.Packet, code int16)"
P_refresh_user_notify( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_refresh_user_req "P_refresh_user_req(user *User, reader *packet.Packet, code int16)"
P_refresh_user_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_refresh_user_resource_data_req "P_refresh_user_resource_data_req(user *User, reader *packet.Packet, code int16)"
P_refresh_user_resource_data_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_rename_army_req "P_rename_army_req(user *User, reader *packet.Packet, code int16)"
P_rename_army_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_reply_join_alliance_req "P_reply_join_alliance_req(user *User, reader *packet.Packet, code int16)"
P_reply_join_alliance_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_resource_ship_req "P_resource_ship_req(user *User, reader *packet.Packet, code int16)"
P_resource_ship_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_revive_soldier_req "P_revive_soldier_req(user *User, reader *packet.Packet, code int16)"
P_revive_soldier_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_revive_soldier_speed_up_req "P_revive_soldier_speed_up_req(user *User, reader *packet.Packet, code int16)"
P_revive_soldier_speed_up_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_scout_req "P_scout_req(user *User, reader *packet.Packet, code int16)"
P_scout_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_search_alliance_req "P_search_alliance_req(user *User, reader *packet.Packet, code int16)"
P_search_alliance_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_search_user_req "P_search_user_req(user *User, reader *packet.Packet, code int16)"
P_search_user_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_select_role_hero_req "P_select_role_hero_req(user *User, reader *packet.Packet, code int16)"
P_select_role_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_sell_hero_req "P_sell_hero_req(user *User, reader *packet.Packet, code int16)"
P_sell_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_sell_resource_req "P_sell_resource_req(user *User, reader *packet.Packet, code int16)"
P_sell_resource_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_send_alliance_mail_req "P_send_alliance_mail_req(user *User, reader *packet.Packet, code int16)"
P_send_alliance_mail_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_send_mail_req "P_send_mail_req(user *User, reader *packet.Packet, code int16)"
P_send_mail_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_server_level_up_req "P_server_level_up_req(user *User, reader *packet.Packet, code int16)"
P_server_level_up_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_shout_on_map_req "P_shout_on_map_req(user *User, reader *packet.Packet, code int16)"
P_shout_on_map_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_show_map_req "P_show_map_req(user *User, reader *packet.Packet, code int16)"
P_show_map_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_speak_in_world_req "P_speak_in_world_req(user *User, reader *packet.Packet, code int16)"
P_speak_in_world_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_speed_up_alliance_daily_quest_req "P_speed_up_alliance_daily_quest_req(user *User, reader *packet.Packet, code int16)"
P_speed_up_alliance_daily_quest_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_speed_up_building_req "P_speed_up_building_req(user *User, reader *packet.Packet, code int16)"
P_speed_up_building_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_speed_up_daily_quest_req "P_speed_up_daily_quest_req(user *User, reader *packet.Packet, code int16)"
P_speed_up_daily_quest_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_star_mail_req "P_star_mail_req(user *User, reader *packet.Packet, code int16)"
P_star_mail_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_start_alliance_daily_quest_req "P_start_alliance_daily_quest_req(user *User, reader *packet.Packet, code int16)"
P_start_alliance_daily_quest_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_start_daily_quest_req "P_start_daily_quest_req(user *User, reader *packet.Packet, code int16)"
P_start_daily_quest_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_swallow_hero_req "P_swallow_hero_req(user *User, reader *packet.Packet, code int16)"
P_swallow_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_system_notification_list_req "P_system_notification_list_req(user *User, reader *packet.Packet, code int16)"
P_system_notification_list_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_technology_level_up_req "P_technology_level_up_req(user *User, reader *packet.Packet, code int16)"
P_technology_level_up_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_technology_speed_up_req "P_technology_speed_up_req(user *User, reader *packet.Packet, code int16)"
P_technology_speed_up_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_test_api_req "P_test_api_req(user *User, reader *packet.Packet, code int16)"
P_test_api_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_transfer_alliance_leader_req "P_transfer_alliance_leader_req(user *User, reader *packet.Packet, code int16)"
P_transfer_alliance_leader_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_unlock_building_position "P_unlock_building_position(user *User, reader *packet.Packet, code int16)"
P_unlock_building_position( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_unlock_deal_queue_req "P_unlock_deal_queue_req(user *User, reader *packet.Packet, code int16)"
P_unlock_deal_queue_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_unlock_hero_position_req "P_unlock_hero_position_req(user *User, reader *packet.Packet, code int16)"
P_unlock_hero_position_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_unlock_next_army_req "P_unlock_next_army_req(user *User, reader *packet.Packet, code int16)"
P_unlock_next_army_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_unlock_upgrade_queue_req "P_unlock_upgrade_queue_req(user *User, reader *packet.Packet, code int16)"
P_unlock_upgrade_queue_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_update_user_guide_progress_req "P_update_user_guide_progress_req(user *User, reader *packet.Packet, code int16)"
P_update_user_guide_progress_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_use_buff_req "P_use_buff_req(user *User, reader *packet.Packet, code int16)"
P_use_buff_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_use_hero_req "P_use_hero_req(user *User, reader *packet.Packet, code int16)"
P_use_hero_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_use_item_req "P_use_item_req(user *User, reader *packet.Packet, code int16)"
P_use_item_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_use_speed_up_item_req "P_use_speed_up_item_req(user *User, reader *packet.Packet, code int16)"
P_use_speed_up_item_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_user_be_attacked_notify "P_user_be_attacked_notify(user *User, reader *packet.Packet, code int16)"
P_user_be_attacked_notify( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_user_item_list_req "P_user_item_list_req(user *User, reader *packet.Packet, code int16)"
P_user_item_list_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_user_login_req "P_user_login_req(user *User, reader *packet.Packet, code int16)"
P_user_login_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet P_world_map_info_req "P_world_map_info_req(user *User, reader *packet.Packet, code int16)"
P_world_map_info_req( ${1:user *User}, ${2:reader *packet.Packet}, ${3:code int16})
endsnippet

snippet Pack "Pack(tos int16, tbl interface{}, writer *Packet)"
Pack( ${1:tos int16}, ${2:tbl interface{}}, ${3:writer *Packet})
endsnippet

snippet PackDir "PackDir(d *Dir, buf []byte, dotu bool)"
PackDir( ${1:d *Dir}, ${2:buf []byte}, ${3:dotu bool})
endsnippet

snippet PackRattach "PackRattach(fc *Fcall, aqid *Qid)"
PackRattach( ${1:fc *Fcall}, ${2:aqid *Qid})
endsnippet

snippet PackRauth "PackRauth(fc *Fcall, aqid *Qid)"
PackRauth( ${1:fc *Fcall}, ${2:aqid *Qid})
endsnippet

snippet PackRclunk "PackRclunk(fc *Fcall)"
PackRclunk( ${1:fc *Fcall})
endsnippet

snippet PackRcreate "PackRcreate(fc *Fcall, qid *Qid, iounit uint32)"
PackRcreate( ${1:fc *Fcall}, ${2:qid *Qid}, ${3:iounit uint32})
endsnippet

snippet PackRerror "PackRerror(fc *Fcall, error string, errornum uint32, dotu bool)"
PackRerror( ${1:fc *Fcall}, ${2:error string}, ${3:errornum uint32}, ${4:dotu bool})
endsnippet

snippet PackRflush "PackRflush(fc *Fcall)"
PackRflush( ${1:fc *Fcall})
endsnippet

snippet PackRopen "PackRopen(fc *Fcall, qid *Qid, iounit uint32)"
PackRopen( ${1:fc *Fcall}, ${2:qid *Qid}, ${3:iounit uint32})
endsnippet

snippet PackRread "PackRread(fc *Fcall, data []byte)"
PackRread( ${1:fc *Fcall}, ${2:data []byte})
endsnippet

snippet PackRremove "PackRremove(fc *Fcall)"
PackRremove( ${1:fc *Fcall})
endsnippet

snippet PackRstat "PackRstat(fc *Fcall, d *Dir, dotu bool)"
PackRstat( ${1:fc *Fcall}, ${2:d *Dir}, ${3:dotu bool})
endsnippet

snippet PackRversion "PackRversion(fc *Fcall, msize uint32, version string)"
PackRversion( ${1:fc *Fcall}, ${2:msize uint32}, ${3:version string})
endsnippet

snippet PackRwalk "PackRwalk(fc *Fcall, wqids []Qid)"
PackRwalk( ${1:fc *Fcall}, ${2:wqids []Qid})
endsnippet

snippet PackRwrite "PackRwrite(fc *Fcall, count uint32)"
PackRwrite( ${1:fc *Fcall}, ${2:count uint32})
endsnippet

snippet PackRwstat "PackRwstat(fc *Fcall)"
PackRwstat( ${1:fc *Fcall})
endsnippet

snippet PackTattach "PackTattach(fc *Fcall, fid uint32, afid uint32, uname string, aname string, unamenum uint32, dotu bool)"
PackTattach( ${1:fc *Fcall}, ${2:fid uint32}, ${3:afid uint32}, ${4:uname string}, ${5:aname string}, ${6:unamenum uint32}, ${7:dotu bool})
endsnippet

snippet PackTauth "PackTauth(fc *Fcall, fid uint32, uname string, aname string, unamenum uint32, dotu bool)"
PackTauth( ${1:fc *Fcall}, ${2:fid uint32}, ${3:uname string}, ${4:aname string}, ${5:unamenum uint32}, ${6:dotu bool})
endsnippet

snippet PackTclunk "PackTclunk(fc *Fcall, fid uint32)"
PackTclunk( ${1:fc *Fcall}, ${2:fid uint32})
endsnippet

snippet PackTcreate "PackTcreate(fc *Fcall, fid uint32, name string, perm uint32, mode uint8, ext string, dotu bool)"
PackTcreate( ${1:fc *Fcall}, ${2:fid uint32}, ${3:name string}, ${4:perm uint32}, ${5:mode uint8}, ${6:ext string}, ${7:dotu bool})
endsnippet

snippet PackTflush "PackTflush(fc *Fcall, oldtag uint16)"
PackTflush( ${1:fc *Fcall}, ${2:oldtag uint16})
endsnippet

snippet PackTo "PackTo(srcPath, destPath string, includeDir ...bool)"
PackTo( ${1:srcPath}, ${2:destPath string}, ${3:includeDir ...bool})
endsnippet

snippet PackToFunc "PackToFunc(srcPath, destPath string, fn func(fullName string, fi os.FileInfo)"
PackToFunc( ${1:srcPath}, ${2:destPath string}, ${3:fn func(fullName string}, ${4:fi os.FileInfo})
endsnippet

snippet PackTopen "PackTopen(fc *Fcall, fid uint32, mode uint8)"
PackTopen( ${1:fc *Fcall}, ${2:fid uint32}, ${3:mode uint8})
endsnippet

snippet PackTread "PackTread(fc *Fcall, fid uint32, offset uint64, count uint32)"
PackTread( ${1:fc *Fcall}, ${2:fid uint32}, ${3:offset uint64}, ${4:count uint32})
endsnippet

snippet PackTremove "PackTremove(fc *Fcall, fid uint32)"
PackTremove( ${1:fc *Fcall}, ${2:fid uint32})
endsnippet

snippet PackTstat "PackTstat(fc *Fcall, fid uint32)"
PackTstat( ${1:fc *Fcall}, ${2:fid uint32})
endsnippet

snippet PackTversion "PackTversion(fc *Fcall, msize uint32, version string)"
PackTversion( ${1:fc *Fcall}, ${2:msize uint32}, ${3:version string})
endsnippet

snippet PackTwalk "PackTwalk(fc *Fcall, fid uint32, newfid uint32, wnames []string)"
PackTwalk( ${1:fc *Fcall}, ${2:fid uint32}, ${3:newfid uint32}, ${4:wnames []string})
endsnippet

snippet PackTwrite "PackTwrite(fc *Fcall, fid uint32, offset uint64, count uint32, data []byte)"
PackTwrite( ${1:fc *Fcall}, ${2:fid uint32}, ${3:offset uint64}, ${4:count uint32}, ${5:data []byte})
endsnippet

snippet PackTwstat "PackTwstat(fc *Fcall, fid uint32, d *Dir, dotu bool)"
PackTwstat( ${1:fc *Fcall}, ${2:fid uint32}, ${3:d *Dir}, ${4:dotu bool})
endsnippet

snippet PackageExports "PackageExports(pkg *Package)"
PackageExports( ${1:pkg *Package})
endsnippet

snippet Packages "Packages(c appengine.Context, kind string)"
Packages( ${1:c appengine.Context}, ${2:kind string})
endsnippet

snippet Panic "Panic(args ...interface{})"
Panic( ${1:args ...interface{}})
endsnippet

snippet Panicf "Panicf(format string, args ...interface{})"
Panicf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet Panicln "Panicln(args ...interface{})"
Panicln( ${1:args ...interface{}})
endsnippet

snippet ParentDeathSignal "ParentDeathSignal(sig uintptr)"
ParentDeathSignal( ${1:sig uintptr})
endsnippet

snippet Parse "Parse(r io.Reader)"
Parse( ${1:r io.Reader})
endsnippet

snippet ParseBenchSet "ParseBenchSet(r io.Reader)"
ParseBenchSet( ${1:r io.Reader})
endsnippet

snippet ParseCgroupFile "ParseCgroupFile(subsystem string, r io.Reader)"
ParseCgroupFile( ${1:subsystem string}, ${2:r io.Reader})
endsnippet

snippet ParseConditionsToMap "ParseConditionsToMap(str string)"
ParseConditionsToMap( ${1:str string})
endsnippet

snippet ParseDeclList "ParseDeclList(fset *token.FileSet, filename string, src interface{}, scope *ast.Scope)"
ParseDeclList( ${1:fset *token.FileSet}, ${2:filename string}, ${3:src interface{}}, ${4:scope *ast.Scope})
endsnippet

snippet ParseDevice "ParseDevice(device string)"
ParseDevice( ${1:device string})
endsnippet

snippet ParseDir "ParseDir(fset *token.FileSet, path string, filter func(os.FileInfo)"
ParseDir( ${1:fset *token.FileSet}, ${2:path string}, ${3:filter func(os.FileInfo})
endsnippet

snippet ParseDirent "ParseDirent(buf []byte, max int, names []string)"
ParseDirent( ${1:buf []byte}, ${2:max int}, ${3:names []string})
endsnippet

snippet ParseEnvFile "ParseEnvFile(filename string)"
ParseEnvFile( ${1:filename string})
endsnippet

snippet ParseExec "ParseExec(cmd *flag.FlagSet, args []string)"
ParseExec( ${1:cmd *flag.FlagSet}, ${2:args []string})
endsnippet

snippet ParseExpr "ParseExpr(fset *token.FileSet, filename string, src interface{}, scope *ast.Scope)"
ParseExpr( ${1:fset *token.FileSet}, ${2:filename string}, ${3:src interface{}}, ${4:scope *ast.Scope})
endsnippet

snippet ParseFile "ParseFile(fset *token.FileSet, ctxt *build.Context, displayPath func(string)"
ParseFile( ${1:fset *token.FileSet}, ${2:ctxt *build.Context}, ${3:displayPath func(string})
endsnippet

snippet ParseFiles "ParseFiles(fset *token.FileSet, filenames []string, mode uint)"
ParseFiles( ${1:fset *token.FileSet}, ${2:filenames []string}, ${3:mode uint})
endsnippet

snippet ParseFlag "ParseFlag(arg string, prev Args)"
ParseFlag( ${1:arg string}, ${2:prev Args})
endsnippet

snippet ParseFragment "ParseFragment(r io.Reader, context *Node)"
ParseFragment( ${1:r io.Reader}, ${2:context *Node})
endsnippet

snippet ParseGroup "ParseGroup(group io.Reader)"
ParseGroup( ${1:group io.Reader})
endsnippet

snippet ParseGroupFile "ParseGroupFile(path string)"
ParseGroupFile( ${1:path string})
endsnippet

snippet ParseGroupFileFilter "ParseGroupFileFilter(path string, filter func(Group)"
ParseGroupFileFilter( ${1:path string}, ${2:filter func(Group})
endsnippet

snippet ParseGroupFilter "ParseGroupFilter(r io.Reader, filter func(Group)"
ParseGroupFilter( ${1:r io.Reader}, ${2:filter func(Group})
endsnippet

snippet ParseHeader "ParseHeader(b []byte)"
ParseHeader( ${1:b []byte})
endsnippet

snippet ParseHost "ParseHost(defaultTCPAddr, defaultUnixAddr, addr string)"
ParseHost( ${1:defaultTCPAddr}, ${2:defaultUnixAddr}, ${3:addr string})
endsnippet

snippet ParseIPv4Header "ParseIPv4Header(b []byte)"
ParseIPv4Header( ${1:b []byte})
endsnippet

snippet ParseJWS "ParseJWS(content []byte)"
ParseJWS( ${1:content []byte})
endsnippet

snippet ParseKeyValueOpt "ParseKeyValueOpt(opt string)"
ParseKeyValueOpt( ${1:opt string})
endsnippet

snippet ParseLevel "ParseLevel(lvl string)"
ParseLevel( ${1:lvl string})
endsnippet

snippet ParseLine "ParseLine(line string)"
ParseLine( ${1:line string})
endsnippet

snippet ParseMessage "ParseMessage(proto int, b []byte)"
ParseMessage( ${1:proto int}, ${2:b []byte})
endsnippet

snippet ParseOptions "ParseOptions(version string, r io.Reader)"
ParseOptions( ${1:version string}, ${2:r io.Reader})
endsnippet

snippet ParsePasswd "ParsePasswd(passwd io.Reader)"
ParsePasswd( ${1:passwd io.Reader})
endsnippet

snippet ParsePasswdFile "ParsePasswdFile(path string)"
ParsePasswdFile( ${1:path string})
endsnippet

snippet ParsePasswdFileFilter "ParsePasswdFileFilter(path string, filter func(User)"
ParsePasswdFileFilter( ${1:path string}, ${2:filter func(User})
endsnippet

snippet ParsePasswdFilter "ParsePasswdFilter(r io.Reader, filter func(User)"
ParsePasswdFilter( ${1:r io.Reader}, ${2:filter func(User})
endsnippet

snippet ParsePix "ParsePix(s string)"
ParsePix( ${1:s string})
endsnippet

snippet ParsePort "ParsePort(rawPort string)"
ParsePort( ${1:rawPort string})
endsnippet

snippet ParsePortSpecs "ParsePortSpecs(ports []string)"
ParsePortSpecs( ${1:ports []string})
endsnippet

snippet ParsePrettySignature "ParsePrettySignature(content []byte, signatureKey string)"
ParsePrettySignature( ${1:content []byte}, ${2:signatureKey string})
endsnippet

snippet ParseProfiles "ParseProfiles(fileName string)"
ParseProfiles( ${1:fileName string})
endsnippet

snippet ParseQueryPos "ParseQueryPos(iprog *loader.Program, posFlag string, needExact bool)"
ParseQueryPos( ${1:iprog *loader.Program}, ${2:posFlag string}, ${3:needExact bool})
endsnippet

snippet ParseRelease "ParseRelease(release string)"
ParseRelease( ${1:release string})
endsnippet

snippet ParseRepositoryTag "ParseRepositoryTag(repos string)"
ParseRepositoryTag( ${1:repos string})
endsnippet

snippet ParseSignature "ParseSignature(s string)"
ParseSignature( ${1:s string})
endsnippet

snippet ParseSignatureMust "ParseSignatureMust(s string)"
ParseSignatureMust( ${1:s string})
endsnippet

snippet ParseStmtList "ParseStmtList(fset *token.FileSet, filename string, src interface{}, scope *ast.Scope)"
ParseStmtList( ${1:fset *token.FileSet}, ${2:filename string}, ${3:src interface{}}, ${4:scope *ast.Scope})
endsnippet

snippet ParseTCPAddr "ParseTCPAddr(addr string, defaultAddr string)"
ParseTCPAddr( ${1:addr string}, ${2:defaultAddr string})
endsnippet

snippet ParseTarget "ParseTarget(target string)"
ParseTarget( ${1:target string})
endsnippet

snippet ParseTime "ParseTime(s string)"
ParseTime( ${1:s string})
endsnippet

snippet ParseUnixAddr "ParseUnixAddr(addr string, defaultAddr string)"
ParseUnixAddr( ${1:addr string}, ${2:defaultAddr string})
endsnippet

snippet ParseVariant "ParseVariant(s string, sig Signature)"
ParseVariant( ${1:s string}, ${2:sig Signature})
endsnippet

snippet PartParser "PartParser(template, data string)"
PartParser( ${1:template}, ${2:data string})
endsnippet

snippet PathDepth "PathDepth(p string)"
PathDepth( ${1:p string})
endsnippet

snippet PathEnclosingInterval "PathEnclosingInterval(root *ast.File, start, end token.Pos)"
PathEnclosingInterval( ${1:root *ast.File}, ${2:start}, ${3:end token.Pos})
endsnippet

snippet PathSearch "PathSearch(start *Node, isEnd func(*Node)"
PathSearch( ${1:start *Node}, ${2:isEnd func(*Node})
endsnippet

snippet PerfConfigKey "PerfConfigKey(c appengine.Context)"
PerfConfigKey( ${1:c appengine.Context})
endsnippet

snippet Permute "Permute(input Widget, p []int)"
Permute( ${1:input Widget}, ${2:p []int})
endsnippet

snippet PidMountInfo "PidMountInfo(pid int)"
PidMountInfo( ${1:pid int})
endsnippet

snippet Pipe "Pipe(opt Options)"
Pipe( ${1:opt Options})
endsnippet

snippet PivotRoot "PivotRoot(rootfs string)"
PivotRoot( ${1:rootfs string})
endsnippet

snippet Play "Play(pp []Piece, d *draw.Display)"
Play( ${1:pp []Piece}, ${2:d *draw.Display})
endsnippet

snippet Poll "Poll(items []PollItem, timeout time.Duration)"
Poll( ${1:items []PollItem}, ${2:timeout time.Duration})
endsnippet

snippet PopAll "PopAll(dest_id int32)"
PopAll( ${1:dest_id int32})
endsnippet

snippet PrefixHandler "PrefixHandler(prefix, baseURL string)"
PrefixHandler( ${1:prefix}, ${2:baseURL string})
endsnippet

snippet Print "Print(fset *token.FileSet, x interface{})"
Print( ${1:fset *token.FileSet}, ${2:x interface{}})
endsnippet

snippet PrintError "PrintError(w io.Writer, err error)"
PrintError( ${1:w io.Writer}, ${2:err error})
endsnippet

snippet Print_helper "Print_helper(n *Node, indent int)"
Print_helper( ${1:n *Node}, ${2:indent int})
endsnippet

snippet Printf "Printf(format string, args ...interface{})"
Printf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet Println "Println(args ...interface{})"
Println( ${1:args ...interface{}})
endsnippet

snippet ProbeFsType "ProbeFsType(device string)"
ProbeFsType( ${1:device string})
endsnippet

snippet Process "Process(filename string, src []byte, opt *Options)"
Process( ${1:filename string}, ${2:src []byte}, ${3:opt *Options})
endsnippet

snippet ProducePerWorker "ProducePerWorker(user *User, city *City, resource_name string)"
ProducePerWorker( ${1:user *User}, ${2:city *City}, ${3:resource_name string})
endsnippet

snippet ProgressReader "ProgressReader(r io.ReadCloser, size int, output io.Writer, sf *StreamFormatter, newline bool, ID, action string)"
ProgressReader( ${1:r io.ReadCloser}, ${2:size int}, ${3:output io.Writer}, ${4:sf *StreamFormatter}, ${5:newline bool}, ${6:ID}, ${7:action string})
endsnippet

snippet PropAfter "PropAfter(units ...string)"
PropAfter( ${1:units ...string})
endsnippet

snippet PropBefore "PropBefore(units ...string)"
PropBefore( ${1:units ...string})
endsnippet

snippet PropBindsTo "PropBindsTo(units ...string)"
PropBindsTo( ${1:units ...string})
endsnippet

snippet PropBoundBy "PropBoundBy(units ...string)"
PropBoundBy( ${1:units ...string})
endsnippet

snippet PropConflictedBy "PropConflictedBy(units ...string)"
PropConflictedBy( ${1:units ...string})
endsnippet

snippet PropConflicts "PropConflicts(units ...string)"
PropConflicts( ${1:units ...string})
endsnippet

snippet PropDescription "PropDescription(desc string)"
PropDescription( ${1:desc string})
endsnippet

snippet PropExecStart "PropExecStart(command []string, uncleanIsFailure bool)"
PropExecStart( ${1:command []string}, ${2:uncleanIsFailure bool})
endsnippet

snippet PropOnFailure "PropOnFailure(units ...string)"
PropOnFailure( ${1:units ...string})
endsnippet

snippet PropPropagatesReloadTo "PropPropagatesReloadTo(units ...string)"
PropPropagatesReloadTo( ${1:units ...string})
endsnippet

snippet PropRemainAfterExit "PropRemainAfterExit(b bool)"
PropRemainAfterExit( ${1:b bool})
endsnippet

snippet PropRequiredBy "PropRequiredBy(units ...string)"
PropRequiredBy( ${1:units ...string})
endsnippet

snippet PropRequiredByOverridable "PropRequiredByOverridable(units ...string)"
PropRequiredByOverridable( ${1:units ...string})
endsnippet

snippet PropRequires "PropRequires(units ...string)"
PropRequires( ${1:units ...string})
endsnippet

snippet PropRequiresMountsFor "PropRequiresMountsFor(units ...string)"
PropRequiresMountsFor( ${1:units ...string})
endsnippet

snippet PropRequiresOverridable "PropRequiresOverridable(units ...string)"
PropRequiresOverridable( ${1:units ...string})
endsnippet

snippet PropRequisite "PropRequisite(units ...string)"
PropRequisite( ${1:units ...string})
endsnippet

snippet PropRequisiteOverridable "PropRequisiteOverridable(units ...string)"
PropRequisiteOverridable( ${1:units ...string})
endsnippet

snippet PropSlice "PropSlice(slice string)"
PropSlice( ${1:slice string})
endsnippet

snippet PropTriggeredBy "PropTriggeredBy(units ...string)"
PropTriggeredBy( ${1:units ...string})
endsnippet

snippet PropTriggers "PropTriggers(units ...string)"
PropTriggers( ${1:units ...string})
endsnippet

snippet PropWantedBy "PropWantedBy(units ...string)"
PropWantedBy( ${1:units ...string})
endsnippet

snippet PropWants "PropWants(units ...string)"
PropWants( ${1:units ...string})
endsnippet

snippet ProtocolNotSupported "ProtocolNotSupported(err error)"
ProtocolNotSupported( ${1:err error})
endsnippet

snippet Proxy "Proxy(in, out, capture *Socket)"
Proxy( ${1:in}, ${2:out}, ${3:capture *Socket})
endsnippet

snippet Pt "Pt(X, Y int)"
Pt( ${1:X}, ${2:Y int})
endsnippet

snippet PtrTo "PtrTo(Type)"
PtrTo( ${1:Type})
endsnippet

snippet Ptsname "Ptsname(f *os.File)"
Ptsname( ${1:f *os.File})
endsnippet

snippet PublicSuffix "PublicSuffix(domain string)"
PublicSuffix( ${1:domain string})
endsnippet

snippet PullImage "PullImage(endpoint, name string)"
PullImage( ${1:endpoint}, ${2:name string})
endsnippet

snippet Purge "Purge(maxAge int)"
Purge( ${1:maxAge int})
endsnippet

snippet Push "Push(req *IPCObject)"
Push( ${1:req *IPCObject})
endsnippet

snippet PutDriver "PutDriver(t *testing.T)"
PutDriver( ${1:t *testing.T})
endsnippet

snippet PutLog "PutLog(c appengine.Context, text string)"
PutLog( ${1:c appengine.Context}, ${2:text string})
endsnippet

snippet Query "Query(args []string, mode, pos string, ptalog io.Writer, buildContext *build.Context, reflection bool)"
Query( ${1:args []string}, ${2:mode}, ${3:pos string}, ${4:ptalog io.Writer}, ${5:buildContext *build.Context}, ${6:reflection bool})
endsnippet

snippet QueryAllianceInMemory "QueryAllianceInMemory(id int32)"
QueryAllianceInMemory( ${1:id int32})
endsnippet

snippet QueryAreaInMemory "QueryAreaInMemory(x, y T_coordinate)"
QueryAreaInMemory( ${1:x}, ${2:y T_coordinate})
endsnippet

snippet QueryId "QueryId(id int32)"
QueryId( ${1:id int32})
endsnippet

snippet QueryInMemory "QueryInMemory(id int32)"
QueryInMemory( ${1:id int32})
endsnippet

snippet QueryOnline "QueryOnline(id int32)"
QueryOnline( ${1:id int32})
endsnippet

snippet QuoteString "QuoteString(str string)"
QuoteString( ${1:str string})
endsnippet

snippet RAMInBytes "RAMInBytes(size string)"
RAMInBytes( ${1:size string})
endsnippet

snippet REQ_INFO "REQ_INFO(msg_code int16, req_name string, uid int32, username string, used_time time.Duration)"
REQ_INFO( ${1:msg_code int16}, ${2:req_name string}, ${3:uid int32}, ${4:username string}, ${5:used_time time.Duration})
endsnippet

snippet RPCInfo "RPCInfo(root interface{})"
RPCInfo( ${1:root interface{}})
endsnippet

snippet RandStr "RandStr(strlen int)"
RandStr( ${1:strlen int})
endsnippet

snippet RandomGacha "RandomGacha(user *User, item_key string, num int32, city_id int32)"
RandomGacha( ${1:user *User}, ${2:item_key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet RandomString "RandomString(length int)"
RandomString( ${1:length int})
endsnippet

snippet RangeSelection "RangeSelection(str string)"
RangeSelection( ${1:str string})
endsnippet

snippet Rank "Rank(rank_name string, id int32)"
Rank( ${1:rank_name string}, ${2:id int32})
endsnippet

snippet RankN "RankN(rank_name string, n int32)"
RankN( ${1:rank_name string}, ${2:n int32})
endsnippet

snippet Raw "Raw(args ...string)"
Raw( ${1:args ...string})
endsnippet

snippet Read "Read(fd int, p []byte)"
Read( ${1:fd int}, ${2:p []byte})
endsnippet

snippet ReadDir "ReadDir(ctxt *build.Context, path string)"
ReadDir( ${1:ctxt *build.Context}, ${2:path string})
endsnippet

snippet ReadDirent "ReadDirent(fd int, buf []byte)"
ReadDirent( ${1:fd int}, ${2:buf []byte})
endsnippet

snippet ReadFcall "ReadFcall(r io.Reader)"
ReadFcall( ${1:r io.Reader})
endsnippet

snippet ReadFile "ReadFile(fs Opener, path string)"
ReadFile( ${1:fs Opener}, ${2:path string})
endsnippet

snippet ReadMsg "ReadMsg(r io.Reader)"
ReadMsg( ${1:r io.Reader})
endsnippet

snippet ReadPidFile "ReadPidFile(name string)"
ReadPidFile( ${1:name string})
endsnippet

snippet ReadProcsFile "ReadProcsFile(dir string)"
ReadProcsFile( ${1:dir string})
endsnippet

snippet ReadSymlinkedDirectory "ReadSymlinkedDirectory(path string)"
ReadSymlinkedDirectory( ${1:path string})
endsnippet

snippet Reader "Reader(data []byte)"
Reader( ${1:data []byte})
endsnippet

snippet Readlink "Readlink(name string)"
Readlink( ${1:name string})
endsnippet

snippet Real "Real(x Value)"
Real( ${1:x Value})
endsnippet

snippet Reborn "Reborn(umask uint32, workDir string)"
Reborn( ${1:umask uint32}, ${2:workDir string})
endsnippet

snippet ReceiveResource "ReceiveResource(user *User, city_id int32, resource_map map[string]int32)"
ReceiveResource( ${1:user *User}, ${2:city_id int32}, ${3:resource_map map[string]int32})
endsnippet

snippet RecruitSoldierQuest "RecruitSoldierQuest(user *User, soldier_name string, count int32)"
RecruitSoldierQuest( ${1:user *User}, ${2:soldier_name string}, ${3:count int32})
endsnippet

snippet Rect "Rect(x0, y0, x1, y1 int)"
Rect( ${1:x0}, ${2:y0}, ${3:x1}, ${4:y1 int})
endsnippet

snippet RecvKvmsg "RecvKvmsg(socket *zmq.Socket)"
RecvKvmsg( ${1:socket *zmq.Socket})
endsnippet

snippet RedirectStream "RedirectStream(s, target *os.File)"
RedirectStream( ${1:s}, ${2:target *os.File})
endsnippet

snippet RefreshHeroList "RefreshHeroList(user *User, refresh_type string)"
RefreshHeroList( ${1:user *User}, ${2:refresh_type string})
endsnippet

snippet Register "Register(mux *http.ServeMux)"
Register( ${1:mux *http.ServeMux})
endsnippet

snippet RegisterAllianceInMemory "RegisterAllianceInMemory(id int32)"
RegisterAllianceInMemory( ${1:id int32})
endsnippet

snippet RegisterAreaInMemory "RegisterAreaInMemory(x, y T_coordinate)"
RegisterAreaInMemory( ${1:x}, ${2:y T_coordinate})
endsnippet

snippet RegisterDialerType "RegisterDialerType(scheme string, f func(*url.URL, Dialer)"
RegisterDialerType( ${1:scheme string}, ${2:f func(*url.URL}, ${3:Dialer})
endsnippet

snippet RegisterInMemory "RegisterInMemory(id int32)"
RegisterInMemory( ${1:id int32})
endsnippet

snippet RegisterOnline "RegisterOnline(sess *Session, id int32)"
RegisterOnline( ${1:sess *Session}, ${2:id int32})
endsnippet

snippet RegisterSubnet "RegisterSubnet(network *net.IPNet, subnet *net.IPNet)"
RegisterSubnet( ${1:network *net.IPNet}, ${2:subnet *net.IPNet})
endsnippet

snippet Relabel "Relabel(path string, fileLabel string, relabel string)"
Relabel( ${1:path string}, ${2:fileLabel string}, ${3:relabel string})
endsnippet

snippet Release "Release(job *engine.Job)"
Release( ${1:job *engine.Job})
endsnippet

snippet ReleaseIP "ReleaseIP(network *net.IPNet, ip net.IP)"
ReleaseIP( ${1:network *net.IPNet}, ${2:ip net.IP})
endsnippet

snippet ReleasePort "ReleasePort(ip net.IP, proto string, port int)"
ReleasePort( ${1:ip net.IP}, ${2:proto string}, ${3:port int})
endsnippet

snippet ReloadPool "ReloadPool(poolName string, dataFile, metadataFile *os.File, poolBlockSize uint32)"
ReloadPool( ${1:poolName string}, ${2:dataFile}, ${3:metadataFile *os.File}, ${4:poolBlockSize uint32})
endsnippet

snippet RemoteRepo "RemoteRepo(url, path string)"
RemoteRepo( ${1:url}, ${2:path string})
endsnippet

snippet Remove "Remove(key string)"
Remove( ${1:key string})
endsnippet

snippet RemoveContainer "RemoveContainer(endpoint, id string)"
RemoveContainer( ${1:endpoint}, ${2:id string})
endsnippet

snippet RemoveDevice "RemoveDevice(name string)"
RemoveDevice( ${1:name string})
endsnippet

snippet RemoveDuplicateSlice "RemoveDuplicateSlice(slis *[]int32)"
RemoveDuplicateSlice( ${1:slis *[]int32})
endsnippet

snippet RemoveDuplicateStringSlice "RemoveDuplicateStringSlice(slis *[]string)"
RemoveDuplicateStringSlice( ${1:slis *[]string})
endsnippet

snippet RemoveElementFromSlice "RemoveElementFromSlice(slice []string, element string)"
RemoveElementFromSlice( ${1:slice []string}, ${2:element string})
endsnippet

snippet RemoveExistingChain "RemoveExistingChain(name string, table Table)"
RemoveExistingChain( ${1:name string}, ${2:table Table})
endsnippet

snippet RemoveLocalDns "RemoveLocalDns(resolvConf []byte)"
RemoveLocalDns( ${1:resolvConf []byte})
endsnippet

snippet RemoveOldEvent "RemoveOldEvent(before int64)"
RemoveOldEvent( ${1:before int64})
endsnippet

snippet RemovePaths "RemovePaths(paths map[string]string)"
RemovePaths( ${1:paths map[string]string})
endsnippet

snippet RemovePidFile "RemovePidFile(pidfile string)"
RemovePidFile( ${1:pidfile string})
endsnippet

snippet RenameTop "RenameTop(f *ast.File, old, new string)"
RenameTop( ${1:f *ast.File}, ${2:old}, ${3:new string})
endsnippet

snippet Render "Render(w io.Writer, n *Node)"
Render( ${1:w io.Writer}, ${2:n *Node})
endsnippet

snippet Renderer "Renderer(options ...Options)"
Renderer( ${1:options ...Options})
endsnippet

snippet Repl "Repl(r image.Rectangle, p image.Point)"
Repl( ${1:r image.Rectangle}, ${2:p image.Point})
endsnippet

snippet ReplXY "ReplXY(min, max, x int)"
ReplXY( ${1:min}, ${2:max}, ${3:x int})
endsnippet

snippet ReplaceOrAppendEnvValues "ReplaceOrAppendEnvValues(defaults, overrides []string)"
ReplaceOrAppendEnvValues( ${1:defaults}, ${2:overrides []string})
endsnippet

snippet ReplyFilename "ReplyFilename(uuid string)"
ReplyFilename( ${1:uuid string})
endsnippet

snippet RepoRootForImportDynamic "RepoRootForImportDynamic(importPath string, verbose bool)"
RepoRootForImportDynamic( ${1:importPath string}, ${2:verbose bool})
endsnippet

snippet RepoRootForImportPath "RepoRootForImportPath(importPath string, verbose bool)"
RepoRootForImportPath( ${1:importPath string}, ${2:verbose bool})
endsnippet

snippet RepoRootForImportPathStatic "RepoRootForImportPathStatic(importPath, scheme string)"
RepoRootForImportPathStatic( ${1:importPath}, ${2:scheme string})
endsnippet

snippet RequestFilename "RequestFilename(uuid string)"
RequestFilename( ${1:uuid string})
endsnippet

snippet RequestIP "RequestIP(network *net.IPNet, ip net.IP)"
RequestIP( ${1:network *net.IPNet}, ${2:ip net.IP})
endsnippet

snippet RequestPort "RequestPort(ip net.IP, proto string, port int)"
RequestPort( ${1:ip net.IP}, ${2:proto string}, ${3:port int})
endsnippet

snippet ReserveLabel "ReserveLabel(label string)"
ReserveLabel( ${1:label string})
endsnippet

snippet ResetBaseAndT0 "ResetBaseAndT0(user *User, city *City, b *building.Building, now int64)"
ResetBaseAndT0( ${1:user *User}, ${2:city *City}, ${3:b *building.Building}, ${4:now int64})
endsnippet

snippet ResetForTesting "ResetForTesting(usage func()"
ResetForTesting( ${1:usage func(})
endsnippet

snippet ResetTheArmy "ResetTheArmy(user *User, army *Army)"
ResetTheArmy( ${1:user *User}, ${2:army *Army})
endsnippet

snippet ResetTheHero "ResetTheHero(user *User, hero *hero.Hero)"
ResetTheHero( ${1:user *User}, ${2:hero *hero.Hero})
endsnippet

snippet ResolveRepositoryName "ResolveRepositoryName(reposName string)"
ResolveRepositoryName( ${1:reposName string})
endsnippet

snippet ResolveRootfs "ResolveRootfs(uncleanRootfs string)"
ResolveRootfs( ${1:uncleanRootfs string})
endsnippet

snippet ResourceBuildingUpgrade "ResourceBuildingUpgrade(b *building.Building, now int64)"
ResourceBuildingUpgrade( ${1:b *building.Building}, ${2:now int64})
endsnippet

snippet ResourceRefreshAfterBuildingUpgrade "ResourceRefreshAfterBuildingUpgrade(user *User, alliance *Alliance, city *City, b *building.Building, now int64)"
ResourceRefreshAfterBuildingUpgrade( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:b *building.Building}, ${5:now int64})
endsnippet

snippet ResourceRefreshBeforeBuildingUpgrade "ResourceRefreshBeforeBuildingUpgrade(user *User, city *City, b *building.Building, now int64)"
ResourceRefreshBeforeBuildingUpgrade( ${1:user *User}, ${2:city *City}, ${3:b *building.Building}, ${4:now int64})
endsnippet

snippet ResourceRefreshBeforeTechnologyUpgrade "ResourceRefreshBeforeTechnologyUpgrade(user *User, alliance *Alliance, city *City, b *Technology, now int64)"
ResourceRefreshBeforeTechnologyUpgrade( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:b *Technology}, ${5:now int64})
endsnippet

snippet ResourceSpeedQuest "ResourceSpeedQuest(user *User, resource_name string, speed int32)"
ResourceSpeedQuest( ${1:user *User}, ${2:resource_name string}, ${3:speed int32})
endsnippet

snippet RespToMap "RespToMap(resp *http.Response)"
RespToMap( ${1:resp *http.Response})
endsnippet

snippet RestartOnFailure "RestartOnFailure(maxRetry int)"
RestartOnFailure( ${1:maxRetry int})
endsnippet

snippet RestoreParentDeathSignal "RestoreParentDeathSignal(old int)"
RestoreParentDeathSignal( ${1:old int})
endsnippet

snippet RestoreTerminal "RestoreTerminal(fd uintptr, state *State)"
RestoreTerminal( ${1:fd uintptr}, ${2:state *State})
endsnippet

snippet Restrict "Restrict(mounts ...string)"
Restrict( ${1:mounts ...string})
endsnippet

snippet ResumableRequestReader "ResumableRequestReader(c *http.Client, r *http.Request, maxfail uint32, totalsize int64)"
ResumableRequestReader( ${1:c *http.Client}, ${2:r *http.Request}, ${3:maxfail uint32}, ${4:totalsize int64})
endsnippet

snippet ResumableRequestReaderWithInitialResponse "ResumableRequestReaderWithInitialResponse(c *http.Client, r *http.Request, maxfail uint32, totalsize int64, initialResponse *http.Response)"
ResumableRequestReaderWithInitialResponse( ${1:c *http.Client}, ${2:r *http.Request}, ${3:maxfail uint32}, ${4:totalsize int64}, ${5:initialResponse *http.Response})
endsnippet

snippet ResumeDevice "ResumeDevice(name string)"
ResumeDevice( ${1:name string})
endsnippet

snippet ReturnAllSoldierInfos "ReturnAllSoldierInfos(is_defense_city bool, is_defense_map bool, user *User, city *City, hero *hero.Hero, terrain T_map_type, army_info *ArmyInfo)"
ReturnAllSoldierInfos( ${1:is_defense_city bool}, ${2:is_defense_map bool}, ${3:user *User}, ${4:city *City}, ${5:hero *hero.Hero}, ${6:terrain T_map_type}, ${7:army_info *ArmyInfo})
endsnippet

snippet ReturnAllianceMemory "ReturnAllianceMemory(id int32)"
ReturnAllianceMemory( ${1:id int32})
endsnippet

snippet ReturnAllianceMemoryFromRpc "ReturnAllianceMemoryFromRpc(id int32)"
ReturnAllianceMemoryFromRpc( ${1:id int32})
endsnippet

snippet ReturnAllianceSoldierAttTechName "ReturnAllianceSoldierAttTechName(soldier_type string)"
ReturnAllianceSoldierAttTechName( ${1:soldier_type string})
endsnippet

snippet ReturnAllianceSoldierDefTechName "ReturnAllianceSoldierDefTechName(soldier_type string)"
ReturnAllianceSoldierDefTechName( ${1:soldier_type string})
endsnippet

snippet ReturnAllianceTechEffect "ReturnAllianceTechEffect(alliance *Alliance, technology_type string)"
ReturnAllianceTechEffect( ${1:alliance *Alliance}, ${2:technology_type string})
endsnippet

snippet ReturnAllianceTechnologyUpCost "ReturnAllianceTechnologyUpCost(technology_type string, level T_level)"
ReturnAllianceTechnologyUpCost( ${1:technology_type string}, ${2:level T_level})
endsnippet

snippet ReturnAreaFromMemory "ReturnAreaFromMemory(x, y T_coordinate)"
ReturnAreaFromMemory( ${1:x}, ${2:y T_coordinate})
endsnippet

snippet ReturnAreasInfo "ReturnAreasInfo(x T_coordinate, y T_coordinate, uid int32)"
ReturnAreasInfo( ${1:x T_coordinate}, ${2:y T_coordinate}, ${3:uid int32})
endsnippet

snippet ReturnArmySpeedAddPercent "ReturnArmySpeedAddPercent(user *User, army *Army)"
ReturnArmySpeedAddPercent( ${1:user *User}, ${2:army *Army})
endsnippet

snippet ReturnArmyUpCost "ReturnArmyUpCost(level T_level)"
ReturnArmyUpCost( ${1:level T_level})
endsnippet

snippet ReturnBattleRoundAttackLose "ReturnBattleRoundAttackLose(attack_hero *hero.Hero, defense_hero *hero.Hero, attacker_battle_info *BattleInfo, defenser_battle_info *BattleInfo, attacker *ArmyInfo, defenser *ArmyInfo)"
ReturnBattleRoundAttackLose( ${1:attack_hero *hero.Hero}, ${2:defense_hero *hero.Hero}, ${3:attacker_battle_info *BattleInfo}, ${4:defenser_battle_info *BattleInfo}, ${5:attacker *ArmyInfo}, ${6:defenser *ArmyInfo})
endsnippet

snippet ReturnBattleRoundAttackWin "ReturnBattleRoundAttackWin(attack_hero *hero.Hero, defense_hero *hero.Hero, attacker_battle_info *BattleInfo, defenser_battle_info *BattleInfo, attacker *ArmyInfo, defenser *ArmyInfo)"
ReturnBattleRoundAttackWin( ${1:attack_hero *hero.Hero}, ${2:defense_hero *hero.Hero}, ${3:attacker_battle_info *BattleInfo}, ${4:defenser_battle_info *BattleInfo}, ${5:attacker *ArmyInfo}, ${6:defenser *ArmyInfo})
endsnippet

snippet ReturnBuildingUpCost "ReturnBuildingUpCost(building_type string, level T_level)"
ReturnBuildingUpCost( ${1:building_type string}, ${2:level T_level})
endsnippet

snippet ReturnBuildingUpReduceTimePercent "ReturnBuildingUpReduceTimePercent(user *User, alliance *Alliance, city *City)"
ReturnBuildingUpReduceTimePercent( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City})
endsnippet

snippet ReturnCancelBuildingUpCost "ReturnCancelBuildingUpCost(building_type string, level T_level)"
ReturnCancelBuildingUpCost( ${1:building_type string}, ${2:level T_level})
endsnippet

snippet ReturnCityBuyMaxCount "ReturnCityBuyMaxCount(city *City)"
ReturnCityBuyMaxCount( ${1:city *City})
endsnippet

snippet ReturnCityUpgradeBuildingFastTimeAndCount "ReturnCityUpgradeBuildingFastTimeAndCount(city *City, now int64)"
ReturnCityUpgradeBuildingFastTimeAndCount( ${1:city *City}, ${2:now int64})
endsnippet

snippet ReturnCityUpgradeFastTimeAndCount "ReturnCityUpgradeFastTimeAndCount(city *City, now int64)"
ReturnCityUpgradeFastTimeAndCount( ${1:city *City}, ${2:now int64})
endsnippet

snippet ReturnCityUpgradeTechFastTimeAndCount "ReturnCityUpgradeTechFastTimeAndCount(city *City, now int64)"
ReturnCityUpgradeTechFastTimeAndCount( ${1:city *City}, ${2:now int64})
endsnippet

snippet ReturnCostExpAndGold "ReturnCostExpAndGold(hero *hero.Hero)"
ReturnCostExpAndGold( ${1:hero *hero.Hero})
endsnippet

snippet ReturnCritValue "ReturnCritValue(hero *hero.Hero, attacker *ArmyInfo, battle_info *BattleInfo)"
ReturnCritValue( ${1:hero *hero.Hero}, ${2:attacker *ArmyInfo}, ${3:battle_info *BattleInfo})
endsnippet

snippet ReturnDailyGacheHeroLv1Max "ReturnDailyGacheHeroLv1Max(city *City)"
ReturnDailyGacheHeroLv1Max( ${1:city *City})
endsnippet

snippet ReturnDealSellMaxCount "ReturnDealSellMaxCount(city *City)"
ReturnDealSellMaxCount( ${1:city *City})
endsnippet

snippet ReturnDestroyBuildingTime "ReturnDestroyBuildingTime(building *building.Building)"
ReturnDestroyBuildingTime( ${1:building *building.Building})
endsnippet

snippet ReturnDistanceFromTwoPoints "ReturnDistanceFromTwoPoints(x1, y1, x2, y2 T_coordinate)"
ReturnDistanceFromTwoPoints( ${1:x1}, ${2:y1}, ${3:x2}, ${4:y2 T_coordinate})
endsnippet

snippet ReturnEffectWallSoldiers "ReturnEffectWallSoldiers(soldier_type string, soldier_num int32, wall_soldiers map[string]*Soldier)"
ReturnEffectWallSoldiers( ${1:soldier_type string}, ${2:soldier_num int32}, ${3:wall_soldiers map[string]*Soldier})
endsnippet

snippet ReturnFoodReducePerHour "ReturnFoodReducePerHour(user *User, alliance *Alliance)"
ReturnFoodReducePerHour( ${1:user *User}, ${2:alliance *Alliance})
endsnippet

snippet ReturnGemsCategory "ReturnGemsCategory(source_name string)"
ReturnGemsCategory( ${1:source_name string})
endsnippet

snippet ReturnHeroAttribute "ReturnHeroAttribute(att_name string, hero *hero.Hero, army_info *ArmyInfo)"
ReturnHeroAttribute( ${1:att_name string}, ${2:hero *hero.Hero}, ${3:army_info *ArmyInfo})
endsnippet

snippet ReturnHeroGoldValue "ReturnHeroGoldValue(hero *hero.Hero)"
ReturnHeroGoldValue( ${1:hero *hero.Hero})
endsnippet

snippet ReturnHeroHowManyCanTake "ReturnHeroHowManyCanTake(user *User, hero *hero.Hero)"
ReturnHeroHowManyCanTake( ${1:user *User}, ${2:hero *hero.Hero})
endsnippet

snippet ReturnHeroInfo "ReturnHeroInfo(uid int32, level int32)"
ReturnHeroInfo( ${1:uid int32}, ${2:level int32})
endsnippet

snippet ReturnHeroMaxLevel "ReturnHeroMaxLevel(hero_uid int32)"
ReturnHeroMaxLevel( ${1:hero_uid int32})
endsnippet

snippet ReturnHeroMaxSoldierNum "ReturnHeroMaxSoldierNum(_hero *Hero)"
ReturnHeroMaxSoldierNum( ${1:_hero *Hero})
endsnippet

snippet ReturnHeroMoveSpeed "ReturnHeroMoveSpeed(hero *hero.Hero, city *City, user *User, alliance *Alliance)"
ReturnHeroMoveSpeed( ${1:hero *hero.Hero}, ${2:city *City}, ${3:user *User}, ${4:alliance *Alliance})
endsnippet

snippet ReturnHeroMoveType "ReturnHeroMoveType(the_hero *hero.Hero)"
ReturnHeroMoveType( ${1:the_hero *hero.Hero})
endsnippet

snippet ReturnHeroNowSoldierNum "ReturnHeroNowSoldierNum(hero *hero.Hero)"
ReturnHeroNowSoldierNum( ${1:hero *hero.Hero})
endsnippet

snippet ReturnHeroOrderCanUse "ReturnHeroOrderCanUse(user *User)"
ReturnHeroOrderCanUse( ${1:user *User})
endsnippet

snippet ReturnHeroProperty "ReturnHeroProperty(hero *hero.Hero, type string)"
ReturnHeroProperty( ${1:hero *hero.Hero}, ${2:type string})
endsnippet

snippet ReturnHeroSkill22Effect "ReturnHeroSkill22Effect(hero *hero.Hero)"
ReturnHeroSkill22Effect( ${1:hero *hero.Hero})
endsnippet

snippet ReturnHeroSkill4Effect "ReturnHeroSkill4Effect(hero *hero.Hero, skill_type string, enemy_hero *hero.Hero)"
ReturnHeroSkill4Effect( ${1:hero *hero.Hero}, ${2:skill_type string}, ${3:enemy_hero *hero.Hero})
endsnippet

snippet ReturnHeroSkill4EffectHash "ReturnHeroSkill4EffectHash(hero *hero.Hero, enemy_hero *hero.Hero, must_happen float32)"
ReturnHeroSkill4EffectHash( ${1:hero *hero.Hero}, ${2:enemy_hero *hero.Hero}, ${3:must_happen float32})
endsnippet

snippet ReturnHeroSkillEffect "ReturnHeroSkillEffect(hero *hero.Hero, skill_type string)"
ReturnHeroSkillEffect( ${1:hero *hero.Hero}, ${2:skill_type string})
endsnippet

snippet ReturnHeroSkillEffectBaseValue "ReturnHeroSkillEffectBaseValue(hero *hero.Hero, skill_type string)"
ReturnHeroSkillEffectBaseValue( ${1:hero *hero.Hero}, ${2:skill_type string})
endsnippet

snippet ReturnHeroSkillEffectBattle "ReturnHeroSkillEffectBattle(hero *hero.Hero, skill_type string, army_info *ArmyInfo)"
ReturnHeroSkillEffectBattle( ${1:hero *hero.Hero}, ${2:skill_type string}, ${3:army_info *ArmyInfo})
endsnippet

snippet ReturnHeroSkillEffectBattleAttack "ReturnHeroSkillEffectBattleAttack(hero *hero.Hero, soldier_type string, is_defense_city bool, is_defense_map bool, terrain T_map_type, army_info *ArmyInfo)"
ReturnHeroSkillEffectBattleAttack( ${1:hero *hero.Hero}, ${2:soldier_type string}, ${3:is_defense_city bool}, ${4:is_defense_map bool}, ${5:terrain T_map_type}, ${6:army_info *ArmyInfo})
endsnippet

snippet ReturnHeroSkillEffectBattleDefense "ReturnHeroSkillEffectBattleDefense(hero *hero.Hero, soldier_type string, is_defense_city bool, is_defense_map bool, terrain T_map_type, army_info *ArmyInfo)"
ReturnHeroSkillEffectBattleDefense( ${1:hero *hero.Hero}, ${2:soldier_type string}, ${3:is_defense_city bool}, ${4:is_defense_map bool}, ${5:terrain T_map_type}, ${6:army_info *ArmyInfo})
endsnippet

snippet ReturnHeroSkillEffectTwoValue "ReturnHeroSkillEffectTwoValue(hero *hero.Hero, skill_type string)"
ReturnHeroSkillEffectTwoValue( ${1:hero *hero.Hero}, ${2:skill_type string})
endsnippet

snippet ReturnHeroSkillValue "ReturnHeroSkillValue(skill *hero.HeroSkill)"
ReturnHeroSkillValue( ${1:skill *hero.HeroSkill})
endsnippet

snippet ReturnHerosExpAddPercent "ReturnHerosExpAddPercent(user *User)"
ReturnHerosExpAddPercent( ${1:user *User})
endsnippet

snippet ReturnHerosNumMax "ReturnHerosNumMax(user *User)"
ReturnHerosNumMax( ${1:user *User})
endsnippet

snippet ReturnHerosSkillLvUpAddPercent "ReturnHerosSkillLvUpAddPercent(user *User)"
ReturnHerosSkillLvUpAddPercent( ${1:user *User})
endsnippet

snippet ReturnHowManyCanArmyBeRob "ReturnHowManyCanArmyBeRob(army *ArmyInfo, rob_army *ArmyInfo, max_can_rob int32)"
ReturnHowManyCanArmyBeRob( ${1:army *ArmyInfo}, ${2:rob_army *ArmyInfo}, ${3:max_can_rob int32})
endsnippet

snippet ReturnHowManyCanBeRob "ReturnHowManyCanBeRob(user *User, city *City, rob_army *ArmyInfo, max_can_rob int32)"
ReturnHowManyCanBeRob( ${1:user *User}, ${2:city *City}, ${3:rob_army *ArmyInfo}, ${4:max_can_rob int32})
endsnippet

snippet ReturnHowManyCanTake "ReturnHowManyCanTake(army *ArmyInfo)"
ReturnHowManyCanTake( ${1:army *ArmyInfo})
endsnippet

snippet ReturnLoserBattleLost "ReturnLoserBattleLost(battle_factor_b float32, battle_factor_c float32, factor float32, soldier_num int32)"
ReturnLoserBattleLost( ${1:battle_factor_b float32}, ${2:battle_factor_c float32}, ${3:factor float32}, ${4:soldier_num int32})
endsnippet

snippet ReturnMarket "ReturnMarket(city *City)"
ReturnMarket( ${1:city *City})
endsnippet

snippet ReturnMarketMaxSellCount "ReturnMarketMaxSellCount(b *building.Building)"
ReturnMarketMaxSellCount( ${1:b *building.Building})
endsnippet

snippet ReturnMaxSoldierDeadCount "ReturnMaxSoldierDeadCount(user *User, city *City)"
ReturnMaxSoldierDeadCount( ${1:user *User}, ${2:city *City})
endsnippet

snippet ReturnMaxSoldierRecruitCount "ReturnMaxSoldierRecruitCount(user *User, city *City, soldier_type string)"
ReturnMaxSoldierRecruitCount( ${1:user *User}, ${2:city *City}, ${3:soldier_type string})
endsnippet

snippet ReturnMaxWallSoldierRecruitCount "ReturnMaxWallSoldierRecruitCount(user *User, city *City)"
ReturnMaxWallSoldierRecruitCount( ${1:user *User}, ${2:city *City})
endsnippet

snippet ReturnOnlineGiftContent "ReturnOnlineGiftContent(get_count int32)"
ReturnOnlineGiftContent( ${1:get_count int32})
endsnippet

snippet ReturnRecruitCartOrRavenCost "ReturnRecruitCartOrRavenCost(soldier_type string, count int32)"
ReturnRecruitCartOrRavenCost( ${1:soldier_type string}, ${2:count int32})
endsnippet

snippet ReturnRecruitSoldierCost "ReturnRecruitSoldierCost(soldier_type string, count int32)"
ReturnRecruitSoldierCost( ${1:soldier_type string}, ${2:count int32})
endsnippet

snippet ReturnRecruitSoldierSpeedPercent "ReturnRecruitSoldierSpeedPercent(city *City, soldier_type string)"
ReturnRecruitSoldierSpeedPercent( ${1:city *City}, ${2:soldier_type string})
endsnippet

snippet ReturnRecruitWallSoldierCost "ReturnRecruitWallSoldierCost(city *City, soldier_name string, count int32)"
ReturnRecruitWallSoldierCost( ${1:city *City}, ${2:soldier_name string}, ${3:count int32})
endsnippet

snippet ReturnRecruitWallSoldierSpeedPercent "ReturnRecruitWallSoldierSpeedPercent(city *City, soldier_type string)"
ReturnRecruitWallSoldierSpeedPercent( ${1:city *City}, ${2:soldier_type string})
endsnippet

snippet ReturnResourceCapacity "ReturnResourceCapacity(user *User, city *City, resource_name string)"
ReturnResourceCapacity( ${1:user *User}, ${2:city *City}, ${3:resource_name string})
endsnippet

snippet ReturnResourcePerHour "ReturnResourcePerHour(user *User, city *City, resource_name string)"
ReturnResourcePerHour( ${1:user *User}, ${2:city *City}, ${3:resource_name string})
endsnippet

snippet ReturnSelfSoldierCanBeMiss "ReturnSelfSoldierCanBeMiss(self_hero *hero.Hero, enemy_hero *hero.Hero)"
ReturnSelfSoldierCanBeMiss( ${1:self_hero *hero.Hero}, ${2:enemy_hero *hero.Hero})
endsnippet

snippet ReturnSelfSoldierCanCrit "ReturnSelfSoldierCanCrit(self_hero *hero.Hero)"
ReturnSelfSoldierCanCrit( ${1:self_hero *hero.Hero})
endsnippet

snippet ReturnSoldSum "ReturnSoldSum(resource_name string)"
ReturnSoldSum( ${1:resource_name string})
endsnippet

snippet ReturnSoldierAttTechName "ReturnSoldierAttTechName(soldier_type string)"
ReturnSoldierAttTechName( ${1:soldier_type string})
endsnippet

snippet ReturnSoldierDefTechName "ReturnSoldierDefTechName(soldier_type string)"
ReturnSoldierDefTechName( ${1:soldier_type string})
endsnippet

snippet ReturnSoldierHealTimePercent "ReturnSoldierHealTimePercent(user *User, alliance *Alliance, city *City)"
ReturnSoldierHealTimePercent( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City})
endsnippet

snippet ReturnSoldierMarchAllianceTechName "ReturnSoldierMarchAllianceTechName(soldier_type string)"
ReturnSoldierMarchAllianceTechName( ${1:soldier_type string})
endsnippet

snippet ReturnSoldierMarchTechName "ReturnSoldierMarchTechName(soldier_type string)"
ReturnSoldierMarchTechName( ${1:soldier_type string})
endsnippet

snippet ReturnSoldierRecruitTimePercent "ReturnSoldierRecruitTimePercent(user *User, alliance *Alliance, city *City)"
ReturnSoldierRecruitTimePercent( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City})
endsnippet

snippet ReturnSoldierRelationship "ReturnSoldierRelationship(attack_soldier_name string, defense_soldier_name string)"
ReturnSoldierRelationship( ${1:attack_soldier_name string}, ${2:defense_soldier_name string})
endsnippet

snippet ReturnStable "ReturnStable(city *City)"
ReturnStable( ${1:city *City})
endsnippet

snippet ReturnTechLevel "ReturnTechLevel(city *City, tech_type string)"
ReturnTechLevel( ${1:city *City}, ${2:tech_type string})
endsnippet

snippet ReturnTechnologyMaxLevel "ReturnTechnologyMaxLevel(technology_type string)"
ReturnTechnologyMaxLevel( ${1:technology_type string})
endsnippet

snippet ReturnTechnologyUpCost "ReturnTechnologyUpCost(technology_type string, level T_level)"
ReturnTechnologyUpCost( ${1:technology_type string}, ${2:level T_level})
endsnippet

snippet ReturnTechnologyUpReduceTimePercent "ReturnTechnologyUpReduceTimePercent(user *User, alliance *Alliance, city *City)"
ReturnTechnologyUpReduceTimePercent( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City})
endsnippet

snippet ReturnTerrainEffectCategoryAddAttack "ReturnTerrainEffectCategoryAddAttack(terrain T_map_type, category string)"
ReturnTerrainEffectCategoryAddAttack( ${1:terrain T_map_type}, ${2:category string})
endsnippet

snippet ReturnTerrainEffectCategoryAddDefense "ReturnTerrainEffectCategoryAddDefense(terrain T_map_type, category string)"
ReturnTerrainEffectCategoryAddDefense( ${1:terrain T_map_type}, ${2:category string})
endsnippet

snippet ReturnUpNeedBuyResource "ReturnUpNeedBuyResource(cost *UpgradeCost, city *City)"
ReturnUpNeedBuyResource( ${1:cost *UpgradeCost}, ${2:city *City})
endsnippet

snippet ReturnUser "ReturnUser(id int32)"
ReturnUser( ${1:id int32})
endsnippet

snippet ReturnUserContributionLevel "ReturnUserContributionLevel(user *User)"
ReturnUserContributionLevel( ${1:user *User})
endsnippet

snippet ReturnVillageResourceAddPercent "ReturnVillageResourceAddPercent(user *User, city *City, hero *hero.Hero, resource_name string)"
ReturnVillageResourceAddPercent( ${1:user *User}, ${2:city *City}, ${3:hero *hero.Hero}, ${4:resource_name string})
endsnippet

snippet ReturnWallSoldierRecruitTimePercent "ReturnWallSoldierRecruitTimePercent(user *User, alliance *Alliance, city *City)"
ReturnWallSoldierRecruitTimePercent( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City})
endsnippet

snippet ReturnWinnerBattleLost "ReturnWinnerBattleLost(battle_factor_b float32, battle_factor_c float32, factor float32, soldier_num int32)"
ReturnWinnerBattleLost( ${1:battle_factor_b float32}, ${2:battle_factor_c float32}, ${3:factor float32}, ${4:soldier_num int32})
endsnippet

snippet RewriteImport "RewriteImport(fset *token.FileSet, f *ast.File, oldPath, newPath string)"
RewriteImport( ${1:fset *token.FileSet}, ${2:f *ast.File}, ${3:oldPath}, ${4:newPath string})
endsnippet

snippet RingBuf "RingBuf(input Widget, size, maxsize int, readBufSize int)"
RingBuf( ${1:input Widget}, ${2:size}, ${3:maxsize int}, ${4:readBufSize int})
endsnippet

snippet RouteObjectMethod "RouteObjectMethod(httpMethod string, pathExp string, objectInstance interface{}, objectMethod string)"
RouteObjectMethod( ${1:httpMethod string}, ${2:pathExp string}, ${3:objectInstance interface{}}, ${4:objectMethod string})
endsnippet

snippet RoutedInterface "RoutedInterface(network string, flags net.Flags)"
RoutedInterface( ${1:network string}, ${2:flags net.Flags})
endsnippet

snippet Rpt "Rpt(min, max Point)"
Rpt( ${1:min}, ${2:max Point})
endsnippet

snippet RssFood "RssFood(user *User, key string, num int32, city_id int32)"
RssFood( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet RssGold "RssGold(user *User, key string, num int32, city_id int32)"
RssGold( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet RssIron "RssIron(user *User, key string, num int32, city_id int32)"
RssIron( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet RssResource "RssResource(user *User, key string, num int32, city_id int32)"
RssResource( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet RssStone "RssStone(user *User, key string, num int32, city_id int32)"
RssStone( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet RssWood "RssWood(user *User, key string, num int32, city_id int32)"
RssWood( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet Run "Run(pta bool, result *Result)"
Run( ${1:pta bool}, ${2:result *Result})
endsnippet

snippet RunAStar "RunAStar(start, goal int, grid []int, col int)"
RunAStar( ${1:start}, ${2:goal int}, ${3:grid []int}, ${4:col int})
endsnippet

snippet RunContainer "RunContainer(endpoint, image_name, container_name string, ports []string)"
RunContainer( ${1:endpoint}, ${2:image_name}, ${3:container_name string}, ${4:ports []string})
endsnippet

snippet RunRequest "RunRequest(t *testing.T, handler http.Handler, request *http.Request)"
RunRequest( ${1:t *testing.T}, ${2:handler http.Handler}, ${3:request *http.Request})
endsnippet

snippet RuneWidth "RuneWidth(r rune)"
RuneWidth( ${1:r rune})
endsnippet

snippet SN "SN(name string)"
SN( ${1:name string})
endsnippet

snippet SOCKS5 "SOCKS5(network, addr string, auth *Auth, forward Dialer)"
SOCKS5( ${1:network}, ${2:addr string}, ${3:auth *Auth}, ${4:forward Dialer})
endsnippet

snippet SP "SP(base, max float32, t0 int64, rate float32, t int64)"
SP( ${1:base}, ${2:max float32}, ${3:t0 int64}, ${4:rate float32}, ${5:t int64})
endsnippet

snippet SPE_Cancel "SPE_Cancel(user *User, key string, num int32, city_id int32)"
SPE_Cancel( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet SPE_Move "SPE_Move(user *User, key string, num int32, city_id int32)"
SPE_Move( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet SPE_Quest "SPE_Quest(user *User, key string, num int32, city_id int32)"
SPE_Quest( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet SYS_broadcast "SYS_broadcast(sess *Session, obj *IPCObject)"
SYS_broadcast( ${1:sess *Session}, ${2:obj *IPCObject})
endsnippet

snippet SaveConfig "SaveConfig(configFile *ConfigFile)"
SaveConfig( ${1:configFile *ConfigFile})
endsnippet

snippet SaveConfigFile "SaveConfigFile(c *ConfigFile, filename string)"
SaveConfigFile( ${1:c *ConfigFile}, ${2:filename string})
endsnippet

snippet SaveGopmfile "SaveGopmfile(gf *goconfig.ConfigFile, fileName string)"
SaveGopmfile( ${1:gf *goconfig.ConfigFile}, ${2:fileName string})
endsnippet

snippet SaveJSON "SaveJSON(coll string, json_doc string)"
SaveJSON( ${1:coll string}, ${2:json_doc string})
endsnippet

snippet SaveKey "SaveKey(filename string, key PrivateKey)"
SaveKey( ${1:filename string}, ${2:key PrivateKey})
endsnippet

snippet SavePublicKey "SavePublicKey(filename string, key PublicKey)"
SavePublicKey( ${1:filename string}, ${2:key PublicKey})
endsnippet

snippet SaveState "SaveState(fd uintptr)"
SaveState( ${1:fd uintptr})
endsnippet

snippet SdNotify "SdNotify(state string)"
SdNotify( ${1:state string})
endsnippet

snippet Search "Search(table string, condition bson.M, ret interface{}, page int, count_per_page int)"
Search( ${1:table string}, ${2:condition bson.M}, ${3:ret interface{}}, ${4:page int}, ${5:count_per_page int})
endsnippet

snippet Secret "Secret(c appengine.Context)"
Secret( ${1:c appengine.Context})
endsnippet

snippet SecureCompare "SecureCompare(given string, actual string)"
SecureCompare( ${1:given string}, ${2:actual string})
endsnippet

snippet SecurityCheckContext "SecurityCheckContext(val string)"
SecurityCheckContext( ${1:val string})
endsnippet

snippet SegmentsToSlice "SegmentsToSlice(segs []Segment, searchMode bool)"
SegmentsToSlice( ${1:segs []Segment}, ${2:searchMode bool})
endsnippet

snippet SegmentsToString "SegmentsToString(segs []Segment, searchMode bool)"
SegmentsToString( ${1:segs []Segment}, ${2:searchMode bool})
endsnippet

snippet SelectDesugarsToSwitch "SelectDesugarsToSwitch(ch chan int)"
SelectDesugarsToSwitch( ${1:ch chan int})
endsnippet

snippet SelectionString "SelectionString(this *Package, s *Selection)"
SelectionString( ${1:this *Package}, ${2:s *Selection})
endsnippet

snippet Send "Send(src_id, dest_id int32, service int16, object interface{})"
Send( ${1:src_id}, ${2:dest_id int32}, ${3:service int16}, ${4:object interface{}})
endsnippet

snippet SendActivityMail "SendActivityMail(to_user *User, activity_type int32, num int32, reward map[string]int32)"
SendActivityMail( ${1:to_user *User}, ${2:activity_type int32}, ${3:num int32}, ${4:reward map[string]int32})
endsnippet

snippet SendChan "SendChan(seqid uint64, data []byte, output chan []byte)"
SendChan( ${1:seqid uint64}, ${2:data []byte}, ${3:output chan []byte})
endsnippet

snippet SendCommands "SendCommands(p *os.Process)"
SendCommands( ${1:p *os.Process})
endsnippet

snippet SendMQ "SendMQ(code int16, from_uid int32, from_x, from_y, to_x, to_y T_coordinate, data interface{})"
SendMQ( ${1:code int16}, ${2:from_uid int32}, ${3:from_x}, ${4:from_y}, ${5:to_x}, ${6:to_y T_coordinate}, ${7:data interface{}})
endsnippet

snippet SendPush "SendPush(uid int32, function func(*User, *packet.Packet, int16)"
SendPush( ${1:uid int32}, ${2:function func(*User}, ${3:*packet.Packet}, ${4:int16})
endsnippet

snippet SendPushWithPacket "SendPushWithPacket(uid int32, packet []byte)"
SendPushWithPacket( ${1:uid int32}, ${2:packet []byte})
endsnippet

snippet SendRefreshUserDataPush "SendRefreshUserDataPush(uid int32, server_id T_server_id)"
SendRefreshUserDataPush( ${1:uid int32}, ${2:server_id T_server_id})
endsnippet

snippet SendSystemMail "SendSystemMail(to_user *User, reward map[string]int32, from_user_name string, title string, body string)"
SendSystemMail( ${1:to_user *User}, ${2:reward map[string]int32}, ${3:from_user_name string}, ${4:title string}, ${5:body string})
endsnippet

snippet SendUserMQ "SendUserMQ(user *User, from int16, data interface{}, code int16, sess *Session)"
SendUserMQ( ${1:user *User}, ${2:from int16}, ${3:data interface{}}, ${4:code int16}, ${5:sess *Session})
endsnippet

snippet Sender "Sender(v Value, c interface{})"
Sender( ${1:v Value}, ${2:c interface{}})
endsnippet

snippet ServeApi "ServeApi(job *engine.Job)"
ServeApi( ${1:job *engine.Job})
endsnippet

snippet ServeRequest "ServeRequest(eng *engine.Engine, apiversion version.Version, w http.ResponseWriter, req *http.Request)"
ServeRequest( ${1:eng *engine.Engine}, ${2:apiversion version.Version}, ${3:w http.ResponseWriter}, ${4:req *http.Request})
endsnippet

snippet ServiceCall "ServiceCall(session *mdapi.Mdcli, service string, request ...string)"
ServiceCall( ${1:session *mdapi.Mdcli}, ${2:service string}, ${3:request ...string})
endsnippet

snippet ServiceSuccess "ServiceSuccess(uuid string)"
ServiceSuccess( ${1:uuid string})
endsnippet

snippet Set "Set(key string, value interface{})"
Set( ${1:key string}, ${2:value interface{}})
endsnippet

snippet SetActivity "SetActivity(act *activity_tbl.Activity)"
SetActivity( ${1:act *activity_tbl.Activity})
endsnippet

snippet SetAgentServerListInfo "SetAgentServerListInfo(info *rpc_args.ServersForAgent)"
SetAgentServerListInfo( ${1:info *rpc_args.ServersForAgent})
endsnippet

snippet SetAllianceServerListInfo "SetAllianceServerListInfo(info *rpc_args.ServersForAlliance)"
SetAllianceServerListInfo( ${1:info *rpc_args.ServersForAlliance})
endsnippet

snippet SetCell "SetCell(x, y int, ch rune, fg, bg Attribute)"
SetCell( ${1:x}, ${2:y int}, ${3:ch rune}, ${4:fg}, ${5:bg Attribute})
endsnippet

snippet SetChaos "SetChaos(c Chaos)"
SetChaos( ${1:c Chaos})
endsnippet

snippet SetConfigFile "SetConfigFile(filename string)"
SetConfigFile( ${1:filename string})
endsnippet

snippet SetConfigValue "SetConfigValue(section, key, val string)"
SetConfigValue( ${1:section}, ${2:key}, ${3:val string})
endsnippet

snippet SetConnParam "SetConnParam(conn *net.TCPConn)"
SetConnParam( ${1:conn *net.TCPConn})
endsnippet

snippet SetConsoleMode "SetConsoleMode(fileDesc uintptr, mode uint32)"
SetConsoleMode( ${1:fileDesc uintptr}, ${2:mode uint32})
endsnippet

snippet SetCursor "SetCursor(x, y int)"
SetCursor( ${1:x}, ${2:y int})
endsnippet

snippet SetDB "SetDB(host string, db string)"
SetDB( ${1:host string}, ${2:db string})
endsnippet

snippet SetDebug "SetDebug(debug bool)"
SetDebug( ${1:debug bool})
endsnippet

snippet SetDefaultGateway "SetDefaultGateway(ip, ifaceName string)"
SetDefaultGateway( ${1:ip}, ${2:ifaceName string})
endsnippet

snippet SetDevDir "SetDevDir(dir string)"
SetDevDir( ${1:dir string})
endsnippet

snippet SetError "SetError(err error)"
SetError( ${1:err error})
endsnippet

snippet SetFileCreateLabel "SetFileCreateLabel(fileLabel string)"
SetFileCreateLabel( ${1:fileLabel string})
endsnippet

snippet SetFileLabel "SetFileLabel(path string, fileLabel string)"
SetFileLabel( ${1:path string}, ${2:fileLabel string})
endsnippet

snippet SetFormatter "SetFormatter(formatter Formatter)"
SetFormatter( ${1:formatter Formatter})
endsnippet

snippet SetHairpinMode "SetHairpinMode(iface *net.Interface, enabled bool)"
SetHairpinMode( ${1:iface *net.Interface}, ${2:enabled bool})
endsnippet

snippet SetHandler "SetHandler(handler SignalHandlerFunc, signals ...os.Signal)"
SetHandler( ${1:handler SignalHandlerFunc}, ${2:signals ...os.Signal})
endsnippet

snippet SetInputMode "SetInputMode(mode InputMode)"
SetInputMode( ${1:mode InputMode})
endsnippet

snippet SetInterfaceInNamespaceFd "SetInterfaceInNamespaceFd(name string, fd uintptr)"
SetInterfaceInNamespaceFd( ${1:name string}, ${2:fd uintptr})
endsnippet

snippet SetInterfaceInNamespacePid "SetInterfaceInNamespacePid(name string, nsPid int)"
SetInterfaceInNamespacePid( ${1:name string}, ${2:nsPid int})
endsnippet

snippet SetInterfaceIp "SetInterfaceIp(name string, rawIp string)"
SetInterfaceIp( ${1:name string}, ${2:rawIp string})
endsnippet

snippet SetInterfaceMac "SetInterfaceMac(name string, macaddr string)"
SetInterfaceMac( ${1:name string}, ${2:macaddr string})
endsnippet

snippet SetInterfaceMaster "SetInterfaceMaster(name, master string)"
SetInterfaceMaster( ${1:name}, ${2:master string})
endsnippet

snippet SetIoThreads "SetIoThreads(n int)"
SetIoThreads( ${1:n int})
endsnippet

snippet SetIptablesChain "SetIptablesChain(c *iptables.Chain)"
SetIptablesChain( ${1:c *iptables.Chain})
endsnippet

snippet SetIpv6 "SetIpv6(i bool)"
SetIpv6( ${1:i bool})
endsnippet

snippet SetLevel "SetLevel(level Level)"
SetLevel( ${1:level Level})
endsnippet

snippet SetLocale "SetLocale(local string)"
SetLocale( ${1:local string})
endsnippet

snippet SetLogger "SetLogger(logger log_Logger)"
SetLogger( ${1:logger log_Logger})
endsnippet

snippet SetMacAddress "SetMacAddress(name, addr string)"
SetMacAddress( ${1:name}, ${2:addr string})
endsnippet

snippet SetMaxSockets "SetMaxSockets(n int)"
SetMaxSockets( ${1:n int})
endsnippet

snippet SetMemProfileRate "SetMemProfileRate(rate int)"
SetMemProfileRate( ${1:rate int})
endsnippet

snippet SetMtu "SetMtu(name string, mtu int)"
SetMtu( ${1:name string}, ${2:mtu int})
endsnippet

snippet SetMyKey "SetMyKey(r *http.Request, val SomeType)"
SetMyKey( ${1:r *http.Request}, ${2:val SomeType})
endsnippet

snippet SetOutput "SetOutput(out io.Writer)"
SetOutput( ${1:out io.Writer})
endsnippet

snippet SetOutputMode "SetOutputMode(mode OutputMode)"
SetOutputMode( ${1:mode OutputMode})
endsnippet

snippet SetProcessLabel "SetProcessLabel(processLabel string)"
SetProcessLabel( ${1:processLabel string})
endsnippet

snippet SetProxy "SetProxy(proxy string)"
SetProxy( ${1:proxy string})
endsnippet

snippet SetRawTerminal "SetRawTerminal(fd uintptr)"
SetRawTerminal( ${1:fd uintptr})
endsnippet

snippet SetRreadCount "SetRreadCount(fc *Fcall, count uint32)"
SetRreadCount( ${1:fc *Fcall}, ${2:count uint32})
endsnippet

snippet SetSigHandler "SetSigHandler(handler SignalHandlerFunc, signals ...os.Signal)"
SetSigHandler( ${1:handler SignalHandlerFunc}, ${2:signals ...os.Signal})
endsnippet

snippet SetStats "SetStats(enabled bool)"
SetStats( ${1:enabled bool})
endsnippet

snippet SetTag "SetTag(fc *Fcall, tag uint16)"
SetTag( ${1:fc *Fcall}, ${2:tag uint16})
endsnippet

snippet SetTransactionId "SetTransactionId(poolName string, oldId uint64, newId uint64)"
SetTransactionId( ${1:poolName string}, ${2:oldId uint64}, ${3:newId uint64})
endsnippet

snippet SetWinsize "SetWinsize(fd uintptr, ws *Winsize)"
SetWinsize( ${1:fd uintptr}, ${2:ws *Winsize})
endsnippet

snippet Setexeccon "Setexeccon(scon string)"
Setexeccon( ${1:scon string})
endsnippet

snippet Setfilecon "Setfilecon(path string, scon string)"
Setfilecon( ${1:path string}, ${2:scon string})
endsnippet

snippet Setfscreatecon "Setfscreatecon(scon string)"
Setfscreatecon( ${1:scon string})
endsnippet

snippet Setgid "Setgid(gid int)"
Setgid( ${1:gid int})
endsnippet

snippet Setns "Setns(fd uintptr, flags uintptr)"
Setns( ${1:fd uintptr}, ${2:flags uintptr})
endsnippet

snippet Setuid "Setuid(uid int)"
Setuid( ${1:uid int})
endsnippet

snippet Setup "Setup(rootfs, consolePath, mountLabel string)"
Setup( ${1:rootfs}, ${2:consolePath}, ${3:mountLabel string})
endsnippet

snippet SetupCgroups "SetupCgroups(container *libcontainer.Config, nspid int)"
SetupCgroups( ${1:container *libcontainer.Config}, ${2:nspid int})
endsnippet

snippet SetupInitLayer "SetupInitLayer(initLayer string)"
SetupInitLayer( ${1:initLayer string})
endsnippet

snippet SetupPtmx "SetupPtmx(rootfs, consolePath, mountLabel string)"
SetupPtmx( ${1:rootfs}, ${2:consolePath}, ${3:mountLabel string})
endsnippet

snippet SetupUser "SetupUser(u string)"
SetupUser( ${1:u string})
endsnippet

snippet Setxattr "Setxattr(path, xattr, value string)"
Setxattr( ${1:path}, ${2:xattr}, ${3:value string})
endsnippet

snippet ShadowRead "ShadowRead(f *os.File, buf []byte)"
ShadowRead( ${1:f *os.File}, ${2:buf []byte})
endsnippet

snippet ShellQuoteArguments "ShellQuoteArguments(args []string)"
ShellQuoteArguments( ${1:args []string})
endsnippet

snippet Shift "Shift(x Value, op token.Token, s uint)"
Shift( ${1:x Value}, ${2:op token.Token}, ${3:s uint})
endsnippet

snippet ShowAppHelp "ShowAppHelp(c *Context)"
ShowAppHelp( ${1:c *Context})
endsnippet

snippet ShowCommandCompletions "ShowCommandCompletions(ctx *Context, command string)"
ShowCommandCompletions( ${1:ctx *Context}, ${2:command string})
endsnippet

snippet ShowCommandHelp "ShowCommandHelp(c *Context, command string)"
ShowCommandHelp( ${1:c *Context}, ${2:command string})
endsnippet

snippet ShowCompletions "ShowCompletions(c *Context)"
ShowCompletions( ${1:c *Context})
endsnippet

snippet ShowSubcommandHelp "ShowSubcommandHelp(c *Context)"
ShowSubcommandHelp( ${1:c *Context})
endsnippet

snippet ShowSystemStat "ShowSystemStat(seconds int)"
ShowSystemStat( ${1:seconds int})
endsnippet

snippet ShowVersion "ShowVersion(c *Context)"
ShowVersion( ${1:c *Context})
endsnippet

snippet Shuffle "Shuffle(data []int32, length int)"
Shuffle( ${1:data []int32}, ${2:length int})
endsnippet

snippet Sign "Sign(x Value)"
Sign( ${1:x Value})
endsnippet

snippet SignalProc "SignalProc(quit_signal chan bool, wg *sync.WaitGroup, clean_work func()"
SignalProc( ${1:quit_signal chan bool}, ${2:wg *sync.WaitGroup}, ${3:clean_work func(})
endsnippet

snippet SignatureOf "SignatureOf(vs ...interface{})"
SignatureOf( ${1:vs ...interface{}})
endsnippet

snippet SignatureOfType "SignatureOfType(t reflect.Type)"
SignatureOfType( ${1:t reflect.Type})
endsnippet

snippet SimpleSwitch "SimpleSwitch(x, y int)"
SimpleSwitch( ${1:x}, ${2:y int})
endsnippet

snippet SimpleType "SimpleType(kind Kind)"
SimpleType( ${1:kind Kind})
endsnippet

snippet SimpleTypeSwitch "SimpleTypeSwitch(x interface{})"
SimpleTypeSwitch( ${1:x interface{}})
endsnippet

snippet Sin "Sin(x float64)"
Sin( ${1:x float64})
endsnippet

snippet SinWave "SinWave(freq float64, rate int)"
SinWave( ${1:freq float64}, ${2:rate int})
endsnippet

snippet SliceImage "SliceImage(width, height int, r image.Rectangle, img draw.Image, p image.Point)"
SliceImage( ${1:width}, ${2:height int}, ${3:r image.Rectangle}, ${4:img draw.Image}, ${5:p image.Point})
endsnippet

snippet SliceOf "SliceOf(Type)"
SliceOf( ${1:Type})
endsnippet

snippet Sort "Sort(ports []Port, predicate func(i, j Port)"
Sort( ${1:ports []Port}, ${2:predicate func(i}, ${3:j Port})
endsnippet

snippet SpanBbox "SpanBbox(ss []raster.Span)"
SpanBbox( ${1:ss []raster.Span})
endsnippet

snippet SpdMarch "SpdMarch(user *User, key string, num int32, city_id int32)"
SpdMarch( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet SpeedEventUseItem "SpeedEventUseItem(event *Event)"
SpeedEventUseItem( ${1:event *Event})
endsnippet

snippet SpeedUpAllQueue "SpeedUpAllQueue(user *User, alliance *Alliance, city *City, now int64, speed_up_time int64)"
SpeedUpAllQueue( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:now int64}, ${5:speed_up_time int64})
endsnippet

snippet SpeedUpTheFastBuildingQueue "SpeedUpTheFastBuildingQueue(user *User, alliance *Alliance, city *City, now int64)"
SpeedUpTheFastBuildingQueue( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:now int64})
endsnippet

snippet SpeedUpTheFastQueue "SpeedUpTheFastQueue(user *User, city *City, now int64)"
SpeedUpTheFastQueue( ${1:user *User}, ${2:city *City}, ${3:now int64})
endsnippet

snippet SpeedUpTheFastTechQueue "SpeedUpTheFastTechQueue(user *User, alliance *Alliance, city *City, now int64)"
SpeedUpTheFastTechQueue( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:now int64})
endsnippet

snippet SpendLoyaltyAfterDefenseLose "SpendLoyaltyAfterDefenseLose(city *City)"
SpendLoyaltyAfterDefenseLose( ${1:city *City})
endsnippet

snippet SpendSoldiers "SpendSoldiers(user *User, soldiers map[string]int32)"
SpendSoldiers( ${1:user *User}, ${2:soldiers map[string]int32})
endsnippet

snippet Split "Split(str string)"
Split( ${1:str string})
endsnippet

snippet SplitPathList "SplitPathList(ctxt *build.Context, s string)"
SplitPathList( ${1:ctxt *build.Context}, ${2:s string})
endsnippet

snippet SplitProtoPort "SplitProtoPort(rawPort string)"
SplitProtoPort( ${1:rawPort string})
endsnippet

snippet Start "Start(c *exec.Cmd)"
Start( ${1:c *exec.Cmd})
endsnippet

snippet StartAgent "StartAgent(in chan []byte, conn net.Conn, quit_signal chan bool, wg *sync.WaitGroup)"
StartAgent( ${1:in chan []byte}, ${2:conn net.Conn}, ${3:quit_signal chan bool}, ${4:wg *sync.WaitGroup})
endsnippet

snippet StartBattle "StartBattle(defense_users_data []*User, attack_users_data []*User, event *ActionEvent, terrain T_map_type)"
StartBattle( ${1:defense_users_data []*User}, ${2:attack_users_data []*User}, ${3:event *ActionEvent}, ${4:terrain T_map_type})
endsnippet

snippet StartBattleRound "StartBattleRound(attack_type int16, attack_hero *hero.Hero, defense_hero *hero.Hero, attack_soldier *Soldier, defense_soldier *Soldier, attacker *ArmyInfo, defenser *ArmyInfo, battle_round *BattleRound, terrain T_map_type)"
StartBattleRound( ${1:attack_type int16}, ${2:attack_hero *hero.Hero}, ${3:defense_hero *hero.Hero}, ${4:attack_soldier *Soldier}, ${5:defense_soldier *Soldier}, ${6:attacker *ArmyInfo}, ${7:defenser *ArmyInfo}, ${8:battle_round *BattleRound}, ${9:terrain T_map_type})
endsnippet

snippet StartBattleTurn "StartBattleTurn(attack_type int16, attack_hero *hero.Hero, defense_hero *hero.Hero, attack_soldier *Soldier, defense_soldier *Soldier, attacker *ArmyInfo, defenser *ArmyInfo, attacker_battle_info *BattleInfo, defenser_battle_info *BattleInfo,$/;"	f
StartBlockProfile	src/helper/profilingtool.go	/^func StartBlockProfile(rate int)"
StartBattleTurn( ${1:attack_type int16}, ${2:attack_hero *hero.Hero}, ${3:defense_hero *hero.Hero}, ${4:attack_soldier *Soldier}, ${5:defense_soldier *Soldier}, ${6:attacker *ArmyInfo}, ${7:defenser *ArmyInfo}, ${8:attacker_battle_info *BattleInfo}, ${9:defenser_battle_info *BattleInfo}, ${10:$/;"	f
StartBlockProfile	src/helper/profilingtool.go	/^func StartBlockProfile(rate int})
endsnippet

snippet StartLogger "StartLogger(logfile string)"
StartLogger( ${1:logfile string})
endsnippet

snippet StartNew "StartNew(total int)"
StartNew( ${1:total int})
endsnippet

snippet StartScouting "StartScouting(language string, x, y T_coordinate, scout_level string)"
StartScouting( ${1:language string}, ${2:x}, ${3:y T_coordinate}, ${4:scout_level string})
endsnippet

snippet StartSingleBattle "StartSingleBattle(gl_attack_army *ArmyInfo, gl_defense_army *ArmyInfo, single_battle *SingleBattle, event *ActionEvent, terrain T_map_type)"
StartSingleBattle( ${1:gl_attack_army *ArmyInfo}, ${2:gl_defense_army *ArmyInfo}, ${3:single_battle *SingleBattle}, ${4:event *ActionEvent}, ${5:terrain T_map_type})
endsnippet

snippet Stat "Stat(name string, stat *Stat_t)"
Stat( ${1:name string}, ${2:stat *Stat_t})
endsnippet

snippet StatDir "StatDir(rootPath string, includeDir ...bool)"
StatDir( ${1:rootPath string}, ${2:includeDir ...bool})
endsnippet

snippet StateMachine "StateMachine(fsm *bstar_t)"
StateMachine( ${1:fsm *bstar_t})
endsnippet

snippet Statement "Statement(dest interface{}, template string)"
Statement( ${1:dest interface{}}, ${2:template string})
endsnippet

snippet Static "Static(directory string, staticOpt ...StaticOptions)"
Static( ${1:directory string}, ${2:staticOpt ...StaticOptions})
endsnippet

snippet StatsReceiver "StatsReceiver(conn net.Conn)"
StatsReceiver( ${1:conn net.Conn})
endsnippet

snippet StatusText "StatusText(code int)"
StatusText( ${1:code int})
endsnippet

snippet StdCopy "StdCopy(dstout, dsterr io.Writer, src io.Reader)"
StdCopy( ${1:dstout}, ${2:dsterr io.Writer}, ${3:src io.Reader})
endsnippet

snippet StillOk "StillOk(EmbeddedMutexPointer)"
StillOk( ${1:EmbeddedMutexPointer})
endsnippet

snippet StopCatch "StopCatch(sigc chan os.Signal)"
StopCatch( ${1:sigc chan os.Signal})
endsnippet

snippet Store "Store(battle_message *BattleMessage)"
Store( ${1:battle_message *BattleMessage})
endsnippet

snippet StoreImage "StoreImage(img *Image, layerData archive.ArchiveReader, root string)"
StoreImage( ${1:img *Image}, ${2:layerData archive.ArchiveReader}, ${3:root string})
endsnippet

snippet String "String(s []byte)"
String( ${1:s []byte})
endsnippet

snippet StringFlag "StringFlag(f *string, v string)"
StringFlag( ${1:f *string}, ${2:v string})
endsnippet

snippet StringVal "StringVal(x Value)"
StringVal( ${1:x Value})
endsnippet

snippet StringVar "StringVar(p *string, names []string, value string, usage string)"
StringVar( ${1:p *string}, ${2:names []string}, ${3:value string}, ${4:usage string})
endsnippet

snippet StringWidth "StringWidth(s string)"
StringWidth( ${1:s string})
endsnippet

snippet StringsContainsNoCase "StringsContainsNoCase(slice []string, s string)"
StringsContainsNoCase( ${1:slice []string}, ${2:s string})
endsnippet

snippet StrongConnect "StrongConnect(table string)"
StrongConnect( ${1:table string})
endsnippet

snippet Structure "Structure(fset *token.FileSet, pkg *types.Package, info *types.Info, files []*ast.File)"
Structure( ${1:fset *token.FileSet}, ${2:pkg *types.Package}, ${3:info *types.Info}, ${4:files []*ast.File})
endsnippet

snippet Style "Style(s string)"
Style( ${1:s string})
endsnippet

snippet SuspendDevice "SuspendDevice(name string)"
SuspendDevice( ${1:name string})
endsnippet

snippet SwitchInAForLoop "SwitchInAForLoop(x int)"
SwitchInAForLoop( ${1:x int})
endsnippet

snippet SwitchInAForLoopUsingGoto "SwitchInAForLoopUsingGoto(x int)"
SwitchInAForLoopUsingGoto( ${1:x int})
endsnippet

snippet SwitchWithNonConstantCase "SwitchWithNonConstantCase(x int)"
SwitchWithNonConstantCase( ${1:x int})
endsnippet

snippet Switches "Switches(fn *ssa.Function)"
Switches( ${1:fn *ssa.Function})
endsnippet

snippet TIMEOUT "TIMEOUT(v ...interface{})"
TIMEOUT( ${1:v ...interface{}})
endsnippet

snippet _send_attack_on_map_push "_send_attack_on_map_push(from_map_type, to_map_type T_map_type, from_x, from_y, to_x, to_y T_coordinate)"
_send_attack_on_map_push( ${1:from_map_type}, ${2:to_map_type T_map_type}, ${3:from_x}, ${4:from_y}, ${5:to_x}, ${6:to_y T_coordinate})
endsnippet

snippet TagStateByName "TagStateByName(c appengine.Context, name string)"
TagStateByName( ${1:c appengine.Context}, ${2:name string})
endsnippet

snippet Tail "Tail(buffer *bytes.Buffer, n int)"
Tail( ${1:buffer *bytes.Buffer}, ${2:n int})
endsnippet

snippet TailFile "TailFile(f *os.File, n int)"
TailFile( ${1:f *os.File}, ${2:n int})
endsnippet

snippet Tar "Tar(path string, compression Compression)"
Tar( ${1:path string}, ${2:compression Compression})
endsnippet

snippet TarUntar "TarUntar(src, dst string)"
TarUntar( ${1:src}, ${2:dst string})
endsnippet

snippet TarWithOptions "TarWithOptions(srcPath string, options *TarOptions)"
TarWithOptions( ${1:srcPath string}, ${2:options *TarOptions})
endsnippet

snippet TaskCreate "TaskCreate(tasktype TaskType)"
TaskCreate( ${1:tasktype TaskType})
endsnippet

snippet TaskCreateNamed "TaskCreateNamed(t TaskType, name string)"
TaskCreateNamed( ${1:t TaskType}, ${2:name string})
endsnippet

snippet TechnologySpeedUp "TechnologySpeedUp(user *User, alliance *Alliance, city *City, b *Technology, now int64)"
TechnologySpeedUp( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:b *Technology}, ${5:now int64})
endsnippet

snippet TechnologyUpdateLevel "TechnologyUpdateLevel(user *User, alliance *Alliance, city *City, b *Technology, now int64)"
TechnologyUpdateLevel( ${1:user *User}, ${2:alliance *Alliance}, ${3:city *City}, ${4:b *Technology}, ${5:now int64})
endsnippet

snippet TempDir "TempDir(rootDir string)"
TempDir( ${1:rootDir string})
endsnippet

snippet Test "Test(t *testing.T)"
Test( ${1:t *testing.T})
endsnippet

snippet Test301Redirect "Test301Redirect(t *testing.T)"
Test301Redirect( ${1:t *testing.T})
endsnippet

snippet TestA "TestA(t *testing.T)"
TestA( ${1:t *testing.T})
endsnippet

snippet TestAPIVersions "TestAPIVersions(t *testing.T)"
TestAPIVersions( ${1:t *testing.T})
endsnippet

snippet TestAccessLogApacheMiddleware "TestAccessLogApacheMiddleware(t *testing.T)"
TestAccessLogApacheMiddleware( ${1:t *testing.T})
endsnippet

snippet TestAccessLogJsonMiddleware "TestAccessLogJsonMiddleware(t *testing.T)"
TestAccessLogJsonMiddleware( ${1:t *testing.T})
endsnippet

snippet TestActivation "TestActivation(t *testing.T)"
TestActivation( ${1:t *testing.T})
endsnippet

snippet TestActivationNoFiles "TestActivationNoFiles(t *testing.T)"
TestActivationNoFiles( ${1:t *testing.T})
endsnippet

snippet TestActivationNoFix "TestActivationNoFix(t *testing.T)"
TestActivationNoFix( ${1:t *testing.T})
endsnippet

snippet TestActivityListReq "TestActivityListReq(t *testing.T)"
TestActivityListReq( ${1:t *testing.T})
endsnippet

snippet TestActivityReq "TestActivityReq(t *testing.T)"
TestActivityReq( ${1:t *testing.T})
endsnippet

snippet TestActivityScoredReq "TestActivityScoredReq(t *testing.T)"
TestActivityScoredReq( ${1:t *testing.T})
endsnippet

snippet TestAddBeforeRunning "TestAddBeforeRunning(t *testing.T)"
TestAddBeforeRunning( ${1:t *testing.T})
endsnippet

snippet TestAddChildToNonExistantRoot "TestAddChildToNonExistantRoot(t *testing.T)"
TestAddChildToNonExistantRoot( ${1:t *testing.T})
endsnippet

snippet TestAddDelNetworkIp "TestAddDelNetworkIp(t *testing.T)"
TestAddDelNetworkIp( ${1:t *testing.T})
endsnippet

snippet TestAddGems "TestAddGems(t *testing.T)"
TestAddGems( ${1:t *testing.T})
endsnippet

snippet TestAddImport "TestAddImport(t *testing.T)"
TestAddImport( ${1:t *testing.T})
endsnippet

snippet TestAddMemberToRoom "TestAddMemberToRoom(t *testing.T)"
TestAddMemberToRoom( ${1:t *testing.T})
endsnippet

snippet TestAddPEMHeadersToKey "TestAddPEMHeadersToKey(t *testing.T)"
TestAddPEMHeadersToKey( ${1:t *testing.T})
endsnippet

snippet TestAddRequiredHeadersToRedirectedRequests "TestAddRequiredHeadersToRedirectedRequests(t *testing.T)"
TestAddRequiredHeadersToRedirectedRequests( ${1:t *testing.T})
endsnippet

snippet TestAddRouteSourceSelection "TestAddRouteSourceSelection(t *testing.T)"
TestAddRouteSourceSelection( ${1:t *testing.T})
endsnippet

snippet TestAddSelfAsChild "TestAddSelfAsChild(t *testing.T)"
TestAddSelfAsChild( ${1:t *testing.T})
endsnippet

snippet TestAddWhileRunning "TestAddWhileRunning(t *testing.T)"
TestAddWhileRunning( ${1:t *testing.T})
endsnippet

snippet TestAddr "TestAddr(t *testing.T)"
TestAddr( ${1:t *testing.T})
endsnippet

snippet TestAll "TestAll(t *testing.T)"
TestAll( ${1:t *testing.T})
endsnippet

snippet TestAllAuto "TestAllAuto(t *testing.T)"
TestAllAuto( ${1:t *testing.T})
endsnippet

snippet TestAllPackages "TestAllPackages(t *testing.T)"
TestAllPackages( ${1:t *testing.T})
endsnippet

snippet TestAllianceCreate "TestAllianceCreate(t *testing.T)"
TestAllianceCreate( ${1:t *testing.T})
endsnippet

snippet TestAllocateAllIps "TestAllocateAllIps(t *testing.T)"
TestAllocateAllIps( ${1:t *testing.T})
endsnippet

snippet TestAllocateAllPorts "TestAllocateAllPorts(t *testing.T)"
TestAllocateAllPorts( ${1:t *testing.T})
endsnippet

snippet TestAllocateDifferentSubnets "TestAllocateDifferentSubnets(t *testing.T)"
TestAllocateDifferentSubnets( ${1:t *testing.T})
endsnippet

snippet TestAllocateFirstIP "TestAllocateFirstIP(t *testing.T)"
TestAllocateFirstIP( ${1:t *testing.T})
endsnippet

snippet TestAllocateFromRange "TestAllocateFromRange(t *testing.T)"
TestAllocateFromRange( ${1:t *testing.T})
endsnippet

snippet TestAllocatePortDetection "TestAllocatePortDetection(t *testing.T)"
TestAllocatePortDetection( ${1:t *testing.T})
endsnippet

snippet TestAllocateTCPPortLocalhost "TestAllocateTCPPortLocalhost(t *testing.T)"
TestAllocateTCPPortLocalhost( ${1:t *testing.T})
endsnippet

snippet TestAllocateUDPPortLocalhost "TestAllocateUDPPortLocalhost(t *testing.T)"
TestAllocateUDPPortLocalhost( ${1:t *testing.T})
endsnippet

snippet TestAllocs "TestAllocs(t *testing.T)"
TestAllocs( ${1:t *testing.T})
endsnippet

snippet TestAlwaysRestart "TestAlwaysRestart(t *testing.T)"
TestAlwaysRestart( ${1:t *testing.T})
endsnippet

snippet TestApiReq "TestApiReq(t *testing.T)"
TestApiReq( ${1:t *testing.T})
endsnippet

snippet TestApparmorProfile "TestApparmorProfile(t *testing.T)"
TestApparmorProfile( ${1:t *testing.T})
endsnippet

snippet TestApplyDiff "TestApplyDiff(t *testing.T)"
TestApplyDiff( ${1:t *testing.T})
endsnippet

snippet TestApplyLayer "TestApplyLayer(t *testing.T)"
TestApplyLayer( ${1:t *testing.T})
endsnippet

snippet TestApplyLayerInvalidFilenames "TestApplyLayerInvalidFilenames(t *testing.T)"
TestApplyLayerInvalidFilenames( ${1:t *testing.T})
endsnippet

snippet TestApplyLayerInvalidHardlink "TestApplyLayerInvalidHardlink(t *testing.T)"
TestApplyLayerInvalidHardlink( ${1:t *testing.T})
endsnippet

snippet TestApplyLayerInvalidSymlink "TestApplyLayerInvalidSymlink(t *testing.T)"
TestApplyLayerInvalidSymlink( ${1:t *testing.T})
endsnippet

snippet TestApplyTemplateToResponseWriter "TestApplyTemplateToResponseWriter(t *testing.T)"
TestApplyTemplateToResponseWriter( ${1:t *testing.T})
endsnippet

snippet TestArray "TestArray(t *testing.T)"
TestArray( ${1:t *testing.T})
endsnippet

snippet TestArrayChildKeys "TestArrayChildKeys(t *testing.T)"
TestArrayChildKeys( ${1:t *testing.T})
endsnippet

snippet TestAssignOp "TestAssignOp(t *testing.T)"
TestAssignOp( ${1:t *testing.T})
endsnippet

snippet TestAt "TestAt(t *testing.T)"
TestAt( ${1:t *testing.T})
endsnippet

snippet TestAtGrey1 "TestAtGrey1(t *testing.T)"
TestAtGrey1( ${1:t *testing.T})
endsnippet

snippet TestAtGrey2 "TestAtGrey2(t *testing.T)"
TestAtGrey2( ${1:t *testing.T})
endsnippet

snippet TestAtGrey4 "TestAtGrey4(t *testing.T)"
TestAtGrey4( ${1:t *testing.T})
endsnippet

snippet TestAttachContainer "TestAttachContainer(t *testing.T)"
TestAttachContainer( ${1:t *testing.T})
endsnippet

snippet TestAttachContainerNotFound "TestAttachContainerNotFound(t *testing.T)"
TestAttachContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestAttachDetach "TestAttachDetach(t *testing.T)"
TestAttachDetach( ${1:t *testing.T})
endsnippet

snippet TestAttachDetachTruncatedID "TestAttachDetachTruncatedID(t *testing.T)"
TestAttachDetachTruncatedID( ${1:t *testing.T})
endsnippet

snippet TestAttachDisconnect "TestAttachDisconnect(t *testing.T)"
TestAttachDisconnect( ${1:t *testing.T})
endsnippet

snippet TestAttachMultipleAndRestart "TestAttachMultipleAndRestart(t *testing.T)"
TestAttachMultipleAndRestart( ${1:t *testing.T})
endsnippet

snippet TestAttachToContainer "TestAttachToContainer(t *testing.T)"
TestAttachToContainer( ${1:t *testing.T})
endsnippet

snippet TestAttachToContainerLogs "TestAttachToContainerLogs(t *testing.T)"
TestAttachToContainerLogs( ${1:t *testing.T})
endsnippet

snippet TestAttachToContainerNilStderr "TestAttachToContainerNilStderr(t *testing.T)"
TestAttachToContainerNilStderr( ${1:t *testing.T})
endsnippet

snippet TestAttachToContainerNilStdout "TestAttachToContainerNilStdout(t *testing.T)"
TestAttachToContainerNilStdout( ${1:t *testing.T})
endsnippet

snippet TestAttachToContainerRawTerminalFalse "TestAttachToContainerRawTerminalFalse(t *testing.T)"
TestAttachToContainerRawTerminalFalse( ${1:t *testing.T})
endsnippet

snippet TestAttachToContainerSentinel "TestAttachToContainerSentinel(t *testing.T)"
TestAttachToContainerSentinel( ${1:t *testing.T})
endsnippet

snippet TestAttachToContainerWithoutContainer "TestAttachToContainerWithoutContainer(t *testing.T)"
TestAttachToContainerWithoutContainer( ${1:t *testing.T})
endsnippet

snippet TestAttachTtyWithoutStdin "TestAttachTtyWithoutStdin(t *testing.T)"
TestAttachTtyWithoutStdin( ${1:t *testing.T})
endsnippet

snippet TestAttackUserReq "TestAttackUserReq(t *testing.T)"
TestAttackUserReq( ${1:t *testing.T})
endsnippet

snippet TestAttackVillageReq "TestAttackVillageReq(t *testing.T)"
TestAttackVillageReq( ${1:t *testing.T})
endsnippet

snippet TestAufsString "TestAufsString(t *testing.T)"
TestAufsString( ${1:t *testing.T})
endsnippet

snippet TestAuthBasic "TestAuthBasic(t *testing.T)"
TestAuthBasic( ${1:t *testing.T})
endsnippet

snippet TestAuthEncode "TestAuthEncode(t *testing.T)"
TestAuthEncode( ${1:t *testing.T})
endsnippet

snippet TestAuthorize "TestAuthorize(t *testing.T)"
TestAuthorize( ${1:t *testing.T})
endsnippet

snippet TestAuto "TestAuto(t *testing.T)"
TestAuto( ${1:t *testing.T})
endsnippet

snippet TestAxioms "TestAxioms(t *testing.T)"
TestAxioms( ${1:t *testing.T})
endsnippet

snippet TestB "TestB(t *testing.T)"
TestB( ${1:t *testing.T})
endsnippet

snippet TestBackground "TestBackground(t *testing.T)"
TestBackground( ${1:t *testing.T})
endsnippet

snippet TestBadInfo "TestBadInfo(t *testing.T)"
TestBadInfo( ${1:t *testing.T})
endsnippet

snippet TestBandwidth "TestBandwidth(t *testing.T)"
TestBandwidth( ${1:t *testing.T})
endsnippet

snippet TestBar "TestBar(t *testing.T)"
TestBar( ${1:t *testing.T})
endsnippet

snippet TestBasic "TestBasic(t *testing.T)"
TestBasic( ${1:t *testing.T})
endsnippet

snippet TestBasicOperations "TestBasicOperations(t *testing.T)"
TestBasicOperations( ${1:t *testing.T})
endsnippet

snippet TestBasicSetActions "TestBasicSetActions(t *testing.T)"
TestBasicSetActions( ${1:t *testing.T})
endsnippet

snippet TestBasics "TestBasics(t *testing.T)"
TestBasics( ${1:t *testing.T})
endsnippet

snippet TestBattlePlotReq "TestBattlePlotReq(t *testing.T)"
TestBattlePlotReq( ${1:t *testing.T})
endsnippet

snippet TestBenchCmpSorting "TestBenchCmpSorting(t *testing.T)"
TestBenchCmpSorting( ${1:t *testing.T})
endsnippet

snippet TestBenchmark "TestBenchmark(t *testing.T)"
TestBenchmark( ${1:t *testing.T})
endsnippet

snippet TestBenchmarkString "TestBenchmarkString(t *testing.T)"
TestBenchmarkString( ${1:t *testing.T})
endsnippet

snippet TestBig "TestBig(t *testing.T)"
TestBig( ${1:t *testing.T})
endsnippet

snippet TestBinarySort "TestBinarySort(t *testing.T)"
TestBinarySort( ${1:t *testing.T})
endsnippet

snippet TestBincCodecsEmbeddedPointer "TestBincCodecsEmbeddedPointer(t *testing.T)"
TestBincCodecsEmbeddedPointer( ${1:t *testing.T})
endsnippet

snippet TestBincCodecsMisc "TestBincCodecsMisc(t *testing.T)"
TestBincCodecsMisc( ${1:t *testing.T})
endsnippet

snippet TestBincCodecsTable "TestBincCodecsTable(t *testing.T)"
TestBincCodecsTable( ${1:t *testing.T})
endsnippet

snippet TestBincRpcGo "TestBincRpcGo(t *testing.T)"
TestBincRpcGo( ${1:t *testing.T})
endsnippet

snippet TestBind "TestBind(t *testing.T)"
TestBind( ${1:t *testing.T})
endsnippet

snippet TestBindToLoopBack "TestBindToLoopBack(t *testing.T)"
TestBindToLoopBack( ${1:t *testing.T})
endsnippet

snippet TestBitSet "TestBitSet(t *testing.T)"
TestBitSet( ${1:t *testing.T})
endsnippet

snippet TestBitString "TestBitString(t *testing.T)"
TestBitString( ${1:t *testing.T})
endsnippet

snippet TestBits "TestBits(t *testing.T)"
TestBits( ${1:t *testing.T})
endsnippet

snippet TestBlkioStats "TestBlkioStats(t *testing.T)"
TestBlkioStats( ${1:t *testing.T})
endsnippet

snippet TestBlkioStatsNoMergedFile "TestBlkioStatsNoMergedFile(t *testing.T)"
TestBlkioStatsNoMergedFile( ${1:t *testing.T})
endsnippet

snippet TestBlkioStatsNoQueuedFile "TestBlkioStatsNoQueuedFile(t *testing.T)"
TestBlkioStatsNoQueuedFile( ${1:t *testing.T})
endsnippet

snippet TestBlkioStatsNoSectorsFile "TestBlkioStatsNoSectorsFile(t *testing.T)"
TestBlkioStatsNoSectorsFile( ${1:t *testing.T})
endsnippet

snippet TestBlkioStatsNoServiceBytesFile "TestBlkioStatsNoServiceBytesFile(t *testing.T)"
TestBlkioStatsNoServiceBytesFile( ${1:t *testing.T})
endsnippet

snippet TestBlkioStatsNoServiceTimeFile "TestBlkioStatsNoServiceTimeFile(t *testing.T)"
TestBlkioStatsNoServiceTimeFile( ${1:t *testing.T})
endsnippet

snippet TestBlkioStatsNoServicedFile "TestBlkioStatsNoServicedFile(t *testing.T)"
TestBlkioStatsNoServicedFile( ${1:t *testing.T})
endsnippet

snippet TestBlkioStatsNoTimeFile "TestBlkioStatsNoTimeFile(t *testing.T)"
TestBlkioStatsNoTimeFile( ${1:t *testing.T})
endsnippet

snippet TestBlkioStatsNoWaitTimeFile "TestBlkioStatsNoWaitTimeFile(t *testing.T)"
TestBlkioStatsNoWaitTimeFile( ${1:t *testing.T})
endsnippet

snippet TestBlkioStatsUnexpectedFieldType "TestBlkioStatsUnexpectedFieldType(t *testing.T)"
TestBlkioStatsUnexpectedFieldType( ${1:t *testing.T})
endsnippet

snippet TestBlkioStatsUnexpectedNumberOfFields "TestBlkioStatsUnexpectedNumberOfFields(t *testing.T)"
TestBlkioStatsUnexpectedNumberOfFields( ${1:t *testing.T})
endsnippet

snippet TestBloomFilter "TestBloomFilter(t *testing.T)"
TestBloomFilter( ${1:t *testing.T})
endsnippet

snippet TestBreakListOutput1 "TestBreakListOutput1(t *testing.T)"
TestBreakListOutput1( ${1:t *testing.T})
endsnippet

snippet TestBreakListOutput2 "TestBreakListOutput2(t *testing.T)"
TestBreakListOutput2( ${1:t *testing.T})
endsnippet

snippet TestBreakpointHit1 "TestBreakpointHit1(t *testing.T)"
TestBreakpointHit1( ${1:t *testing.T})
endsnippet

snippet TestBroadcastWriter "TestBroadcastWriter(t *testing.T)"
TestBroadcastWriter( ${1:t *testing.T})
endsnippet

snippet TestBtrfsCreateBase "TestBtrfsCreateBase(t *testing.T)"
TestBtrfsCreateBase( ${1:t *testing.T})
endsnippet

snippet TestBtrfsCreateEmpty "TestBtrfsCreateEmpty(t *testing.T)"
TestBtrfsCreateEmpty( ${1:t *testing.T})
endsnippet

snippet TestBtrfsCreateSnap "TestBtrfsCreateSnap(t *testing.T)"
TestBtrfsCreateSnap( ${1:t *testing.T})
endsnippet

snippet TestBtrfsSetup "TestBtrfsSetup(t *testing.T)"
TestBtrfsSetup( ${1:t *testing.T})
endsnippet

snippet TestBtrfsTeardown "TestBtrfsTeardown(t *testing.T)"
TestBtrfsTeardown( ${1:t *testing.T})
endsnippet

snippet TestBufAPI "TestBufAPI(t *testing.T)"
TestBufAPI( ${1:t *testing.T})
endsnippet

snippet TestBufReader "TestBufReader(t *testing.T)"
TestBufReader( ${1:t *testing.T})
endsnippet

snippet TestBufferFull "TestBufferFull(t *testing.T)"
TestBufferFull( ${1:t *testing.T})
endsnippet

snippet TestBufferGrowth "TestBufferGrowth(t *testing.T)"
TestBufferGrowth( ${1:t *testing.T})
endsnippet

snippet TestBuild "TestBuild(t *testing.T)"
TestBuild( ${1:t *testing.T})
endsnippet

snippet TestBuildADDCurrentDirWithCache "TestBuildADDCurrentDirWithCache(t *testing.T)"
TestBuildADDCurrentDirWithCache( ${1:t *testing.T})
endsnippet

snippet TestBuildADDCurrentDirWithoutCache "TestBuildADDCurrentDirWithoutCache(t *testing.T)"
TestBuildADDCurrentDirWithoutCache( ${1:t *testing.T})
endsnippet

snippet TestBuildADDFileNotFound "TestBuildADDFileNotFound(t *testing.T)"
TestBuildADDFileNotFound( ${1:t *testing.T})
endsnippet

snippet TestBuildADDLocalAndRemoteFilesWithCache "TestBuildADDLocalAndRemoteFilesWithCache(t *testing.T)"
TestBuildADDLocalAndRemoteFilesWithCache( ${1:t *testing.T})
endsnippet

snippet TestBuildADDLocalAndRemoteFilesWithoutCache "TestBuildADDLocalAndRemoteFilesWithoutCache(t *testing.T)"
TestBuildADDLocalAndRemoteFilesWithoutCache( ${1:t *testing.T})
endsnippet

snippet TestBuildADDLocalFileWithCache "TestBuildADDLocalFileWithCache(t *testing.T)"
TestBuildADDLocalFileWithCache( ${1:t *testing.T})
endsnippet

snippet TestBuildADDLocalFileWithoutCache "TestBuildADDLocalFileWithoutCache(t *testing.T)"
TestBuildADDLocalFileWithoutCache( ${1:t *testing.T})
endsnippet

snippet TestBuildADDMultipleLocalFileWithCache "TestBuildADDMultipleLocalFileWithCache(t *testing.T)"
TestBuildADDMultipleLocalFileWithCache( ${1:t *testing.T})
endsnippet

snippet TestBuildADDRemoteFileMTime "TestBuildADDRemoteFileMTime(t *testing.T)"
TestBuildADDRemoteFileMTime( ${1:t *testing.T})
endsnippet

snippet TestBuildADDRemoteFileWithCache "TestBuildADDRemoteFileWithCache(t *testing.T)"
TestBuildADDRemoteFileWithCache( ${1:t *testing.T})
endsnippet

snippet TestBuildADDRemoteFileWithoutCache "TestBuildADDRemoteFileWithoutCache(t *testing.T)"
TestBuildADDRemoteFileWithoutCache( ${1:t *testing.T})
endsnippet

snippet TestBuildAddBadLinks "TestBuildAddBadLinks(t *testing.T)"
TestBuildAddBadLinks( ${1:t *testing.T})
endsnippet

snippet TestBuildAddBadLinksVolume "TestBuildAddBadLinksVolume(t *testing.T)"
TestBuildAddBadLinksVolume( ${1:t *testing.T})
endsnippet

snippet TestBuildAddDirContentToExistingDir "TestBuildAddDirContentToExistingDir(t *testing.T)"
TestBuildAddDirContentToExistingDir( ${1:t *testing.T})
endsnippet

snippet TestBuildAddDirContentToRoot "TestBuildAddDirContentToRoot(t *testing.T)"
TestBuildAddDirContentToRoot( ${1:t *testing.T})
endsnippet

snippet TestBuildAddEtcToRoot "TestBuildAddEtcToRoot(t *testing.T)"
TestBuildAddEtcToRoot( ${1:t *testing.T})
endsnippet

snippet TestBuildAddMultipleFilesToFile "TestBuildAddMultipleFilesToFile(t *testing.T)"
TestBuildAddMultipleFilesToFile( ${1:t *testing.T})
endsnippet

snippet TestBuildAddMultipleFilesToFileWild "TestBuildAddMultipleFilesToFileWild(t *testing.T)"
TestBuildAddMultipleFilesToFileWild( ${1:t *testing.T})
endsnippet

snippet TestBuildAddPreservesFilesSpecialBits "TestBuildAddPreservesFilesSpecialBits(t *testing.T)"
TestBuildAddPreservesFilesSpecialBits( ${1:t *testing.T})
endsnippet

snippet TestBuildAddScript "TestBuildAddScript(t *testing.T)"
TestBuildAddScript( ${1:t *testing.T})
endsnippet

snippet TestBuildAddSingleFileToExistDir "TestBuildAddSingleFileToExistDir(t *testing.T)"
TestBuildAddSingleFileToExistDir( ${1:t *testing.T})
endsnippet

snippet TestBuildAddSingleFileToNonExistingDir "TestBuildAddSingleFileToNonExistingDir(t *testing.T)"
TestBuildAddSingleFileToNonExistingDir( ${1:t *testing.T})
endsnippet

snippet TestBuildAddSingleFileToRoot "TestBuildAddSingleFileToRoot(t *testing.T)"
TestBuildAddSingleFileToRoot( ${1:t *testing.T})
endsnippet

snippet TestBuildAddSingleFileToWorkdir "TestBuildAddSingleFileToWorkdir(t *testing.T)"
TestBuildAddSingleFileToWorkdir( ${1:t *testing.T})
endsnippet

snippet TestBuildAddTar "TestBuildAddTar(t *testing.T)"
TestBuildAddTar( ${1:t *testing.T})
endsnippet

snippet TestBuildAddTarXz "TestBuildAddTarXz(t *testing.T)"
TestBuildAddTarXz( ${1:t *testing.T})
endsnippet

snippet TestBuildAddTarXzGz "TestBuildAddTarXzGz(t *testing.T)"
TestBuildAddTarXzGz( ${1:t *testing.T})
endsnippet

snippet TestBuildAddToSymlinkDest "TestBuildAddToSymlinkDest(t *testing.T)"
TestBuildAddToSymlinkDest( ${1:t *testing.T})
endsnippet

snippet TestBuildAddWholeDirToRoot "TestBuildAddWholeDirToRoot(t *testing.T)"
TestBuildAddWholeDirToRoot( ${1:t *testing.T})
endsnippet

snippet TestBuildAndTechReq "TestBuildAndTechReq(t *testing.T)"
TestBuildAndTechReq( ${1:t *testing.T})
endsnippet

snippet TestBuildCacheADD "TestBuildCacheADD(t *testing.T)"
TestBuildCacheADD( ${1:t *testing.T})
endsnippet

snippet TestBuildChownSingleFile "TestBuildChownSingleFile(t *testing.T)"
TestBuildChownSingleFile( ${1:t *testing.T})
endsnippet

snippet TestBuildCleanupCmdOnEntrypoint "TestBuildCleanupCmdOnEntrypoint(t *testing.T)"
TestBuildCleanupCmdOnEntrypoint( ${1:t *testing.T})
endsnippet

snippet TestBuildClearCmd "TestBuildClearCmd(t *testing.T)"
TestBuildClearCmd( ${1:t *testing.T})
endsnippet

snippet TestBuildCmd "TestBuildCmd(t *testing.T)"
TestBuildCmd( ${1:t *testing.T})
endsnippet

snippet TestBuildCmdJSONNoShDashC "TestBuildCmdJSONNoShDashC(t *testing.T)"
TestBuildCmdJSONNoShDashC( ${1:t *testing.T})
endsnippet

snippet TestBuildCmdShDashC "TestBuildCmdShDashC(t *testing.T)"
TestBuildCmdShDashC( ${1:t *testing.T})
endsnippet

snippet TestBuildCommentsShebangs "TestBuildCommentsShebangs(t *testing.T)"
TestBuildCommentsShebangs( ${1:t *testing.T})
endsnippet

snippet TestBuildContextCleanup "TestBuildContextCleanup(t *testing.T)"
TestBuildContextCleanup( ${1:t *testing.T})
endsnippet

snippet TestBuildContextCleanupFailedBuild "TestBuildContextCleanupFailedBuild(t *testing.T)"
TestBuildContextCleanupFailedBuild( ${1:t *testing.T})
endsnippet

snippet TestBuildContextTarGzip "TestBuildContextTarGzip(t *testing.T)"
TestBuildContextTarGzip( ${1:t *testing.T})
endsnippet

snippet TestBuildContextTarNoCompression "TestBuildContextTarNoCompression(t *testing.T)"
TestBuildContextTarNoCompression( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyAddMultipleFiles "TestBuildCopyAddMultipleFiles(t *testing.T)"
TestBuildCopyAddMultipleFiles( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyDirButNotFile "TestBuildCopyDirButNotFile(t *testing.T)"
TestBuildCopyDirButNotFile( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyDirContentToExistDir "TestBuildCopyDirContentToExistDir(t *testing.T)"
TestBuildCopyDirContentToExistDir( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyDirContentToRoot "TestBuildCopyDirContentToRoot(t *testing.T)"
TestBuildCopyDirContentToRoot( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyDisallowRemote "TestBuildCopyDisallowRemote(t *testing.T)"
TestBuildCopyDisallowRemote( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyEtcToRoot "TestBuildCopyEtcToRoot(t *testing.T)"
TestBuildCopyEtcToRoot( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyMultipleFilesToFile "TestBuildCopyMultipleFilesToFile(t *testing.T)"
TestBuildCopyMultipleFilesToFile( ${1:t *testing.T})
endsnippet

snippet TestBuildCopySingleFileToExistDir "TestBuildCopySingleFileToExistDir(t *testing.T)"
TestBuildCopySingleFileToExistDir( ${1:t *testing.T})
endsnippet

snippet TestBuildCopySingleFileToNonExistDir "TestBuildCopySingleFileToNonExistDir(t *testing.T)"
TestBuildCopySingleFileToNonExistDir( ${1:t *testing.T})
endsnippet

snippet TestBuildCopySingleFileToRoot "TestBuildCopySingleFileToRoot(t *testing.T)"
TestBuildCopySingleFileToRoot( ${1:t *testing.T})
endsnippet

snippet TestBuildCopySingleFileToWorkdir "TestBuildCopySingleFileToWorkdir(t *testing.T)"
TestBuildCopySingleFileToWorkdir( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyWholeDirToRoot "TestBuildCopyWholeDirToRoot(t *testing.T)"
TestBuildCopyWholeDirToRoot( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyWildcard "TestBuildCopyWildcard(t *testing.T)"
TestBuildCopyWildcard( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyWildcardCache "TestBuildCopyWildcardCache(t *testing.T)"
TestBuildCopyWildcardCache( ${1:t *testing.T})
endsnippet

snippet TestBuildCopyWildcardNoFind "TestBuildCopyWildcardNoFind(t *testing.T)"
TestBuildCopyWildcardNoFind( ${1:t *testing.T})
endsnippet

snippet TestBuildDefault "TestBuildDefault(t *testing.T)"
TestBuildDefault( ${1:t *testing.T})
endsnippet

snippet TestBuildDockerignore "TestBuildDockerignore(t *testing.T)"
TestBuildDockerignore( ${1:t *testing.T})
endsnippet

snippet TestBuildDockerignoreCleanPaths "TestBuildDockerignoreCleanPaths(t *testing.T)"
TestBuildDockerignoreCleanPaths( ${1:t *testing.T})
endsnippet

snippet TestBuildDockerignoringDockerfile "TestBuildDockerignoringDockerfile(t *testing.T)"
TestBuildDockerignoringDockerfile( ${1:t *testing.T})
endsnippet

snippet TestBuildDockerignoringWholeDir "TestBuildDockerignoringWholeDir(t *testing.T)"
TestBuildDockerignoringWholeDir( ${1:t *testing.T})
endsnippet

snippet TestBuildEOLInLine "TestBuildEOLInLine(t *testing.T)"
TestBuildEOLInLine( ${1:t *testing.T})
endsnippet

snippet TestBuildEmptyCmd "TestBuildEmptyCmd(t *testing.T)"
TestBuildEmptyCmd( ${1:t *testing.T})
endsnippet

snippet TestBuildEmptyEntrypoint "TestBuildEmptyEntrypoint(t *testing.T)"
TestBuildEmptyEntrypoint( ${1:t *testing.T})
endsnippet

snippet TestBuildEmptyEntrypointInheritance "TestBuildEmptyEntrypointInheritance(t *testing.T)"
TestBuildEmptyEntrypointInheritance( ${1:t *testing.T})
endsnippet

snippet TestBuildEntrypoint "TestBuildEntrypoint(t *testing.T)"
TestBuildEntrypoint( ${1:t *testing.T})
endsnippet

snippet TestBuildEntrypointInheritance "TestBuildEntrypointInheritance(t *testing.T)"
TestBuildEntrypointInheritance( ${1:t *testing.T})
endsnippet

snippet TestBuildEntrypointInheritanceInspect "TestBuildEntrypointInheritanceInspect(t *testing.T)"
TestBuildEntrypointInheritanceInspect( ${1:t *testing.T})
endsnippet

snippet TestBuildEntrypointRunCleanup "TestBuildEntrypointRunCleanup(t *testing.T)"
TestBuildEntrypointRunCleanup( ${1:t *testing.T})
endsnippet

snippet TestBuildEnv "TestBuildEnv(t *testing.T)"
TestBuildEnv( ${1:t *testing.T})
endsnippet

snippet TestBuildEnvEscapes "TestBuildEnvEscapes(t *testing.T)"
TestBuildEnvEscapes( ${1:t *testing.T})
endsnippet

snippet TestBuildEnvOverwrite "TestBuildEnvOverwrite(t *testing.T)"
TestBuildEnvOverwrite( ${1:t *testing.T})
endsnippet

snippet TestBuildEnvUsage "TestBuildEnvUsage(t *testing.T)"
TestBuildEnvUsage( ${1:t *testing.T})
endsnippet

snippet TestBuildEnvUsage2 "TestBuildEnvUsage2(t *testing.T)"
TestBuildEnvUsage2( ${1:t *testing.T})
endsnippet

snippet TestBuildEnvironmentReplacementAddCopy "TestBuildEnvironmentReplacementAddCopy(t *testing.T)"
TestBuildEnvironmentReplacementAddCopy( ${1:t *testing.T})
endsnippet

snippet TestBuildEnvironmentReplacementEnv "TestBuildEnvironmentReplacementEnv(t *testing.T)"
TestBuildEnvironmentReplacementEnv( ${1:t *testing.T})
endsnippet

snippet TestBuildEnvironmentReplacementExpose "TestBuildEnvironmentReplacementExpose(t *testing.T)"
TestBuildEnvironmentReplacementExpose( ${1:t *testing.T})
endsnippet

snippet TestBuildEnvironmentReplacementUser "TestBuildEnvironmentReplacementUser(t *testing.T)"
TestBuildEnvironmentReplacementUser( ${1:t *testing.T})
endsnippet

snippet TestBuildEnvironmentReplacementVolume "TestBuildEnvironmentReplacementVolume(t *testing.T)"
TestBuildEnvironmentReplacementVolume( ${1:t *testing.T})
endsnippet

snippet TestBuildEnvironmentReplacementWorkdir "TestBuildEnvironmentReplacementWorkdir(t *testing.T)"
TestBuildEnvironmentReplacementWorkdir( ${1:t *testing.T})
endsnippet

snippet TestBuildEscapeWhitespace "TestBuildEscapeWhitespace(t *testing.T)"
TestBuildEscapeWhitespace( ${1:t *testing.T})
endsnippet

snippet TestBuildExoticShellInterpolation "TestBuildExoticShellInterpolation(t *testing.T)"
TestBuildExoticShellInterpolation( ${1:t *testing.T})
endsnippet

snippet TestBuildExpose "TestBuildExpose(t *testing.T)"
TestBuildExpose( ${1:t *testing.T})
endsnippet

snippet TestBuildExposeMorePorts "TestBuildExposeMorePorts(t *testing.T)"
TestBuildExposeMorePorts( ${1:t *testing.T})
endsnippet

snippet TestBuildExposeOrder "TestBuildExposeOrder(t *testing.T)"
TestBuildExposeOrder( ${1:t *testing.T})
endsnippet

snippet TestBuildFails "TestBuildFails(t *testing.T)"
TestBuildFails( ${1:t *testing.T})
endsnippet

snippet TestBuildFailsDockerfileEmpty "TestBuildFailsDockerfileEmpty(t *testing.T)"
TestBuildFailsDockerfileEmpty( ${1:t *testing.T})
endsnippet

snippet TestBuildForbiddenContextPath "TestBuildForbiddenContextPath(t *testing.T)"
TestBuildForbiddenContextPath( ${1:t *testing.T})
endsnippet

snippet TestBuildForceRm "TestBuildForceRm(t *testing.T)"
TestBuildForceRm( ${1:t *testing.T})
endsnippet

snippet TestBuildFromGIT "TestBuildFromGIT(t *testing.T)"
TestBuildFromGIT( ${1:t *testing.T})
endsnippet

snippet TestBuildHandleEscapes "TestBuildHandleEscapes(t *testing.T)"
TestBuildHandleEscapes( ${1:t *testing.T})
endsnippet

snippet TestBuildHistory "TestBuildHistory(t *testing.T)"
TestBuildHistory( ${1:t *testing.T})
endsnippet

snippet TestBuildHostname "TestBuildHostname(t *testing.T)"
TestBuildHostname( ${1:t *testing.T})
endsnippet

snippet TestBuildHostnameDomainname "TestBuildHostnameDomainname(t *testing.T)"
TestBuildHostnameDomainname( ${1:t *testing.T})
endsnippet

snippet TestBuildIgnoreInvalidInstruction "TestBuildIgnoreInvalidInstruction(t *testing.T)"
TestBuildIgnoreInvalidInstruction( ${1:t *testing.T})
endsnippet

snippet TestBuildImageContextDirDockerignoreParsing "TestBuildImageContextDirDockerignoreParsing(t *testing.T)"
TestBuildImageContextDirDockerignoreParsing( ${1:t *testing.T})
endsnippet

snippet TestBuildImageMissingOutputStream "TestBuildImageMissingOutputStream(t *testing.T)"
TestBuildImageMissingOutputStream( ${1:t *testing.T})
endsnippet

snippet TestBuildImageMissingRepoAndNilInput "TestBuildImageMissingRepoAndNilInput(t *testing.T)"
TestBuildImageMissingRepoAndNilInput( ${1:t *testing.T})
endsnippet

snippet TestBuildImageMultipleContextsError "TestBuildImageMultipleContextsError(t *testing.T)"
TestBuildImageMultipleContextsError( ${1:t *testing.T})
endsnippet

snippet TestBuildImageParameters "TestBuildImageParameters(t *testing.T)"
TestBuildImageParameters( ${1:t *testing.T})
endsnippet

snippet TestBuildImageParametersForRemoteBuild "TestBuildImageParametersForRemoteBuild(t *testing.T)"
TestBuildImageParametersForRemoteBuild( ${1:t *testing.T})
endsnippet

snippet TestBuildImageRemoteWithoutName "TestBuildImageRemoteWithoutName(t *testing.T)"
TestBuildImageRemoteWithoutName( ${1:t *testing.T})
endsnippet

snippet TestBuildImageSendXRegistryConfig "TestBuildImageSendXRegistryConfig(t *testing.T)"
TestBuildImageSendXRegistryConfig( ${1:t *testing.T})
endsnippet

snippet TestBuildImageWithContentTypeTar "TestBuildImageWithContentTypeTar(t *testing.T)"
TestBuildImageWithContentTypeTar( ${1:t *testing.T})
endsnippet

snippet TestBuildImageWithRawJSON "TestBuildImageWithRawJSON(t *testing.T)"
TestBuildImageWithRawJSON( ${1:t *testing.T})
endsnippet

snippet TestBuildImageWithRemoteDockerfile "TestBuildImageWithRemoteDockerfile(t *testing.T)"
TestBuildImageWithRemoteDockerfile( ${1:t *testing.T})
endsnippet

snippet TestBuildInheritance "TestBuildInheritance(t *testing.T)"
TestBuildInheritance( ${1:t *testing.T})
endsnippet

snippet TestBuildInvalidTag "TestBuildInvalidTag(t *testing.T)"
TestBuildInvalidTag( ${1:t *testing.T})
endsnippet

snippet TestBuildLineBreak "TestBuildLineBreak(t *testing.T)"
TestBuildLineBreak( ${1:t *testing.T})
endsnippet

snippet TestBuildMaintainer "TestBuildMaintainer(t *testing.T)"
TestBuildMaintainer( ${1:t *testing.T})
endsnippet

snippet TestBuildNoContext "TestBuildNoContext(t *testing.T)"
TestBuildNoContext( ${1:t *testing.T})
endsnippet

snippet TestBuildNoIP "TestBuildNoIP(t *testing.T)"
TestBuildNoIP( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuild "TestBuildOnBuild(t *testing.T)"
TestBuildOnBuild( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildCmdEntrypointJSON "TestBuildOnBuildCmdEntrypointJSON(t *testing.T)"
TestBuildOnBuildCmdEntrypointJSON( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildEntrypointJSON "TestBuildOnBuildEntrypointJSON(t *testing.T)"
TestBuildOnBuildEntrypointJSON( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildForbiddenChained "TestBuildOnBuildForbiddenChained(t *testing.T)"
TestBuildOnBuildForbiddenChained( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildForbiddenChainedInSourceImage "TestBuildOnBuildForbiddenChainedInSourceImage(t *testing.T)"
TestBuildOnBuildForbiddenChainedInSourceImage( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildForbiddenFrom "TestBuildOnBuildForbiddenFrom(t *testing.T)"
TestBuildOnBuildForbiddenFrom( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildForbiddenFromInSourceImage "TestBuildOnBuildForbiddenFromInSourceImage(t *testing.T)"
TestBuildOnBuildForbiddenFromInSourceImage( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildForbiddenMaintainer "TestBuildOnBuildForbiddenMaintainer(t *testing.T)"
TestBuildOnBuildForbiddenMaintainer( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildForbiddenMaintainerInSourceImage "TestBuildOnBuildForbiddenMaintainerInSourceImage(t *testing.T)"
TestBuildOnBuildForbiddenMaintainerInSourceImage( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildLimitedInheritence "TestBuildOnBuildLimitedInheritence(t *testing.T)"
TestBuildOnBuildLimitedInheritence( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildLowercase "TestBuildOnBuildLowercase(t *testing.T)"
TestBuildOnBuildLowercase( ${1:t *testing.T})
endsnippet

snippet TestBuildOnBuildOutput "TestBuildOnBuildOutput(t *testing.T)"
TestBuildOnBuildOutput( ${1:t *testing.T})
endsnippet

snippet TestBuildRelativeCopy "TestBuildRelativeCopy(t *testing.T)"
TestBuildRelativeCopy( ${1:t *testing.T})
endsnippet

snippet TestBuildRelativeWorkdir "TestBuildRelativeWorkdir(t *testing.T)"
TestBuildRelativeWorkdir( ${1:t *testing.T})
endsnippet

snippet TestBuildRm "TestBuildRm(t *testing.T)"
TestBuildRm( ${1:t *testing.T})
endsnippet

snippet TestBuildRunShEntrypoint "TestBuildRunShEntrypoint(t *testing.T)"
TestBuildRunShEntrypoint( ${1:t *testing.T})
endsnippet

snippet TestBuildShCmdJSONEntrypoint "TestBuildShCmdJSONEntrypoint(t *testing.T)"
TestBuildShCmdJSONEntrypoint( ${1:t *testing.T})
endsnippet

snippet TestBuildSixtySteps "TestBuildSixtySteps(t *testing.T)"
TestBuildSixtySteps( ${1:t *testing.T})
endsnippet

snippet TestBuildStderr "TestBuildStderr(t *testing.T)"
TestBuildStderr( ${1:t *testing.T})
endsnippet

snippet TestBuildSymlinkBreakout "TestBuildSymlinkBreakout(t *testing.T)"
TestBuildSymlinkBreakout( ${1:t *testing.T})
endsnippet

snippet TestBuildUser "TestBuildUser(t *testing.T)"
TestBuildUser( ${1:t *testing.T})
endsnippet

snippet TestBuildUsersAndGroups "TestBuildUsersAndGroups(t *testing.T)"
TestBuildUsersAndGroups( ${1:t *testing.T})
endsnippet

snippet TestBuildVerboseOut "TestBuildVerboseOut(t *testing.T)"
TestBuildVerboseOut( ${1:t *testing.T})
endsnippet

snippet TestBuildVerifyIntString "TestBuildVerifyIntString(t *testing.T)"
TestBuildVerifyIntString( ${1:t *testing.T})
endsnippet

snippet TestBuildVerifySingleQuoteFails "TestBuildVerifySingleQuoteFails(t *testing.T)"
TestBuildVerifySingleQuoteFails( ${1:t *testing.T})
endsnippet

snippet TestBuildVersion "TestBuildVersion(t *testing.T)"
TestBuildVersion( ${1:t *testing.T})
endsnippet

snippet TestBuildVolumesRetainContents "TestBuildVolumesRetainContents(t *testing.T)"
TestBuildVolumesRetainContents( ${1:t *testing.T})
endsnippet

snippet TestBuildWithCache "TestBuildWithCache(t *testing.T)"
TestBuildWithCache( ${1:t *testing.T})
endsnippet

snippet TestBuildWithInaccessibleFilesInContext "TestBuildWithInaccessibleFilesInContext(t *testing.T)"
TestBuildWithInaccessibleFilesInContext( ${1:t *testing.T})
endsnippet

snippet TestBuildWithTabs "TestBuildWithTabs(t *testing.T)"
TestBuildWithTabs( ${1:t *testing.T})
endsnippet

snippet TestBuildWithVolumeOwnership "TestBuildWithVolumeOwnership(t *testing.T)"
TestBuildWithVolumeOwnership( ${1:t *testing.T})
endsnippet

snippet TestBuildWithVolumes "TestBuildWithVolumes(t *testing.T)"
TestBuildWithVolumes( ${1:t *testing.T})
endsnippet

snippet TestBuildWithZeroLengthDomainSearch "TestBuildWithZeroLengthDomainSearch(t *testing.T)"
TestBuildWithZeroLengthDomainSearch( ${1:t *testing.T})
endsnippet

snippet TestBuildWithoutCache "TestBuildWithoutCache(t *testing.T)"
TestBuildWithoutCache( ${1:t *testing.T})
endsnippet

snippet TestBuildWorkdirWithEnvVariables "TestBuildWorkdirWithEnvVariables(t *testing.T)"
TestBuildWorkdirWithEnvVariables( ${1:t *testing.T})
endsnippet

snippet TestBuildXZHost "TestBuildXZHost(t *testing.T)"
TestBuildXZHost( ${1:t *testing.T})
endsnippet

snippet TestBuildsJson "TestBuildsJson(t *testing.T)"
TestBuildsJson( ${1:t *testing.T})
endsnippet

snippet TestBuiltinSignatures "TestBuiltinSignatures(t *testing.T)"
TestBuiltinSignatures( ${1:t *testing.T})
endsnippet

snippet TestBuyAndUseItemReq "TestBuyAndUseItemReq(t *testing.T)"
TestBuyAndUseItemReq( ${1:t *testing.T})
endsnippet

snippet TestBuyItemReq "TestBuyItemReq(t *testing.T)"
TestBuyItemReq( ${1:t *testing.T})
endsnippet

snippet TestBuyResourceReq "TestBuyResourceReq(t *testing.T)"
TestBuyResourceReq( ${1:t *testing.T})
endsnippet

snippet TestByParent "TestByParent(t *testing.T)"
TestByParent( ${1:t *testing.T})
endsnippet

snippet TestBytes "TestBytes(t *testing.T)"
TestBytes( ${1:t *testing.T})
endsnippet

snippet TestBytesSize "TestBytesSize(t *testing.T)"
TestBytesSize( ${1:t *testing.T})
endsnippet

snippet TestCHA "TestCHA(t *testing.T)"
TestCHA( ${1:t *testing.T})
endsnippet

snippet TestCLI "TestCLI(t *testing.T)"
TestCLI( ${1:t *testing.T})
endsnippet

snippet TestCallers "TestCallers(t *testing.T)"
TestCallers( ${1:t *testing.T})
endsnippet

snippet TestCallgraph "TestCallgraph(t *testing.T)"
TestCallgraph( ${1:t *testing.T})
endsnippet

snippet TestCanFireMultipleHooks "TestCanFireMultipleHooks(t *testing.T)"
TestCanFireMultipleHooks( ${1:t *testing.T})
endsnippet

snippet TestCancelBuildingReq "TestCancelBuildingReq(t *testing.T)"
TestCancelBuildingReq( ${1:t *testing.T})
endsnippet

snippet TestCanceledTimeout "TestCanceledTimeout(t *testing.T)"
TestCanceledTimeout( ${1:t *testing.T})
endsnippet

snippet TestCancleDealReq "TestCancleDealReq(t *testing.T)"
TestCancleDealReq( ${1:t *testing.T})
endsnippet

snippet TestCapabilitiesContains "TestCapabilitiesContains(t *testing.T)"
TestCapabilitiesContains( ${1:t *testing.T})
endsnippet

snippet TestCatchallEmptyName "TestCatchallEmptyName(t *testing.T)"
TestCatchallEmptyName( ${1:t *testing.T})
endsnippet

snippet TestCause "TestCause(t *testing.T)"
TestCause( ${1:t *testing.T})
endsnippet

snippet TestCgoOption "TestCgoOption(t *testing.T)"
TestCgoOption( ${1:t *testing.T})
endsnippet

snippet TestChainVerify "TestChainVerify(t *testing.T)"
TestChainVerify( ${1:t *testing.T})
endsnippet

snippet TestChangeColor "TestChangeColor(t *testing.T)"
TestChangeColor( ${1:t *testing.T})
endsnippet

snippet TestChangeHeadIconReq "TestChangeHeadIconReq(t *testing.T)"
TestChangeHeadIconReq( ${1:t *testing.T})
endsnippet

snippet TestChangeNameReq "TestChangeNameReq(t *testing.T)"
TestChangeNameReq( ${1:t *testing.T})
endsnippet

snippet TestChangeString "TestChangeString(t *testing.T)"
TestChangeString( ${1:t *testing.T})
endsnippet

snippet TestChangeUidOnMap "TestChangeUidOnMap(t *testing.T)"
TestChangeUidOnMap( ${1:t *testing.T})
endsnippet

snippet TestChangeUserMoralReq "TestChangeUserMoralReq(t *testing.T)"
TestChangeUserMoralReq( ${1:t *testing.T})
endsnippet

snippet TestChanges "TestChanges(t *testing.T)"
TestChanges( ${1:t *testing.T})
endsnippet

snippet TestChangesDirsEmpty "TestChangesDirsEmpty(t *testing.T)"
TestChangesDirsEmpty( ${1:t *testing.T})
endsnippet

snippet TestChangesDirsMutated "TestChangesDirsMutated(t *testing.T)"
TestChangesDirsMutated( ${1:t *testing.T})
endsnippet

snippet TestChangingArgs "TestChangingArgs(t *testing.T)"
TestChangingArgs( ${1:t *testing.T})
endsnippet

snippet TestCheck "TestCheck(t *testing.T)"
TestCheck( ${1:t *testing.T})
endsnippet

snippet TestCheckNameserverOverlaps "TestCheckNameserverOverlaps(t *testing.T)"
TestCheckNameserverOverlaps( ${1:t *testing.T})
endsnippet

snippet TestCheckRouteOverlaps "TestCheckRouteOverlaps(t *testing.T)"
TestCheckRouteOverlaps( ${1:t *testing.T})
endsnippet

snippet TestChildDiffSize "TestChildDiffSize(t *testing.T)"
TestChildDiffSize( ${1:t *testing.T})
endsnippet

snippet TestChildFinishesFirst "TestChildFinishesFirst(t *testing.T)"
TestChildFinishesFirst( ${1:t *testing.T})
endsnippet

snippet TestChildren "TestChildren(t *testing.T)"
TestChildren( ${1:t *testing.T})
endsnippet

snippet TestChrootApplyEmptyArchiveFromSlowReader "TestChrootApplyEmptyArchiveFromSlowReader(t *testing.T)"
TestChrootApplyEmptyArchiveFromSlowReader( ${1:t *testing.T})
endsnippet

snippet TestChrootTarUntar "TestChrootTarUntar(t *testing.T)"
TestChrootTarUntar( ${1:t *testing.T})
endsnippet

snippet TestChrootUntarEmptyArchiveFromSlowReader "TestChrootUntarEmptyArchiveFromSlowReader(t *testing.T)"
TestChrootUntarEmptyArchiveFromSlowReader( ${1:t *testing.T})
endsnippet

snippet TestCircularWalk "TestCircularWalk(t *testing.T)"
TestCircularWalk( ${1:t *testing.T})
endsnippet

snippet TestCleanup "TestCleanup(t *testing.T)"
TestCleanup( ${1:t *testing.T})
endsnippet

snippet TestCleanupWithDir "TestCleanupWithDir(t *testing.T)"
TestCleanupWithDir( ${1:t *testing.T})
endsnippet

snippet TestCleanupWithNoDirs "TestCleanupWithNoDirs(t *testing.T)"
TestCleanupWithNoDirs( ${1:t *testing.T})
endsnippet

snippet TestClient "TestClient(t *testing.T)"
TestClient( ${1:t *testing.T})
endsnippet

snippet TestCloseWhileReading "TestCloseWhileReading(t *testing.T)"
TestCloseWhileReading( ${1:t *testing.T})
endsnippet

snippet TestCmdStreamBad "TestCmdStreamBad(t *testing.T)"
TestCmdStreamBad( ${1:t *testing.T})
endsnippet

snippet TestCmdStreamGood "TestCmdStreamGood(t *testing.T)"
TestCmdStreamGood( ${1:t *testing.T})
endsnippet

snippet TestCmdStreamLargeStderr "TestCmdStreamLargeStderr(t *testing.T)"
TestCmdStreamLargeStderr( ${1:t *testing.T})
endsnippet

snippet TestCodecUnderlyingType "TestCodecUnderlyingType(t *testing.T)"
TestCodecUnderlyingType( ${1:t *testing.T})
endsnippet

snippet TestCollapseGrants "TestCollapseGrants(t *testing.T)"
TestCollapseGrants( ${1:t *testing.T})
endsnippet

snippet TestCommandLine "TestCommandLine(t *testing.T)"
TestCommandLine( ${1:t *testing.T})
endsnippet

snippet TestCommit "TestCommit(t *testing.T)"
TestCommit( ${1:t *testing.T})
endsnippet

snippet TestCommitAfterContainerIsDone "TestCommitAfterContainerIsDone(t *testing.T)"
TestCommitAfterContainerIsDone( ${1:t *testing.T})
endsnippet

snippet TestCommitContainer "TestCommitContainer(t *testing.T)"
TestCommitContainer( ${1:t *testing.T})
endsnippet

snippet TestCommitContainerComplete "TestCommitContainerComplete(t *testing.T)"
TestCommitContainerComplete( ${1:t *testing.T})
endsnippet

snippet TestCommitContainerFailure "TestCommitContainerFailure(t *testing.T)"
TestCommitContainerFailure( ${1:t *testing.T})
endsnippet

snippet TestCommitContainerInvalidRun "TestCommitContainerInvalidRun(t *testing.T)"
TestCommitContainerInvalidRun( ${1:t *testing.T})
endsnippet

snippet TestCommitContainerNotFound "TestCommitContainerNotFound(t *testing.T)"
TestCommitContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestCommitContainerParams "TestCommitContainerParams(t *testing.T)"
TestCommitContainerParams( ${1:t *testing.T})
endsnippet

snippet TestCommitHardlink "TestCommitHardlink(t *testing.T)"
TestCommitHardlink( ${1:t *testing.T})
endsnippet

snippet TestCommitNewFile "TestCommitNewFile(t *testing.T)"
TestCommitNewFile( ${1:t *testing.T})
endsnippet

snippet TestCommitTTY "TestCommitTTY(t *testing.T)"
TestCommitTTY( ${1:t *testing.T})
endsnippet

snippet TestCommitWithHostBindMount "TestCommitWithHostBindMount(t *testing.T)"
TestCommitWithHostBindMount( ${1:t *testing.T})
endsnippet

snippet TestCommitWithoutPause "TestCommitWithoutPause(t *testing.T)"
TestCommitWithoutPause( ${1:t *testing.T})
endsnippet

snippet TestCompare "TestCompare(t *testing.T)"
TestCompare( ${1:t *testing.T})
endsnippet

snippet TestCompareKernelVersion "TestCompareKernelVersion(t *testing.T)"
TestCompareKernelVersion( ${1:t *testing.T})
endsnippet

snippet TestCompareVersion "TestCompareVersion(t *testing.T)"
TestCompareVersion( ${1:t *testing.T})
endsnippet

snippet TestCompile "TestCompile(t *testing.T)"
TestCompile( ${1:t *testing.T})
endsnippet

snippet TestCompressionContextAcrossFrames "TestCompressionContextAcrossFrames(t *testing.T)"
TestCompressionContextAcrossFrames( ${1:t *testing.T})
endsnippet

snippet TestConcurrentWrites "TestConcurrentWrites(t *testing.T)"
TestConcurrentWrites( ${1:t *testing.T})
endsnippet

snippet TestConfigHeroReq "TestConfigHeroReq(t *testing.T)"
TestConfigHeroReq( ${1:t *testing.T})
endsnippet

snippet TestConfigJsonFormat "TestConfigJsonFormat(t *testing.T)"
TestConfigJsonFormat( ${1:t *testing.T})
endsnippet

snippet TestConflicts "TestConflicts(t *testing.T)"
TestConflicts( ${1:t *testing.T})
endsnippet

snippet TestConnInitiatorPathMTU "TestConnInitiatorPathMTU(t *testing.T)"
TestConnInitiatorPathMTU( ${1:t *testing.T})
endsnippet

snippet TestConnJobListener "TestConnJobListener(t *testing.T)"
TestConnJobListener( ${1:t *testing.T})
endsnippet

snippet TestConnResponderPathMTU "TestConnResponderPathMTU(t *testing.T)"
TestConnResponderPathMTU( ${1:t *testing.T})
endsnippet

snippet TestConnUnicastSocketOptions "TestConnUnicastSocketOptions(t *testing.T)"
TestConnUnicastSocketOptions( ${1:t *testing.T})
endsnippet

snippet TestConsistentPlaceholderName "TestConsistentPlaceholderName(t *testing.T)"
TestConsistentPlaceholderName( ${1:t *testing.T})
endsnippet

snippet TestConsole "TestConsole(t *testing.T)"
TestConsole( ${1:t *testing.T})
endsnippet

snippet TestConsoleSpecs "TestConsoleSpecs(t *testing.T)"
TestConsoleSpecs( ${1:t *testing.T})
endsnippet

snippet TestConstainersStartChunkedEncodingHostConfig "TestConstainersStartChunkedEncodingHostConfig(t *testing.T)"
TestConstainersStartChunkedEncodingHostConfig( ${1:t *testing.T})
endsnippet

snippet TestConstantDelayNext "TestConstantDelayNext(t *testing.T)"
TestConstantDelayNext( ${1:t *testing.T})
endsnippet

snippet TestContainerApiGetAll "TestContainerApiGetAll(t *testing.T)"
TestContainerApiGetAll( ${1:t *testing.T})
endsnippet

snippet TestContainerApiGetChanges "TestContainerApiGetChanges(t *testing.T)"
TestContainerApiGetChanges( ${1:t *testing.T})
endsnippet

snippet TestContainerApiGetExport "TestContainerApiGetExport(t *testing.T)"
TestContainerApiGetExport( ${1:t *testing.T})
endsnippet

snippet TestContainerApiStartVolumeBinds "TestContainerApiStartVolumeBinds(t *testing.T)"
TestContainerApiStartVolumeBinds( ${1:t *testing.T})
endsnippet

snippet TestContainerApiStartVolumesFrom "TestContainerApiStartVolumesFrom(t *testing.T)"
TestContainerApiStartVolumesFrom( ${1:t *testing.T})
endsnippet

snippet TestContainerChanges "TestContainerChanges(t *testing.T)"
TestContainerChanges( ${1:t *testing.T})
endsnippet

snippet TestContainerChangesFailure "TestContainerChangesFailure(t *testing.T)"
TestContainerChangesFailure( ${1:t *testing.T})
endsnippet

snippet TestContainerChangesNotFound "TestContainerChangesNotFound(t *testing.T)"
TestContainerChangesNotFound( ${1:t *testing.T})
endsnippet

snippet TestContainerLogs "TestContainerLogs(t *testing.T)"
TestContainerLogs( ${1:t *testing.T})
endsnippet

snippet TestContainerNameValidation "TestContainerNameValidation(t *testing.T)"
TestContainerNameValidation( ${1:t *testing.T})
endsnippet

snippet TestContainerNetworkMode "TestContainerNetworkMode(t *testing.T)"
TestContainerNetworkMode( ${1:t *testing.T})
endsnippet

snippet TestContainingPackage "TestContainingPackage(t *testing.T)"
TestContainingPackage( ${1:t *testing.T})
endsnippet

snippet TestContext "TestContext(t *testing.T)"
TestContext( ${1:t *testing.T})
endsnippet

snippet TestContext_IOThreads "TestContext_IOThreads(t *testing.T)"
TestContext_IOThreads( ${1:t *testing.T})
endsnippet

snippet TestContext_SetIOThreads "TestContext_SetIOThreads(t *testing.T)"
TestContext_SetIOThreads( ${1:t *testing.T})
endsnippet

snippet TestControlFlags "TestControlFlags(t *testing.T)"
TestControlFlags( ${1:t *testing.T})
endsnippet

snippet TestConversion "TestConversion(t *testing.T)"
TestConversion( ${1:t *testing.T})
endsnippet

snippet TestConversionIPv6 "TestConversionIPv6(t *testing.T)"
TestConversionIPv6( ${1:t *testing.T})
endsnippet

snippet TestConvertLevelToString "TestConvertLevelToString(t *testing.T)"
TestConvertLevelToString( ${1:t *testing.T})
endsnippet

snippet TestConvertNewlines "TestConvertNewlines(t *testing.T)"
TestConvertNewlines( ${1:t *testing.T})
endsnippet

snippet TestCopyFromContainer "TestCopyFromContainer(t *testing.T)"
TestCopyFromContainer( ${1:t *testing.T})
endsnippet

snippet TestCopyFromContainerEmptyContainer "TestCopyFromContainerEmptyContainer(t *testing.T)"
TestCopyFromContainerEmptyContainer( ${1:t *testing.T})
endsnippet

snippet TestCorrectMethodPackage "TestCorrectMethodPackage(t *testing.T)"
TestCorrectMethodPackage( ${1:t *testing.T})
endsnippet

snippet TestCorrelate "TestCorrelate(t *testing.T)"
TestCorrelate( ${1:t *testing.T})
endsnippet

snippet TestCorsInfoNullOrigin "TestCorsInfoNullOrigin(t *testing.T)"
TestCorsInfoNullOrigin( ${1:t *testing.T})
endsnippet

snippet TestCorsInfoPreflightCors "TestCorsInfoPreflightCors(t *testing.T)"
TestCorsInfoPreflightCors( ${1:t *testing.T})
endsnippet

snippet TestCorsInfoSimpleCors "TestCorsInfoSimpleCors(t *testing.T)"
TestCorsInfoSimpleCors( ${1:t *testing.T})
endsnippet

snippet TestCount "TestCount(t *testing.T)"
TestCount( ${1:t *testing.T})
endsnippet

snippet TestCountRefs "TestCountRefs(t *testing.T)"
TestCountRefs( ${1:t *testing.T})
endsnippet

snippet TestCover "TestCover(t *testing.T)"
TestCover( ${1:t *testing.T})
endsnippet

snippet TestCpAbsolutePath "TestCpAbsolutePath(t *testing.T)"
TestCpAbsolutePath( ${1:t *testing.T})
endsnippet

snippet TestCpAbsoluteSymlink "TestCpAbsoluteSymlink(t *testing.T)"
TestCpAbsoluteSymlink( ${1:t *testing.T})
endsnippet

snippet TestCpGarbagePath "TestCpGarbagePath(t *testing.T)"
TestCpGarbagePath( ${1:t *testing.T})
endsnippet

snippet TestCpRelativePath "TestCpRelativePath(t *testing.T)"
TestCpRelativePath( ${1:t *testing.T})
endsnippet

snippet TestCpSymlinkComponent "TestCpSymlinkComponent(t *testing.T)"
TestCpSymlinkComponent( ${1:t *testing.T})
endsnippet

snippet TestCpToDot "TestCpToDot(t *testing.T)"
TestCpToDot( ${1:t *testing.T})
endsnippet

snippet TestCpUnprivilegedUser "TestCpUnprivilegedUser(t *testing.T)"
TestCpUnprivilegedUser( ${1:t *testing.T})
endsnippet

snippet TestCpVolumePath "TestCpVolumePath(t *testing.T)"
TestCpVolumePath( ${1:t *testing.T})
endsnippet

snippet TestCpuStats "TestCpuStats(t *testing.T)"
TestCpuStats( ${1:t *testing.T})
endsnippet

snippet TestCreateAccount "TestCreateAccount(t *testing.T)"
TestCreateAccount( ${1:t *testing.T})
endsnippet

snippet TestCreateAllianceReq "TestCreateAllianceReq(t *testing.T)"
TestCreateAllianceReq( ${1:t *testing.T})
endsnippet

snippet TestCreateArgs "TestCreateArgs(t *testing.T)"
TestCreateArgs( ${1:t *testing.T})
endsnippet

snippet TestCreateBridgeWithMac "TestCreateBridgeWithMac(t *testing.T)"
TestCreateBridgeWithMac( ${1:t *testing.T})
endsnippet

snippet TestCreateBuildingReq "TestCreateBuildingReq(t *testing.T)"
TestCreateBuildingReq( ${1:t *testing.T})
endsnippet

snippet TestCreateChild "TestCreateChild(t *testing.T)"
TestCreateChild( ${1:t *testing.T})
endsnippet

snippet TestCreateContainer "TestCreateContainer(t *testing.T)"
TestCreateContainer( ${1:t *testing.T})
endsnippet

snippet TestCreateContainerImageNotFound "TestCreateContainerImageNotFound(t *testing.T)"
TestCreateContainerImageNotFound( ${1:t *testing.T})
endsnippet

snippet TestCreateContainerInvalidBody "TestCreateContainerInvalidBody(t *testing.T)"
TestCreateContainerInvalidBody( ${1:t *testing.T})
endsnippet

snippet TestCreateContainerWithHostConfig "TestCreateContainerWithHostConfig(t *testing.T)"
TestCreateContainerWithHostConfig( ${1:t *testing.T})
endsnippet

snippet TestCreateContainerWithNotifyChannel "TestCreateContainerWithNotifyChannel(t *testing.T)"
TestCreateContainerWithNotifyChannel( ${1:t *testing.T})
endsnippet

snippet TestCreateDestroyContext "TestCreateDestroyContext(t *testing.T)"
TestCreateDestroyContext( ${1:t *testing.T})
endsnippet

snippet TestCreateDirStructure "TestCreateDirStructure(t *testing.T)"
TestCreateDirStructure( ${1:t *testing.T})
endsnippet

snippet TestCreateDuplicateVethPair "TestCreateDuplicateVethPair(t *testing.T)"
TestCreateDuplicateVethPair( ${1:t *testing.T})
endsnippet

snippet TestCreateEchoStdout "TestCreateEchoStdout(t *testing.T)"
TestCreateEchoStdout( ${1:t *testing.T})
endsnippet

snippet TestCreateHostConfig "TestCreateHostConfig(t *testing.T)"
TestCreateHostConfig( ${1:t *testing.T})
endsnippet

snippet TestCreateMultipleNames "TestCreateMultipleNames(t *testing.T)"
TestCreateMultipleNames( ${1:t *testing.T})
endsnippet

snippet TestCreateNewDir "TestCreateNewDir(t *testing.T)"
TestCreateNewDir( ${1:t *testing.T})
endsnippet

snippet TestCreateNewDirStructure "TestCreateNewDirStructure(t *testing.T)"
TestCreateNewDirStructure( ${1:t *testing.T})
endsnippet

snippet TestCreateNumberHostname "TestCreateNumberHostname(t *testing.T)"
TestCreateNumberHostname( ${1:t *testing.T})
endsnippet

snippet TestCreateParseDataFrame "TestCreateParseDataFrame(t *testing.T)"
TestCreateParseDataFrame( ${1:t *testing.T})
endsnippet

snippet TestCreateParseGoAway "TestCreateParseGoAway(t *testing.T)"
TestCreateParseGoAway( ${1:t *testing.T})
endsnippet

snippet TestCreateParseHeadersFrame "TestCreateParseHeadersFrame(t *testing.T)"
TestCreateParseHeadersFrame( ${1:t *testing.T})
endsnippet

snippet TestCreateParseHeadersFrameCompressionEnable "TestCreateParseHeadersFrameCompressionEnable(t *testing.T)"
TestCreateParseHeadersFrameCompressionEnable( ${1:t *testing.T})
endsnippet

snippet TestCreateParsePing "TestCreateParsePing(t *testing.T)"
TestCreateParsePing( ${1:t *testing.T})
endsnippet

snippet TestCreateParseRstStream "TestCreateParseRstStream(t *testing.T)"
TestCreateParseRstStream( ${1:t *testing.T})
endsnippet

snippet TestCreateParseSettings "TestCreateParseSettings(t *testing.T)"
TestCreateParseSettings( ${1:t *testing.T})
endsnippet

snippet TestCreateParseSynReplyFrameCompressionDisable "TestCreateParseSynReplyFrameCompressionDisable(t *testing.T)"
TestCreateParseSynReplyFrameCompressionDisable( ${1:t *testing.T})
endsnippet

snippet TestCreateParseSynReplyFrameCompressionEnable "TestCreateParseSynReplyFrameCompressionEnable(t *testing.T)"
TestCreateParseSynReplyFrameCompressionEnable( ${1:t *testing.T})
endsnippet

snippet TestCreateParseSynStreamFrameCompressionDisable "TestCreateParseSynStreamFrameCompressionDisable(t *testing.T)"
TestCreateParseSynStreamFrameCompressionDisable( ${1:t *testing.T})
endsnippet

snippet TestCreateParseSynStreamFrameCompressionEnable "TestCreateParseSynStreamFrameCompressionEnable(t *testing.T)"
TestCreateParseSynStreamFrameCompressionEnable( ${1:t *testing.T})
endsnippet

snippet TestCreateParseWindowUpdateFrame "TestCreateParseWindowUpdateFrame(t *testing.T)"
TestCreateParseWindowUpdateFrame( ${1:t *testing.T})
endsnippet

snippet TestCreatePidFile "TestCreatePidFile(test *testing.T)"
TestCreatePidFile( ${1:test *testing.T})
endsnippet

snippet TestCreateRoom "TestCreateRoom(t *testing.T)"
TestCreateRoom( ${1:t *testing.T})
endsnippet

snippet TestCreateRootEntity "TestCreateRootEntity(t *testing.T)"
TestCreateRootEntity( ${1:t *testing.T})
endsnippet

snippet TestCreateStartRestartStopStartKillRm "TestCreateStartRestartStopStartKillRm(t *testing.T)"
TestCreateStartRestartStopStartKillRm( ${1:t *testing.T})
endsnippet

snippet TestCreateStatement "TestCreateStatement(t *testing.T)"
TestCreateStatement( ${1:t *testing.T})
endsnippet

snippet TestCreateVethPair "TestCreateVethPair(t *testing.T)"
TestCreateVethPair( ${1:t *testing.T})
endsnippet

snippet TestCreateVolumesCreated "TestCreateVolumesCreated(t *testing.T)"
TestCreateVolumesCreated( ${1:t *testing.T})
endsnippet

snippet TestCreateWithInvalidParent "TestCreateWithInvalidParent(t *testing.T)"
TestCreateWithInvalidParent( ${1:t *testing.T})
endsnippet

snippet TestCustomHandler "TestCustomHandler(t *testing.T)"
TestCustomHandler( ${1:t *testing.T})
endsnippet

snippet TestCustomLxcConfig "TestCustomLxcConfig(t *testing.T)"
TestCustomLxcConfig( ${1:t *testing.T})
endsnippet

snippet TestCustomLxcConfigMisc "TestCustomLxcConfigMisc(t *testing.T)"
TestCustomLxcConfigMisc( ${1:t *testing.T})
endsnippet

snippet TestCustomLxcConfigMounts "TestCustomLxcConfigMounts(t *testing.T)"
TestCustomLxcConfigMounts( ${1:t *testing.T})
endsnippet

snippet TestCustomRpc "TestCustomRpc(t *testing.T)"
TestCustomRpc( ${1:t *testing.T})
endsnippet

snippet TestDH "TestDH(t *testing.T)"
TestDH( ${1:t *testing.T})
endsnippet

snippet TestDaemonAllocatesListeningPort "TestDaemonAllocatesListeningPort(t *testing.T)"
TestDaemonAllocatesListeningPort( ${1:t *testing.T})
endsnippet

snippet TestDaemonCreate "TestDaemonCreate(t *testing.T)"
TestDaemonCreate( ${1:t *testing.T})
endsnippet

snippet TestDaemonIptablesClean "TestDaemonIptablesClean(t *testing.T)"
TestDaemonIptablesClean( ${1:t *testing.T})
endsnippet

snippet TestDaemonIptablesCreate "TestDaemonIptablesCreate(t *testing.T)"
TestDaemonIptablesCreate( ${1:t *testing.T})
endsnippet

snippet TestDaemonLoggingLevel "TestDaemonLoggingLevel(t *testing.T)"
TestDaemonLoggingLevel( ${1:t *testing.T})
endsnippet

snippet TestDaemonRestartWithRunningContainersPorts "TestDaemonRestartWithRunningContainersPorts(t *testing.T)"
TestDaemonRestartWithRunningContainersPorts( ${1:t *testing.T})
endsnippet

snippet TestDaemonRestartWithVolumesRefs "TestDaemonRestartWithVolumesRefs(t *testing.T)"
TestDaemonRestartWithVolumesRefs( ${1:t *testing.T})
endsnippet

snippet TestDaemonStartBridgeWithoutIPAssociation "TestDaemonStartBridgeWithoutIPAssociation(t *testing.T)"
TestDaemonStartBridgeWithoutIPAssociation( ${1:t *testing.T})
endsnippet

snippet TestDaemonStartIptablesFalse "TestDaemonStartIptablesFalse(t *testing.T)"
TestDaemonStartIptablesFalse( ${1:t *testing.T})
endsnippet

snippet TestDeadline "TestDeadline(t *testing.T)"
TestDeadline( ${1:t *testing.T})
endsnippet

snippet TestDecode "TestDecode(t *testing.T)"
TestDecode( ${1:t *testing.T})
endsnippet

snippet TestDecodePtr "TestDecodePtr(t *testing.T)"
TestDecodePtr( ${1:t *testing.T})
endsnippet

snippet TestDecodeStructSubset "TestDecodeStructSubset(t *testing.T)"
TestDecodeStructSubset( ${1:t *testing.T})
endsnippet

snippet TestDecodeToTypedNil "TestDecodeToTypedNil(t *testing.T)"
TestDecodeToTypedNil( ${1:t *testing.T})
endsnippet

snippet TestDeepCopy "TestDeepCopy(t *testing.T)"
TestDeepCopy( ${1:t *testing.T})
endsnippet

snippet TestDeepEqual "TestDeepEqual(t *testing.T)"
TestDeepEqual( ${1:t *testing.T})
endsnippet

snippet TestDeepEqualComplexStruct "TestDeepEqualComplexStruct(t *testing.T)"
TestDeepEqualComplexStruct( ${1:t *testing.T})
endsnippet

snippet TestDeepEqualComplexStructInequality "TestDeepEqualComplexStructInequality(t *testing.T)"
TestDeepEqualComplexStructInequality( ${1:t *testing.T})
endsnippet

snippet TestDeepEqualRecursiveStruct "TestDeepEqualRecursiveStruct(t *testing.T)"
TestDeepEqualRecursiveStruct( ${1:t *testing.T})
endsnippet

snippet TestDeepEqualUnexportedMap "TestDeepEqualUnexportedMap(t *testing.T)"
TestDeepEqualUnexportedMap( ${1:t *testing.T})
endsnippet

snippet TestDefaultContainerName "TestDefaultContainerName(t *testing.T)"
TestDefaultContainerName( ${1:t *testing.T})
endsnippet

snippet TestDefaultFieldsAreNotPrefixed "TestDefaultFieldsAreNotPrefixed(t *testing.T)"
TestDefaultFieldsAreNotPrefixed( ${1:t *testing.T})
endsnippet

snippet TestDefaultHandler "TestDefaultHandler(t *testing.T)"
TestDefaultHandler( ${1:t *testing.T})
endsnippet

snippet TestDefenseCityReq "TestDefenseCityReq(t *testing.T)"
TestDefenseCityReq( ${1:t *testing.T})
endsnippet

snippet TestDelAllianceReq "TestDelAllianceReq(t *testing.T)"
TestDelAllianceReq( ${1:t *testing.T})
endsnippet

snippet TestDelete "TestDelete(t *testing.T)"
TestDelete( ${1:t *testing.T})
endsnippet

snippet TestDeleteAccount "TestDeleteAccount(t *testing.T)"
TestDeleteAccount( ${1:t *testing.T})
endsnippet

snippet TestDeleteAllianceReq "TestDeleteAllianceReq(t *testing.T)"
TestDeleteAllianceReq( ${1:t *testing.T})
endsnippet

snippet TestDeleteContainers "TestDeleteContainers(t *testing.T)"
TestDeleteContainers( ${1:t *testing.T})
endsnippet

snippet TestDeleteEntity "TestDeleteEntity(t *testing.T)"
TestDeleteEntity( ${1:t *testing.T})
endsnippet

snippet TestDeleteImages "TestDeleteImages(t *testing.T)"
TestDeleteImages( ${1:t *testing.T})
endsnippet

snippet TestDeleteImport "TestDeleteImport(t *testing.T)"
TestDeleteImport( ${1:t *testing.T})
endsnippet

snippet TestDeleteMemberFromRoom "TestDeleteMemberFromRoom(t *testing.T)"
TestDeleteMemberFromRoom( ${1:t *testing.T})
endsnippet

snippet TestDeletePrefix "TestDeletePrefix(t *testing.T)"
TestDeletePrefix( ${1:t *testing.T})
endsnippet

snippet TestDeleteRoom "TestDeleteRoom(t *testing.T)"
TestDeleteRoom( ${1:t *testing.T})
endsnippet

snippet TestDeleteRootEntity "TestDeleteRootEntity(t *testing.T)"
TestDeleteRootEntity( ${1:t *testing.T})
endsnippet

snippet TestDelta "TestDelta(t *testing.T)"
TestDelta( ${1:t *testing.T})
endsnippet

snippet TestDependencies "TestDependencies(t *testing.T)"
TestDependencies( ${1:t *testing.T})
endsnippet

snippet TestDestroy "TestDestroy(t *testing.T)"
TestDestroy( ${1:t *testing.T})
endsnippet

snippet TestDestroyBuildingReq "TestDestroyBuildingReq(t *testing.T)"
TestDestroyBuildingReq( ${1:t *testing.T})
endsnippet

snippet TestDestroyWithInitLayer "TestDestroyWithInitLayer(t *testing.T)"
TestDestroyWithInitLayer( ${1:t *testing.T})
endsnippet

snippet TestDetails "TestDetails(t *testing.T)"
TestDetails( ${1:t *testing.T})
endsnippet

snippet TestDevice "TestDevice(t *testing.T)"
TestDevice( ${1:t *testing.T})
endsnippet

snippet TestDevmapperCreateBase "TestDevmapperCreateBase(t *testing.T)"
TestDevmapperCreateBase( ${1:t *testing.T})
endsnippet

snippet TestDevmapperCreateEmpty "TestDevmapperCreateEmpty(t *testing.T)"
TestDevmapperCreateEmpty( ${1:t *testing.T})
endsnippet

snippet TestDevmapperCreateSnap "TestDevmapperCreateSnap(t *testing.T)"
TestDevmapperCreateSnap( ${1:t *testing.T})
endsnippet

snippet TestDevmapperSetup "TestDevmapperSetup(t *testing.T)"
TestDevmapperSetup( ${1:t *testing.T})
endsnippet

snippet TestDevmapperTeardown "TestDevmapperTeardown(t *testing.T)"
TestDevmapperTeardown( ${1:t *testing.T})
endsnippet

snippet TestDialConfigBadVersion "TestDialConfigBadVersion(t *testing.T)"
TestDialConfigBadVersion( ${1:t *testing.T})
endsnippet

snippet TestDiffEnsureDockerinitFilesAreIgnored "TestDiffEnsureDockerinitFilesAreIgnored(t *testing.T)"
TestDiffEnsureDockerinitFilesAreIgnored( ${1:t *testing.T})
endsnippet

snippet TestDiffEnsureOnlyKmsgAndPtmx "TestDiffEnsureOnlyKmsgAndPtmx(t *testing.T)"
TestDiffEnsureOnlyKmsgAndPtmx( ${1:t *testing.T})
endsnippet

snippet TestDiffFilenameShownInOutput "TestDiffFilenameShownInOutput(t *testing.T)"
TestDiffFilenameShownInOutput( ${1:t *testing.T})
endsnippet

snippet TestDiffSize "TestDiffSize(t *testing.T)"
TestDiffSize( ${1:t *testing.T})
endsnippet

snippet TestDigraph "TestDigraph(t *testing.T)"
TestDigraph( ${1:t *testing.T})
endsnippet

snippet TestDir "TestDir(t *testing.T)"
TestDir( ${1:t *testing.T})
endsnippet

snippet TestDirectory "TestDirectory(templateDir string)"
TestDirectory( ${1:templateDir string})
endsnippet

snippet TestDocLinkFunc "TestDocLinkFunc(t *testing.T)"
TestDocLinkFunc( ${1:t *testing.T})
endsnippet

snippet TestDockerClientInterface "TestDockerClientInterface(t *testing.T)"
TestDockerClientInterface( ${1:t *testing.T})
endsnippet

snippet TestDos "TestDos(t *testing.T)"
TestDos( ${1:t *testing.T})
endsnippet

snippet TestDoubleAddImport "TestDoubleAddImport(t *testing.T)"
TestDoubleAddImport( ${1:t *testing.T})
endsnippet

snippet TestDoubleLoggingDoesntPrefixPreviousFields "TestDoubleLoggingDoesntPrefixPreviousFields(t *testing.T)"
TestDoubleLoggingDoesntPrefixPreviousFields( ${1:t *testing.T})
endsnippet

snippet TestDraw "TestDraw(t *testing.T)"
TestDraw( ${1:t *testing.T})
endsnippet

snippet TestDupeInsert "TestDupeInsert(t *testing.T)"
TestDupeInsert( ${1:t *testing.T})
endsnippet

snippet TestDuplicateLabel "TestDuplicateLabel(t *testing.T)"
TestDuplicateLabel( ${1:t *testing.T})
endsnippet

snippet TestDuplicateName "TestDuplicateName(t *testing.T)"
TestDuplicateName( ${1:t *testing.T})
endsnippet

snippet TestDuplicatedRoute "TestDuplicatedRoute(t *testing.T)"
TestDuplicatedRoute( ${1:t *testing.T})
endsnippet

snippet TestECKeys "TestECKeys(t *testing.T)"
TestECKeys( ${1:t *testing.T})
endsnippet

snippet TestECSignVerify "TestECSignVerify(t *testing.T)"
TestECSignVerify( ${1:t *testing.T})
endsnippet

snippet TestERR "TestERR(t *testing.T)"
TestERR( ${1:t *testing.T})
endsnippet

snippet TestEcho "TestEcho(t *testing.T)"
TestEcho( ${1:t *testing.T})
endsnippet

snippet TestEffectiveTLDPlusOne "TestEffectiveTLDPlusOne(t *testing.T)"
TestEffectiveTLDPlusOne( ${1:t *testing.T})
endsnippet

snippet TestEmpty "TestEmpty(t *testing.T)"
TestEmpty( ${1:t *testing.T})
endsnippet

snippet TestEmptyInfo "TestEmptyInfo(t *testing.T)"
TestEmptyInfo( ${1:t *testing.T})
endsnippet

snippet TestEmptyPathExp "TestEmptyPathExp(t *testing.T)"
TestEmptyPathExp( ${1:t *testing.T})
endsnippet

snippet TestEmptyString "TestEmptyString(t *testing.T)"
TestEmptyString( ${1:t *testing.T})
endsnippet

snippet TestEmptyTar "TestEmptyTar(t *testing.T)"
TestEmptyTar( ${1:t *testing.T})
endsnippet

snippet TestEnableDisableUnit "TestEnableDisableUnit(t *testing.T)"
TestEnableDisableUnit( ${1:t *testing.T})
endsnippet

snippet TestEnclosingFunction "TestEnclosingFunction(t *testing.T)"
TestEnclosingFunction( ${1:t *testing.T})
endsnippet

snippet TestEncode "TestEncode(t *testing.T)"
TestEncode( ${1:t *testing.T})
endsnippet

snippet TestEncodeAuth "TestEncodeAuth(t *testing.T)"
TestEncodeAuth( ${1:t *testing.T})
endsnippet

snippet TestEncodeDecode "TestEncodeDecode(tt *testing.T)"
TestEncodeDecode( ${1:tt *testing.T})
endsnippet

snippet TestEndToEnd "TestEndToEnd(t *testing.T)"
TestEndToEnd( ${1:t *testing.T})
endsnippet

snippet TestEndpointParse "TestEndpointParse(t *testing.T)"
TestEndpointParse( ${1:t *testing.T})
endsnippet

snippet TestEngineCommands "TestEngineCommands(t *testing.T)"
TestEngineCommands( ${1:t *testing.T})
endsnippet

snippet TestEngineShutdown "TestEngineShutdown(t *testing.T)"
TestEngineShutdown( ${1:t *testing.T})
endsnippet

snippet TestEngineString "TestEngineString(t *testing.T)"
TestEngineString( ${1:t *testing.T})
endsnippet

snippet TestEnhanceHeroReq "TestEnhanceHeroReq(t *testing.T)"
TestEnhanceHeroReq( ${1:t *testing.T})
endsnippet

snippet TestEnitiesPaths "TestEnitiesPaths(t *testing.T)"
TestEnitiesPaths( ${1:t *testing.T})
endsnippet

snippet TestEnsureNotPointer "TestEnsureNotPointer(t *testing.T)"
TestEnsureNotPointer( ${1:t *testing.T})
endsnippet

snippet TestEntityLength "TestEntityLength(t *testing.T)"
TestEntityLength( ${1:t *testing.T})
endsnippet

snippet TestEntryPanicf "TestEntryPanicf(t *testing.T)"
TestEntryPanicf( ${1:t *testing.T})
endsnippet

snippet TestEntryPanicln "TestEntryPanicln(t *testing.T)"
TestEntryPanicln( ${1:t *testing.T})
endsnippet

snippet TestEnvGetDup "TestEnvGetDup(t *testing.T)"
TestEnvGetDup( ${1:t *testing.T})
endsnippet

snippet TestEnvLenDup "TestEnvLenDup(t *testing.T)"
TestEnvLenDup( ${1:t *testing.T})
endsnippet

snippet TestEnvLenNotZero "TestEnvLenNotZero(t *testing.T)"
TestEnvLenNotZero( ${1:t *testing.T})
endsnippet

snippet TestEnvLenZero "TestEnvLenZero(t *testing.T)"
TestEnvLenZero( ${1:t *testing.T})
endsnippet

snippet TestEnviron "TestEnviron(t *testing.T)"
TestEnviron( ${1:t *testing.T})
endsnippet

snippet TestEquals "TestEquals(t *testing.T)"
TestEquals( ${1:t *testing.T})
endsnippet

snippet TestError "TestError(t *testing.T)"
TestError( ${1:t *testing.T})
endsnippet

snippet TestErrorGetters "TestErrorGetters(t *testing.T)"
TestErrorGetters( ${1:t *testing.T})
endsnippet

snippet TestErrorHandler "TestErrorHandler(t *testing.T)"
TestErrorHandler( ${1:t *testing.T})
endsnippet

snippet TestErrorHookShouldFireOnError "TestErrorHookShouldFireOnError(t *testing.T)"
TestErrorHookShouldFireOnError( ${1:t *testing.T})
endsnippet

snippet TestErrorHookShouldntFireOnInfo "TestErrorHookShouldntFireOnInfo(t *testing.T)"
TestErrorHookShouldntFireOnInfo( ${1:t *testing.T})
endsnippet

snippet TestErrorPaths "TestErrorPaths(t *testing.T)"
TestErrorPaths( ${1:t *testing.T})
endsnippet

snippet TestErrorReporting "TestErrorReporting(t *testing.T)"
TestErrorReporting( ${1:t *testing.T})
endsnippet

snippet TestErrors "TestErrors(t *testing.T)"
TestErrors( ${1:t *testing.T})
endsnippet

snippet TestErrorsAdd "TestErrorsAdd(t *testing.T)"
TestErrorsAdd( ${1:t *testing.T})
endsnippet

snippet TestErrorsHas "TestErrorsHas(t *testing.T)"
TestErrorsHas( ${1:t *testing.T})
endsnippet

snippet TestErrorsLen "TestErrorsLen(t *testing.T)"
TestErrorsLen( ${1:t *testing.T})
endsnippet

snippet TestErrorsWithClass "TestErrorsWithClass(t *testing.T)"
TestErrorsWithClass( ${1:t *testing.T})
endsnippet

snippet TestEscapeFstabSpaces "TestEscapeFstabSpaces(t *testing.T)"
TestEscapeFstabSpaces( ${1:t *testing.T})
endsnippet

snippet TestEvalArith "TestEvalArith(t *testing.T)"
TestEvalArith( ${1:t *testing.T})
endsnippet

snippet TestEvalBasic "TestEvalBasic(t *testing.T)"
TestEvalBasic( ${1:t *testing.T})
endsnippet

snippet TestEvalComposite "TestEvalComposite(t *testing.T)"
TestEvalComposite( ${1:t *testing.T})
endsnippet

snippet TestEvalContext "TestEvalContext(t *testing.T)"
TestEvalContext( ${1:t *testing.T})
endsnippet

snippet TestEventListeners "TestEventListeners(t *testing.T)"
TestEventListeners( ${1:t *testing.T})
endsnippet

snippet TestEvents "TestEvents(t *testing.T)"
TestEvents( ${1:t *testing.T})
endsnippet

snippet TestEventsContainerEvents "TestEventsContainerEvents(t *testing.T)"
TestEventsContainerEvents( ${1:t *testing.T})
endsnippet

snippet TestEventsContainerFailStartDie "TestEventsContainerFailStartDie(t *testing.T)"
TestEventsContainerFailStartDie( ${1:t *testing.T})
endsnippet

snippet TestEventsCountJob "TestEventsCountJob(t *testing.T)"
TestEventsCountJob( ${1:t *testing.T})
endsnippet

snippet TestEventsFilters "TestEventsFilters(t *testing.T)"
TestEventsFilters( ${1:t *testing.T})
endsnippet

snippet TestEventsImageImport "TestEventsImageImport(t *testing.T)"
TestEventsImageImport( ${1:t *testing.T})
endsnippet

snippet TestEventsImagePull "TestEventsImagePull(t *testing.T)"
TestEventsImagePull( ${1:t *testing.T})
endsnippet

snippet TestEventsImageUntagDelete "TestEventsImageUntagDelete(t *testing.T)"
TestEventsImageUntagDelete( ${1:t *testing.T})
endsnippet

snippet TestEventsLimit "TestEventsLimit(t *testing.T)"
TestEventsLimit( ${1:t *testing.T})
endsnippet

snippet TestEventsPause "TestEventsPause(t *testing.T)"
TestEventsPause( ${1:t *testing.T})
endsnippet

snippet TestEventsPublish "TestEventsPublish(t *testing.T)"
TestEventsPublish( ${1:t *testing.T})
endsnippet

snippet TestEventsPublishTimeout "TestEventsPublishTimeout(t *testing.T)"
TestEventsPublishTimeout( ${1:t *testing.T})
endsnippet

snippet TestEventsRedirectStdout "TestEventsRedirectStdout(t *testing.T)"
TestEventsRedirectStdout( ${1:t *testing.T})
endsnippet

snippet TestEventsUntag "TestEventsUntag(t *testing.T)"
TestEventsUntag( ${1:t *testing.T})
endsnippet

snippet TestEverything "TestEverything(t *testing.T)"
TestEverything( ${1:t *testing.T})
endsnippet

snippet TestExec "TestExec(t *testing.T)"
TestExec( ${1:t *testing.T})
endsnippet

snippet TestExecAfterContainerRestart "TestExecAfterContainerRestart(t *testing.T)"
TestExecAfterContainerRestart( ${1:t *testing.T})
endsnippet

snippet TestExecAfterDaemonRestart "TestExecAfterDaemonRestart(t *testing.T)"
TestExecAfterDaemonRestart( ${1:t *testing.T})
endsnippet

snippet TestExecApiCreateNoCmd "TestExecApiCreateNoCmd(t *testing.T)"
TestExecApiCreateNoCmd( ${1:t *testing.T})
endsnippet

snippet TestExecCreate "TestExecCreate(t *testing.T)"
TestExecCreate( ${1:t *testing.T})
endsnippet

snippet TestExecEnv "TestExecEnv(t *testing.T)"
TestExecEnv( ${1:t *testing.T})
endsnippet

snippet TestExecExitStatus "TestExecExitStatus(t *testing.T)"
TestExecExitStatus( ${1:t *testing.T})
endsnippet

snippet TestExecIn "TestExecIn(t *testing.T)"
TestExecIn( ${1:t *testing.T})
endsnippet

snippet TestExecInRlimit "TestExecInRlimit(t *testing.T)"
TestExecInRlimit( ${1:t *testing.T})
endsnippet

snippet TestExecInteractive "TestExecInteractive(t *testing.T)"
TestExecInteractive( ${1:t *testing.T})
endsnippet

snippet TestExecInteractiveStdinClose "TestExecInteractiveStdinClose(t *testing.T)"
TestExecInteractiveStdinClose( ${1:t *testing.T})
endsnippet

snippet TestExecPS "TestExecPS(t *testing.T)"
TestExecPS( ${1:t *testing.T})
endsnippet

snippet TestExecPausedContainer "TestExecPausedContainer(t *testing.T)"
TestExecPausedContainer( ${1:t *testing.T})
endsnippet

snippet TestExecResize "TestExecResize(t *testing.T)"
TestExecResize( ${1:t *testing.T})
endsnippet

snippet TestExecStartAndAttach "TestExecStartAndAttach(t *testing.T)"
TestExecStartAndAttach( ${1:t *testing.T})
endsnippet

snippet TestExecStartDetached "TestExecStartDetached(t *testing.T)"
TestExecStartDetached( ${1:t *testing.T})
endsnippet

snippet TestExecTtyCloseStdin "TestExecTtyCloseStdin(t *testing.T)"
TestExecTtyCloseStdin( ${1:t *testing.T})
endsnippet

snippet TestExecTtyWithoutStdin "TestExecTtyWithoutStdin(t *testing.T)"
TestExecTtyWithoutStdin( ${1:t *testing.T})
endsnippet

snippet TestExists "TestExists(t *testing.T)"
TestExists( ${1:t *testing.T})
endsnippet

snippet TestExistsFalse "TestExistsFalse(t *testing.T)"
TestExistsFalse( ${1:t *testing.T})
endsnippet

snippet TestExistsTrue "TestExistsTrue(t *testing.T)"
TestExistsTrue( ${1:t *testing.T})
endsnippet

snippet TestExp "TestExp(t *testing.T)"
TestExp( ${1:t *testing.T})
endsnippet

snippet TestExportContainer "TestExportContainer(t *testing.T)"
TestExportContainer( ${1:t *testing.T})
endsnippet

snippet TestExportContainerAndImportImage "TestExportContainerAndImportImage(t *testing.T)"
TestExportContainerAndImportImage( ${1:t *testing.T})
endsnippet

snippet TestExportContainerNoId "TestExportContainerNoId(t *testing.T)"
TestExportContainerNoId( ${1:t *testing.T})
endsnippet

snippet TestExportContainerViaUnixSocket "TestExportContainerViaUnixSocket(t *testing.T)"
TestExportContainerViaUnixSocket( ${1:t *testing.T})
endsnippet

snippet TestExportImage "TestExportImage(t *testing.T)"
TestExportImage( ${1:t *testing.T})
endsnippet

snippet TestExportedType "TestExportedType(t *testing.T)"
TestExportedType( ${1:t *testing.T})
endsnippet

snippet TestExprString "TestExprString(t *testing.T)"
TestExprString( ${1:t *testing.T})
endsnippet

snippet TestExtendedFields "TestExtendedFields(t *testing.T)"
TestExtendedFields( ${1:t *testing.T})
endsnippet

snippet TestExternalPackages "TestExternalPackages(t *testing.T)"
TestExternalPackages( ${1:t *testing.T})
endsnippet

snippet TestFailFastOnShallowCopy "TestFailFastOnShallowCopy(t *testing.T)"
TestFailFastOnShallowCopy( ${1:t *testing.T})
endsnippet

snippet TestField "TestField(t *testing.T)"
TestField( ${1:t *testing.T})
endsnippet

snippet TestFileInfoHeader "TestFileInfoHeader(t *testing.T)"
TestFileInfoHeader( ${1:t *testing.T})
endsnippet

snippet TestFileInfoHeaderDir "TestFileInfoHeaderDir(t *testing.T)"
TestFileInfoHeaderDir( ${1:t *testing.T})
endsnippet

snippet TestFileInfoHeaderSymlink "TestFileInfoHeaderSymlink(t *testing.T)"
TestFileInfoHeaderSymlink( ${1:t *testing.T})
endsnippet

snippet TestFileUploads "TestFileUploads(t *testing.T)"
TestFileUploads( ${1:t *testing.T})
endsnippet

snippet TestFiles "TestFiles(t *testing.T)"
TestFiles( ${1:t *testing.T})
endsnippet

snippet TestFilter "TestFilter(t *testing.T)"
TestFilter( ${1:t *testing.T})
endsnippet

snippet TestFilterStatements "TestFilterStatements(t *testing.T)"
TestFilterStatements( ${1:t *testing.T})
endsnippet

snippet TestFinal "TestFinal(t *testing.T)"
TestFinal( ${1:t *testing.T})
endsnippet

snippet TestFind "TestFind(t *testing.T)"
TestFind( ${1:t *testing.T})
endsnippet

snippet TestFindImportGoPath "TestFindImportGoPath(t *testing.T)"
TestFindImportGoPath( ${1:t *testing.T})
endsnippet

snippet TestFindImportStdlib "TestFindImportStdlib(t *testing.T)"
TestFindImportStdlib( ${1:t *testing.T})
endsnippet

snippet TestFindRoute "TestFindRoute(t *testing.T)"
TestFindRoute( ${1:t *testing.T})
endsnippet

snippet TestFindRouteAPI "TestFindRouteAPI(t *testing.T)"
TestFindRouteAPI( ${1:t *testing.T})
endsnippet

snippet TestFindRouteMultipleMatches "TestFindRouteMultipleMatches(t *testing.T)"
TestFindRouteMultipleMatches( ${1:t *testing.T})
endsnippet

snippet TestFindTests "TestFindTests(t *testing.T)"
TestFindTests( ${1:t *testing.T})
endsnippet

snippet TestFindTestsTesting "TestFindTestsTesting(t *testing.T)"
TestFindTestsTesting( ${1:t *testing.T})
endsnippet

snippet TestFireHeroReq "TestFireHeroReq(t *testing.T)"
TestFireHeroReq( ${1:t *testing.T})
endsnippet

snippet TestFixImports "TestFixImports(t *testing.T)"
TestFixImports( ${1:t *testing.T})
endsnippet

snippet TestFlagCounts "TestFlagCounts(t *testing.T)"
TestFlagCounts( ${1:t *testing.T})
endsnippet

snippet TestFlagSetParse "TestFlagSetParse(t *testing.T)"
TestFlagSetParse( ${1:t *testing.T})
endsnippet

snippet TestFlushVillage "TestFlushVillage(t *testing.T)"
TestFlushVillage( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkAbsolute "TestFollowSymlinkAbsolute(t *testing.T)"
TestFollowSymlinkAbsolute( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkBreakoutNonExistent "TestFollowSymlinkBreakoutNonExistent(t *testing.T)"
TestFollowSymlinkBreakoutNonExistent( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkBreakoutPath "TestFollowSymlinkBreakoutPath(t *testing.T)"
TestFollowSymlinkBreakoutPath( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkCircular "TestFollowSymlinkCircular(t *testing.T)"
TestFollowSymlinkCircular( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkComplexChainWithTargetPathsContainingLinks "TestFollowSymlinkComplexChainWithTargetPathsContainingLinks(t *testing.T)"
TestFollowSymlinkComplexChainWithTargetPathsContainingLinks( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkDeepRelativeLinkChangeScope "TestFollowSymlinkDeepRelativeLinkChangeScope(t *testing.T)"
TestFollowSymlinkDeepRelativeLinkChangeScope( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkDotdot "TestFollowSymlinkDotdot(t *testing.T)"
TestFollowSymlinkDotdot( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkEmpty "TestFollowSymlinkEmpty(t *testing.T)"
TestFollowSymlinkEmpty( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkInvalidScopePathPair "TestFollowSymlinkInvalidScopePathPair(t *testing.T)"
TestFollowSymlinkInvalidScopePathPair( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkLastLink "TestFollowSymlinkLastLink(t *testing.T)"
TestFollowSymlinkLastLink( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkNoLexicalCleaning "TestFollowSymlinkNoLexicalCleaning(t *testing.T)"
TestFollowSymlinkNoLexicalCleaning( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkRelativeLinkChain "TestFollowSymlinkRelativeLinkChain(t *testing.T)"
TestFollowSymlinkRelativeLinkChain( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkRelativeLinkChangeScope "TestFollowSymlinkRelativeLinkChangeScope(t *testing.T)"
TestFollowSymlinkRelativeLinkChangeScope( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkRelativePath "TestFollowSymlinkRelativePath(t *testing.T)"
TestFollowSymlinkRelativePath( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkRelativePath2 "TestFollowSymlinkRelativePath2(t *testing.T)"
TestFollowSymlinkRelativePath2( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkRootScope "TestFollowSymlinkRootScope(t *testing.T)"
TestFollowSymlinkRootScope( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkScopeLink "TestFollowSymlinkScopeLink(t *testing.T)"
TestFollowSymlinkScopeLink( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkSkipSymlinksOutsideScope "TestFollowSymlinkSkipSymlinksOutsideScope(t *testing.T)"
TestFollowSymlinkSkipSymlinksOutsideScope( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkSlashDotdot "TestFollowSymlinkSlashDotdot(t *testing.T)"
TestFollowSymlinkSlashDotdot( ${1:t *testing.T})
endsnippet

snippet TestFollowSymlinkToRoot "TestFollowSymlinkToRoot(t *testing.T)"
TestFollowSymlinkToRoot( ${1:t *testing.T})
endsnippet

snippet TestFont "TestFont(t *testing.T)"
TestFont( ${1:t *testing.T})
endsnippet

snippet TestFoo "TestFoo(t *testing.T)"
TestFoo( ${1:t *testing.T})
endsnippet

snippet TestForeignObject "TestForeignObject(t *testing.T)"
TestForeignObject( ${1:t *testing.T})
endsnippet

snippet TestForm "TestForm(t *testing.T)"
TestForm( ${1:t *testing.T})
endsnippet

snippet TestFormatJSONError "TestFormatJSONError(t *testing.T)"
TestFormatJSONError( ${1:t *testing.T})
endsnippet

snippet TestFormatProgress "TestFormatProgress(t *testing.T)"
TestFormatProgress( ${1:t *testing.T})
endsnippet

snippet TestFormatSimpleError "TestFormatSimpleError(t *testing.T)"
TestFormatSimpleError( ${1:t *testing.T})
endsnippet

snippet TestFormatStatus "TestFormatStatus(t *testing.T)"
TestFormatStatus( ${1:t *testing.T})
endsnippet

snippet TestFormatStream "TestFormatStream(t *testing.T)"
TestFormatStream( ${1:t *testing.T})
endsnippet

snippet TestFormatVariant "TestFormatVariant(t *testing.T)"
TestFormatVariant( ${1:t *testing.T})
endsnippet

snippet TestFormattedFlatJson "TestFormattedFlatJson(t *testing.T)"
TestFormattedFlatJson( ${1:t *testing.T})
endsnippet

snippet TestFormattedJson "TestFormattedJson(t *testing.T)"
TestFormattedJson( ${1:t *testing.T})
endsnippet

snippet TestForward "TestForward(t *testing.T)"
TestForward( ${1:t *testing.T})
endsnippet

snippet TestFractions "TestFractions(t *testing.T)"
TestFractions( ${1:t *testing.T})
endsnippet

snippet TestFromCryptoECKeys "TestFromCryptoECKeys(t *testing.T)"
TestFromCryptoECKeys( ${1:t *testing.T})
endsnippet

snippet TestFromCryptoRSAKeys "TestFromCryptoRSAKeys(t *testing.T)"
TestFromCryptoRSAKeys( ${1:t *testing.T})
endsnippet

snippet TestFromDir "TestFromDir(t *testing.T)"
TestFromDir( ${1:t *testing.T})
endsnippet

snippet TestFromHumanSize "TestFromHumanSize(t *testing.T)"
TestFromHumanSize( ${1:t *testing.T})
endsnippet

snippet TestFromMeta "TestFromMeta(t *testing.T)"
TestFromMeta( ${1:t *testing.T})
endsnippet

snippet TestFromStatT "TestFromStatT(t *testing.T)"
TestFromStatT( ${1:t *testing.T})
endsnippet

snippet TestFromURL "TestFromURL(t *testing.T)"
TestFromURL( ${1:t *testing.T})
endsnippet

snippet TestGacheHeroLv3 "TestGacheHeroLv3(t *testing.T)"
TestGacheHeroLv3( ${1:t *testing.T})
endsnippet

snippet TestGacheHeroReq "TestGacheHeroReq(t *testing.T)"
TestGacheHeroReq( ${1:t *testing.T})
endsnippet

snippet TestGameConfigListReq "TestGameConfigListReq(t *testing.T)"
TestGameConfigListReq( ${1:t *testing.T})
endsnippet

snippet TestGauss "TestGauss(t *testing.T)"
TestGauss( ${1:t *testing.T})
endsnippet

snippet TestGenerateAwesomeNames "TestGenerateAwesomeNames(t *testing.T)"
TestGenerateAwesomeNames( ${1:t *testing.T})
endsnippet

snippet TestGenerateCACertPool "TestGenerateCACertPool(t *testing.T)"
TestGenerateCACertPool( ${1:t *testing.T})
endsnippet

snippet TestGenerateCertificates "TestGenerateCertificates(t *testing.T)"
TestGenerateCertificates( ${1:t *testing.T})
endsnippet

snippet TestGenerateName "TestGenerateName(t *testing.T)"
TestGenerateName( ${1:t *testing.T})
endsnippet

snippet TestGenerateVethNames "TestGenerateVethNames(t *testing.T)"
TestGenerateVethNames( ${1:t *testing.T})
endsnippet

snippet TestGeoIP "TestGeoIP(t *testing.T)"
TestGeoIP( ${1:t *testing.T})
endsnippet

snippet TestGet "TestGet(t *testing.T)"
TestGet( ${1:t *testing.T})
endsnippet

snippet TestGetAccount "TestGetAccount(t *testing.T)"
TestGetAccount( ${1:t *testing.T})
endsnippet

snippet TestGetAllChildren "TestGetAllChildren(t *testing.T)"
TestGetAllChildren( ${1:t *testing.T})
endsnippet

snippet TestGetAllianceDailyQuestPerRewardsReq "TestGetAllianceDailyQuestPerRewardsReq(t *testing.T)"
TestGetAllianceDailyQuestPerRewardsReq( ${1:t *testing.T})
endsnippet

snippet TestGetAllianceDailyQuestRewardsReq "TestGetAllianceDailyQuestRewardsReq(t *testing.T)"
TestGetAllianceDailyQuestRewardsReq( ${1:t *testing.T})
endsnippet

snippet TestGetBattleMessageDetailReq "TestGetBattleMessageDetailReq(t *testing.T)"
TestGetBattleMessageDetailReq( ${1:t *testing.T})
endsnippet

snippet TestGetBool "TestGetBool(t *testing.T)"
TestGetBool( ${1:t *testing.T})
endsnippet

snippet TestGetBoolParam "TestGetBoolParam(t *testing.T)"
TestGetBoolParam( ${1:t *testing.T})
endsnippet

snippet TestGetCgroupParamsInt "TestGetCgroupParamsInt(t *testing.T)"
TestGetCgroupParamsInt( ${1:t *testing.T})
endsnippet

snippet TestGetContainersByName "TestGetContainersByName(t *testing.T)"
TestGetContainersByName( ${1:t *testing.T})
endsnippet

snippet TestGetContainersTop "TestGetContainersTop(t *testing.T)"
TestGetContainersTop( ${1:t *testing.T})
endsnippet

snippet TestGetDailyQuestRewardsReq "TestGetDailyQuestRewardsReq(t *testing.T)"
TestGetDailyQuestRewardsReq( ${1:t *testing.T})
endsnippet

snippet TestGetDealDoneGoldReq "TestGetDealDoneGoldReq(t *testing.T)"
TestGetDealDoneGoldReq( ${1:t *testing.T})
endsnippet

snippet TestGetDealListsReq "TestGetDealListsReq(t *testing.T)"
TestGetDealListsReq( ${1:t *testing.T})
endsnippet

snippet TestGetDeviceLstatFailure "TestGetDeviceLstatFailure(t *testing.T)"
TestGetDeviceLstatFailure( ${1:t *testing.T})
endsnippet

snippet TestGetDiff "TestGetDiff(t *testing.T)"
TestGetDiff( ${1:t *testing.T})
endsnippet

snippet TestGetEnabledCors "TestGetEnabledCors(t *testing.T)"
TestGetEnabledCors( ${1:t *testing.T})
endsnippet

snippet TestGetEntityByPath "TestGetEntityByPath(t *testing.T)"
TestGetEntityByPath( ${1:t *testing.T})
endsnippet

snippet TestGetEvents "TestGetEvents(t *testing.T)"
TestGetEvents( ${1:t *testing.T})
endsnippet

snippet TestGetExecUserNilSources "TestGetExecUserNilSources(t *testing.T)"
TestGetExecUserNilSources( ${1:t *testing.T})
endsnippet

snippet TestGetFdName "TestGetFdName(test *testing.T)"
TestGetFdName( ${1:test *testing.T})
endsnippet

snippet TestGetFullName "TestGetFullName(t *testing.T)"
TestGetFullName( ${1:t *testing.T})
endsnippet

snippet TestGetGrants "TestGetGrants(t *testing.T)"
TestGetGrants( ${1:t *testing.T})
endsnippet

snippet TestGetHostDeviceNodesIoutilReadDirDeepFailure "TestGetHostDeviceNodesIoutilReadDirDeepFailure(t *testing.T)"
TestGetHostDeviceNodesIoutilReadDirDeepFailure( ${1:t *testing.T})
endsnippet

snippet TestGetHostDeviceNodesIoutilReadDirFailure "TestGetHostDeviceNodesIoutilReadDirFailure(t *testing.T)"
TestGetHostDeviceNodesIoutilReadDirFailure( ${1:t *testing.T})
endsnippet

snippet TestGetImagesByName "TestGetImagesByName(t *testing.T)"
TestGetImagesByName( ${1:t *testing.T})
endsnippet

snippet TestGetImagesHistory "TestGetImagesHistory(t *testing.T)"
TestGetImagesHistory( ${1:t *testing.T})
endsnippet

snippet TestGetImagesJSON "TestGetImagesJSON(t *testing.T)"
TestGetImagesJSON( ${1:t *testing.T})
endsnippet

snippet TestGetImagesJSONAll "TestGetImagesJSONAll(t *testing.T)"
TestGetImagesJSONAll( ${1:t *testing.T})
endsnippet

snippet TestGetImagesJSONFilter "TestGetImagesJSONFilter(t *testing.T)"
TestGetImagesJSONFilter( ${1:t *testing.T})
endsnippet

snippet TestGetImagesJSONFilters "TestGetImagesJSONFilters(t *testing.T)"
TestGetImagesJSONFilters( ${1:t *testing.T})
endsnippet

snippet TestGetImagesJSONLegacyFormat "TestGetImagesJSONLegacyFormat(t *testing.T)"
TestGetImagesJSONLegacyFormat( ${1:t *testing.T})
endsnippet

snippet TestGetInfo "TestGetInfo(t *testing.T)"
TestGetInfo( ${1:t *testing.T})
endsnippet

snippet TestGetInt "TestGetInt(t *testing.T)"
TestGetInt( ${1:t *testing.T})
endsnippet

snippet TestGetInt64 "TestGetInt64(t *testing.T)"
TestGetInt64( ${1:t *testing.T})
endsnippet

snippet TestGetJSON "TestGetJSON(t *testing.T)"
TestGetJSON( ${1:t *testing.T})
endsnippet

snippet TestGetJSONAbsent "TestGetJSONAbsent(t *testing.T)"
TestGetJSONAbsent( ${1:t *testing.T})
endsnippet

snippet TestGetJSONFailure "TestGetJSONFailure(t *testing.T)"
TestGetJSONFailure( ${1:t *testing.T})
endsnippet

snippet TestGetList "TestGetList(t *testing.T)"
TestGetList( ${1:t *testing.T})
endsnippet

snippet TestGetLocalIp "TestGetLocalIp(t *testing.T)"
TestGetLocalIp( ${1:t *testing.T})
endsnippet

snippet TestGetMailListReq "TestGetMailListReq(t *testing.T)"
TestGetMailListReq( ${1:t *testing.T})
endsnippet

snippet TestGetMounts "TestGetMounts(t *testing.T)"
TestGetMounts( ${1:t *testing.T})
endsnippet

snippet TestGetNameWithTrailingSlash "TestGetNameWithTrailingSlash(t *testing.T)"
TestGetNameWithTrailingSlash( ${1:t *testing.T})
endsnippet

snippet TestGetNameservers "TestGetNameservers(t *testing.T)"
TestGetNameservers( ${1:t *testing.T})
endsnippet

snippet TestGetNameserversAsCIDR "TestGetNameserversAsCIDR(t *testing.T)"
TestGetNameserversAsCIDR( ${1:t *testing.T})
endsnippet

snippet TestGetNextCityArea "TestGetNextCityArea(t *testing.T)"
TestGetNextCityArea( ${1:t *testing.T})
endsnippet

snippet TestGetOperatingSystem "TestGetOperatingSystem(t *testing.T)"
TestGetOperatingSystem( ${1:t *testing.T})
endsnippet

snippet TestGetReleasedIp "TestGetReleasedIp(t *testing.T)"
TestGetReleasedIp( ${1:t *testing.T})
endsnippet

snippet TestGetReleasedIpV6 "TestGetReleasedIpV6(t *testing.T)"
TestGetReleasedIpV6( ${1:t *testing.T})
endsnippet

snippet TestGetRemoteHistory "TestGetRemoteHistory(t *testing.T)"
TestGetRemoteHistory( ${1:t *testing.T})
endsnippet

snippet TestGetRemoteImageJSON "TestGetRemoteImageJSON(t *testing.T)"
TestGetRemoteImageJSON( ${1:t *testing.T})
endsnippet

snippet TestGetRemoteImageLayer "TestGetRemoteImageLayer(t *testing.T)"
TestGetRemoteImageLayer( ${1:t *testing.T})
endsnippet

snippet TestGetRemoteTags "TestGetRemoteTags(t *testing.T)"
TestGetRemoteTags( ${1:t *testing.T})
endsnippet

snippet TestGetRepositoryData "TestGetRepositoryData(t *testing.T)"
TestGetRepositoryData( ${1:t *testing.T})
endsnippet

snippet TestGetRoomMembers "TestGetRoomMembers(t *testing.T)"
TestGetRoomMembers( ${1:t *testing.T})
endsnippet

snippet TestGetRootEntity "TestGetRootEntity(t *testing.T)"
TestGetRootEntity( ${1:t *testing.T})
endsnippet

snippet TestGetSearchDomains "TestGetSearchDomains(t *testing.T)"
TestGetSearchDomains( ${1:t *testing.T})
endsnippet

snippet TestGetServiceUrl "TestGetServiceUrl(t *testing.T)"
TestGetServiceUrl( ${1:t *testing.T})
endsnippet

snippet TestGetTCPKey "TestGetTCPKey(t *testing.T)"
TestGetTCPKey( ${1:t *testing.T})
endsnippet

snippet TestGetUDPIPAndPort "TestGetUDPIPAndPort(t *testing.T)"
TestGetUDPIPAndPort( ${1:t *testing.T})
endsnippet

snippet TestGetUDPKey "TestGetUDPKey(t *testing.T)"
TestGetUDPKey( ${1:t *testing.T})
endsnippet

snippet TestGetURL "TestGetURL(t *testing.T)"
TestGetURL( ${1:t *testing.T})
endsnippet

snippet TestGetUnitProperties "TestGetUnitProperties(t *testing.T)"
TestGetUnitProperties( ${1:t *testing.T})
endsnippet

snippet TestGetUnitPropertiesRejectsInvalidName "TestGetUnitPropertiesRejectsInvalidName(t *testing.T)"
TestGetUnitPropertiesRejectsInvalidName( ${1:t *testing.T})
endsnippet

snippet TestGetUserRankReq "TestGetUserRankReq(t *testing.T)"
TestGetUserRankReq( ${1:t *testing.T})
endsnippet

snippet TestGetUserSoldierPopulationRankReq "TestGetUserSoldierPopulationRankReq(t *testing.T)"
TestGetUserSoldierPopulationRankReq( ${1:t *testing.T})
endsnippet

snippet TestGetVersion "TestGetVersion(t *testing.T)"
TestGetVersion( ${1:t *testing.T})
endsnippet

snippet TestGetWithoutParent "TestGetWithoutParent(t *testing.T)"
TestGetWithoutParent( ${1:t *testing.T})
endsnippet

snippet TestGolden "TestGolden(t *testing.T)"
TestGolden( ${1:t *testing.T})
endsnippet

snippet TestGomfile1 "TestGomfile1(t *testing.T)"
TestGomfile1( ${1:t *testing.T})
endsnippet

snippet TestGomfile2 "TestGomfile2(t *testing.T)"
TestGomfile2( ${1:t *testing.T})
endsnippet

snippet TestGomfile3 "TestGomfile3(t *testing.T)"
TestGomfile3( ${1:t *testing.T})
endsnippet

snippet TestGomfile4 "TestGomfile4(t *testing.T)"
TestGomfile4( ${1:t *testing.T})
endsnippet

snippet TestGorootTest "TestGorootTest(t *testing.T)"
TestGorootTest( ${1:t *testing.T})
endsnippet

snippet TestGoxImporter "TestGoxImporter(t *testing.T)"
TestGoxImporter( ${1:t *testing.T})
endsnippet

snippet TestGraphCreate "TestGraphCreate(t *testing.T)"
TestGraphCreate( ${1:t *testing.T})
endsnippet

snippet TestGrid "TestGrid(t *testing.T)"
TestGrid( ${1:t *testing.T})
endsnippet

snippet TestGridFloats "TestGridFloats(t *testing.T)"
TestGridFloats( ${1:t *testing.T})
endsnippet

snippet TestGridInts "TestGridInts(t *testing.T)"
TestGridInts( ${1:t *testing.T})
endsnippet

snippet TestGridInts64 "TestGridInts64(t *testing.T)"
TestGridInts64( ${1:t *testing.T})
endsnippet

snippet TestGridMapMixed "TestGridMapMixed(t *testing.T)"
TestGridMapMixed( ${1:t *testing.T})
endsnippet

snippet TestGridMixed "TestGridMixed(t *testing.T)"
TestGridMixed( ${1:t *testing.T})
endsnippet

snippet TestGridString "TestGridString(t *testing.T)"
TestGridString( ${1:t *testing.T})
endsnippet

snippet TestGroup "TestGroup(t *testing.T)"
TestGroup( ${1:t *testing.T})
endsnippet

snippet TestGrow "TestGrow(t *testing.T)"
TestGrow( ${1:t *testing.T})
endsnippet

snippet TestGzipDisabled "TestGzipDisabled(t *testing.T)"
TestGzipDisabled( ${1:t *testing.T})
endsnippet

snippet TestGzipEnabled "TestGzipEnabled(t *testing.T)"
TestGzipEnabled( ${1:t *testing.T})
endsnippet

snippet TestHTTP "TestHTTP(t *testing.T)"
TestHTTP( ${1:t *testing.T})
endsnippet

snippet TestHandleWithHook "TestHandleWithHook(t *testing.T)"
TestHandleWithHook( ${1:t *testing.T})
endsnippet

snippet TestHandler "TestHandler(t *testing.T)"
TestHandler( ${1:t *testing.T})
endsnippet

snippet TestHeaderMatcher "TestHeaderMatcher(t *testing.T)"
TestHeaderMatcher( ${1:t *testing.T})
endsnippet

snippet TestHeaderParsing "TestHeaderParsing(t *testing.T)"
TestHeaderParsing( ${1:t *testing.T})
endsnippet

snippet TestHeaderRoundTrip "TestHeaderRoundTrip(t *testing.T)"
TestHeaderRoundTrip( ${1:t *testing.T})
endsnippet

snippet TestHeaders "TestHeaders(t *testing.T)"
TestHeaders( ${1:t *testing.T})
endsnippet

snippet TestHeadersFirstRow "TestHeadersFirstRow(t *testing.T)"
TestHeadersFirstRow( ${1:t *testing.T})
endsnippet

snippet TestHelp "TestHelp(t *testing.T)"
TestHelp( ${1:t *testing.T})
endsnippet

snippet TestHeroJson "TestHeroJson(t *testing.T)"
TestHeroJson( ${1:t *testing.T})
endsnippet

snippet TestHideLineBelowHeader "TestHideLineBelowHeader(t *testing.T)"
TestHideLineBelowHeader( ${1:t *testing.T})
endsnippet

snippet TestHilbert "TestHilbert(t *testing.T)"
TestHilbert( ${1:t *testing.T})
endsnippet

snippet TestHireHeroReq "TestHireHeroReq(t *testing.T)"
TestHireHeroReq( ${1:t *testing.T})
endsnippet

snippet TestHistoryExistentImage "TestHistoryExistentImage(t *testing.T)"
TestHistoryExistentImage( ${1:t *testing.T})
endsnippet

snippet TestHistoryNonExistentImage "TestHistoryNonExistentImage(t *testing.T)"
TestHistoryNonExistentImage( ${1:t *testing.T})
endsnippet

snippet TestHits "TestHits(t *testing.T)"
TestHits( ${1:t *testing.T})
endsnippet

snippet TestHixie76Challenge "TestHixie76Challenge(t *testing.T)"
TestHixie76Challenge( ${1:t *testing.T})
endsnippet

snippet TestHixie76ClientHandshake "TestHixie76ClientHandshake(t *testing.T)"
TestHixie76ClientHandshake( ${1:t *testing.T})
endsnippet

snippet TestHixie76ClosingFrame "TestHixie76ClosingFrame(t *testing.T)"
TestHixie76ClosingFrame( ${1:t *testing.T})
endsnippet

snippet TestHixie76ServerHandshake "TestHixie76ServerHandshake(t *testing.T)"
TestHixie76ServerHandshake( ${1:t *testing.T})
endsnippet

snippet TestHixie76SkipLengthFrame "TestHixie76SkipLengthFrame(t *testing.T)"
TestHixie76SkipLengthFrame( ${1:t *testing.T})
endsnippet

snippet TestHixie76SkipNoUTF8Frame "TestHixie76SkipNoUTF8Frame(t *testing.T)"
TestHixie76SkipNoUTF8Frame( ${1:t *testing.T})
endsnippet

snippet TestHookCanModifyEntry "TestHookCanModifyEntry(t *testing.T)"
TestHookCanModifyEntry( ${1:t *testing.T})
endsnippet

snippet TestHookFires "TestHookFires(t *testing.T)"
TestHookFires( ${1:t *testing.T})
endsnippet

snippet TestHost "TestHost(t *testing.T)"
TestHost( ${1:t *testing.T})
endsnippet

snippet TestHostMatcher "TestHostMatcher(t *testing.T)"
TestHostMatcher( ${1:t *testing.T})
endsnippet

snippet TestHostPath "TestHostPath(t *testing.T)"
TestHostPath( ${1:t *testing.T})
endsnippet

snippet TestHostnameFormatChecking "TestHostnameFormatChecking(t *testing.T)"
TestHostnameFormatChecking( ${1:t *testing.T})
endsnippet

snippet TestHttpsInfo "TestHttpsInfo(t *testing.T)"
TestHttpsInfo( ${1:t *testing.T})
endsnippet

snippet TestHttpsInfoRogueCert "TestHttpsInfoRogueCert(t *testing.T)"
TestHttpsInfoRogueCert( ${1:t *testing.T})
endsnippet

snippet TestHttpsInfoRogueServerCert "TestHttpsInfoRogueServerCert(t *testing.T)"
TestHttpsInfoRogueServerCert( ${1:t *testing.T})
endsnippet

snippet TestHumanDuration "TestHumanDuration(t *testing.T)"
TestHumanDuration( ${1:t *testing.T})
endsnippet

snippet TestHumanSize "TestHumanSize(t *testing.T)"
TestHumanSize( ${1:t *testing.T})
endsnippet

snippet TestHybiClientHandshake "TestHybiClientHandshake(t *testing.T)"
TestHybiClientHandshake( ${1:t *testing.T})
endsnippet

snippet TestHybiClientHandshakeHybi08 "TestHybiClientHandshakeHybi08(t *testing.T)"
TestHybiClientHandshakeHybi08( ${1:t *testing.T})
endsnippet

snippet TestHybiClientHandshakeWithHeader "TestHybiClientHandshakeWithHeader(t *testing.T)"
TestHybiClientHandshakeWithHeader( ${1:t *testing.T})
endsnippet

snippet TestHybiClientRead "TestHybiClientRead(t *testing.T)"
TestHybiClientRead( ${1:t *testing.T})
endsnippet

snippet TestHybiClientReadWithMasking "TestHybiClientReadWithMasking(t *testing.T)"
TestHybiClientReadWithMasking( ${1:t *testing.T})
endsnippet

snippet TestHybiControlFrame "TestHybiControlFrame(t *testing.T)"
TestHybiControlFrame( ${1:t *testing.T})
endsnippet

snippet TestHybiLongFrame "TestHybiLongFrame(t *testing.T)"
TestHybiLongFrame( ${1:t *testing.T})
endsnippet

snippet TestHybiServerFirefoxHandshake "TestHybiServerFirefoxHandshake(t *testing.T)"
TestHybiServerFirefoxHandshake( ${1:t *testing.T})
endsnippet

snippet TestHybiServerHandshake "TestHybiServerHandshake(t *testing.T)"
TestHybiServerHandshake( ${1:t *testing.T})
endsnippet

snippet TestHybiServerHandshakeHybi08 "TestHybiServerHandshakeHybi08(t *testing.T)"
TestHybiServerHandshakeHybi08( ${1:t *testing.T})
endsnippet

snippet TestHybiServerHandshakeHybiBadVersion "TestHybiServerHandshakeHybiBadVersion(t *testing.T)"
TestHybiServerHandshakeHybiBadVersion( ${1:t *testing.T})
endsnippet

snippet TestHybiServerHandshakeNoSubProtocol "TestHybiServerHandshakeNoSubProtocol(t *testing.T)"
TestHybiServerHandshakeNoSubProtocol( ${1:t *testing.T})
endsnippet

snippet TestHybiServerRead "TestHybiServerRead(t *testing.T)"
TestHybiServerRead( ${1:t *testing.T})
endsnippet

snippet TestHybiServerReadWithoutMasking "TestHybiServerReadWithoutMasking(t *testing.T)"
TestHybiServerReadWithoutMasking( ${1:t *testing.T})
endsnippet

snippet TestHybiShortBinaryFrame "TestHybiShortBinaryFrame(t *testing.T)"
TestHybiShortBinaryFrame( ${1:t *testing.T})
endsnippet

snippet TestHybiShortMaskedTextFrame "TestHybiShortMaskedTextFrame(t *testing.T)"
TestHybiShortMaskedTextFrame( ${1:t *testing.T})
endsnippet

snippet TestHybiShortRead "TestHybiShortRead(t *testing.T)"
TestHybiShortRead( ${1:t *testing.T})
endsnippet

snippet TestHybiShortTextFrame "TestHybiShortTextFrame(t *testing.T)"
TestHybiShortTextFrame( ${1:t *testing.T})
endsnippet

snippet TestICANN "TestICANN(t *testing.T)"
TestICANN( ${1:t *testing.T})
endsnippet

snippet TestICMPFilter "TestICMPFilter(t *testing.T)"
TestICMPFilter( ${1:t *testing.T})
endsnippet

snippet TestICMPString "TestICMPString(t *testing.T)"
TestICMPString( ${1:t *testing.T})
endsnippet

snippet TestIDNA "TestIDNA(t *testing.T)"
TestIDNA( ${1:t *testing.T})
endsnippet

snippet TestIPAllocator "TestIPAllocator(t *testing.T)"
TestIPAllocator( ${1:t *testing.T})
endsnippet

snippet TestIPC "TestIPC(t *testing.T)"
TestIPC( ${1:t *testing.T})
endsnippet

snippet TestIPCBadPath "TestIPCBadPath(t *testing.T)"
TestIPCBadPath( ${1:t *testing.T})
endsnippet

snippet TestIPCHost "TestIPCHost(t *testing.T)"
TestIPCHost( ${1:t *testing.T})
endsnippet

snippet TestIPCJoinPath "TestIPCJoinPath(t *testing.T)"
TestIPCJoinPath( ${1:t *testing.T})
endsnippet

snippet TestIPCPrivate "TestIPCPrivate(t *testing.T)"
TestIPCPrivate( ${1:t *testing.T})
endsnippet

snippet TestIPMulticastSockopt "TestIPMulticastSockopt(t *testing.T)"
TestIPMulticastSockopt( ${1:t *testing.T})
endsnippet

snippet TestIPPerInterfaceSingleConnWithSingleGroupListener "TestIPPerInterfaceSingleConnWithSingleGroupListener(t *testing.T)"
TestIPPerInterfaceSingleConnWithSingleGroupListener( ${1:t *testing.T})
endsnippet

snippet TestIPPerInterfaceSinglePacketConnWithSingleGroupListener "TestIPPerInterfaceSinglePacketConnWithSingleGroupListener(t *testing.T)"
TestIPPerInterfaceSinglePacketConnWithSingleGroupListener( ${1:t *testing.T})
endsnippet

snippet TestIPPerInterfaceSingleRawConnWithSingleGroupListener "TestIPPerInterfaceSingleRawConnWithSingleGroupListener(t *testing.T)"
TestIPPerInterfaceSingleRawConnWithSingleGroupListener( ${1:t *testing.T})
endsnippet

snippet TestIPSingleConnWithSingleGroupListener "TestIPSingleConnWithSingleGroupListener(t *testing.T)"
TestIPSingleConnWithSingleGroupListener( ${1:t *testing.T})
endsnippet

snippet TestIPSinglePacketConnWithSingleGroupListener "TestIPSinglePacketConnWithSingleGroupListener(t *testing.T)"
TestIPSinglePacketConnWithSingleGroupListener( ${1:t *testing.T})
endsnippet

snippet TestIPSingleRawConnWithSingleGroupListener "TestIPSingleRawConnWithSingleGroupListener(t *testing.T)"
TestIPSingleRawConnWithSingleGroupListener( ${1:t *testing.T})
endsnippet

snippet TestIPUnicastSockopt "TestIPUnicastSockopt(t *testing.T)"
TestIPUnicastSockopt( ${1:t *testing.T})
endsnippet

snippet TestIdentFilter "TestIdentFilter(t *testing.T)"
TestIdentFilter( ${1:t *testing.T})
endsnippet

snippet TestIdentResultSort "TestIdentResultSort(t *testing.T)"
TestIdentResultSort( ${1:t *testing.T})
endsnippet

snippet TestIllegalChars "TestIllegalChars(t *testing.T)"
TestIllegalChars( ${1:t *testing.T})
endsnippet

snippet TestImageHistory "TestImageHistory(t *testing.T)"
TestImageHistory( ${1:t *testing.T})
endsnippet

snippet TestImagesEnsureImageIsListed "TestImagesEnsureImageIsListed(t *testing.T)"
TestImagesEnsureImageIsListed( ${1:t *testing.T})
endsnippet

snippet TestImagesErrorWithInvalidFilterNameTest "TestImagesErrorWithInvalidFilterNameTest(t *testing.T)"
TestImagesErrorWithInvalidFilterNameTest( ${1:t *testing.T})
endsnippet

snippet TestImagesFilter "TestImagesFilter(t *testing.T)"
TestImagesFilter( ${1:t *testing.T})
endsnippet

snippet TestImagesFilterWhiteSpaceTrimmingAndLowerCasingWorking "TestImagesFilterWhiteSpaceTrimmingAndLowerCasingWorking(t *testing.T)"
TestImagesFilterWhiteSpaceTrimmingAndLowerCasingWorking( ${1:t *testing.T})
endsnippet

snippet TestImagesOrderedByCreationDate "TestImagesOrderedByCreationDate(t *testing.T)"
TestImagesOrderedByCreationDate( ${1:t *testing.T})
endsnippet

snippet TestImport "TestImport(t *testing.T)"
TestImport( ${1:t *testing.T})
endsnippet

snippet TestImportDisplay "TestImportDisplay(t *testing.T)"
TestImportDisplay( ${1:t *testing.T})
endsnippet

snippet TestImportImageDoesNotPassesInputIfSourceIsNotDash "TestImportImageDoesNotPassesInputIfSourceIsNotDash(t *testing.T)"
TestImportImageDoesNotPassesInputIfSourceIsNotDash( ${1:t *testing.T})
endsnippet

snippet TestImportImageFromInput "TestImportImageFromInput(t *testing.T)"
TestImportImageFromInput( ${1:t *testing.T})
endsnippet

snippet TestImportImageFromUrl "TestImportImageFromUrl(t *testing.T)"
TestImportImageFromUrl( ${1:t *testing.T})
endsnippet

snippet TestImportImageShouldChangeSourceToDashWhenItsAFilePath "TestImportImageShouldChangeSourceToDashWhenItsAFilePath(t *testing.T)"
TestImportImageShouldChangeSourceToDashWhenItsAFilePath( ${1:t *testing.T})
endsnippet

snippet TestImportImageShouldPassTarContentToBodyWhenSourceIsFilePath "TestImportImageShouldPassTarContentToBodyWhenSourceIsFilePath(t *testing.T)"
TestImportImageShouldPassTarContentToBodyWhenSourceIsFilePath( ${1:t *testing.T})
endsnippet

snippet TestImportSrc "TestImportSrc(t *testing.T)"
TestImportSrc( ${1:t *testing.T})
endsnippet

snippet TestImportStdLib "TestImportStdLib(t *testing.T)"
TestImportStdLib( ${1:t *testing.T})
endsnippet

snippet TestImportedTypes "TestImportedTypes(t *testing.T)"
TestImportedTypes( ${1:t *testing.T})
endsnippet

snippet TestImports "TestImports(t *testing.T)"
TestImports( ${1:t *testing.T})
endsnippet

snippet TestIncrementalRead "TestIncrementalRead(t *testing.T)"
TestIncrementalRead( ${1:t *testing.T})
endsnippet

snippet TestIndex "TestIndex(t *testing.T)"
TestIndex( ${1:t *testing.T})
endsnippet

snippet TestIndexWriteRead "TestIndexWriteRead(t *testing.T)"
TestIndexWriteRead( ${1:t *testing.T})
endsnippet

snippet TestInfo "TestInfo(t *testing.T)"
TestInfo( ${1:t *testing.T})
endsnippet

snippet TestInfoEnsureSucceeds "TestInfoEnsureSucceeds(t *testing.T)"
TestInfoEnsureSucceeds( ${1:t *testing.T})
endsnippet

snippet TestInfoError "TestInfoError(t *testing.T)"
TestInfoError( ${1:t *testing.T})
endsnippet

snippet TestInfoShouldAddSpacesBetweenTwoNonStrings "TestInfoShouldAddSpacesBetweenTwoNonStrings(t *testing.T)"
TestInfoShouldAddSpacesBetweenTwoNonStrings( ${1:t *testing.T})
endsnippet

snippet TestInfoShouldNotAddSpacesBetweenStringAndNonstring "TestInfoShouldNotAddSpacesBetweenStringAndNonstring(t *testing.T)"
TestInfoShouldNotAddSpacesBetweenStringAndNonstring( ${1:t *testing.T})
endsnippet

snippet TestInfoShouldNotAddSpacesBetweenStrings "TestInfoShouldNotAddSpacesBetweenStrings(t *testing.T)"
TestInfoShouldNotAddSpacesBetweenStrings( ${1:t *testing.T})
endsnippet

snippet TestInfolnShouldAddSpacesBetweenStringAndNonstring "TestInfolnShouldAddSpacesBetweenStringAndNonstring(t *testing.T)"
TestInfolnShouldAddSpacesBetweenStringAndNonstring( ${1:t *testing.T})
endsnippet

snippet TestInfolnShouldAddSpacesBetweenStrings "TestInfolnShouldAddSpacesBetweenStrings(t *testing.T)"
TestInfolnShouldAddSpacesBetweenStrings( ${1:t *testing.T})
endsnippet

snippet TestInfolnShouldAddSpacesBetweenTwoNonStrings "TestInfolnShouldAddSpacesBetweenTwoNonStrings(t *testing.T)"
TestInfolnShouldAddSpacesBetweenTwoNonStrings( ${1:t *testing.T})
endsnippet

snippet TestInit "TestInit(t *testing.T)"
TestInit( ${1:t *testing.T})
endsnippet

snippet TestInitOrderInfo "TestInitOrderInfo(t *testing.T)"
TestInitOrderInfo( ${1:t *testing.T})
endsnippet

snippet TestInjectImplementors "TestInjectImplementors(t *testing.T)"
TestInjectImplementors( ${1:t *testing.T})
endsnippet

snippet TestInlineParsing "TestInlineParsing(t *testing.T)"
TestInlineParsing( ${1:t *testing.T})
endsnippet

snippet TestInput "TestInput(t *testing.T)"
TestInput( ${1:t *testing.T})
endsnippet

snippet TestInputAddEmpty "TestInputAddEmpty(t *testing.T)"
TestInputAddEmpty( ${1:t *testing.T})
endsnippet

snippet TestInputAddNotEmpty "TestInputAddNotEmpty(t *testing.T)"
TestInputAddNotEmpty( ${1:t *testing.T})
endsnippet

snippet TestInputAddTwo "TestInputAddTwo(t *testing.T)"
TestInputAddTwo( ${1:t *testing.T})
endsnippet

snippet TestInputClose "TestInputClose(t *testing.T)"
TestInputClose( ${1:t *testing.T})
endsnippet

snippet TestInspectApiContainerResponse "TestInspectApiContainerResponse(t *testing.T)"
TestInspectApiContainerResponse( ${1:t *testing.T})
endsnippet

snippet TestInspectContainer "TestInspectContainer(t *testing.T)"
TestInspectContainer( ${1:t *testing.T})
endsnippet

snippet TestInspectContainerFailure "TestInspectContainerFailure(t *testing.T)"
TestInspectContainerFailure( ${1:t *testing.T})
endsnippet

snippet TestInspectContainerNegativeSwap "TestInspectContainerNegativeSwap(t *testing.T)"
TestInspectContainerNegativeSwap( ${1:t *testing.T})
endsnippet

snippet TestInspectContainerNotFound "TestInspectContainerNotFound(t *testing.T)"
TestInspectContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestInspectImage "TestInspectImage(t *testing.T)"
TestInspectImage( ${1:t *testing.T})
endsnippet

snippet TestInspectImageNotFound "TestInspectImageNotFound(t *testing.T)"
TestInspectImageNotFound( ${1:t *testing.T})
endsnippet

snippet TestInstallationImporter "TestInstallationImporter(t *testing.T)"
TestInstallationImporter( ${1:t *testing.T})
endsnippet

snippet TestInterlockedCancels "TestInterlockedCancels(t *testing.T)"
TestInterlockedCancels( ${1:t *testing.T})
endsnippet

snippet TestInterruptedRegister "TestInterruptedRegister(t *testing.T)"
TestInterruptedRegister( ${1:t *testing.T})
endsnippet

snippet TestIntersectionWith "TestIntersectionWith(t *testing.T)"
TestIntersectionWith( ${1:t *testing.T})
endsnippet

snippet TestIntervalTree "TestIntervalTree(t *testing.T)"
TestIntervalTree( ${1:t *testing.T})
endsnippet

snippet TestIntfDecode "TestIntfDecode(t *testing.T)"
TestIntfDecode( ${1:t *testing.T})
endsnippet

snippet TestInvalidChain "TestInvalidChain(t *testing.T)"
TestInvalidChain( ${1:t *testing.T})
endsnippet

snippet TestInvalidCpuStat "TestInvalidCpuStat(t *testing.T)"
TestInvalidCpuStat( ${1:t *testing.T})
endsnippet

snippet TestInvalidGetExecUser "TestInvalidGetExecUser(t *testing.T)"
TestInvalidGetExecUser( ${1:t *testing.T})
endsnippet

snippet TestInvalidPathExp "TestInvalidPathExp(t *testing.T)"
TestInvalidPathExp( ${1:t *testing.T})
endsnippet

snippet TestInvalidTagName "TestInvalidTagName(t *testing.T)"
TestInvalidTagName( ${1:t *testing.T})
endsnippet

snippet TestIsAmbiguousWidth "TestIsAmbiguousWidth(t *testing.T)"
TestIsAmbiguousWidth( ${1:t *testing.T})
endsnippet

snippet TestIsContainerized "TestIsContainerized(t *testing.T)"
TestIsContainerized( ${1:t *testing.T})
endsnippet

snippet TestIsDirectory "TestIsDirectory(t *testing.T)"
TestIsDirectory( ${1:t *testing.T})
endsnippet

snippet TestIsGIT "TestIsGIT(t *testing.T)"
TestIsGIT( ${1:t *testing.T})
endsnippet

snippet TestIsSecure "TestIsSecure(t *testing.T)"
TestIsSecure( ${1:t *testing.T})
endsnippet

snippet TestIsUrl "TestIsUrl(t *testing.T)"
TestIsUrl( ${1:t *testing.T})
endsnippet

snippet TestIssue5770 "TestIssue5770(t *testing.T)"
TestIssue5770( ${1:t *testing.T})
endsnippet

snippet TestIssue5815 "TestIssue5815(t *testing.T)"
TestIssue5815( ${1:t *testing.T})
endsnippet

snippet TestIssue5849 "TestIssue5849(t *testing.T)"
TestIssue5849( ${1:t *testing.T})
endsnippet

snippet TestIssue6413 "TestIssue6413(t *testing.T)"
TestIssue6413( ${1:t *testing.T})
endsnippet

snippet TestIssue7245 "TestIssue7245(t *testing.T)"
TestIssue7245( ${1:t *testing.T})
endsnippet

snippet TestIssue7827 "TestIssue7827(t *testing.T)"
TestIssue7827( ${1:t *testing.T})
endsnippet

snippet TestIssue836 "TestIssue836(t *testing.T)"
TestIssue836( ${1:t *testing.T})
endsnippet

snippet TestIssue8518 "TestIssue8518(t *testing.T)"
TestIssue8518( ${1:t *testing.T})
endsnippet

snippet TestIteration "TestIteration(t *testing.T)"
TestIteration( ${1:t *testing.T})
endsnippet

snippet TestJSONP "TestJSONP(t *testing.T)"
TestJSONP( ${1:t *testing.T})
endsnippet

snippet TestJob "TestJob(t *testing.T)"
TestJob( ${1:t *testing.T})
endsnippet

snippet TestJobStatusErr "TestJobStatusErr(t *testing.T)"
TestJobStatusErr( ${1:t *testing.T})
endsnippet

snippet TestJobStatusNotFound "TestJobStatusNotFound(t *testing.T)"
TestJobStatusNotFound( ${1:t *testing.T})
endsnippet

snippet TestJobStatusOK "TestJobStatusOK(t *testing.T)"
TestJobStatusOK( ${1:t *testing.T})
endsnippet

snippet TestJobStderrString "TestJobStderrString(t *testing.T)"
TestJobStderrString( ${1:t *testing.T})
endsnippet

snippet TestJobStdoutString "TestJobStdoutString(t *testing.T)"
TestJobStdoutString( ${1:t *testing.T})
endsnippet

snippet TestJoinAllianceReq "TestJoinAllianceReq(t *testing.T)"
TestJoinAllianceReq( ${1:t *testing.T})
endsnippet

snippet TestJoinCountryReq "TestJoinCountryReq(t *testing.T)"
TestJoinCountryReq( ${1:t *testing.T})
endsnippet

snippet TestJson "TestJson(t *testing.T)"
TestJson( ${1:t *testing.T})
endsnippet

snippet TestJsonContentType "TestJsonContentType(t *testing.T)"
TestJsonContentType( ${1:t *testing.T})
endsnippet

snippet TestKeepContext "TestKeepContext(t *testing.T)"
TestKeepContext( ${1:t *testing.T})
endsnippet

snippet TestKeyFiles "TestKeyFiles(t *testing.T)"
TestKeyFiles( ${1:t *testing.T})
endsnippet

snippet TestKeyValue1 "TestKeyValue1(t *testing.T)"
TestKeyValue1( ${1:t *testing.T})
endsnippet

snippet TestKillContainer "TestKillContainer(t *testing.T)"
TestKillContainer( ${1:t *testing.T})
endsnippet

snippet TestKillContainerNotFound "TestKillContainerNotFound(t *testing.T)"
TestKillContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestKillContainerSignal "TestKillContainerSignal(t *testing.T)"
TestKillContainerSignal( ${1:t *testing.T})
endsnippet

snippet TestKillDifferentUserContainer "TestKillDifferentUserContainer(t *testing.T)"
TestKillDifferentUserContainer( ${1:t *testing.T})
endsnippet

snippet TestKnown "TestKnown(t *testing.T)"
TestKnown( ${1:t *testing.T})
endsnippet

snippet TestKvmsg "TestKvmsg(t *testing.T)"
TestKvmsg( ${1:t *testing.T})
endsnippet

snippet TestLCG "TestLCG(t *testing.T)"
TestLCG( ${1:t *testing.T})
endsnippet

snippet TestLUtimesNano "TestLUtimesNano(t *testing.T)"
TestLUtimesNano( ${1:t *testing.T})
endsnippet

snippet TestLXCConfig "TestLXCConfig(t *testing.T)"
TestLXCConfig( ${1:t *testing.T})
endsnippet

snippet TestLargeByteReads "TestLargeByteReads(t *testing.T)"
TestLargeByteReads( ${1:t *testing.T})
endsnippet

snippet TestLargeByteWrites "TestLargeByteWrites(t *testing.T)"
TestLargeByteWrites( ${1:t *testing.T})
endsnippet

snippet TestLargeDictionary "TestLargeDictionary(t *testing.T)"
TestLargeDictionary( ${1:t *testing.T})
endsnippet

snippet TestLargeStringReads "TestLargeStringReads(t *testing.T)"
TestLargeStringReads( ${1:t *testing.T})
endsnippet

snippet TestLargeStringWrites "TestLargeStringWrites(t *testing.T)"
TestLargeStringWrites( ${1:t *testing.T})
endsnippet

snippet TestLatency "TestLatency(t *testing.T)"
TestLatency( ${1:t *testing.T})
endsnippet

snippet TestLayersCancel "TestLayersCancel(t *testing.T)"
TestLayersCancel( ${1:t *testing.T})
endsnippet

snippet TestLayersTimeout "TestLayersTimeout(t *testing.T)"
TestLayersTimeout( ${1:t *testing.T})
endsnippet

snippet TestLimitListener "TestLimitListener(t *testing.T)"
TestLimitListener( ${1:t *testing.T})
endsnippet

snippet TestLimitListenerError "TestLimitListenerError(t *testing.T)"
TestLimitListenerError( ${1:t *testing.T})
endsnippet

snippet TestLine "TestLine(t *testing.T)"
TestLine( ${1:t *testing.T})
endsnippet

snippet TestLineComments "TestLineComments(t *testing.T)"
TestLineComments( ${1:t *testing.T})
endsnippet

snippet TestLineInfo "TestLineInfo(t *testing.T)"
TestLineInfo( ${1:t *testing.T})
endsnippet

snippet TestLineTooLong "TestLineTooLong(t *testing.T)"
TestLineTooLong( ${1:t *testing.T})
endsnippet

snippet TestLines "TestLines(t *testing.T)"
TestLines( ${1:t *testing.T})
endsnippet

snippet TestLinesAfterRead "TestLinesAfterRead(t *testing.T)"
TestLinesAfterRead( ${1:t *testing.T})
endsnippet

snippet TestLink "TestLink(t *testing.T)"
TestLink( ${1:t *testing.T})
endsnippet

snippet TestLinkChildContainer "TestLinkChildContainer(t *testing.T)"
TestLinkChildContainer( ${1:t *testing.T})
endsnippet

snippet TestLinkContainers "TestLinkContainers(t *testing.T)"
TestLinkContainers( ${1:t *testing.T})
endsnippet

snippet TestLinkEnv "TestLinkEnv(t *testing.T)"
TestLinkEnv( ${1:t *testing.T})
endsnippet

snippet TestLinkMultipleEnv "TestLinkMultipleEnv(t *testing.T)"
TestLinkMultipleEnv( ${1:t *testing.T})
endsnippet

snippet TestLinkNaming "TestLinkNaming(t *testing.T)"
TestLinkNaming( ${1:t *testing.T})
endsnippet

snippet TestLinkNew "TestLinkNew(t *testing.T)"
TestLinkNew( ${1:t *testing.T})
endsnippet

snippet TestLinksEtcHostsContentMatch "TestLinksEtcHostsContentMatch(t *testing.T)"
TestLinksEtcHostsContentMatch( ${1:t *testing.T})
endsnippet

snippet TestLinksEtcHostsRegularFile "TestLinksEtcHostsRegularFile(t *testing.T)"
TestLinksEtcHostsRegularFile( ${1:t *testing.T})
endsnippet

snippet TestLinksHostsFilesInject "TestLinksHostsFilesInject(t *testing.T)"
TestLinksHostsFilesInject( ${1:t *testing.T})
endsnippet

snippet TestLinksInspectLinksStarted "TestLinksInspectLinksStarted(t *testing.T)"
TestLinksInspectLinksStarted( ${1:t *testing.T})
endsnippet

snippet TestLinksInspectLinksStopped "TestLinksInspectLinksStopped(t *testing.T)"
TestLinksInspectLinksStopped( ${1:t *testing.T})
endsnippet

snippet TestLinksIpTablesRulesWhenLinkAndUnlink "TestLinksIpTablesRulesWhenLinkAndUnlink(t *testing.T)"
TestLinksIpTablesRulesWhenLinkAndUnlink( ${1:t *testing.T})
endsnippet

snippet TestLinksNetworkHostContainer "TestLinksNetworkHostContainer(t *testing.T)"
TestLinksNetworkHostContainer( ${1:t *testing.T})
endsnippet

snippet TestLinksNotStartedParentNotFail "TestLinksNotStartedParentNotFail(t *testing.T)"
TestLinksNotStartedParentNotFail( ${1:t *testing.T})
endsnippet

snippet TestLinksPingLinkedContainers "TestLinksPingLinkedContainers(t *testing.T)"
TestLinksPingLinkedContainers( ${1:t *testing.T})
endsnippet

snippet TestLinksPingUnlinkedContainers "TestLinksPingUnlinkedContainers(t *testing.T)"
TestLinksPingUnlinkedContainers( ${1:t *testing.T})
endsnippet

snippet TestLintName "TestLintName(t *testing.T)"
TestLintName( ${1:t *testing.T})
endsnippet

snippet TestListAllRootChildren "TestListAllRootChildren(t *testing.T)"
TestListAllRootChildren( ${1:t *testing.T})
endsnippet

snippet TestListAllSubChildren "TestListAllSubChildren(t *testing.T)"
TestListAllSubChildren( ${1:t *testing.T})
endsnippet

snippet TestListContainers "TestListContainers(t *testing.T)"
TestListContainers( ${1:t *testing.T})
endsnippet

snippet TestListContainersFailure "TestListContainersFailure(t *testing.T)"
TestListContainersFailure( ${1:t *testing.T})
endsnippet

snippet TestListContainersParams "TestListContainersParams(t *testing.T)"
TestListContainersParams( ${1:t *testing.T})
endsnippet

snippet TestListContainersWithFilters "TestListContainersWithFilters(t *testing.T)"
TestListContainersWithFilters( ${1:t *testing.T})
endsnippet

snippet TestListContainersWithSize "TestListContainersWithSize(t *testing.T)"
TestListContainersWithSize( ${1:t *testing.T})
endsnippet

snippet TestListImages "TestListImages(t *testing.T)"
TestListImages( ${1:t *testing.T})
endsnippet

snippet TestListImagesParameters "TestListImagesParameters(t *testing.T)"
TestListImagesParameters( ${1:t *testing.T})
endsnippet

snippet TestListOpts "TestListOpts(t *testing.T)"
TestListOpts( ${1:t *testing.T})
endsnippet

snippet TestListRunningContainers "TestListRunningContainers(t *testing.T)"
TestListRunningContainers( ${1:t *testing.T})
endsnippet

snippet TestListeners "TestListeners(t *testing.T)"
TestListeners( ${1:t *testing.T})
endsnippet

snippet TestLoadAreaFromDb "TestLoadAreaFromDb(x, y T_coordinate, server_id int32)"
TestLoadAreaFromDb( ${1:x}, ${2:y T_coordinate}, ${3:server_id int32})
endsnippet

snippet TestLoadCertificates "TestLoadCertificates(t *testing.T)"
TestLoadCertificates( ${1:t *testing.T})
endsnippet

snippet TestLoadFromArgs "TestLoadFromArgs(t *testing.T)"
TestLoadFromArgs( ${1:t *testing.T})
endsnippet

snippet TestLoadFromArgsSource "TestLoadFromArgsSource(t *testing.T)"
TestLoadFromArgsSource( ${1:t *testing.T})
endsnippet

snippet TestLoadImage "TestLoadImage(t *testing.T)"
TestLoadImage( ${1:t *testing.T})
endsnippet

snippet TestLoadManual "TestLoadManual(t *testing.T)"
TestLoadManual( ${1:t *testing.T})
endsnippet

snippet TestLoadStatement "TestLoadStatement(t *testing.T)"
TestLoadStatement( ${1:t *testing.T})
endsnippet

snippet TestLocalTimezone "TestLocalTimezone(t *testing.T)"
TestLocalTimezone( ${1:t *testing.T})
endsnippet

snippet TestLocalhostAddAndPrint "TestLocalhostAddAndPrint(t *testing.T)"
TestLocalhostAddAndPrint( ${1:t *testing.T})
endsnippet

snippet TestLocation "TestLocation(t *testing.T)"
TestLocation( ${1:t *testing.T})
endsnippet

snippet TestLockFileLock "TestLockFileLock(test *testing.T)"
TestLockFileLock( ${1:test *testing.T})
endsnippet

snippet TestLogEvents "TestLogEvents(t *testing.T)"
TestLogEvents( ${1:t *testing.T})
endsnippet

snippet TestLoginUser "TestLoginUser(t *testing.T)"
TestLoginUser( ${1:t *testing.T})
endsnippet

snippet TestLoginWithoutTTY "TestLoginWithoutTTY(t *testing.T)"
TestLoginWithoutTTY( ${1:t *testing.T})
endsnippet

snippet TestLogs "TestLogs(t *testing.T)"
TestLogs( ${1:t *testing.T})
endsnippet

snippet TestLogsContainerBiggerThanPage "TestLogsContainerBiggerThanPage(t *testing.T)"
TestLogsContainerBiggerThanPage( ${1:t *testing.T})
endsnippet

snippet TestLogsContainerMuchBiggerThanPage "TestLogsContainerMuchBiggerThanPage(t *testing.T)"
TestLogsContainerMuchBiggerThanPage( ${1:t *testing.T})
endsnippet

snippet TestLogsContainerSmallerThanPage "TestLogsContainerSmallerThanPage(t *testing.T)"
TestLogsContainerSmallerThanPage( ${1:t *testing.T})
endsnippet

snippet TestLogsFollowSlowStdoutConsumer "TestLogsFollowSlowStdoutConsumer(t *testing.T)"
TestLogsFollowSlowStdoutConsumer( ${1:t *testing.T})
endsnippet

snippet TestLogsFollowStopped "TestLogsFollowStopped(t *testing.T)"
TestLogsFollowStopped( ${1:t *testing.T})
endsnippet

snippet TestLogsNilStderrDoesntFail "TestLogsNilStderrDoesntFail(t *testing.T)"
TestLogsNilStderrDoesntFail( ${1:t *testing.T})
endsnippet

snippet TestLogsNilStdoutDoesntFail "TestLogsNilStdoutDoesntFail(t *testing.T)"
TestLogsNilStdoutDoesntFail( ${1:t *testing.T})
endsnippet

snippet TestLogsNoContainer "TestLogsNoContainer(t *testing.T)"
TestLogsNoContainer( ${1:t *testing.T})
endsnippet

snippet TestLogsNoStreams "TestLogsNoStreams(t *testing.T)"
TestLogsNoStreams( ${1:t *testing.T})
endsnippet

snippet TestLogsRawTerminal "TestLogsRawTerminal(t *testing.T)"
TestLogsRawTerminal( ${1:t *testing.T})
endsnippet

snippet TestLogsSeparateStderr "TestLogsSeparateStderr(t *testing.T)"
TestLogsSeparateStderr( ${1:t *testing.T})
endsnippet

snippet TestLogsSpecifyingTail "TestLogsSpecifyingTail(t *testing.T)"
TestLogsSpecifyingTail( ${1:t *testing.T})
endsnippet

snippet TestLogsStderrInStdout "TestLogsStderrInStdout(t *testing.T)"
TestLogsStderrInStdout( ${1:t *testing.T})
endsnippet

snippet TestLogsTail "TestLogsTail(t *testing.T)"
TestLogsTail( ${1:t *testing.T})
endsnippet

snippet TestLogsTimestamps "TestLogsTimestamps(t *testing.T)"
TestLogsTimestamps( ${1:t *testing.T})
endsnippet

snippet TestLongNumbers "TestLongNumbers(t *testing.T)"
TestLongNumbers( ${1:t *testing.T})
endsnippet

snippet TestLongNumbersArray "TestLongNumbersArray(t *testing.T)"
TestLongNumbersArray( ${1:t *testing.T})
endsnippet

snippet TestLookupFieldOrMethod "TestLookupFieldOrMethod(t *testing.T)"
TestLookupFieldOrMethod( ${1:t *testing.T})
endsnippet

snippet TestLookupImage "TestLookupImage(t *testing.T)"
TestLookupImage( ${1:t *testing.T})
endsnippet

snippet TestLookupRemoteImage "TestLookupRemoteImage(t *testing.T)"
TestLookupRemoteImage( ${1:t *testing.T})
endsnippet

snippet TestLooper "TestLooper(t *testing.T)"
TestLooper( ${1:t *testing.T})
endsnippet

snippet TestLstat "TestLstat(t *testing.T)"
TestLstat( ${1:t *testing.T})
endsnippet

snippet TestLvSpeedUpArmyReq "TestLvSpeedUpArmyReq(t *testing.T)"
TestLvSpeedUpArmyReq( ${1:t *testing.T})
endsnippet

snippet TestLvUpArmyReq "TestLvUpArmyReq(t *testing.T)"
TestLvUpArmyReq( ${1:t *testing.T})
endsnippet

snippet TestMacAddrGeneration "TestMacAddrGeneration(t *testing.T)"
TestMacAddrGeneration( ${1:t *testing.T})
endsnippet

snippet TestMakeRx "TestMakeRx(t *testing.T)"
TestMakeRx( ${1:t *testing.T})
endsnippet

snippet TestMap "TestMap(t *testing.T)"
TestMap( ${1:t *testing.T})
endsnippet

snippet TestMapAllPortsSingleInterface "TestMapAllPortsSingleInterface(t *testing.T)"
TestMapAllPortsSingleInterface( ${1:t *testing.T})
endsnippet

snippet TestMapPorts "TestMapPorts(t *testing.T)"
TestMapPorts( ${1:t *testing.T})
endsnippet

snippet TestMarshalAndParseMessageForIPv4 "TestMarshalAndParseMessageForIPv4(t *testing.T)"
TestMarshalAndParseMessageForIPv4( ${1:t *testing.T})
endsnippet

snippet TestMarshalAndParseMessageForIPv6 "TestMarshalAndParseMessageForIPv6(t *testing.T)"
TestMarshalAndParseMessageForIPv6( ${1:t *testing.T})
endsnippet

snippet TestMarshalHeader "TestMarshalHeader(t *testing.T)"
TestMarshalHeader( ${1:t *testing.T})
endsnippet

snippet TestMarshalUnmarshalECKeys "TestMarshalUnmarshalECKeys(t *testing.T)"
TestMarshalUnmarshalECKeys( ${1:t *testing.T})
endsnippet

snippet TestMarshalUnmarshalRSAKeys "TestMarshalUnmarshalRSAKeys(t *testing.T)"
TestMarshalUnmarshalRSAKeys( ${1:t *testing.T})
endsnippet

snippet TestMask "TestMask(t *testing.T)"
TestMask( ${1:t *testing.T})
endsnippet

snippet TestMaskFunc "TestMaskFunc(t *testing.T)"
TestMaskFunc( ${1:t *testing.T})
endsnippet

snippet TestMatch "TestMatch(t *testing.T)"
TestMatch( ${1:t *testing.T})
endsnippet

snippet TestMatchedRouteName "TestMatchedRouteName(t *testing.T)"
TestMatchedRouteName( ${1:t *testing.T})
endsnippet

snippet TestMatcherFunc "TestMatcherFunc(t *testing.T)"
TestMatcherFunc( ${1:t *testing.T})
endsnippet

snippet TestMaxBuffer "TestMaxBuffer(t *testing.T)"
TestMaxBuffer( ${1:t *testing.T})
endsnippet

snippet TestMaxBufferReconstruction "TestMaxBufferReconstruction(t *testing.T)"
TestMaxBufferReconstruction( ${1:t *testing.T})
endsnippet

snippet TestMaxColWidth "TestMaxColWidth(t *testing.T)"
TestMaxColWidth( ${1:t *testing.T})
endsnippet

snippet TestMemInfo "TestMemInfo(t *testing.T)"
TestMemInfo( ${1:t *testing.T})
endsnippet

snippet TestMemoryStats "TestMemoryStats(t *testing.T)"
TestMemoryStats( ${1:t *testing.T})
endsnippet

snippet TestMemoryStatsBadMaxUsageFile "TestMemoryStatsBadMaxUsageFile(t *testing.T)"
TestMemoryStatsBadMaxUsageFile( ${1:t *testing.T})
endsnippet

snippet TestMemoryStatsBadStatFile "TestMemoryStatsBadStatFile(t *testing.T)"
TestMemoryStatsBadStatFile( ${1:t *testing.T})
endsnippet

snippet TestMemoryStatsBadUsageFile "TestMemoryStatsBadUsageFile(t *testing.T)"
TestMemoryStatsBadUsageFile( ${1:t *testing.T})
endsnippet

snippet TestMemoryStatsNoMaxUsageFile "TestMemoryStatsNoMaxUsageFile(t *testing.T)"
TestMemoryStatsNoMaxUsageFile( ${1:t *testing.T})
endsnippet

snippet TestMemoryStatsNoStatFile "TestMemoryStatsNoStatFile(t *testing.T)"
TestMemoryStatsNoStatFile( ${1:t *testing.T})
endsnippet

snippet TestMemoryStatsNoUsageFile "TestMemoryStatsNoUsageFile(t *testing.T)"
TestMemoryStatsNoUsageFile( ${1:t *testing.T})
endsnippet

snippet TestMerge "TestMerge(t *testing.T)"
TestMerge( ${1:t *testing.T})
endsnippet

snippet TestMergeConfigOnCommit "TestMergeConfigOnCommit(t *testing.T)"
TestMergeConfigOnCommit( ${1:t *testing.T})
endsnippet

snippet TestMergeLxcConfig "TestMergeLxcConfig(t *testing.T)"
TestMergeLxcConfig( ${1:t *testing.T})
endsnippet

snippet TestMergePAX "TestMergePAX(t *testing.T)"
TestMergePAX( ${1:t *testing.T})
endsnippet

snippet TestMessage "TestMessage(t *testing.T)"
TestMessage( ${1:t *testing.T})
endsnippet

snippet TestMessageMemory "TestMessageMemory(t *testing.T)"
TestMessageMemory( ${1:t *testing.T})
endsnippet

snippet TestMethodMatcher "TestMethodMatcher(t *testing.T)"
TestMethodMatcher( ${1:t *testing.T})
endsnippet

snippet TestMethods "TestMethods(t *testing.T)"
TestMethods( ${1:t *testing.T})
endsnippet

snippet TestMinAndMax "TestMinAndMax(t *testing.T)"
TestMinAndMax( ${1:t *testing.T})
endsnippet

snippet TestMisses "TestMisses(t *testing.T)"
TestMisses( ${1:t *testing.T})
endsnippet

snippet TestMixedReadsAndWrites "TestMixedReadsAndWrites(t *testing.T)"
TestMixedReadsAndWrites( ${1:t *testing.T})
endsnippet

snippet TestMock "TestMock(t *testing.T)"
TestMock( ${1:t *testing.T})
endsnippet

snippet TestMockInterface "TestMockInterface(t *testing.T)"
TestMockInterface( ${1:t *testing.T})
endsnippet

snippet TestMongo "TestMongo(t *testing.T)"
TestMongo( ${1:t *testing.T})
endsnippet

snippet TestMonitor "TestMonitor(t *testing.T)"
TestMonitor( ${1:t *testing.T})
endsnippet

snippet TestMoreBasics "TestMoreBasics(t *testing.T)"
TestMoreBasics( ${1:t *testing.T})
endsnippet

snippet TestMount "TestMount(t *testing.T)"
TestMount( ${1:t *testing.T})
endsnippet

snippet TestMountMoreThan42Layers "TestMountMoreThan42Layers(t *testing.T)"
TestMountMoreThan42Layers( ${1:t *testing.T})
endsnippet

snippet TestMountMoreThan42LayersMatchingPathLength "TestMountMoreThan42LayersMatchingPathLength(t *testing.T)"
TestMountMoreThan42LayersMatchingPathLength( ${1:t *testing.T})
endsnippet

snippet TestMountOptionsParsing "TestMountOptionsParsing(t *testing.T)"
TestMountOptionsParsing( ${1:t *testing.T})
endsnippet

snippet TestMountReadonly "TestMountReadonly(t *testing.T)"
TestMountReadonly( ${1:t *testing.T})
endsnippet

snippet TestMountWithParent "TestMountWithParent(t *testing.T)"
TestMountWithParent( ${1:t *testing.T})
endsnippet

snippet TestMounted "TestMounted(t *testing.T)"
TestMounted( ${1:t *testing.T})
endsnippet

snippet TestMountedFalseResponse "TestMountedFalseResponse(t *testing.T)"
TestMountedFalseResponse( ${1:t *testing.T})
endsnippet

snippet TestMountedTrueReponse "TestMountedTrueReponse(t *testing.T)"
TestMountedTrueReponse( ${1:t *testing.T})
endsnippet

snippet TestMsgpackAll "TestMsgpackAll(t *testing.T)"
TestMsgpackAll( ${1:t *testing.T})
endsnippet

snippet TestMsgpackAllExperimental "TestMsgpackAllExperimental(t *testing.T)"
TestMsgpackAllExperimental( ${1:t *testing.T})
endsnippet

snippet TestMsgpackCodecsEmbeddedPointer "TestMsgpackCodecsEmbeddedPointer(t *testing.T)"
TestMsgpackCodecsEmbeddedPointer( ${1:t *testing.T})
endsnippet

snippet TestMsgpackCodecsMisc "TestMsgpackCodecsMisc(t *testing.T)"
TestMsgpackCodecsMisc( ${1:t *testing.T})
endsnippet

snippet TestMsgpackCodecsTable "TestMsgpackCodecsTable(t *testing.T)"
TestMsgpackCodecsTable( ${1:t *testing.T})
endsnippet

snippet TestMsgpackDecodePtr "TestMsgpackDecodePtr(t *testing.T)"
TestMsgpackDecodePtr( ${1:t *testing.T})
endsnippet

snippet TestMsgpackDecodeStructSubset "TestMsgpackDecodeStructSubset(t *testing.T)"
TestMsgpackDecodeStructSubset( ${1:t *testing.T})
endsnippet

snippet TestMsgpackIntfDecode "TestMsgpackIntfDecode(t *testing.T)"
TestMsgpackIntfDecode( ${1:t *testing.T})
endsnippet

snippet TestMsgpackNilIntf "TestMsgpackNilIntf(t *testing.T)"
TestMsgpackNilIntf( ${1:t *testing.T})
endsnippet

snippet TestMsgpackNilStringMap "TestMsgpackNilStringMap(t *testing.T)"
TestMsgpackNilStringMap( ${1:t *testing.T})
endsnippet

snippet TestMsgpackPythonGenStreams "TestMsgpackPythonGenStreams(t *testing.T)"
TestMsgpackPythonGenStreams( ${1:t *testing.T})
endsnippet

snippet TestMsgpackRpcGo "TestMsgpackRpcGo(t *testing.T)"
TestMsgpackRpcGo( ${1:t *testing.T})
endsnippet

snippet TestMsgpackRpcSpec "TestMsgpackRpcSpec(t *testing.T)"
TestMsgpackRpcSpec( ${1:t *testing.T})
endsnippet

snippet TestMsgpackRpcSpecGoClientToPythonSvc "TestMsgpackRpcSpecGoClientToPythonSvc(t *testing.T)"
TestMsgpackRpcSpecGoClientToPythonSvc( ${1:t *testing.T})
endsnippet

snippet TestMsgpackRpcSpecPythonClientToGoSvc "TestMsgpackRpcSpecPythonClientToGoSvc(t *testing.T)"
TestMsgpackRpcSpecPythonClientToGoSvc( ${1:t *testing.T})
endsnippet

snippet TestMsgpacks "TestMsgpacks(t *testing.T)"
TestMsgpacks( ${1:t *testing.T})
endsnippet

snippet TestMsgpacksNilIntf "TestMsgpacksNilIntf(t *testing.T)"
TestMsgpacksNilIntf( ${1:t *testing.T})
endsnippet

snippet TestMsgpacksNilStringMap "TestMsgpacksNilStringMap(t *testing.T)"
TestMsgpacksNilStringMap( ${1:t *testing.T})
endsnippet

snippet TestMultiByteString "TestMultiByteString(t *testing.T)"
TestMultiByteString( ${1:t *testing.T})
endsnippet

snippet TestMultiFileInitOrder "TestMultiFileInitOrder(t *testing.T)"
TestMultiFileInitOrder( ${1:t *testing.T})
endsnippet

snippet TestMultiMap "TestMultiMap(t *testing.T)"
TestMultiMap( ${1:t *testing.T})
endsnippet

snippet TestMultipart "TestMultipart(t *testing.T)"
TestMultipart( ${1:t *testing.T})
endsnippet

snippet TestMultipartForm "TestMultipartForm(t *testing.T)"
TestMultipartForm( ${1:t *testing.T})
endsnippet

snippet TestMultipleAttributes "TestMultipleAttributes(t *testing.T)"
TestMultipleAttributes( ${1:t *testing.T})
endsnippet

snippet TestMultipleEntries "TestMultipleEntries(t *testing.T)"
TestMultipleEntries( ${1:t *testing.T})
endsnippet

snippet TestMultipleQueries "TestMultipleQueries(t *testing.T)"
TestMultipleQueries( ${1:t *testing.T})
endsnippet

snippet TestMultipleSPDYFrames "TestMultipleSPDYFrames(t *testing.T)"
TestMultipleSPDYFrames( ${1:t *testing.T})
endsnippet

snippet TestMutateContainer "TestMutateContainer(t *testing.T)"
TestMutateContainer( ${1:t *testing.T})
endsnippet

snippet TestMutateContainerNotFound "TestMutateContainerNotFound(t *testing.T)"
TestMutateContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestNLZ "TestNLZ(t *testing.T)"
TestNLZ( ${1:t *testing.T})
endsnippet

snippet TestNamedRoutes "TestNamedRoutes(t *testing.T)"
TestNamedRoutes( ${1:t *testing.T})
endsnippet

snippet TestNames "TestNames(t *testing.T)"
TestNames( ${1:t *testing.T})
endsnippet

snippet TestNaming "TestNaming(t *testing.T)"
TestNaming( ${1:t *testing.T})
endsnippet

snippet TestNegativeRead "TestNegativeRead(t *testing.T)"
TestNegativeRead( ${1:t *testing.T})
endsnippet

snippet TestNetHostname "TestNetHostname(t *testing.T)"
TestNetHostname( ${1:t *testing.T})
endsnippet

snippet TestNetPipe "TestNetPipe(t *testing.T)"
TestNetPipe( ${1:t *testing.T})
endsnippet

snippet TestNetworkChangeName "TestNetworkChangeName(t *testing.T)"
TestNetworkChangeName( ${1:t *testing.T})
endsnippet

snippet TestNetworkLinkAddDel "TestNetworkLinkAddDel(t *testing.T)"
TestNetworkLinkAddDel( ${1:t *testing.T})
endsnippet

snippet TestNetworkLinkAddMacVlan "TestNetworkLinkAddMacVlan(t *testing.T)"
TestNetworkLinkAddMacVlan( ${1:t *testing.T})
endsnippet

snippet TestNetworkLinkAddMacVtap "TestNetworkLinkAddMacVtap(t *testing.T)"
TestNetworkLinkAddMacVtap( ${1:t *testing.T})
endsnippet

snippet TestNetworkLinkAddVlan "TestNetworkLinkAddVlan(t *testing.T)"
TestNetworkLinkAddVlan( ${1:t *testing.T})
endsnippet

snippet TestNetworkLinkUpDown "TestNetworkLinkUpDown(t *testing.T)"
TestNetworkLinkUpDown( ${1:t *testing.T})
endsnippet

snippet TestNetworkNat "TestNetworkNat(t *testing.T)"
TestNetworkNat( ${1:t *testing.T})
endsnippet

snippet TestNetworkOverlaps "TestNetworkOverlaps(t *testing.T)"
TestNetworkOverlaps( ${1:t *testing.T})
endsnippet

snippet TestNetworkRange "TestNetworkRange(t *testing.T)"
TestNetworkRange( ${1:t *testing.T})
endsnippet

snippet TestNetworkSetMTU "TestNetworkSetMTU(t *testing.T)"
TestNetworkSetMTU( ${1:t *testing.T})
endsnippet

snippet TestNetworkSetMacAddress "TestNetworkSetMacAddress(t *testing.T)"
TestNetworkSetMacAddress( ${1:t *testing.T})
endsnippet

snippet TestNetworkSetMasterNoMaster "TestNetworkSetMasterNoMaster(t *testing.T)"
TestNetworkSetMasterNoMaster( ${1:t *testing.T})
endsnippet

snippet TestNeverRestart "TestNeverRestart(t *testing.T)"
TestNeverRestart( ${1:t *testing.T})
endsnippet

snippet TestNew "TestNew(t *testing.T)"
TestNew( ${1:t *testing.T})
endsnippet

snippet TestNewAPIClient "TestNewAPIClient(t *testing.T)"
TestNewAPIClient( ${1:t *testing.T})
endsnippet

snippet TestNewAPIVersionFailures "TestNewAPIVersionFailures(t *testing.T)"
TestNewAPIVersionFailures( ${1:t *testing.T})
endsnippet

snippet TestNewBuffer "TestNewBuffer(t *testing.T)"
TestNewBuffer( ${1:t *testing.T})
endsnippet

snippet TestNewBufferString "TestNewBufferString(t *testing.T)"
TestNewBufferString( ${1:t *testing.T})
endsnippet

snippet TestNewChain "TestNewChain(t *testing.T)"
TestNewChain( ${1:t *testing.T})
endsnippet

snippet TestNewClientInvalidEndpoint "TestNewClientInvalidEndpoint(t *testing.T)"
TestNewClientInvalidEndpoint( ${1:t *testing.T})
endsnippet

snippet TestNewDatabase "TestNewDatabase(t *testing.T)"
TestNewDatabase( ${1:t *testing.T})
endsnippet

snippet TestNewDriver "TestNewDriver(t *testing.T)"
TestNewDriver( ${1:t *testing.T})
endsnippet

snippet TestNewDriverFromExistingDir "TestNewDriverFromExistingDir(t *testing.T)"
TestNewDriverFromExistingDir( ${1:t *testing.T})
endsnippet

snippet TestNewHero "TestNewHero(t *testing.T)"
TestNewHero( ${1:t *testing.T})
endsnippet

snippet TestNewJob "TestNewJob(t *testing.T)"
TestNewJob( ${1:t *testing.T})
endsnippet

snippet TestNewLockFile "TestNewLockFile(test *testing.T)"
TestNewLockFile( ${1:test *testing.T})
endsnippet

snippet TestNewReaderSizeIdempotent "TestNewReaderSizeIdempotent(t *testing.T)"
TestNewReaderSizeIdempotent( ${1:t *testing.T})
endsnippet

snippet TestNewRegexp "TestNewRegexp(t *testing.T)"
TestNewRegexp( ${1:t *testing.T})
endsnippet

snippet TestNewServer "TestNewServer(t *testing.T)"
TestNewServer( ${1:t *testing.T})
endsnippet

snippet TestNewTLSClient2376 "TestNewTLSClient2376(t *testing.T)"
TestNewTLSClient2376( ${1:t *testing.T})
endsnippet

snippet TestNewTLSVersionedClient "TestNewTLSVersionedClient(t *testing.T)"
TestNewTLSVersionedClient( ${1:t *testing.T})
endsnippet

snippet TestNewTLSVersionedClientInvalidCA "TestNewTLSVersionedClientInvalidCA(t *testing.T)"
TestNewTLSVersionedClientInvalidCA( ${1:t *testing.T})
endsnippet

snippet TestNewTSLAPIClient "TestNewTSLAPIClient(t *testing.T)"
TestNewTSLAPIClient( ${1:t *testing.T})
endsnippet

snippet TestNewVersionedClient "TestNewVersionedClient(t *testing.T)"
TestNewVersionedClient( ${1:t *testing.T})
endsnippet

snippet TestNewWriterSizeIdempotent "TestNewWriterSizeIdempotent(t *testing.T)"
TestNewWriterSizeIdempotent( ${1:t *testing.T})
endsnippet

snippet TestNewf "TestNewf(t *testing.T)"
TestNewf( ${1:t *testing.T})
endsnippet

snippet TestNext "TestNext(t *testing.T)"
TestNext( ${1:t *testing.T})
endsnippet

snippet TestNil "TestNil(t *testing.T)"
TestNil( ${1:t *testing.T})
endsnippet

snippet TestNoCpuStatFile "TestNoCpuStatFile(t *testing.T)"
TestNoCpuStatFile( ${1:t *testing.T})
endsnippet

snippet TestNoDuplicateBPR "TestNoDuplicateBPR(t *testing.T)"
TestNoDuplicateBPR( ${1:t *testing.T})
endsnippet

snippet TestNoEntries "TestNoEntries(t *testing.T)"
TestNoEntries( ${1:t *testing.T})
endsnippet

snippet TestNoPos "TestNoPos(t *testing.T)"
TestNoPos( ${1:t *testing.T})
endsnippet

snippet TestNoRoute "TestNoRoute(t *testing.T)"
TestNoRoute( ${1:t *testing.T})
endsnippet

snippet TestNoSuchContainerError "TestNoSuchContainerError(t *testing.T)"
TestNoSuchContainerError( ${1:t *testing.T})
endsnippet

snippet TestNoZeroStreamId "TestNoZeroStreamId(t *testing.T)"
TestNoZeroStreamId( ${1:t *testing.T})
endsnippet

snippet TestNodeConsistency "TestNodeConsistency(t *testing.T)"
TestNodeConsistency( ${1:t *testing.T})
endsnippet

snippet TestNodeLabel "TestNodeLabel(t *testing.T)"
TestNodeLabel( ${1:t *testing.T})
endsnippet

snippet TestNonCFQBlkioStats "TestNonCFQBlkioStats(t *testing.T)"
TestNonCFQBlkioStats( ${1:t *testing.T})
endsnippet

snippet TestNonOverlapingNameservers "TestNonOverlapingNameservers(t *testing.T)"
TestNonOverlapingNameservers( ${1:t *testing.T})
endsnippet

snippet TestNonSeekable "TestNonSeekable(t *testing.T)"
TestNonSeekable( ${1:t *testing.T})
endsnippet

snippet TestNonUrlEncodedFind "TestNonUrlEncodedFind(t *testing.T)"
TestNonUrlEncodedFind( ${1:t *testing.T})
endsnippet

snippet TestNotUseHeroReq "TestNotUseHeroReq(t *testing.T)"
TestNotUseHeroReq( ${1:t *testing.T})
endsnippet

snippet TestNotef "TestNotef(t *testing.T)"
TestNotef( ${1:t *testing.T})
endsnippet

snippet TestNotificationReq "TestNotificationReq(t *testing.T)"
TestNotificationReq( ${1:t *testing.T})
endsnippet

snippet TestNotifyOnOOM "TestNotifyOnOOM(t *testing.T)"
TestNotifyOnOOM( ${1:t *testing.T})
endsnippet

snippet TestNullTestmainPackage "TestNullTestmainPackage(t *testing.T)"
TestNullTestmainPackage( ${1:t *testing.T})
endsnippet

snippet TestObjImporter "TestObjImporter(t *testing.T)"
TestObjImporter( ${1:t *testing.T})
endsnippet

snippet TestObjValueLookup "TestObjValueLookup(t *testing.T)"
TestObjValueLookup( ${1:t *testing.T})
endsnippet

snippet TestObject "TestObject(t *testing.T)"
TestObject( ${1:t *testing.T})
endsnippet

snippet TestObjectPath "TestObjectPath(t *testing.T)"
TestObjectPath( ${1:t *testing.T})
endsnippet

snippet TestOfficialName "TestOfficialName(t *testing.T)"
TestOfficialName( ${1:t *testing.T})
endsnippet

snippet TestOneFile "TestOneFile(t *testing.T)"
TestOneFile( ${1:t *testing.T})
endsnippet

snippet TestOpenRoot "TestOpenRoot(t *testing.T)"
TestOpenRoot( ${1:t *testing.T})
endsnippet

snippet TestOps "TestOps(t *testing.T)"
TestOps( ${1:t *testing.T})
endsnippet

snippet TestOptionsRoute "TestOptionsRoute(t *testing.T)"
TestOptionsRoute( ${1:t *testing.T})
endsnippet

snippet TestOracle "TestOracle(t *testing.T)"
TestOracle( ${1:t *testing.T})
endsnippet

snippet TestOutput "TestOutput(t *testing.T)"
TestOutput( ${1:t *testing.T})
endsnippet

snippet TestOutputAdd "TestOutputAdd(t *testing.T)"
TestOutputAdd( ${1:t *testing.T})
endsnippet

snippet TestOutputAddClose "TestOutputAddClose(t *testing.T)"
TestOutputAddClose( ${1:t *testing.T})
endsnippet

snippet TestOutputAddEnv "TestOutputAddEnv(t *testing.T)"
TestOutputAddEnv( ${1:t *testing.T})
endsnippet

snippet TestOutputAddPipe "TestOutputAddPipe(t *testing.T)"
TestOutputAddPipe( ${1:t *testing.T})
endsnippet

snippet TestOutputClose "TestOutputClose(t *testing.T)"
TestOutputClose( ${1:t *testing.T})
endsnippet

snippet TestOutputWriteError "TestOutputWriteError(t *testing.T)"
TestOutputWriteError( ${1:t *testing.T})
endsnippet

snippet TestOverflow "TestOverflow(t *testing.T)"
TestOverflow( ${1:t *testing.T})
endsnippet

snippet TestOverlapingNameservers "TestOverlapingNameservers(t *testing.T)"
TestOverlapingNameservers( ${1:t *testing.T})
endsnippet

snippet TestOverlayCreateBase "TestOverlayCreateBase(t *testing.T)"
TestOverlayCreateBase( ${1:t *testing.T})
endsnippet

snippet TestOverlayCreateEmpty "TestOverlayCreateEmpty(t *testing.T)"
TestOverlayCreateEmpty( ${1:t *testing.T})
endsnippet

snippet TestOverlayCreateSnap "TestOverlayCreateSnap(t *testing.T)"
TestOverlayCreateSnap( ${1:t *testing.T})
endsnippet

snippet TestOverlaySetup "TestOverlaySetup(t *testing.T)"
TestOverlaySetup( ${1:t *testing.T})
endsnippet

snippet TestOverlayTeardown "TestOverlayTeardown(t *testing.T)"
TestOverlayTeardown( ${1:t *testing.T})
endsnippet

snippet TestPAXHeader "TestPAXHeader(t *testing.T)"
TestPAXHeader( ${1:t *testing.T})
endsnippet

snippet TestPRD "TestPRD(t *testing.T)"
TestPRD( ${1:t *testing.T})
endsnippet

snippet TestPack "TestPack(t *testing.T)"
TestPack( ${1:t *testing.T})
endsnippet

snippet TestPackage "TestPackage(t *testing.T)"
TestPackage( ${1:t *testing.T})
endsnippet

snippet TestPacketConnChecksum "TestPacketConnChecksum(t *testing.T)"
TestPacketConnChecksum( ${1:t *testing.T})
endsnippet

snippet TestPacketConnConcurrentReadWriteUnicastUDP "TestPacketConnConcurrentReadWriteUnicastUDP(t *testing.T)"
TestPacketConnConcurrentReadWriteUnicastUDP( ${1:t *testing.T})
endsnippet

snippet TestPacketConnMulticastSocketOptions "TestPacketConnMulticastSocketOptions(t *testing.T)"
TestPacketConnMulticastSocketOptions( ${1:t *testing.T})
endsnippet

snippet TestPacketConnReadWriteMulticastICMP "TestPacketConnReadWriteMulticastICMP(t *testing.T)"
TestPacketConnReadWriteMulticastICMP( ${1:t *testing.T})
endsnippet

snippet TestPacketConnReadWriteMulticastUDP "TestPacketConnReadWriteMulticastUDP(t *testing.T)"
TestPacketConnReadWriteMulticastUDP( ${1:t *testing.T})
endsnippet

snippet TestPacketConnReadWriteUnicastICMP "TestPacketConnReadWriteUnicastICMP(t *testing.T)"
TestPacketConnReadWriteUnicastICMP( ${1:t *testing.T})
endsnippet

snippet TestPacketConnReadWriteUnicastUDP "TestPacketConnReadWriteUnicastUDP(t *testing.T)"
TestPacketConnReadWriteUnicastUDP( ${1:t *testing.T})
endsnippet

snippet TestPacketConnUnicastSocketOptions "TestPacketConnUnicastSocketOptions(t *testing.T)"
TestPacketConnUnicastSocketOptions( ${1:t *testing.T})
endsnippet

snippet TestPacketWriter "TestPacketWriter(t *testing.T)"
TestPacketWriter( ${1:t *testing.T})
endsnippet

snippet TestPaddedHeader "TestPaddedHeader(t *testing.T)"
TestPaddedHeader( ${1:t *testing.T})
endsnippet

snippet TestPads "TestPads(t *testing.T)"
TestPads( ${1:t *testing.T})
endsnippet

snippet TestParallelError "TestParallelError(t *testing.T)"
TestParallelError( ${1:t *testing.T})
endsnippet

snippet TestParallelMaxPar "TestParallelMaxPar(t *testing.T)"
TestParallelMaxPar( ${1:t *testing.T})
endsnippet

snippet TestParam "TestParam(t *testing.T)"
TestParam( ${1:t *testing.T})
endsnippet

snippet TestParamInsert "TestParamInsert(t *testing.T)"
TestParamInsert( ${1:t *testing.T})
endsnippet

snippet TestParentFinishesChild "TestParentFinishesChild(t *testing.T)"
TestParentFinishesChild( ${1:t *testing.T})
endsnippet

snippet TestParents "TestParents(t *testing.T)"
TestParents( ${1:t *testing.T})
endsnippet

snippet TestParse "TestParse(t *testing.T)"
TestParse( ${1:t *testing.T})
endsnippet

snippet TestParse3 "TestParse3(t *testing.T)"
TestParse3( ${1:t *testing.T})
endsnippet

snippet TestParse4 "TestParse4(t *testing.T)"
TestParse4( ${1:t *testing.T})
endsnippet

snippet TestParseArgs "TestParseArgs(t *testing.T)"
TestParseArgs( ${1:t *testing.T})
endsnippet

snippet TestParseBenchSet "TestParseBenchSet(t *testing.T)"
TestParseBenchSet( ${1:t *testing.T})
endsnippet

snippet TestParseBenchSetBest "TestParseBenchSetBest(t *testing.T)"
TestParseBenchSetBest( ${1:t *testing.T})
endsnippet

snippet TestParseCgroups "TestParseCgroups(t *testing.T)"
TestParseCgroups( ${1:t *testing.T})
endsnippet

snippet TestParseFedoraMountinfo "TestParseFedoraMountinfo(t *testing.T)"
TestParseFedoraMountinfo( ${1:t *testing.T})
endsnippet

snippet TestParseFedoraMountinfoFields "TestParseFedoraMountinfoFields(t *testing.T)"
TestParseFedoraMountinfoFields( ${1:t *testing.T})
endsnippet

snippet TestParseGentooMountinfo "TestParseGentooMountinfo(t *testing.T)"
TestParseGentooMountinfo( ${1:t *testing.T})
endsnippet

snippet TestParseHeader "TestParseHeader(t *testing.T)"
TestParseHeader( ${1:t *testing.T})
endsnippet

snippet TestParseHost "TestParseHost(t *testing.T)"
TestParseHost( ${1:t *testing.T})
endsnippet

snippet TestParseIPv4Header "TestParseIPv4Header(t *testing.T)"
TestParseIPv4Header( ${1:t *testing.T})
endsnippet

snippet TestParseIfHeader "TestParseIfHeader(t *testing.T)"
TestParseIfHeader( ${1:t *testing.T})
endsnippet

snippet TestParseIllegalInputs "TestParseIllegalInputs(t *testing.T)"
TestParseIllegalInputs( ${1:t *testing.T})
endsnippet

snippet TestParseJob "TestParseJob(t *testing.T)"
TestParseJob( ${1:t *testing.T})
endsnippet

snippet TestParseLevel "TestParseLevel(t *testing.T)"
TestParseLevel( ${1:t *testing.T})
endsnippet

snippet TestParseLine "TestParseLine(t *testing.T)"
TestParseLine( ${1:t *testing.T})
endsnippet

snippet TestParseLockInfo "TestParseLockInfo(t *testing.T)"
TestParseLockInfo( ${1:t *testing.T})
endsnippet

snippet TestParseLxcConfOpt "TestParseLxcConfOpt(t *testing.T)"
TestParseLxcConfOpt( ${1:t *testing.T})
endsnippet

snippet TestParseNetworkOptsNegativePorts "TestParseNetworkOptsNegativePorts(t *testing.T)"
TestParseNetworkOptsNegativePorts( ${1:t *testing.T})
endsnippet

snippet TestParseNetworkOptsPrivateOnly "TestParseNetworkOptsPrivateOnly(t *testing.T)"
TestParseNetworkOptsPrivateOnly( ${1:t *testing.T})
endsnippet

snippet TestParseNetworkOptsPublic "TestParseNetworkOptsPublic(t *testing.T)"
TestParseNetworkOptsPublic( ${1:t *testing.T})
endsnippet

snippet TestParseNetworkOptsPublicNoPort "TestParseNetworkOptsPublicNoPort(t *testing.T)"
TestParseNetworkOptsPublicNoPort( ${1:t *testing.T})
endsnippet

snippet TestParseNetworkOptsUdp "TestParseNetworkOptsUdp(t *testing.T)"
TestParseNetworkOptsUdp( ${1:t *testing.T})
endsnippet

snippet TestParseNoOptions "TestParseNoOptions(t *testing.T)"
TestParseNoOptions( ${1:t *testing.T})
endsnippet

snippet TestParsePAXHeader "TestParsePAXHeader(t *testing.T)"
TestParsePAXHeader( ${1:t *testing.T})
endsnippet

snippet TestParsePAXTime "TestParsePAXTime(t *testing.T)"
TestParsePAXTime( ${1:t *testing.T})
endsnippet

snippet TestParsePanic "TestParsePanic(t *testing.T)"
TestParsePanic( ${1:t *testing.T})
endsnippet

snippet TestParsePort "TestParsePort(t *testing.T)"
TestParsePort( ${1:t *testing.T})
endsnippet

snippet TestParsePortMapping "TestParsePortMapping(t *testing.T)"
TestParsePortMapping( ${1:t *testing.T})
endsnippet

snippet TestParsePortSpecs "TestParsePortSpecs(t *testing.T)"
TestParsePortSpecs( ${1:t *testing.T})
endsnippet

snippet TestParseRelease "TestParseRelease(t *testing.T)"
TestParseRelease( ${1:t *testing.T})
endsnippet

snippet TestParseRepositoryTag "TestParseRepositoryTag(t *testing.T)"
TestParseRepositoryTag( ${1:t *testing.T})
endsnippet

snippet TestParseRunAttach "TestParseRunAttach(t *testing.T)"
TestParseRunAttach( ${1:t *testing.T})
endsnippet

snippet TestParseRunLinks "TestParseRunLinks(t *testing.T)"
TestParseRunLinks( ${1:t *testing.T})
endsnippet

snippet TestParseRunVolumes "TestParseRunVolumes(t *testing.T)"
TestParseRunVolumes( ${1:t *testing.T})
endsnippet

snippet TestParseRunningInfo "TestParseRunningInfo(t *testing.T)"
TestParseRunningInfo( ${1:t *testing.T})
endsnippet

snippet TestParseSecurityOpt "TestParseSecurityOpt(t *testing.T)"
TestParseSecurityOpt( ${1:t *testing.T})
endsnippet

snippet TestParseSomeOptions "TestParseSomeOptions(t *testing.T)"
TestParseSomeOptions( ${1:t *testing.T})
endsnippet

snippet TestParseUbuntuMountinfo "TestParseUbuntuMountinfo(t *testing.T)"
TestParseUbuntuMountinfo( ${1:t *testing.T})
endsnippet

snippet TestParseValidPrograms "TestParseValidPrograms(t *testing.T)"
TestParseValidPrograms( ${1:t *testing.T})
endsnippet

snippet TestParseVariant "TestParseVariant(t *testing.T)"
TestParseVariant( ${1:t *testing.T})
endsnippet

snippet TestParser "TestParser(t *testing.T)"
TestParser( ${1:t *testing.T})
endsnippet

snippet TestParserWithPipes "TestParserWithPipes(t *testing.T)"
TestParserWithPipes( ${1:t *testing.T})
endsnippet

snippet TestPartialRead "TestPartialRead(t *testing.T)"
TestPartialRead( ${1:t *testing.T})
endsnippet

snippet TestParticiaTrie_Delete "TestParticiaTrie_Delete(t *testing.T)"
TestParticiaTrie_Delete( ${1:t *testing.T})
endsnippet

snippet TestParticiaTrie_DeleteNonExistent "TestParticiaTrie_DeleteNonExistent(t *testing.T)"
TestParticiaTrie_DeleteNonExistent( ${1:t *testing.T})
endsnippet

snippet TestParticiaTrie_DeleteSubtree "TestParticiaTrie_DeleteSubtree(t *testing.T)"
TestParticiaTrie_DeleteSubtree( ${1:t *testing.T})
endsnippet

snippet TestPassingNameOptToCreateContainerReturnsItInContainer "TestPassingNameOptToCreateContainerReturnsItInContainer(t *testing.T)"
TestPassingNameOptToCreateContainerReturnsItInContainer( ${1:t *testing.T})
endsnippet

snippet TestPassthrough "TestPassthrough(t *testing.T)"
TestPassthrough( ${1:t *testing.T})
endsnippet

snippet TestPath "TestPath(t *testing.T)"
TestPath( ${1:t *testing.T})
endsnippet

snippet TestPathEnclosingInterval_Exact "TestPathEnclosingInterval_Exact(t *testing.T)"
TestPathEnclosingInterval_Exact( ${1:t *testing.T})
endsnippet

snippet TestPathEnclosingInterval_Paths "TestPathEnclosingInterval_Paths(t *testing.T)"
TestPathEnclosingInterval_Paths( ${1:t *testing.T})
endsnippet

snippet TestPathInsert "TestPathInsert(t *testing.T)"
TestPathInsert( ${1:t *testing.T})
endsnippet

snippet TestPathMatcher "TestPathMatcher(t *testing.T)"
TestPathMatcher( ${1:t *testing.T})
endsnippet

snippet TestPathPrefix "TestPathPrefix(t *testing.T)"
TestPathPrefix( ${1:t *testing.T})
endsnippet

snippet TestPaths "TestPaths(t *testing.T)"
TestPaths( ${1:t *testing.T})
endsnippet

snippet TestPauseContainer "TestPauseContainer(t *testing.T)"
TestPauseContainer( ${1:t *testing.T})
endsnippet

snippet TestPauseContainerAlreadyPaused "TestPauseContainerAlreadyPaused(t *testing.T)"
TestPauseContainerAlreadyPaused( ${1:t *testing.T})
endsnippet

snippet TestPauseContainerNotFound "TestPauseContainerNotFound(t *testing.T)"
TestPauseContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestPax "TestPax(t *testing.T)"
TestPax( ${1:t *testing.T})
endsnippet

snippet TestPaxNonAscii "TestPaxNonAscii(t *testing.T)"
TestPaxNonAscii( ${1:t *testing.T})
endsnippet

snippet TestPaxSymlink "TestPaxSymlink(t *testing.T)"
TestPaxSymlink( ${1:t *testing.T})
endsnippet

snippet TestPaxXattrs "TestPaxXattrs(t *testing.T)"
TestPaxXattrs( ${1:t *testing.T})
endsnippet

snippet TestPeek "TestPeek(t *testing.T)"
TestPeek( ${1:t *testing.T})
endsnippet

snippet TestPeekThenUnreadRune "TestPeekThenUnreadRune(t *testing.T)"
TestPeekThenUnreadRune( ${1:t *testing.T})
endsnippet

snippet TestPerHost "TestPerHost(t *testing.T)"
TestPerHost( ${1:t *testing.T})
endsnippet

snippet TestPike "TestPike(t *testing.T)"
TestPike( ${1:t *testing.T})
endsnippet

snippet TestPing "TestPing(t *testing.T)"
TestPing( ${1:t *testing.T})
endsnippet

snippet TestPingFailing "TestPingFailing(t *testing.T)"
TestPingFailing( ${1:t *testing.T})
endsnippet

snippet TestPingFailingWrongStatus "TestPingFailingWrongStatus(t *testing.T)"
TestPingFailingWrongStatus( ${1:t *testing.T})
endsnippet

snippet TestPingGoogle "TestPingGoogle(t *testing.T)"
TestPingGoogle( ${1:t *testing.T})
endsnippet

snippet TestPingRegistryEndpoint "TestPingRegistryEndpoint(t *testing.T)"
TestPingRegistryEndpoint( ${1:t *testing.T})
endsnippet

snippet TestPkgLinkFunc "TestPkgLinkFunc(t *testing.T)"
TestPkgLinkFunc( ${1:t *testing.T})
endsnippet

snippet TestPoll "TestPoll(t *testing.T)"
TestPoll( ${1:t *testing.T})
endsnippet

snippet TestPools "TestPools(t *testing.T)"
TestPools( ${1:t *testing.T})
endsnippet

snippet TestPort "TestPort(t *testing.T)"
TestPort( ${1:t *testing.T})
endsnippet

snippet TestPortAllocation "TestPortAllocation(t *testing.T)"
TestPortAllocation( ${1:t *testing.T})
endsnippet

snippet TestPortList "TestPortList(t *testing.T)"
TestPortList( ${1:t *testing.T})
endsnippet

snippet TestPositions "TestPositions(t *testing.T)"
TestPositions( ${1:t *testing.T})
endsnippet

snippet TestPostCommit "TestPostCommit(t *testing.T)"
TestPostCommit( ${1:t *testing.T})
endsnippet

snippet TestPostContainersAttach "TestPostContainersAttach(t *testing.T)"
TestPostContainersAttach( ${1:t *testing.T})
endsnippet

snippet TestPostContainersAttachStderr "TestPostContainersAttachStderr(t *testing.T)"
TestPostContainersAttachStderr( ${1:t *testing.T})
endsnippet

snippet TestPostContainersCopy "TestPostContainersCopy(t *testing.T)"
TestPostContainersCopy( ${1:t *testing.T})
endsnippet

snippet TestPostContainersCopyWhenContainerNotFound "TestPostContainersCopyWhenContainerNotFound(t *testing.T)"
TestPostContainersCopyWhenContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestPostContainersCreate "TestPostContainersCreate(t *testing.T)"
TestPostContainersCreate( ${1:t *testing.T})
endsnippet

snippet TestPostContainersKill "TestPostContainersKill(t *testing.T)"
TestPostContainersKill( ${1:t *testing.T})
endsnippet

snippet TestPostContainersRestart "TestPostContainersRestart(t *testing.T)"
TestPostContainersRestart( ${1:t *testing.T})
endsnippet

snippet TestPostContainersStart "TestPostContainersStart(t *testing.T)"
TestPostContainersStart( ${1:t *testing.T})
endsnippet

snippet TestPostContainersStop "TestPostContainersStop(t *testing.T)"
TestPostContainersStop( ${1:t *testing.T})
endsnippet

snippet TestPostContainersWait "TestPostContainersWait(t *testing.T)"
TestPostContainersWait( ${1:t *testing.T})
endsnippet

snippet TestPostCreateNull "TestPostCreateNull(t *testing.T)"
TestPostCreateNull( ${1:t *testing.T})
endsnippet

snippet TestPostJsonVerify "TestPostJsonVerify(t *testing.T)"
TestPostJsonVerify( ${1:t *testing.T})
endsnippet

snippet TestPredicatesInfo "TestPredicatesInfo(t *testing.T)"
TestPredicatesInfo( ${1:t *testing.T})
endsnippet

snippet TestPrepareFailure "TestPrepareFailure(t *testing.T)"
TestPrepareFailure( ${1:t *testing.T})
endsnippet

snippet TestPrerouting "TestPrerouting(t *testing.T)"
TestPrerouting( ${1:t *testing.T})
endsnippet

snippet TestPrint "TestPrint(t *testing.T)"
TestPrint( ${1:t *testing.T})
endsnippet

snippet TestProgress "TestProgress(t *testing.T)"
TestProgress( ${1:t *testing.T})
endsnippet

snippet TestProto "TestProto(t *testing.T)"
TestProto( ${1:t *testing.T})
endsnippet

snippet TestProtoMap "TestProtoMap(t *testing.T)"
TestProtoMap( ${1:t *testing.T})
endsnippet

snippet TestProtoStoreNestedStruct "TestProtoStoreNestedStruct(t *testing.T)"
TestProtoStoreNestedStruct( ${1:t *testing.T})
endsnippet

snippet TestProtoStoreStruct "TestProtoStoreStruct(t *testing.T)"
TestProtoStoreStruct( ${1:t *testing.T})
endsnippet

snippet TestProtoStructInterfaces "TestProtoStructInterfaces(t *testing.T)"
TestProtoStructInterfaces( ${1:t *testing.T})
endsnippet

snippet TestProtoStructTag "TestProtoStructTag(t *testing.T)"
TestProtoStructTag( ${1:t *testing.T})
endsnippet

snippet TestProtoVariantStruct "TestProtoVariantStruct(t *testing.T)"
TestProtoVariantStruct( ${1:t *testing.T})
endsnippet

snippet TestProxy "TestProxy(t *testing.T)"
TestProxy( ${1:t *testing.T})
endsnippet

snippet TestProxyNoCapture "TestProxyNoCapture(t *testing.T)"
TestProxyNoCapture( ${1:t *testing.T})
endsnippet

snippet TestPsListContainers "TestPsListContainers(t *testing.T)"
TestPsListContainers( ${1:t *testing.T})
endsnippet

snippet TestPsListContainersFilterExited "TestPsListContainersFilterExited(t *testing.T)"
TestPsListContainersFilterExited( ${1:t *testing.T})
endsnippet

snippet TestPsListContainersFilterID "TestPsListContainersFilterID(t *testing.T)"
TestPsListContainersFilterID( ${1:t *testing.T})
endsnippet

snippet TestPsListContainersFilterName "TestPsListContainersFilterName(t *testing.T)"
TestPsListContainersFilterName( ${1:t *testing.T})
endsnippet

snippet TestPsListContainersFilterStatus "TestPsListContainersFilterStatus(t *testing.T)"
TestPsListContainersFilterStatus( ${1:t *testing.T})
endsnippet

snippet TestPsListContainersSize "TestPsListContainersSize(t *testing.T)"
TestPsListContainersSize( ${1:t *testing.T})
endsnippet

snippet TestPublicSuffix "TestPublicSuffix(t *testing.T)"
TestPublicSuffix( ${1:t *testing.T})
endsnippet

snippet TestPullImage "TestPullImage(t *testing.T)"
TestPullImage( ${1:t *testing.T})
endsnippet

snippet TestPullImageCustomRegistry "TestPullImageCustomRegistry(t *testing.T)"
TestPullImageCustomRegistry( ${1:t *testing.T})
endsnippet

snippet TestPullImageFromCentralRegistry "TestPullImageFromCentralRegistry(t *testing.T)"
TestPullImageFromCentralRegistry( ${1:t *testing.T})
endsnippet

snippet TestPullImageNoRepository "TestPullImageNoRepository(t *testing.T)"
TestPullImageNoRepository( ${1:t *testing.T})
endsnippet

snippet TestPullImageTag "TestPullImageTag(t *testing.T)"
TestPullImageTag( ${1:t *testing.T})
endsnippet

snippet TestPullImageWithRawJSON "TestPullImageWithRawJSON(t *testing.T)"
TestPullImageWithRawJSON( ${1:t *testing.T})
endsnippet

snippet TestPullImageWithoutOutputStream "TestPullImageWithoutOutputStream(t *testing.T)"
TestPullImageWithoutOutputStream( ${1:t *testing.T})
endsnippet

snippet TestPullNonExistingImage "TestPullNonExistingImage(t *testing.T)"
TestPullNonExistingImage( ${1:t *testing.T})
endsnippet

snippet TestPunycode "TestPunycode(t *testing.T)"
TestPunycode( ${1:t *testing.T})
endsnippet

snippet TestPunycodeErrors "TestPunycodeErrors(t *testing.T)"
TestPunycodeErrors( ${1:t *testing.T})
endsnippet

snippet TestPurgeId "TestPurgeId(t *testing.T)"
TestPurgeId( ${1:t *testing.T})
endsnippet

snippet TestPushBusyboxImage "TestPushBusyboxImage(t *testing.T)"
TestPushBusyboxImage( ${1:t *testing.T})
endsnippet

snippet TestPushImage "TestPushImage(t *testing.T)"
TestPushImage( ${1:t *testing.T})
endsnippet

snippet TestPushImageCustomRegistry "TestPushImageCustomRegistry(t *testing.T)"
TestPushImageCustomRegistry( ${1:t *testing.T})
endsnippet

snippet TestPushImageJSONIndex "TestPushImageJSONIndex(t *testing.T)"
TestPushImageJSONIndex( ${1:t *testing.T})
endsnippet

snippet TestPushImageJSONRegistry "TestPushImageJSONRegistry(t *testing.T)"
TestPushImageJSONRegistry( ${1:t *testing.T})
endsnippet

snippet TestPushImageLayerRegistry "TestPushImageLayerRegistry(t *testing.T)"
TestPushImageLayerRegistry( ${1:t *testing.T})
endsnippet

snippet TestPushImageNoName "TestPushImageNoName(t *testing.T)"
TestPushImageNoName( ${1:t *testing.T})
endsnippet

snippet TestPushImageNotFound "TestPushImageNotFound(t *testing.T)"
TestPushImageNotFound( ${1:t *testing.T})
endsnippet

snippet TestPushImageWithAuthentication "TestPushImageWithAuthentication(t *testing.T)"
TestPushImageWithAuthentication( ${1:t *testing.T})
endsnippet

snippet TestPushImageWithRawJSON "TestPushImageWithRawJSON(t *testing.T)"
TestPushImageWithRawJSON( ${1:t *testing.T})
endsnippet

snippet TestPushRegistryTag "TestPushRegistryTag(t *testing.T)"
TestPushRegistryTag( ${1:t *testing.T})
endsnippet

snippet TestPushUnprefixedRepo "TestPushUnprefixedRepo(t *testing.T)"
TestPushUnprefixedRepo( ${1:t *testing.T})
endsnippet

snippet TestPythonGenStreams "TestPythonGenStreams(t *testing.T)"
TestPythonGenStreams( ${1:t *testing.T})
endsnippet

snippet TestQualifiedTypeString "TestQualifiedTypeString(t *testing.T)"
TestQualifiedTypeString( ${1:t *testing.T})
endsnippet

snippet TestQueries "TestQueries(t *testing.T)"
TestQueries( ${1:t *testing.T})
endsnippet

snippet TestQuery "TestQuery(t *testing.T)"
TestQuery( ${1:t *testing.T})
endsnippet

snippet TestQueryLinkFunc "TestQueryLinkFunc(t *testing.T)"
TestQueryLinkFunc( ${1:t *testing.T})
endsnippet

snippet TestQueryMatcher "TestQueryMatcher(t *testing.T)"
TestQueryMatcher( ${1:t *testing.T})
endsnippet

snippet TestQueryString "TestQueryString(t *testing.T)"
TestQueryString( ${1:t *testing.T})
endsnippet

snippet TestQueue "TestQueue(t *testing.T)"
TestQueue( ${1:t *testing.T})
endsnippet

snippet TestQuitAllianceReq "TestQuitAllianceReq(t *testing.T)"
TestQuitAllianceReq( ${1:t *testing.T})
endsnippet

snippet TestQuotedLength "TestQuotedLength(t *testing.T)"
TestQuotedLength( ${1:t *testing.T})
endsnippet

snippet TestQuoting "TestQuoting(t *testing.T)"
TestQuoting( ${1:t *testing.T})
endsnippet

snippet TestRAMInBytes "TestRAMInBytes(t *testing.T)"
TestRAMInBytes( ${1:t *testing.T})
endsnippet

snippet TestRSAKeys "TestRSAKeys(t *testing.T)"
TestRSAKeys( ${1:t *testing.T})
endsnippet

snippet TestRSASignVerify "TestRSASignVerify(t *testing.T)"
TestRSASignVerify( ${1:t *testing.T})
endsnippet

snippet TestRTA "TestRTA(t *testing.T)"
TestRTA( ${1:t *testing.T})
endsnippet

snippet TestRaceBroadcastWriter "TestRaceBroadcastWriter(t *testing.T)"
TestRaceBroadcastWriter( ${1:t *testing.T})
endsnippet

snippet TestRandomContainerName "TestRandomContainerName(t *testing.T)"
TestRandomContainerName( ${1:t *testing.T})
endsnippet

snippet TestRandomMutations "TestRandomMutations(t *testing.T)"
TestRandomMutations( ${1:t *testing.T})
endsnippet

snippet TestRange "TestRange(t *testing.T)"
TestRange( ${1:t *testing.T})
endsnippet

snippet TestRangeAmalgamation "TestRangeAmalgamation(t *testing.T)"
TestRangeAmalgamation( ${1:t *testing.T})
endsnippet

snippet TestRank "TestRank(t *testing.T)"
TestRank( ${1:t *testing.T})
endsnippet

snippet TestRawConnMulticastSocketOptions "TestRawConnMulticastSocketOptions(t *testing.T)"
TestRawConnMulticastSocketOptions( ${1:t *testing.T})
endsnippet

snippet TestRawConnReadWriteMulticastICMP "TestRawConnReadWriteMulticastICMP(t *testing.T)"
TestRawConnReadWriteMulticastICMP( ${1:t *testing.T})
endsnippet

snippet TestRawConnReadWriteUnicastICMP "TestRawConnReadWriteUnicastICMP(t *testing.T)"
TestRawConnReadWriteUnicastICMP( ${1:t *testing.T})
endsnippet

snippet TestRawConnUnicastSocketOptions "TestRawConnUnicastSocketOptions(t *testing.T)"
TestRawConnUnicastSocketOptions( ${1:t *testing.T})
endsnippet

snippet TestReadAfterLines "TestReadAfterLines(t *testing.T)"
TestReadAfterLines( ${1:t *testing.T})
endsnippet

snippet TestReadAfterTimeout "TestReadAfterTimeout(t *testing.T)"
TestReadAfterTimeout( ${1:t *testing.T})
endsnippet

snippet TestReadBytes "TestReadBytes(t *testing.T)"
TestReadBytes( ${1:t *testing.T})
endsnippet

snippet TestReadConfig "TestReadConfig(t *testing.T)"
TestReadConfig( ${1:t *testing.T})
endsnippet

snippet TestReadEmptyAtEOF "TestReadEmptyAtEOF(t *testing.T)"
TestReadEmptyAtEOF( ${1:t *testing.T})
endsnippet

snippet TestReadEmptyBuffer "TestReadEmptyBuffer(t *testing.T)"
TestReadEmptyBuffer( ${1:t *testing.T})
endsnippet

snippet TestReadFrom "TestReadFrom(t *testing.T)"
TestReadFrom( ${1:t *testing.T})
endsnippet

snippet TestReadGNUSparseMap0x1 "TestReadGNUSparseMap0x1(t *testing.T)"
TestReadGNUSparseMap0x1( ${1:t *testing.T})
endsnippet

snippet TestReadGNUSparseMap1x0 "TestReadGNUSparseMap1x0(t *testing.T)"
TestReadGNUSparseMap1x0( ${1:t *testing.T})
endsnippet

snippet TestReadLine "TestReadLine(t *testing.T)"
TestReadLine( ${1:t *testing.T})
endsnippet

snippet TestReadLineNewlines "TestReadLineNewlines(t *testing.T)"
TestReadLineNewlines( ${1:t *testing.T})
endsnippet

snippet TestReadLineNonNilLineOrError "TestReadLineNonNilLineOrError(t *testing.T)"
TestReadLineNonNilLineOrError( ${1:t *testing.T})
endsnippet

snippet TestReadMailReq "TestReadMailReq(t *testing.T)"
TestReadMailReq( ${1:t *testing.T})
endsnippet

snippet TestReadMalformedZlibHeader "TestReadMalformedZlibHeader(t *testing.T)"
TestReadMalformedZlibHeader( ${1:t *testing.T})
endsnippet

snippet TestReadPid "TestReadPid(test *testing.T)"
TestReadPid( ${1:test *testing.T})
endsnippet

snippet TestReadRune "TestReadRune(t *testing.T)"
TestReadRune( ${1:t *testing.T})
endsnippet

snippet TestReadString "TestReadString(t *testing.T)"
TestReadString( ${1:t *testing.T})
endsnippet

snippet TestReadSymlinkedDirectoryExistingDirectory "TestReadSymlinkedDirectoryExistingDirectory(t *testing.T)"
TestReadSymlinkedDirectoryExistingDirectory( ${1:t *testing.T})
endsnippet

snippet TestReadSymlinkedDirectoryNonExistingSymlink "TestReadSymlinkedDirectoryNonExistingSymlink(t *testing.T)"
TestReadSymlinkedDirectoryNonExistingSymlink( ${1:t *testing.T})
endsnippet

snippet TestReadSymlinkedDirectoryToFile "TestReadSymlinkedDirectoryToFile(t *testing.T)"
TestReadSymlinkedDirectoryToFile( ${1:t *testing.T})
endsnippet

snippet TestReadTimeout "TestReadTimeout(t *testing.T)"
TestReadTimeout( ${1:t *testing.T})
endsnippet

snippet TestReadWriteMulticastIPDatagram "TestReadWriteMulticastIPDatagram(t *testing.T)"
TestReadWriteMulticastIPDatagram( ${1:t *testing.T})
endsnippet

snippet TestReadWriteMulticastIPPayloadICMP "TestReadWriteMulticastIPPayloadICMP(t *testing.T)"
TestReadWriteMulticastIPPayloadICMP( ${1:t *testing.T})
endsnippet

snippet TestReadWriteMulticastIPPayloadUDP "TestReadWriteMulticastIPPayloadUDP(t *testing.T)"
TestReadWriteMulticastIPPayloadUDP( ${1:t *testing.T})
endsnippet

snippet TestReadWriteRune "TestReadWriteRune(t *testing.T)"
TestReadWriteRune( ${1:t *testing.T})
endsnippet

snippet TestReadWriteUnicastIPDatagram "TestReadWriteUnicastIPDatagram(t *testing.T)"
TestReadWriteUnicastIPDatagram( ${1:t *testing.T})
endsnippet

snippet TestReadWriteUnicastIPPayloadICMP "TestReadWriteUnicastIPPayloadICMP(t *testing.T)"
TestReadWriteUnicastIPPayloadICMP( ${1:t *testing.T})
endsnippet

snippet TestReadWriteUnicastIPPayloadUDP "TestReadWriteUnicastIPPayloadUDP(t *testing.T)"
TestReadWriteUnicastIPPayloadUDP( ${1:t *testing.T})
endsnippet

snippet TestReaddir "TestReaddir(t *testing.T)"
TestReaddir( ${1:t *testing.T})
endsnippet

snippet TestReader "TestReader(t *testing.T)"
TestReader( ${1:t *testing.T})
endsnippet

snippet TestReaderEdgeCases "TestReaderEdgeCases(t *testing.T)"
TestReaderEdgeCases( ${1:t *testing.T})
endsnippet

snippet TestReaderSimple "TestReaderSimple(t *testing.T)"
TestReaderSimple( ${1:t *testing.T})
endsnippet

snippet TestReaderWriteTo "TestReaderWriteTo(t *testing.T)"
TestReaderWriteTo( ${1:t *testing.T})
endsnippet

snippet TestReaderWriteToErrors "TestReaderWriteToErrors(t *testing.T)"
TestReaderWriteToErrors( ${1:t *testing.T})
endsnippet

snippet TestRecorderAndGzipMiddleware "TestRecorderAndGzipMiddleware(t *testing.T)"
TestRecorderAndGzipMiddleware( ${1:t *testing.T})
endsnippet

snippet TestRecorderMiddleware "TestRecorderMiddleware(t *testing.T)"
TestRecorderMiddleware( ${1:t *testing.T})
endsnippet

snippet TestRecruitSoldierReq "TestRecruitSoldierReq(t *testing.T)"
TestRecruitSoldierReq( ${1:t *testing.T})
endsnippet

snippet TestRecruitSoldierSpeedUpReq "TestRecruitSoldierSpeedUpReq(t *testing.T)"
TestRecruitSoldierSpeedUpReq( ${1:t *testing.T})
endsnippet

snippet TestRedirectSlash "TestRedirectSlash(t *testing.T)"
TestRedirectSlash( ${1:t *testing.T})
endsnippet

snippet TestRefPaths "TestRefPaths(t *testing.T)"
TestRefPaths( ${1:t *testing.T})
endsnippet

snippet TestRefreshDailyQuestsReq "TestRefreshDailyQuestsReq(t *testing.T)"
TestRefreshDailyQuestsReq( ${1:t *testing.T})
endsnippet

snippet TestRefreshHeroListReq "TestRefreshHeroListReq(t *testing.T)"
TestRefreshHeroListReq( ${1:t *testing.T})
endsnippet

snippet TestRegister "TestRegister(t *testing.T)"
TestRegister( ${1:t *testing.T})
endsnippet

snippet TestRegisterBadRange "TestRegisterBadRange(t *testing.T)"
TestRegisterBadRange( ${1:t *testing.T})
endsnippet

snippet TestRegisterBadTwice "TestRegisterBadTwice(t *testing.T)"
TestRegisterBadTwice( ${1:t *testing.T})
endsnippet

snippet TestRelaxedInsert "TestRelaxedInsert(t *testing.T)"
TestRelaxedInsert( ${1:t *testing.T})
endsnippet

snippet TestRelaxedPlaceholder "TestRelaxedPlaceholder(t *testing.T)"
TestRelaxedPlaceholder( ${1:t *testing.T})
endsnippet

snippet TestReleaseIp "TestReleaseIp(t *testing.T)"
TestReleaseIp( ${1:t *testing.T})
endsnippet

snippet TestReleaseIpV6 "TestReleaseIpV6(t *testing.T)"
TestReleaseIpV6( ${1:t *testing.T})
endsnippet

snippet TestReleasePort "TestReleasePort(t *testing.T)"
TestReleasePort( ${1:t *testing.T})
endsnippet

snippet TestReleaseUnreadledPort "TestReleaseUnreadledPort(t *testing.T)"
TestReleaseUnreadledPort( ${1:t *testing.T})
endsnippet

snippet TestRemoveContainer "TestRemoveContainer(t *testing.T)"
TestRemoveContainer( ${1:t *testing.T})
endsnippet

snippet TestRemoveContainerNotFound "TestRemoveContainerNotFound(t *testing.T)"
TestRemoveContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestRemoveContainerRemoveVolumes "TestRemoveContainerRemoveVolumes(t *testing.T)"
TestRemoveContainerRemoveVolumes( ${1:t *testing.T})
endsnippet

snippet TestRemoveContainerRunning "TestRemoveContainerRunning(t *testing.T)"
TestRemoveContainerRunning( ${1:t *testing.T})
endsnippet

snippet TestRemoveFailure "TestRemoveFailure(t *testing.T)"
TestRemoveFailure( ${1:t *testing.T})
endsnippet

snippet TestRemoveImage "TestRemoveImage(t *testing.T)"
TestRemoveImage( ${1:t *testing.T})
endsnippet

snippet TestRemoveImageByName "TestRemoveImageByName(t *testing.T)"
TestRemoveImageByName( ${1:t *testing.T})
endsnippet

snippet TestRemoveImageNotFound "TestRemoveImageNotFound(t *testing.T)"
TestRemoveImageNotFound( ${1:t *testing.T})
endsnippet

snippet TestRemoveImageWithMultipleTags "TestRemoveImageWithMultipleTags(t *testing.T)"
TestRemoveImageWithMultipleTags( ${1:t *testing.T})
endsnippet

snippet TestRemoveLocalDns "TestRemoveLocalDns(t *testing.T)"
TestRemoveLocalDns( ${1:t *testing.T})
endsnippet

snippet TestRemoveMountedDir "TestRemoveMountedDir(t *testing.T)"
TestRemoveMountedDir( ${1:t *testing.T})
endsnippet

snippet TestRename "TestRename(t *testing.T)"
TestRename( ${1:t *testing.T})
endsnippet

snippet TestRenameArmyReq "TestRenameArmyReq(t *testing.T)"
TestRenameArmyReq( ${1:t *testing.T})
endsnippet

snippet TestRenameTop "TestRenameTop(t *testing.T)"
TestRenameTop( ${1:t *testing.T})
endsnippet

snippet TestRenderer "TestRenderer(t *testing.T)"
TestRenderer( ${1:t *testing.T})
endsnippet

snippet TestReplaceAndAppendEnvVars "TestReplaceAndAppendEnvVars(t *testing.T)"
TestReplaceAndAppendEnvVars( ${1:t *testing.T})
endsnippet

snippet TestReplyJoinAllianceReq "TestReplyJoinAllianceReq(t *testing.T)"
TestReplyJoinAllianceReq( ${1:t *testing.T})
endsnippet

snippet TestRepoRootForImportPath "TestRepoRootForImportPath(t *testing.T)"
TestRepoRootForImportPath( ${1:t *testing.T})
endsnippet

snippet TestRequestBaseUrl "TestRequestBaseUrl(t *testing.T)"
TestRequestBaseUrl( ${1:t *testing.T})
endsnippet

snippet TestRequestNewIpV6 "TestRequestNewIpV6(t *testing.T)"
TestRequestNewIpV6( ${1:t *testing.T})
endsnippet

snippet TestRequestNewIps "TestRequestNewIps(t *testing.T)"
TestRequestNewIps( ${1:t *testing.T})
endsnippet

snippet TestRequestNewPort "TestRequestNewPort(t *testing.T)"
TestRequestNewPort( ${1:t *testing.T})
endsnippet

snippet TestRequestSpecificIp "TestRequestSpecificIp(t *testing.T)"
TestRequestSpecificIp( ${1:t *testing.T})
endsnippet

snippet TestRequestSpecificIpV6 "TestRequestSpecificIpV6(t *testing.T)"
TestRequestSpecificIpV6( ${1:t *testing.T})
endsnippet

snippet TestRequestSpecificPort "TestRequestSpecificPort(t *testing.T)"
TestRequestSpecificPort( ${1:t *testing.T})
endsnippet

snippet TestRequestUrlFor "TestRequestUrlFor(t *testing.T)"
TestRequestUrlFor( ${1:t *testing.T})
endsnippet

snippet TestRequestUrlForQueryString "TestRequestUrlForQueryString(t *testing.T)"
TestRequestUrlForQueryString( ${1:t *testing.T})
endsnippet

snippet TestRequestUrlScheme "TestRequestUrlScheme(t *testing.T)"
TestRequestUrlScheme( ${1:t *testing.T})
endsnippet

snippet TestResizeApiResponse "TestResizeApiResponse(t *testing.T)"
TestResizeApiResponse( ${1:t *testing.T})
endsnippet

snippet TestResizeApiResponseWhenContainerNotStarted "TestResizeApiResponseWhenContainerNotStarted(t *testing.T)"
TestResizeApiResponseWhenContainerNotStarted( ${1:t *testing.T})
endsnippet

snippet TestResizeContainerTTY "TestResizeContainerTTY(t *testing.T)"
TestResizeContainerTTY( ${1:t *testing.T})
endsnippet

snippet TestResolveAuthConfigFullURL "TestResolveAuthConfigFullURL(t *testing.T)"
TestResolveAuthConfigFullURL( ${1:t *testing.T})
endsnippet

snippet TestResolveAuthConfigIndexServer "TestResolveAuthConfigIndexServer(t *testing.T)"
TestResolveAuthConfigIndexServer( ${1:t *testing.T})
endsnippet

snippet TestResolveIdents "TestResolveIdents(t *testing.T)"
TestResolveIdents( ${1:t *testing.T})
endsnippet

snippet TestResolveRepositoryName "TestResolveRepositoryName(t *testing.T)"
TestResolveRepositoryName( ${1:t *testing.T})
endsnippet

snippet TestResourceShipReq "TestResourceShipReq(t *testing.T)"
TestResourceShipReq( ${1:t *testing.T})
endsnippet

snippet TestResponseIndent "TestResponseIndent(t *testing.T)"
TestResponseIndent( ${1:t *testing.T})
endsnippet

snippet TestResponseNotIndent "TestResponseNotIndent(t *testing.T)"
TestResponseNotIndent( ${1:t *testing.T})
endsnippet

snippet TestRestartContainer "TestRestartContainer(t *testing.T)"
TestRestartContainer( ${1:t *testing.T})
endsnippet

snippet TestRestartContainerNotFound "TestRestartContainerNotFound(t *testing.T)"
TestRestartContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestRestartKillWait "TestRestartKillWait(t *testing.T)"
TestRestartKillWait( ${1:t *testing.T})
endsnippet

snippet TestRestartOnFailure "TestRestartOnFailure(t *testing.T)"
TestRestartOnFailure( ${1:t *testing.T})
endsnippet

snippet TestRestartRunningContainer "TestRestartRunningContainer(t *testing.T)"
TestRestartRunningContainer( ${1:t *testing.T})
endsnippet

snippet TestRestartStdin "TestRestartStdin(t *testing.T)"
TestRestartStdin( ${1:t *testing.T})
endsnippet

snippet TestRestartStoppedContainer "TestRestartStoppedContainer(t *testing.T)"
TestRestartStoppedContainer( ${1:t *testing.T})
endsnippet

snippet TestRestartWithVolumes "TestRestartWithVolumes(t *testing.T)"
TestRestartWithVolumes( ${1:t *testing.T})
endsnippet

snippet TestRestore "TestRestore(t *testing.T)"
TestRestore( ${1:t *testing.T})
endsnippet

snippet TestReuseReleasedPort "TestReuseReleasedPort(t *testing.T)"
TestReuseReleasedPort( ${1:t *testing.T})
endsnippet

snippet TestReverseRouteResolution "TestReverseRouteResolution(t *testing.T)"
TestReverseRouteResolution( ${1:t *testing.T})
endsnippet

snippet TestReviveSoldierReq "TestReviveSoldierReq(t *testing.T)"
TestReviveSoldierReq( ${1:t *testing.T})
endsnippet

snippet TestReviveSoldierSpeedUpReq "TestReviveSoldierSpeedUpReq(t *testing.T)"
TestReviveSoldierSpeedUpReq( ${1:t *testing.T})
endsnippet

snippet TestRewrite "TestRewrite(t *testing.T)"
TestRewrite( ${1:t *testing.T})
endsnippet

snippet TestRewriteImport "TestRewriteImport(t *testing.T)"
TestRewriteImport( ${1:t *testing.T})
endsnippet

snippet TestRewrites "TestRewrites(t *testing.T)"
TestRewrites( ${1:t *testing.T})
endsnippet

snippet TestRlimit "TestRlimit(t *testing.T)"
TestRlimit( ${1:t *testing.T})
endsnippet

snippet TestRmContainerOrphaning "TestRmContainerOrphaning(t *testing.T)"
TestRmContainerOrphaning( ${1:t *testing.T})
endsnippet

snippet TestRmContainerWithRemovedVolume "TestRmContainerWithRemovedVolume(t *testing.T)"
TestRmContainerWithRemovedVolume( ${1:t *testing.T})
endsnippet

snippet TestRmContainerWithVolume "TestRmContainerWithVolume(t *testing.T)"
TestRmContainerWithVolume( ${1:t *testing.T})
endsnippet

snippet TestRmForceRemoveRunningContainer "TestRmForceRemoveRunningContainer(t *testing.T)"
TestRmForceRemoveRunningContainer( ${1:t *testing.T})
endsnippet

snippet TestRmInvalidContainer "TestRmInvalidContainer(t *testing.T)"
TestRmInvalidContainer( ${1:t *testing.T})
endsnippet

snippet TestRmRunningContainer "TestRmRunningContainer(t *testing.T)"
TestRmRunningContainer( ${1:t *testing.T})
endsnippet

snippet TestRmRunningContainerCheckError409 "TestRmRunningContainerCheckError409(t *testing.T)"
TestRmRunningContainerCheckError409( ${1:t *testing.T})
endsnippet

snippet TestRmiForceWithExistingContainers "TestRmiForceWithExistingContainers(t *testing.T)"
TestRmiForceWithExistingContainers( ${1:t *testing.T})
endsnippet

snippet TestRmiTag "TestRmiTag(t *testing.T)"
TestRmiTag( ${1:t *testing.T})
endsnippet

snippet TestRmiTagWithExistingContainers "TestRmiTagWithExistingContainers(t *testing.T)"
TestRmiTagWithExistingContainers( ${1:t *testing.T})
endsnippet

snippet TestRmiWithContainerFails "TestRmiWithContainerFails(t *testing.T)"
TestRmiWithContainerFails( ${1:t *testing.T})
endsnippet

snippet TestRmoveContainer "TestRmoveContainer(t *testing.T)"
TestRmoveContainer( ${1:t *testing.T})
endsnippet

snippet TestRoundTrip "TestRoundTrip(t *testing.T)"
TestRoundTrip( ${1:t *testing.T})
endsnippet

snippet TestRouteMatchers "TestRouteMatchers(t *testing.T)"
TestRouteMatchers( ${1:t *testing.T})
endsnippet

snippet TestRouteOrder "TestRouteOrder(t *testing.T)"
TestRouteOrder( ${1:t *testing.T})
endsnippet

snippet TestRpc "TestRpc(t *testing.T)"
TestRpc( ${1:t *testing.T})
endsnippet

snippet TestRpcAll "TestRpcAll(t *testing.T)"
TestRpcAll( ${1:t *testing.T})
endsnippet

snippet TestRunAStar "TestRunAStar(t *testing.T)"
TestRunAStar( ${1:t *testing.T})
endsnippet

snippet TestRunAddHost "TestRunAddHost(t *testing.T)"
TestRunAddHost( ${1:t *testing.T})
endsnippet

snippet TestRunAddingOptionalDevices "TestRunAddingOptionalDevices(t *testing.T)"
TestRunAddingOptionalDevices( ${1:t *testing.T})
endsnippet

snippet TestRunAllowBindMountingRoot "TestRunAllowBindMountingRoot(t *testing.T)"
TestRunAllowBindMountingRoot( ${1:t *testing.T})
endsnippet

snippet TestRunAllowPortRangeThroughExpose "TestRunAllowPortRangeThroughExpose(t *testing.T)"
TestRunAllowPortRangeThroughExpose( ${1:t *testing.T})
endsnippet

snippet TestRunApplyVolumesFromBeforeVolumes "TestRunApplyVolumesFromBeforeVolumes(t *testing.T)"
TestRunApplyVolumesFromBeforeVolumes( ${1:t *testing.T})
endsnippet

snippet TestRunAttachStdErrOnlyTTYMode "TestRunAttachStdErrOnlyTTYMode(t *testing.T)"
TestRunAttachStdErrOnlyTTYMode( ${1:t *testing.T})
endsnippet

snippet TestRunAttachStdOutAndErrTTYMode "TestRunAttachStdOutAndErrTTYMode(t *testing.T)"
TestRunAttachStdOutAndErrTTYMode( ${1:t *testing.T})
endsnippet

snippet TestRunAttachStdOutOnlyTTYMode "TestRunAttachStdOutOnlyTTYMode(t *testing.T)"
TestRunAttachStdOutOnlyTTYMode( ${1:t *testing.T})
endsnippet

snippet TestRunAutoRemove "TestRunAutoRemove(t *testing.T)"
TestRunAutoRemove( ${1:t *testing.T})
endsnippet

snippet TestRunBindMounts "TestRunBindMounts(t *testing.T)"
TestRunBindMounts( ${1:t *testing.T})
endsnippet

snippet TestRunCapAddALLCanDownInterface "TestRunCapAddALLCanDownInterface(t *testing.T)"
TestRunCapAddALLCanDownInterface( ${1:t *testing.T})
endsnippet

snippet TestRunCapAddALLDropNetAdminCanDownInterface "TestRunCapAddALLDropNetAdminCanDownInterface(t *testing.T)"
TestRunCapAddALLDropNetAdminCanDownInterface( ${1:t *testing.T})
endsnippet

snippet TestRunCapAddCanDownInterface "TestRunCapAddCanDownInterface(t *testing.T)"
TestRunCapAddCanDownInterface( ${1:t *testing.T})
endsnippet

snippet TestRunCapAddInvalid "TestRunCapAddInvalid(t *testing.T)"
TestRunCapAddInvalid( ${1:t *testing.T})
endsnippet

snippet TestRunCapDropALLAddMknodCannotMknod "TestRunCapDropALLAddMknodCannotMknod(t *testing.T)"
TestRunCapDropALLAddMknodCannotMknod( ${1:t *testing.T})
endsnippet

snippet TestRunCapDropALLCannotMknod "TestRunCapDropALLCannotMknod(t *testing.T)"
TestRunCapDropALLCannotMknod( ${1:t *testing.T})
endsnippet

snippet TestRunCapDropCannotMknod "TestRunCapDropCannotMknod(t *testing.T)"
TestRunCapDropCannotMknod( ${1:t *testing.T})
endsnippet

snippet TestRunCapDropCannotMknodLowerCase "TestRunCapDropCannotMknodLowerCase(t *testing.T)"
TestRunCapDropCannotMknodLowerCase( ${1:t *testing.T})
endsnippet

snippet TestRunCapDropInvalid "TestRunCapDropInvalid(t *testing.T)"
TestRunCapDropInvalid( ${1:t *testing.T})
endsnippet

snippet TestRunCidFileCheckIDLength "TestRunCidFileCheckIDLength(t *testing.T)"
TestRunCidFileCheckIDLength( ${1:t *testing.T})
endsnippet

snippet TestRunCidFileCleanupIfEmpty "TestRunCidFileCleanupIfEmpty(t *testing.T)"
TestRunCidFileCleanupIfEmpty( ${1:t *testing.T})
endsnippet

snippet TestRunCleanupCmdOnEntrypoint "TestRunCleanupCmdOnEntrypoint(t *testing.T)"
TestRunCleanupCmdOnEntrypoint( ${1:t *testing.T})
endsnippet

snippet TestRunContainer "TestRunContainer(t *testing.T)"
TestRunContainer( ${1:t *testing.T})
endsnippet

snippet TestRunContainerNetwork "TestRunContainerNetwork(t *testing.T)"
TestRunContainerNetwork( ${1:t *testing.T})
endsnippet

snippet TestRunCopyVolumeContent "TestRunCopyVolumeContent(t *testing.T)"
TestRunCopyVolumeContent( ${1:t *testing.T})
endsnippet

snippet TestRunCopyVolumeUidGid "TestRunCopyVolumeUidGid(t *testing.T)"
TestRunCopyVolumeUidGid( ${1:t *testing.T})
endsnippet

snippet TestRunCreateVolume "TestRunCreateVolume(t *testing.T)"
TestRunCreateVolume( ${1:t *testing.T})
endsnippet

snippet TestRunCreateVolumeWithSymlink "TestRunCreateVolumeWithSymlink(t *testing.T)"
TestRunCreateVolumeWithSymlink( ${1:t *testing.T})
endsnippet

snippet TestRunDeallocatePortOnMissingIptablesRule "TestRunDeallocatePortOnMissingIptablesRule(t *testing.T)"
TestRunDeallocatePortOnMissingIptablesRule( ${1:t *testing.T})
endsnippet

snippet TestRunDetach "TestRunDetach(t *testing.T)"
TestRunDetach( ${1:t *testing.T})
endsnippet

snippet TestRunDetachedContainerIDPrinting "TestRunDetachedContainerIDPrinting(t *testing.T)"
TestRunDetachedContainerIDPrinting( ${1:t *testing.T})
endsnippet

snippet TestRunDeviceNumbers "TestRunDeviceNumbers(t *testing.T)"
TestRunDeviceNumbers( ${1:t *testing.T})
endsnippet

snippet TestRunDisallowBindMountingRootToRoot "TestRunDisallowBindMountingRootToRoot(t *testing.T)"
TestRunDisallowBindMountingRootToRoot( ${1:t *testing.T})
endsnippet

snippet TestRunDnsDefaultOptions "TestRunDnsDefaultOptions(t *testing.T)"
TestRunDnsDefaultOptions( ${1:t *testing.T})
endsnippet

snippet TestRunDnsOptions "TestRunDnsOptions(t *testing.T)"
TestRunDnsOptions( ${1:t *testing.T})
endsnippet

snippet TestRunDnsOptionsBasedOnHostResolvConf "TestRunDnsOptionsBasedOnHostResolvConf(t *testing.T)"
TestRunDnsOptionsBasedOnHostResolvConf( ${1:t *testing.T})
endsnippet

snippet TestRunEchoNamedContainer "TestRunEchoNamedContainer(t *testing.T)"
TestRunEchoNamedContainer( ${1:t *testing.T})
endsnippet

snippet TestRunEchoStdout "TestRunEchoStdout(t *testing.T)"
TestRunEchoStdout( ${1:t *testing.T})
endsnippet

snippet TestRunEchoStdoutWitCPULimit "TestRunEchoStdoutWitCPULimit(t *testing.T)"
TestRunEchoStdoutWitCPULimit( ${1:t *testing.T})
endsnippet

snippet TestRunEchoStdoutWithCPUAndMemoryLimit "TestRunEchoStdoutWithCPUAndMemoryLimit(t *testing.T)"
TestRunEchoStdoutWithCPUAndMemoryLimit( ${1:t *testing.T})
endsnippet

snippet TestRunEchoStdoutWithMemoryLimit "TestRunEchoStdoutWithMemoryLimit(t *testing.T)"
TestRunEchoStdoutWithMemoryLimit( ${1:t *testing.T})
endsnippet

snippet TestRunEntrypoint "TestRunEntrypoint(t *testing.T)"
TestRunEntrypoint( ${1:t *testing.T})
endsnippet

snippet TestRunEnvironment "TestRunEnvironment(t *testing.T)"
TestRunEnvironment( ${1:t *testing.T})
endsnippet

snippet TestRunExecDir "TestRunExecDir(t *testing.T)"
TestRunExecDir( ${1:t *testing.T})
endsnippet

snippet TestRunExitCode "TestRunExitCode(t *testing.T)"
TestRunExitCode( ${1:t *testing.T})
endsnippet

snippet TestRunExitCodeOne "TestRunExitCodeOne(t *testing.T)"
TestRunExitCodeOne( ${1:t *testing.T})
endsnippet

snippet TestRunExitCodeZero "TestRunExitCodeZero(t *testing.T)"
TestRunExitCodeZero( ${1:t *testing.T})
endsnippet

snippet TestRunExitOnStdinClose "TestRunExitOnStdinClose(t *testing.T)"
TestRunExitOnStdinClose( ${1:t *testing.T})
endsnippet

snippet TestRunFullHostnameSet "TestRunFullHostnameSet(t *testing.T)"
TestRunFullHostnameSet( ${1:t *testing.T})
endsnippet

snippet TestRunInspectMacAddress "TestRunInspectMacAddress(t *testing.T)"
TestRunInspectMacAddress( ${1:t *testing.T})
endsnippet

snippet TestRunLeakyFileDescriptors "TestRunLeakyFileDescriptors(t *testing.T)"
TestRunLeakyFileDescriptors( ${1:t *testing.T})
endsnippet

snippet TestRunLoopbackOnlyExistsWhenNetworkingDisabled "TestRunLoopbackOnlyExistsWhenNetworkingDisabled(t *testing.T)"
TestRunLoopbackOnlyExistsWhenNetworkingDisabled( ${1:t *testing.T})
endsnippet

snippet TestRunLoopbackWhenNetworkDisabled "TestRunLoopbackWhenNetworkDisabled(t *testing.T)"
TestRunLoopbackWhenNetworkDisabled( ${1:t *testing.T})
endsnippet

snippet TestRunModeHostname "TestRunModeHostname(t *testing.T)"
TestRunModeHostname( ${1:t *testing.T})
endsnippet

snippet TestRunModeIpcContainer "TestRunModeIpcContainer(t *testing.T)"
TestRunModeIpcContainer( ${1:t *testing.T})
endsnippet

snippet TestRunModeIpcHost "TestRunModeIpcHost(t *testing.T)"
TestRunModeIpcHost( ${1:t *testing.T})
endsnippet

snippet TestRunMountOrdering "TestRunMountOrdering(t *testing.T)"
TestRunMountOrdering( ${1:t *testing.T})
endsnippet

snippet TestRunMultipleVolumesFrom "TestRunMultipleVolumesFrom(t *testing.T)"
TestRunMultipleVolumesFrom( ${1:t *testing.T})
endsnippet

snippet TestRunMutableNetworkFiles "TestRunMutableNetworkFiles(t *testing.T)"
TestRunMutableNetworkFiles( ${1:t *testing.T})
endsnippet

snippet TestRunNetHostNotAllowedWithLinks "TestRunNetHostNotAllowedWithLinks(t *testing.T)"
TestRunNetHostNotAllowedWithLinks( ${1:t *testing.T})
endsnippet

snippet TestRunNetworkNotInitializedNoneMode "TestRunNetworkNotInitializedNoneMode(t *testing.T)"
TestRunNetworkNotInitializedNoneMode( ${1:t *testing.T})
endsnippet

snippet TestRunNoOutputFromPullInStdout "TestRunNoOutputFromPullInStdout(t *testing.T)"
TestRunNoOutputFromPullInStdout( ${1:t *testing.T})
endsnippet

snippet TestRunPingGoogle "TestRunPingGoogle(t *testing.T)"
TestRunPingGoogle( ${1:t *testing.T})
endsnippet

snippet TestRunPortFromDockerRangeInUse "TestRunPortFromDockerRangeInUse(t *testing.T)"
TestRunPortFromDockerRangeInUse( ${1:t *testing.T})
endsnippet

snippet TestRunPortInUse "TestRunPortInUse(t *testing.T)"
TestRunPortInUse( ${1:t *testing.T})
endsnippet

snippet TestRunPortProxy "TestRunPortProxy(t *testing.T)"
TestRunPortProxy( ${1:t *testing.T})
endsnippet

snippet TestRunPrivilegedCanMknod "TestRunPrivilegedCanMknod(t *testing.T)"
TestRunPrivilegedCanMknod( ${1:t *testing.T})
endsnippet

snippet TestRunPrivilegedCanMount "TestRunPrivilegedCanMount(t *testing.T)"
TestRunPrivilegedCanMount( ${1:t *testing.T})
endsnippet

snippet TestRunProcNotWritableInNonPrivilegedContainers "TestRunProcNotWritableInNonPrivilegedContainers(t *testing.T)"
TestRunProcNotWritableInNonPrivilegedContainers( ${1:t *testing.T})
endsnippet

snippet TestRunProcWritableInPrivilegedContainers "TestRunProcWritableInPrivilegedContainers(t *testing.T)"
TestRunProcWritableInPrivilegedContainers( ${1:t *testing.T})
endsnippet

snippet TestRunRedirectStdout "TestRunRedirectStdout(t *testing.T)"
TestRunRedirectStdout( ${1:t *testing.T})
endsnippet

snippet TestRunReuseBindVolumeThatIsSymlink "TestRunReuseBindVolumeThatIsSymlink(t *testing.T)"
TestRunReuseBindVolumeThatIsSymlink( ${1:t *testing.T})
endsnippet

snippet TestRunRootWorkdir "TestRunRootWorkdir(t *testing.T)"
TestRunRootWorkdir( ${1:t *testing.T})
endsnippet

snippet TestRunSetMacAddress "TestRunSetMacAddress(t *testing.T)"
TestRunSetMacAddress( ${1:t *testing.T})
endsnippet

snippet TestRunSlowStdoutConsumer "TestRunSlowStdoutConsumer(t *testing.T)"
TestRunSlowStdoutConsumer( ${1:t *testing.T})
endsnippet

snippet TestRunState "TestRunState(t *testing.T)"
TestRunState( ${1:t *testing.T})
endsnippet

snippet TestRunStdinPipe "TestRunStdinPipe(t *testing.T)"
TestRunStdinPipe( ${1:t *testing.T})
endsnippet

snippet TestRunSysNotWritableInNonPrivilegedContainers "TestRunSysNotWritableInNonPrivilegedContainers(t *testing.T)"
TestRunSysNotWritableInNonPrivilegedContainers( ${1:t *testing.T})
endsnippet

snippet TestRunSysWritableInPrivilegedContainers "TestRunSysWritableInPrivilegedContainers(t *testing.T)"
TestRunSysWritableInPrivilegedContainers( ${1:t *testing.T})
endsnippet

snippet TestRunTLSverify "TestRunTLSverify(t *testing.T)"
TestRunTLSverify( ${1:t *testing.T})
endsnippet

snippet TestRunThatCharacterDevicesActLikeCharacterDevices "TestRunThatCharacterDevicesActLikeCharacterDevices(t *testing.T)"
TestRunThatCharacterDevicesActLikeCharacterDevices( ${1:t *testing.T})
endsnippet

snippet TestRunTtyWithPipe "TestRunTtyWithPipe(t *testing.T)"
TestRunTtyWithPipe( ${1:t *testing.T})
endsnippet

snippet TestRunTwoConcurrentContainers "TestRunTwoConcurrentContainers(t *testing.T)"
TestRunTwoConcurrentContainers( ${1:t *testing.T})
endsnippet

snippet TestRunUnPrivilegedCanMknod "TestRunUnPrivilegedCanMknod(t *testing.T)"
TestRunUnPrivilegedCanMknod( ${1:t *testing.T})
endsnippet

snippet TestRunUnPrivilegedCannotMount "TestRunUnPrivilegedCannotMount(t *testing.T)"
TestRunUnPrivilegedCannotMount( ${1:t *testing.T})
endsnippet

snippet TestRunUnknownCommand "TestRunUnknownCommand(t *testing.T)"
TestRunUnknownCommand( ${1:t *testing.T})
endsnippet

snippet TestRunUnprivilegedWithChroot "TestRunUnprivilegedWithChroot(t *testing.T)"
TestRunUnprivilegedWithChroot( ${1:t *testing.T})
endsnippet

snippet TestRunUserByID "TestRunUserByID(t *testing.T)"
TestRunUserByID( ${1:t *testing.T})
endsnippet

snippet TestRunUserByIDBig "TestRunUserByIDBig(t *testing.T)"
TestRunUserByIDBig( ${1:t *testing.T})
endsnippet

snippet TestRunUserByIDNegative "TestRunUserByIDNegative(t *testing.T)"
TestRunUserByIDNegative( ${1:t *testing.T})
endsnippet

snippet TestRunUserByIDZero "TestRunUserByIDZero(t *testing.T)"
TestRunUserByIDZero( ${1:t *testing.T})
endsnippet

snippet TestRunUserByName "TestRunUserByName(t *testing.T)"
TestRunUserByName( ${1:t *testing.T})
endsnippet

snippet TestRunUserDefaultsToRoot "TestRunUserDefaultsToRoot(t *testing.T)"
TestRunUserDefaultsToRoot( ${1:t *testing.T})
endsnippet

snippet TestRunUserNotFound "TestRunUserNotFound(t *testing.T)"
TestRunUserNotFound( ${1:t *testing.T})
endsnippet

snippet TestRunVerifyContainerID "TestRunVerifyContainerID(t *testing.T)"
TestRunVerifyContainerID( ${1:t *testing.T})
endsnippet

snippet TestRunVolumesCleanPaths "TestRunVolumesCleanPaths(t *testing.T)"
TestRunVolumesCleanPaths( ${1:t *testing.T})
endsnippet

snippet TestRunVolumesFromInReadWriteMode "TestRunVolumesFromInReadWriteMode(t *testing.T)"
TestRunVolumesFromInReadWriteMode( ${1:t *testing.T})
endsnippet

snippet TestRunVolumesFromInReadonlyMode "TestRunVolumesFromInReadonlyMode(t *testing.T)"
TestRunVolumesFromInReadonlyMode( ${1:t *testing.T})
endsnippet

snippet TestRunVolumesFromSymlinkPath "TestRunVolumesFromSymlinkPath(t *testing.T)"
TestRunVolumesFromSymlinkPath( ${1:t *testing.T})
endsnippet

snippet TestRunVolumesMountedAsReadonly "TestRunVolumesMountedAsReadonly(t *testing.T)"
TestRunVolumesMountedAsReadonly( ${1:t *testing.T})
endsnippet

snippet TestRunVolumesNotRecreatedOnStart "TestRunVolumesNotRecreatedOnStart(t *testing.T)"
TestRunVolumesNotRecreatedOnStart( ${1:t *testing.T})
endsnippet

snippet TestRunWithBadDevice "TestRunWithBadDevice(t *testing.T)"
TestRunWithBadDevice( ${1:t *testing.T})
endsnippet

snippet TestRunWithCpuset "TestRunWithCpuset(t *testing.T)"
TestRunWithCpuset( ${1:t *testing.T})
endsnippet

snippet TestRunWithRelativePath "TestRunWithRelativePath(t *testing.T)"
TestRunWithRelativePath( ${1:t *testing.T})
endsnippet

snippet TestRunWithTooLowMemoryLimit "TestRunWithTooLowMemoryLimit(t *testing.T)"
TestRunWithTooLowMemoryLimit( ${1:t *testing.T})
endsnippet

snippet TestRunWithVolumesAsFiles "TestRunWithVolumesAsFiles(t *testing.T)"
TestRunWithVolumesAsFiles( ${1:t *testing.T})
endsnippet

snippet TestRunWithVolumesFromExited "TestRunWithVolumesFromExited(t *testing.T)"
TestRunWithVolumesFromExited( ${1:t *testing.T})
endsnippet

snippet TestRunWithVolumesIsRecursive "TestRunWithVolumesIsRecursive(t *testing.T)"
TestRunWithVolumesIsRecursive( ${1:t *testing.T})
endsnippet

snippet TestRunWithoutNetworking "TestRunWithoutNetworking(t *testing.T)"
TestRunWithoutNetworking( ${1:t *testing.T})
endsnippet

snippet TestRunWorkdirExistsAndIsFile "TestRunWorkdirExistsAndIsFile(t *testing.T)"
TestRunWorkdirExistsAndIsFile( ${1:t *testing.T})
endsnippet

snippet TestRunWorkingDirectory "TestRunWorkingDirectory(t *testing.T)"
TestRunWorkingDirectory( ${1:t *testing.T})
endsnippet

snippet TestRunWriteHostnameFileAndNotCommit "TestRunWriteHostnameFileAndNotCommit(t *testing.T)"
TestRunWriteHostnameFileAndNotCommit( ${1:t *testing.T})
endsnippet

snippet TestRunWriteHostsFileAndNotCommit "TestRunWriteHostsFileAndNotCommit(t *testing.T)"
TestRunWriteHostsFileAndNotCommit( ${1:t *testing.T})
endsnippet

snippet TestRunWriteResolvFileAndNotCommit "TestRunWriteResolvFileAndNotCommit(t *testing.T)"
TestRunWriteResolvFileAndNotCommit( ${1:t *testing.T})
endsnippet

snippet TestRuneIO "TestRuneIO(t *testing.T)"
TestRuneIO( ${1:t *testing.T})
endsnippet

snippet TestRuneWidth "TestRuneWidth(t *testing.T)"
TestRuneWidth( ${1:t *testing.T})
endsnippet

snippet TestRunningJobTwice "TestRunningJobTwice(t *testing.T)"
TestRunningJobTwice( ${1:t *testing.T})
endsnippet

snippet TestRunningMultipleSchedules "TestRunningMultipleSchedules(t *testing.T)"
TestRunningMultipleSchedules( ${1:t *testing.T})
endsnippet

snippet TestSELinux "TestSELinux(t *testing.T)"
TestSELinux( ${1:t *testing.T})
endsnippet

snippet TestSOCKS5 "TestSOCKS5(t *testing.T)"
TestSOCKS5( ${1:t *testing.T})
endsnippet

snippet TestSameAuthDataPostSave "TestSameAuthDataPostSave(t *testing.T)"
TestSameAuthDataPostSave( ${1:t *testing.T})
endsnippet

snippet TestSanitizeFunc "TestSanitizeFunc(t *testing.T)"
TestSanitizeFunc( ${1:t *testing.T})
endsnippet

snippet TestSaveAndLoadRepoFlags "TestSaveAndLoadRepoFlags(t *testing.T)"
TestSaveAndLoadRepoFlags( ${1:t *testing.T})
endsnippet

snippet TestSaveAndLoadRepoStdout "TestSaveAndLoadRepoStdout(t *testing.T)"
TestSaveAndLoadRepoStdout( ${1:t *testing.T})
endsnippet

snippet TestSaveDirectoryPermissions "TestSaveDirectoryPermissions(t *testing.T)"
TestSaveDirectoryPermissions( ${1:t *testing.T})
endsnippet

snippet TestSaveImageAndThenLoad "TestSaveImageAndThenLoad(t *testing.T)"
TestSaveImageAndThenLoad( ${1:t *testing.T})
endsnippet

snippet TestSaveImageId "TestSaveImageId(t *testing.T)"
TestSaveImageId( ${1:t *testing.T})
endsnippet

snippet TestSaveMultipleNames "TestSaveMultipleNames(t *testing.T)"
TestSaveMultipleNames( ${1:t *testing.T})
endsnippet

snippet TestSaveRepoWithMultipleImages "TestSaveRepoWithMultipleImages(t *testing.T)"
TestSaveRepoWithMultipleImages( ${1:t *testing.T})
endsnippet

snippet TestSaveSingleTag "TestSaveSingleTag(t *testing.T)"
TestSaveSingleTag( ${1:t *testing.T})
endsnippet

snippet TestSaveXzAndLoadRepoStdout "TestSaveXzAndLoadRepoStdout(t *testing.T)"
TestSaveXzAndLoadRepoStdout( ${1:t *testing.T})
endsnippet

snippet TestSaveXzGzAndLoadRepoStdout "TestSaveXzGzAndLoadRepoStdout(t *testing.T)"
TestSaveXzGzAndLoadRepoStdout( ${1:t *testing.T})
endsnippet

snippet TestScan "TestScan(t *testing.T)"
TestScan( ${1:t *testing.T})
endsnippet

snippet TestScanErrors "TestScanErrors(t *testing.T)"
TestScanErrors( ${1:t *testing.T})
endsnippet

snippet TestSchemeMatcher "TestSchemeMatcher(t *testing.T)"
TestSchemeMatcher( ${1:t *testing.T})
endsnippet

snippet TestSchemes "TestSchemes(t *testing.T)"
TestSchemes( ${1:t *testing.T})
endsnippet

snippet TestScopesInfo "TestScopesInfo(t *testing.T)"
TestScopesInfo( ${1:t *testing.T})
endsnippet

snippet TestSearchAllianceReq "TestSearchAllianceReq(t *testing.T)"
TestSearchAllianceReq( ${1:t *testing.T})
endsnippet

snippet TestSearchImages "TestSearchImages(t *testing.T)"
TestSearchImages( ${1:t *testing.T})
endsnippet

snippet TestSearchOnCentralRegistry "TestSearchOnCentralRegistry(t *testing.T)"
TestSearchOnCentralRegistry( ${1:t *testing.T})
endsnippet

snippet TestSearchRepositories "TestSearchRepositories(t *testing.T)"
TestSearchRepositories( ${1:t *testing.T})
endsnippet

snippet TestSearchUserReq "TestSearchUserReq(t *testing.T)"
TestSearchUserReq( ${1:t *testing.T})
endsnippet

snippet TestSecWebSocketAccept "TestSecWebSocketAccept(t *testing.T)"
TestSecWebSocketAccept( ${1:t *testing.T})
endsnippet

snippet TestSegment "TestSegment(t *testing.T)"
TestSegment( ${1:t *testing.T})
endsnippet

snippet TestSelection "TestSelection(t *testing.T)"
TestSelection( ${1:t *testing.T})
endsnippet

snippet TestSelf "TestSelf(t *testing.T)"
TestSelf( ${1:t *testing.T})
endsnippet

snippet TestSelinuxLabels "TestSelinuxLabels(t *testing.T)"
TestSelinuxLabels( ${1:t *testing.T})
endsnippet

snippet TestSellResourceReq "TestSellResourceReq(t *testing.T)"
TestSellResourceReq( ${1:t *testing.T})
endsnippet

snippet TestSemis "TestSemis(t *testing.T)"
TestSemis( ${1:t *testing.T})
endsnippet

snippet TestSend "TestSend(t *testing.T)"
TestSend( ${1:t *testing.T})
endsnippet

snippet TestSendMailReq "TestSendMailReq(t *testing.T)"
TestSendMailReq( ${1:t *testing.T})
endsnippet

snippet TestSentryHandler "TestSentryHandler(t *testing.T)"
TestSentryHandler( ${1:t *testing.T})
endsnippet

snippet TestServerStop "TestServerStop(t *testing.T)"
TestServerStop( ${1:t *testing.T})
endsnippet

snippet TestServerStopNoListener "TestServerStopNoListener(t *testing.T)"
TestServerStopNoListener( ${1:t *testing.T})
endsnippet

snippet TestServerURL "TestServerURL(t *testing.T)"
TestServerURL( ${1:t *testing.T})
endsnippet

snippet TestServerURLNoListener "TestServerURLNoListener(t *testing.T)"
TestServerURLNoListener( ${1:t *testing.T})
endsnippet

snippet TestSessionBus "TestSessionBus(t *testing.T)"
TestSessionBus( ${1:t *testing.T})
endsnippet

snippet TestSet "TestSet(t *testing.T)"
TestSet( ${1:t *testing.T})
endsnippet

snippet TestSetAuto "TestSetAuto(t *testing.T)"
TestSetAuto( ${1:t *testing.T})
endsnippet

snippet TestSetBool "TestSetBool(t *testing.T)"
TestSetBool( ${1:t *testing.T})
endsnippet

snippet TestSetDuplicateEntity "TestSetDuplicateEntity(t *testing.T)"
TestSetDuplicateEntity( ${1:t *testing.T})
endsnippet

snippet TestSetEntityWithDifferentName "TestSetEntityWithDifferentName(t *testing.T)"
TestSetEntityWithDifferentName( ${1:t *testing.T})
endsnippet

snippet TestSetFormat "TestSetFormat(t *testing.T)"
TestSetFormat( ${1:t *testing.T})
endsnippet

snippet TestSetHeaders "TestSetHeaders(t *testing.T)"
TestSetHeaders( ${1:t *testing.T})
endsnippet

snippet TestSetICMPFilter "TestSetICMPFilter(t *testing.T)"
TestSetICMPFilter( ${1:t *testing.T})
endsnippet

snippet TestSetInt "TestSetInt(t *testing.T)"
TestSetInt( ${1:t *testing.T})
endsnippet

snippet TestSetInt64 "TestSetInt64(t *testing.T)"
TestSetInt64( ${1:t *testing.T})
endsnippet

snippet TestSetIptablesChain "TestSetIptablesChain(t *testing.T)"
TestSetIptablesChain( ${1:t *testing.T})
endsnippet

snippet TestSetJSON "TestSetJSON(t *testing.T)"
TestSetJSON( ${1:t *testing.T})
endsnippet

snippet TestSetJSONFailure "TestSetJSONFailure(t *testing.T)"
TestSetJSONFailure( ${1:t *testing.T})
endsnippet

snippet TestSetList "TestSetList(t *testing.T)"
TestSetList( ${1:t *testing.T})
endsnippet

snippet TestSetMacAddress "TestSetMacAddress(t *testing.T)"
TestSetMacAddress( ${1:t *testing.T})
endsnippet

snippet TestSetOperations "TestSetOperations(t *testing.T)"
TestSetOperations( ${1:t *testing.T})
endsnippet

snippet TestSetOutput "TestSetOutput(t *testing.T)"
TestSetOutput( ${1:t *testing.T})
endsnippet

snippet TestSetSockOptInt "TestSetSockOptInt(t *testing.T)"
TestSetSockOptInt( ${1:t *testing.T})
endsnippet

snippet TestSetSockOptString "TestSetSockOptString(t *testing.T)"
TestSetSockOptString( ${1:t *testing.T})
endsnippet

snippet TestSetUnitProperties "TestSetUnitProperties(t *testing.T)"
TestSetUnitProperties( ${1:t *testing.T})
endsnippet

snippet TestSetWithProperType "TestSetWithProperType(t *testing.T)"
TestSetWithProperType( ${1:t *testing.T})
endsnippet

snippet TestSetenv "TestSetenv(t *testing.T)"
TestSetenv( ${1:t *testing.T})
endsnippet

snippet TestSetenvBool "TestSetenvBool(t *testing.T)"
TestSetenvBool( ${1:t *testing.T})
endsnippet

snippet TestSetenvInt "TestSetenvInt(t *testing.T)"
TestSetenvInt( ${1:t *testing.T})
endsnippet

snippet TestSetenvList "TestSetenvList(t *testing.T)"
TestSetenvList( ${1:t *testing.T})
endsnippet

snippet TestShowMapReq "TestShowMapReq(t *testing.T)"
TestShowMapReq( ${1:t *testing.T})
endsnippet

snippet TestShuffle "TestShuffle(t *testing.T)"
TestShuffle( ${1:t *testing.T})
endsnippet

snippet TestShutdownAfterRun "TestShutdownAfterRun(t *testing.T)"
TestShutdownAfterRun( ${1:t *testing.T})
endsnippet

snippet TestShutdownDuringRun "TestShutdownDuringRun(t *testing.T)"
TestShutdownDuringRun( ${1:t *testing.T})
endsnippet

snippet TestShutdownEmpty "TestShutdownEmpty(t *testing.T)"
TestShutdownEmpty( ${1:t *testing.T})
endsnippet

snippet TestSig "TestSig(t *testing.T)"
TestSig( ${1:t *testing.T})
endsnippet

snippet TestSignJSON "TestSignJSON(t *testing.T)"
TestSignJSON( ${1:t *testing.T})
endsnippet

snippet TestSignMap "TestSignMap(t *testing.T)"
TestSignMap( ${1:t *testing.T})
endsnippet

snippet TestSimpleCodecsEmbeddedPointer "TestSimpleCodecsEmbeddedPointer(t *testing.T)"
TestSimpleCodecsEmbeddedPointer( ${1:t *testing.T})
endsnippet

snippet TestSimpleCodecsMisc "TestSimpleCodecsMisc(t *testing.T)"
TestSimpleCodecsMisc( ${1:t *testing.T})
endsnippet

snippet TestSimpleCodecsTable "TestSimpleCodecsTable(t *testing.T)"
TestSimpleCodecsTable( ${1:t *testing.T})
endsnippet

snippet TestSimpleExample "TestSimpleExample(t *testing.T)"
TestSimpleExample( ${1:t *testing.T})
endsnippet

snippet TestSimpleFloats "TestSimpleFloats(t *testing.T)"
TestSimpleFloats( ${1:t *testing.T})
endsnippet

snippet TestSimpleInts "TestSimpleInts(t *testing.T)"
TestSimpleInts( ${1:t *testing.T})
endsnippet

snippet TestSimpleInts64 "TestSimpleInts64(t *testing.T)"
TestSimpleInts64( ${1:t *testing.T})
endsnippet

snippet TestSimpleMapMixed "TestSimpleMapMixed(t *testing.T)"
TestSimpleMapMixed( ${1:t *testing.T})
endsnippet

snippet TestSimpleMixed "TestSimpleMixed(t *testing.T)"
TestSimpleMixed( ${1:t *testing.T})
endsnippet

snippet TestSimpleRequest "TestSimpleRequest(t *testing.T)"
TestSimpleRequest( ${1:t *testing.T})
endsnippet

snippet TestSimpleRpcGo "TestSimpleRpcGo(t *testing.T)"
TestSimpleRpcGo( ${1:t *testing.T})
endsnippet

snippet TestSimpleString "TestSimpleString(t *testing.T)"
TestSimpleString( ${1:t *testing.T})
endsnippet

snippet TestSimpleWriteRead "TestSimpleWriteRead(t *testing.T)"
TestSimpleWriteRead( ${1:t *testing.T})
endsnippet

snippet TestSimultaneousCancels "TestSimultaneousCancels(t *testing.T)"
TestSimultaneousCancels( ${1:t *testing.T})
endsnippet

snippet TestSlowPublicSuffix "TestSlowPublicSuffix(t *testing.T)"
TestSlowPublicSuffix( ${1:t *testing.T})
endsnippet

snippet TestSmallBuffer "TestSmallBuffer(t *testing.T)"
TestSmallBuffer( ${1:t *testing.T})
endsnippet

snippet TestSnapshotEntries "TestSnapshotEntries(t *testing.T)"
TestSnapshotEntries( ${1:t *testing.T})
endsnippet

snippet TestSniff "TestSniff(t *testing.T)"
TestSniff( ${1:t *testing.T})
endsnippet

snippet TestSocket_Connect "TestSocket_Connect(t *testing.T)"
TestSocket_Connect( ${1:t *testing.T})
endsnippet

snippet TestSocket_SetSockOptStringNil "TestSocket_SetSockOptStringNil(t *testing.T)"
TestSocket_SetSockOptStringNil( ${1:t *testing.T})
endsnippet

snippet TestSolidesJson "TestSolidesJson(t *testing.T)"
TestSolidesJson( ${1:t *testing.T})
endsnippet

snippet TestSomething "TestSomething(t *testing.T)"
TestSomething( ${1:t *testing.T})
endsnippet

snippet TestSomething_suffix "TestSomething_suffix(t *testing.T)"
TestSomething_suffix( ${1:t *testing.T})
endsnippet

snippet TestSort "TestSort(t *testing.T)"
TestSort( ${1:t *testing.T})
endsnippet

snippet TestSortFileInfoSums "TestSortFileInfoSums(t *testing.T)"
TestSortFileInfoSums( ${1:t *testing.T})
endsnippet

snippet TestSortFlags "TestSortFlags(t *testing.T)"
TestSortFlags( ${1:t *testing.T})
endsnippet

snippet TestSortSamePortWithDifferentProto "TestSortSamePortWithDifferentProto(t *testing.T)"
TestSortSamePortWithDifferentProto( ${1:t *testing.T})
endsnippet

snippet TestSortUniquePorts "TestSortUniquePorts(t *testing.T)"
TestSortUniquePorts( ${1:t *testing.T})
endsnippet

snippet TestSourceTree "TestSourceTree(t *testing.T)"
TestSourceTree( ${1:t *testing.T})
endsnippet

snippet TestSparseEndToEnd "TestSparseEndToEnd(t *testing.T)"
TestSparseEndToEnd( ${1:t *testing.T})
endsnippet

snippet TestSparseFileReader "TestSparseFileReader(t *testing.T)"
TestSparseFileReader( ${1:t *testing.T})
endsnippet

snippet TestSparseIncrementalRead "TestSparseIncrementalRead(t *testing.T)"
TestSparseIncrementalRead( ${1:t *testing.T})
endsnippet

snippet TestSpeak "TestSpeak(t *testing.T)"
TestSpeak( ${1:t *testing.T})
endsnippet

snippet TestSpecSchedule "TestSpecSchedule(t *testing.T)"
TestSpecSchedule( ${1:t *testing.T})
endsnippet

snippet TestSpecialFields "TestSpecialFields(t *testing.T)"
TestSpecialFields( ${1:t *testing.T})
endsnippet

snippet TestSpeedUpAllianceDailyQuestReq "TestSpeedUpAllianceDailyQuestReq(t *testing.T)"
TestSpeedUpAllianceDailyQuestReq( ${1:t *testing.T})
endsnippet

snippet TestSpeedUpBuildingReq "TestSpeedUpBuildingReq(t *testing.T)"
TestSpeedUpBuildingReq( ${1:t *testing.T})
endsnippet

snippet TestSpeedUpDailyQuestReq "TestSpeedUpDailyQuestReq(t *testing.T)"
TestSpeedUpDailyQuestReq( ${1:t *testing.T})
endsnippet

snippet TestSplatInsert "TestSplatInsert(t *testing.T)"
TestSplatInsert( ${1:t *testing.T})
endsnippet

snippet TestSplatUrlEncoded "TestSplatUrlEncoded(t *testing.T)"
TestSplatUrlEncoded( ${1:t *testing.T})
endsnippet

snippet TestSplit "TestSplit(t *testing.T)"
TestSplit( ${1:t *testing.T})
endsnippet

snippet TestSplitIntoRuns "TestSplitIntoRuns(t *testing.T)"
TestSplitIntoRuns( ${1:t *testing.T})
endsnippet

snippet TestSplitProtoPort "TestSplitProtoPort(t *testing.T)"
TestSplitProtoPort( ${1:t *testing.T})
endsnippet

snippet TestSrcLinkFunc "TestSrcLinkFunc(t *testing.T)"
TestSrcLinkFunc( ${1:t *testing.T})
endsnippet

snippet TestSrcPosLinkFunc "TestSrcPosLinkFunc(t *testing.T)"
TestSrcPosLinkFunc( ${1:t *testing.T})
endsnippet

snippet TestStack "TestStack(t *testing.T)"
TestStack( ${1:t *testing.T})
endsnippet

snippet TestStartAllianceDailyQuestReq "TestStartAllianceDailyQuestReq(t *testing.T)"
TestStartAllianceDailyQuestReq( ${1:t *testing.T})
endsnippet

snippet TestStartAttachCorrectExitCode "TestStartAttachCorrectExitCode(t *testing.T)"
TestStartAttachCorrectExitCode( ${1:t *testing.T})
endsnippet

snippet TestStartAttachReturnsOnError "TestStartAttachReturnsOnError(t *testing.T)"
TestStartAttachReturnsOnError( ${1:t *testing.T})
endsnippet

snippet TestStartContainer "TestStartContainer(t *testing.T)"
TestStartContainer( ${1:t *testing.T})
endsnippet

snippet TestStartContainerAlreadyRunning "TestStartContainerAlreadyRunning(t *testing.T)"
TestStartContainerAlreadyRunning( ${1:t *testing.T})
endsnippet

snippet TestStartContainerNilHostConfig "TestStartContainerNilHostConfig(t *testing.T)"
TestStartContainerNilHostConfig( ${1:t *testing.T})
endsnippet

snippet TestStartContainerNotFound "TestStartContainerNotFound(t *testing.T)"
TestStartContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestStartContainerWithNotifyChannel "TestStartContainerWithNotifyChannel(t *testing.T)"
TestStartContainerWithNotifyChannel( ${1:t *testing.T})
endsnippet

snippet TestStartDailyQuestReq "TestStartDailyQuestReq(t *testing.T)"
TestStartDailyQuestReq( ${1:t *testing.T})
endsnippet

snippet TestStartRecordError "TestStartRecordError(t *testing.T)"
TestStartRecordError( ${1:t *testing.T})
endsnippet

snippet TestStartStopTransientUnit "TestStartStopTransientUnit(t *testing.T)"
TestStartStopTransientUnit( ${1:t *testing.T})
endsnippet

snippet TestStartStopUnit "TestStartStopUnit(t *testing.T)"
TestStartStopUnit( ${1:t *testing.T})
endsnippet

snippet TestStartVolumesFromFailsCleanly "TestStartVolumesFromFailsCleanly(t *testing.T)"
TestStartVolumesFromFailsCleanly( ${1:t *testing.T})
endsnippet

snippet TestState "TestState(t *testing.T)"
TestState( ${1:t *testing.T})
endsnippet

snippet TestStateRunStop "TestStateRunStop(t *testing.T)"
TestStateRunStop( ${1:t *testing.T})
endsnippet

snippet TestStateString "TestStateString(t *testing.T)"
TestStateString( ${1:t *testing.T})
endsnippet

snippet TestStateTimeoutWait "TestStateTimeoutWait(t *testing.T)"
TestStateTimeoutWait( ${1:t *testing.T})
endsnippet

snippet TestStatic "TestStatic(t *testing.T)"
TestStatic( ${1:t *testing.T})
endsnippet

snippet TestStatsFunc "TestStatsFunc(t *testing.T)"
TestStatsFunc( ${1:t *testing.T})
endsnippet

snippet TestStatus "TestStatus(t *testing.T)"
TestStatus( ${1:t *testing.T})
endsnippet

snippet TestStdCopy "TestStdCopy(t *testing.T)"
TestStdCopy( ${1:t *testing.T})
endsnippet

snippet TestStdCopyBigFrame "TestStdCopyBigFrame(t *testing.T)"
TestStdCopyBigFrame( ${1:t *testing.T})
endsnippet

snippet TestStdCopyCorruptedHeader "TestStdCopyCorruptedHeader(t *testing.T)"
TestStdCopyCorruptedHeader( ${1:t *testing.T})
endsnippet

snippet TestStdCopyDataErrReader "TestStdCopyDataErrReader(t *testing.T)"
TestStdCopyDataErrReader( ${1:t *testing.T})
endsnippet

snippet TestStdCopyEmpty "TestStdCopyEmpty(t *testing.T)"
TestStdCopyEmpty( ${1:t *testing.T})
endsnippet

snippet TestStdCopyHeaderOnly "TestStdCopyHeaderOnly(t *testing.T)"
TestStdCopyHeaderOnly( ${1:t *testing.T})
endsnippet

snippet TestStdCopyInvalidStdHeader "TestStdCopyInvalidStdHeader(t *testing.T)"
TestStdCopyInvalidStdHeader( ${1:t *testing.T})
endsnippet

snippet TestStdCopySmallFrame "TestStdCopySmallFrame(t *testing.T)"
TestStdCopySmallFrame( ${1:t *testing.T})
endsnippet

snippet TestStdCopyStress "TestStdCopyStress(t *testing.T)"
TestStdCopyStress( ${1:t *testing.T})
endsnippet

snippet TestStdCopyTimeoutReader "TestStdCopyTimeoutReader(t *testing.T)"
TestStdCopyTimeoutReader( ${1:t *testing.T})
endsnippet

snippet TestStdCopyTruncateWriter "TestStdCopyTruncateWriter(t *testing.T)"
TestStdCopyTruncateWriter( ${1:t *testing.T})
endsnippet

snippet TestStdCopyWriteError "TestStdCopyWriteError(t *testing.T)"
TestStdCopyWriteError( ${1:t *testing.T})
endsnippet

snippet TestStdErrorHander "TestStdErrorHander(t *testing.T)"
TestStdErrorHander( ${1:t *testing.T})
endsnippet

snippet TestStdFixed "TestStdFixed(t *testing.T)"
TestStdFixed( ${1:t *testing.T})
endsnippet

snippet TestStdKen "TestStdKen(t *testing.T)"
TestStdKen( ${1:t *testing.T})
endsnippet

snippet TestStdTest "TestStdTest(t *testing.T)"
TestStdTest( ${1:t *testing.T})
endsnippet

snippet TestStdin "TestStdin(t *testing.T)"
TestStdin( ${1:t *testing.T})
endsnippet

snippet TestStdlib "TestStdlib(t *testing.T)"
TestStdlib( ${1:t *testing.T})
endsnippet

snippet TestStopCausesJobsToNotRun "TestStopCausesJobsToNotRun(t *testing.T)"
TestStopCausesJobsToNotRun( ${1:t *testing.T})
endsnippet

snippet TestStopContainer "TestStopContainer(t *testing.T)"
TestStopContainer( ${1:t *testing.T})
endsnippet

snippet TestStopContainerNotFound "TestStopContainerNotFound(t *testing.T)"
TestStopContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestStopContainerNotRunning "TestStopContainerNotRunning(t *testing.T)"
TestStopContainerNotRunning( ${1:t *testing.T})
endsnippet

snippet TestStopContainerWithNotifyChannel "TestStopContainerWithNotifyChannel(t *testing.T)"
TestStopContainerWithNotifyChannel( ${1:t *testing.T})
endsnippet

snippet TestStrictSlash "TestStrictSlash(t *testing.T)"
TestStrictSlash( ${1:t *testing.T})
endsnippet

snippet TestString "TestString(t *testing.T)"
TestString( ${1:t *testing.T})
endsnippet

snippet TestStringWidth "TestStringWidth(t *testing.T)"
TestStringWidth( ${1:t *testing.T})
endsnippet

snippet TestStringWidthInvalid "TestStringWidthInvalid(t *testing.T)"
TestStringWidthInvalid( ${1:t *testing.T})
endsnippet

snippet TestStyle "TestStyle(t *testing.T)"
TestStyle( ${1:t *testing.T})
endsnippet

snippet TestSubRouter "TestSubRouter(t *testing.T)"
TestSubRouter( ${1:t *testing.T})
endsnippet

snippet TestSubRouting "TestSubRouting(t *testing.T)"
TestSubRouting( ${1:t *testing.T})
endsnippet

snippet TestSubrouterHeader "TestSubrouterHeader(t *testing.T)"
TestSubrouterHeader( ${1:t *testing.T})
endsnippet

snippet TestSubscribe "TestSubscribe(t *testing.T)"
TestSubscribe( ${1:t *testing.T})
endsnippet

snippet TestSubscribeUnit "TestSubscribeUnit(t *testing.T)"
TestSubscribeUnit( ${1:t *testing.T})
endsnippet

snippet TestSubscriptionSetUnit "TestSubscriptionSetUnit(t *testing.T)"
TestSubscriptionSetUnit( ${1:t *testing.T})
endsnippet

snippet TestSubtreePrivate "TestSubtreePrivate(t *testing.T)"
TestSubtreePrivate( ${1:t *testing.T})
endsnippet

snippet TestSubtreeShared "TestSubtreeShared(t *testing.T)"
TestSubtreeShared( ${1:t *testing.T})
endsnippet

snippet TestSubtreeSharedSlave "TestSubtreeSharedSlave(t *testing.T)"
TestSubtreeSharedSlave( ${1:t *testing.T})
endsnippet

snippet TestSubtreeUnbindable "TestSubtreeUnbindable(t *testing.T)"
TestSubtreeUnbindable( ${1:t *testing.T})
endsnippet

snippet TestSwitches "TestSwitches(t *testing.T)"
TestSwitches( ${1:t *testing.T})
endsnippet

snippet TestSyntheticFuncs "TestSyntheticFuncs(t *testing.T)"
TestSyntheticFuncs( ${1:t *testing.T})
endsnippet

snippet TestSystemBus "TestSystemBus(t *testing.T)"
TestSystemBus( ${1:t *testing.T})
endsnippet

snippet TestTCP4Proxy "TestTCP4Proxy(t *testing.T)"
TestTCP4Proxy( ${1:t *testing.T})
endsnippet

snippet TestTCP6Proxy "TestTCP6Proxy(t *testing.T)"
TestTCP6Proxy( ${1:t *testing.T})
endsnippet

snippet TestTCPDualStackProxy "TestTCPDualStackProxy(t *testing.T)"
TestTCPDualStackProxy( ${1:t *testing.T})
endsnippet

snippet TestTCPUnicastSockopt "TestTCPUnicastSockopt(t *testing.T)"
TestTCPUnicastSockopt( ${1:t *testing.T})
endsnippet

snippet TestTLSEventListeners "TestTLSEventListeners(t *testing.T)"
TestTLSEventListeners( ${1:t *testing.T})
endsnippet

snippet TestTODO "TestTODO(t *testing.T)"
TestTODO( ${1:t *testing.T})
endsnippet

snippet TestTableReverseSortStringValue "TestTableReverseSortStringValue(t *testing.T)"
TestTableReverseSortStringValue( ${1:t *testing.T})
endsnippet

snippet TestTableSortStringValue "TestTableSortStringValue(t *testing.T)"
TestTableSortStringValue( ${1:t *testing.T})
endsnippet

snippet TestTableWriteTo "TestTableWriteTo(t *testing.T)"
TestTableWriteTo( ${1:t *testing.T})
endsnippet

snippet TestTagExistedNameWithForce "TestTagExistedNameWithForce(t *testing.T)"
TestTagExistedNameWithForce( ${1:t *testing.T})
endsnippet

snippet TestTagExistedNameWithoutForce "TestTagExistedNameWithoutForce(t *testing.T)"
TestTagExistedNameWithoutForce( ${1:t *testing.T})
endsnippet

snippet TestTagImage "TestTagImage(t *testing.T)"
TestTagImage( ${1:t *testing.T})
endsnippet

snippet TestTagImageMissingRepo "TestTagImageMissingRepo(t *testing.T)"
TestTagImageMissingRepo( ${1:t *testing.T})
endsnippet

snippet TestTagImageNotFound "TestTagImageNotFound(t *testing.T)"
TestTagImageNotFound( ${1:t *testing.T})
endsnippet

snippet TestTagImageParameters "TestTagImageParameters(t *testing.T)"
TestTagImageParameters( ${1:t *testing.T})
endsnippet

snippet TestTagInvalidPrefixedRepo "TestTagInvalidPrefixedRepo(t *testing.T)"
TestTagInvalidPrefixedRepo( ${1:t *testing.T})
endsnippet

snippet TestTagInvalidUnprefixedRepo "TestTagInvalidUnprefixedRepo(t *testing.T)"
TestTagInvalidUnprefixedRepo( ${1:t *testing.T})
endsnippet

snippet TestTagUnprefixedRepoByID "TestTagUnprefixedRepoByID(t *testing.T)"
TestTagUnprefixedRepoByID( ${1:t *testing.T})
endsnippet

snippet TestTagUnprefixedRepoByName "TestTagUnprefixedRepoByName(t *testing.T)"
TestTagUnprefixedRepoByName( ${1:t *testing.T})
endsnippet

snippet TestTagValidPrefixedRepo "TestTagValidPrefixedRepo(t *testing.T)"
TestTagValidPrefixedRepo( ${1:t *testing.T})
endsnippet

snippet TestTail "TestTail(t *testing.T)"
TestTail( ${1:t *testing.T})
endsnippet

snippet TestTailEmptyFile "TestTailEmptyFile(t *testing.T)"
TestTailEmptyFile( ${1:t *testing.T})
endsnippet

snippet TestTailFile "TestTailFile(t *testing.T)"
TestTailFile( ${1:t *testing.T})
endsnippet

snippet TestTailFileManyLines "TestTailFileManyLines(t *testing.T)"
TestTailFileManyLines( ${1:t *testing.T})
endsnippet

snippet TestTailNegativeN "TestTailNegativeN(t *testing.T)"
TestTailNegativeN( ${1:t *testing.T})
endsnippet

snippet TestTakeMin "TestTakeMin(t *testing.T)"
TestTakeMin( ${1:t *testing.T})
endsnippet

snippet TestTarFiles "TestTarFiles(t *testing.T)"
TestTarFiles( ${1:t *testing.T})
endsnippet

snippet TestTarSums "TestTarSums(t *testing.T)"
TestTarSums( ${1:t *testing.T})
endsnippet

snippet TestTarUntar "TestTarUntar(t *testing.T)"
TestTarUntar( ${1:t *testing.T})
endsnippet

snippet TestTarWithHardLink "TestTarWithHardLink(t *testing.T)"
TestTarWithHardLink( ${1:t *testing.T})
endsnippet

snippet TestTarWithOptions "TestTarWithOptions(t *testing.T)"
TestTarWithOptions( ${1:t *testing.T})
endsnippet

snippet TestTechnologyLevelUpReq "TestTechnologyLevelUpReq(t *testing.T)"
TestTechnologyLevelUpReq( ${1:t *testing.T})
endsnippet

snippet TestTechnologySpeedUpReq "TestTechnologySpeedUpReq(t *testing.T)"
TestTechnologySpeedUpReq( ${1:t *testing.T})
endsnippet

snippet TestTempArchiveCloseMultipleTimes "TestTempArchiveCloseMultipleTimes(t *testing.T)"
TestTempArchiveCloseMultipleTimes( ${1:t *testing.T})
endsnippet

snippet TestTestData "TestTestData(t *testing.T)"
TestTestData( ${1:t *testing.T})
endsnippet

snippet TestTestNegative "TestTestNegative(t *testing.T)"
TestTestNegative( ${1:t *testing.T})
endsnippet

snippet TestTestdataFiles "TestTestdataFiles(t *testing.T)"
TestTestdataFiles( ${1:t *testing.T})
endsnippet

snippet TestTestmainPackage "TestTestmainPackage(t *testing.T)"
TestTestmainPackage( ${1:t *testing.T})
endsnippet

snippet TestTimeout "TestTimeout(t *testing.T)"
TestTimeout( ${1:t *testing.T})
endsnippet

snippet TestTimeoutConnRead "TestTimeoutConnRead(t *testing.T)"
TestTimeoutConnRead( ${1:t *testing.T})
endsnippet

snippet TestTimer "TestTimer(t *testing.T)"
TestTimer( ${1:t *testing.T})
endsnippet

snippet TestTimerMiddleware "TestTimerMiddleware(t *testing.T)"
TestTimerMiddleware( ${1:t *testing.T})
endsnippet

snippet TestToken "TestToken(t *testing.T)"
TestToken( ${1:t *testing.T})
endsnippet

snippet TestTokenizer "TestTokenizer(t *testing.T)"
TestTokenizer( ${1:t *testing.T})
endsnippet

snippet TestTopContainer "TestTopContainer(t *testing.T)"
TestTopContainer( ${1:t *testing.T})
endsnippet

snippet TestTopContainerNotFound "TestTopContainerNotFound(t *testing.T)"
TestTopContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestTopContainerStopped "TestTopContainerStopped(t *testing.T)"
TestTopContainerStopped( ${1:t *testing.T})
endsnippet

snippet TestTopContainerWithPsArgs "TestTopContainerWithPsArgs(t *testing.T)"
TestTopContainerWithPsArgs( ${1:t *testing.T})
endsnippet

snippet TestTopMultipleArgs "TestTopMultipleArgs(t *testing.T)"
TestTopMultipleArgs( ${1:t *testing.T})
endsnippet

snippet TestTopNonPrivileged "TestTopNonPrivileged(t *testing.T)"
TestTopNonPrivileged( ${1:t *testing.T})
endsnippet

snippet TestTopPrivileged "TestTopPrivileged(t *testing.T)"
TestTopPrivileged( ${1:t *testing.T})
endsnippet

snippet TestTrailingSpaces "TestTrailingSpaces(t *testing.T)"
TestTrailingSpaces( ${1:t *testing.T})
endsnippet

snippet TestTransitivelyErrorFreeFlag "TestTransitivelyErrorFreeFlag(t *testing.T)"
TestTransitivelyErrorFreeFlag( ${1:t *testing.T})
endsnippet

snippet TestTrieCompression "TestTrieCompression(t *testing.T)"
TestTrieCompression( ${1:t *testing.T})
endsnippet

snippet TestTrie_DeleteDense "TestTrie_DeleteDense(t *testing.T)"
TestTrie_DeleteDense( ${1:t *testing.T})
endsnippet

snippet TestTrie_Dump "TestTrie_Dump(t *testing.T)"
TestTrie_Dump( ${1:t *testing.T})
endsnippet

snippet TestTrie_GetNonexistentPrefix "TestTrie_GetNonexistentPrefix(t *testing.T)"
TestTrie_GetNonexistentPrefix( ${1:t *testing.T})
endsnippet

snippet TestTrie_InsertAndMatchPrefix "TestTrie_InsertAndMatchPrefix(t *testing.T)"
TestTrie_InsertAndMatchPrefix( ${1:t *testing.T})
endsnippet

snippet TestTrie_InsertDense "TestTrie_InsertDense(t *testing.T)"
TestTrie_InsertDense( ${1:t *testing.T})
endsnippet

snippet TestTrie_InsertDenseDuplicatePrefixes "TestTrie_InsertDenseDuplicatePrefixes(t *testing.T)"
TestTrie_InsertDenseDuplicatePrefixes( ${1:t *testing.T})
endsnippet

snippet TestTrie_InsertDensePreceeding "TestTrie_InsertDensePreceeding(t *testing.T)"
TestTrie_InsertDensePreceeding( ${1:t *testing.T})
endsnippet

snippet TestTrie_InsertDifferentPrefixes "TestTrie_InsertDifferentPrefixes(t *testing.T)"
TestTrie_InsertDifferentPrefixes( ${1:t *testing.T})
endsnippet

snippet TestTrie_InsertDuplicatePrefixes "TestTrie_InsertDuplicatePrefixes(t *testing.T)"
TestTrie_InsertDuplicatePrefixes( ${1:t *testing.T})
endsnippet

snippet TestTrie_InsertVariousPrefixes "TestTrie_InsertVariousPrefixes(t *testing.T)"
TestTrie_InsertVariousPrefixes( ${1:t *testing.T})
endsnippet

snippet TestTrie_Match "TestTrie_Match(t *testing.T)"
TestTrie_Match( ${1:t *testing.T})
endsnippet

snippet TestTrie_MatchFalsePositive "TestTrie_MatchFalsePositive(t *testing.T)"
TestTrie_MatchFalsePositive( ${1:t *testing.T})
endsnippet

snippet TestTrie_MatchSubtree "TestTrie_MatchSubtree(t *testing.T)"
TestTrie_MatchSubtree( ${1:t *testing.T})
endsnippet

snippet TestTrie_RandomKitchenSink "TestTrie_RandomKitchenSink(t *testing.T)"
TestTrie_RandomKitchenSink( ${1:t *testing.T})
endsnippet

snippet TestTrie_SetGet "TestTrie_SetGet(t *testing.T)"
TestTrie_SetGet( ${1:t *testing.T})
endsnippet

snippet TestTrie_Visit "TestTrie_Visit(t *testing.T)"
TestTrie_Visit( ${1:t *testing.T})
endsnippet

snippet TestTrie_VisitPrefixes "TestTrie_VisitPrefixes(t *testing.T)"
TestTrie_VisitPrefixes( ${1:t *testing.T})
endsnippet

snippet TestTrie_VisitReturnError "TestTrie_VisitReturnError(t *testing.T)"
TestTrie_VisitReturnError( ${1:t *testing.T})
endsnippet

snippet TestTrie_VisitSkipSubtree "TestTrie_VisitSkipSubtree(t *testing.T)"
TestTrie_VisitSkipSubtree( ${1:t *testing.T})
endsnippet

snippet TestTrie_VisitSubtree "TestTrie_VisitSubtree(t *testing.T)"
TestTrie_VisitSubtree( ${1:t *testing.T})
endsnippet

snippet TestTrie_compact "TestTrie_compact(t *testing.T)"
TestTrie_compact( ${1:t *testing.T})
endsnippet

snippet TestTrie_longestCommonPrefixLenght "TestTrie_longestCommonPrefixLenght(t *testing.T)"
TestTrie_longestCommonPrefixLenght( ${1:t *testing.T})
endsnippet

snippet TestTruncIndex "TestTruncIndex(t *testing.T)"
TestTruncIndex( ${1:t *testing.T})
endsnippet

snippet TestTruncate "TestTruncate(t *testing.T)"
TestTruncate( ${1:t *testing.T})
endsnippet

snippet TestTruncateNoNeeded "TestTruncateNoNeeded(t *testing.T)"
TestTruncateNoNeeded( ${1:t *testing.T})
endsnippet

snippet TestTrustedClientKeysFile "TestTrustedClientKeysFile(t *testing.T)"
TestTrustedClientKeysFile( ${1:t *testing.T})
endsnippet

snippet TestTrustedHostKeysFile "TestTrustedHostKeysFile(t *testing.T)"
TestTrustedHostKeysFile( ${1:t *testing.T})
endsnippet

snippet TestTrustedLocation "TestTrustedLocation(t *testing.T)"
TestTrustedLocation( ${1:t *testing.T})
endsnippet

snippet TestTty "TestTty(t *testing.T)"
TestTty( ${1:t *testing.T})
endsnippet

snippet TestTypeAnalysis "TestTypeAnalysis(t *testing.T)"
TestTypeAnalysis( ${1:t *testing.T})
endsnippet

snippet TestTypeParser "TestTypeParser(t *testing.T)"
TestTypeParser( ${1:t *testing.T})
endsnippet

snippet TestTypeString "TestTypeString(t *testing.T)"
TestTypeString( ${1:t *testing.T})
endsnippet

snippet TestTypeXGlobalHeaderDoesNotFail "TestTypeXGlobalHeaderDoesNotFail(t *testing.T)"
TestTypeXGlobalHeaderDoesNotFail( ${1:t *testing.T})
endsnippet

snippet TestTypesInfo "TestTypesInfo(t *testing.T)"
TestTypesInfo( ${1:t *testing.T})
endsnippet

snippet TestTypesWithMethodSets "TestTypesWithMethodSets(t *testing.T)"
TestTypesWithMethodSets( ${1:t *testing.T})
endsnippet

snippet TestUDP4Proxy "TestUDP4Proxy(t *testing.T)"
TestUDP4Proxy( ${1:t *testing.T})
endsnippet

snippet TestUDP6Proxy "TestUDP6Proxy(t *testing.T)"
TestUDP6Proxy( ${1:t *testing.T})
endsnippet

snippet TestUDPMulticastSockopt "TestUDPMulticastSockopt(t *testing.T)"
TestUDPMulticastSockopt( ${1:t *testing.T})
endsnippet

snippet TestUDPMultipleConnWithMultipleGroupListeners "TestUDPMultipleConnWithMultipleGroupListeners(t *testing.T)"
TestUDPMultipleConnWithMultipleGroupListeners( ${1:t *testing.T})
endsnippet

snippet TestUDPMultiplePacketConnWithMultipleGroupListeners "TestUDPMultiplePacketConnWithMultipleGroupListeners(t *testing.T)"
TestUDPMultiplePacketConnWithMultipleGroupListeners( ${1:t *testing.T})
endsnippet

snippet TestUDPPerInterfaceSingleConnWithSingleGroupListener "TestUDPPerInterfaceSingleConnWithSingleGroupListener(t *testing.T)"
TestUDPPerInterfaceSingleConnWithSingleGroupListener( ${1:t *testing.T})
endsnippet

snippet TestUDPPerInterfaceSinglePacketConnWithSingleGroupListener "TestUDPPerInterfaceSinglePacketConnWithSingleGroupListener(t *testing.T)"
TestUDPPerInterfaceSinglePacketConnWithSingleGroupListener( ${1:t *testing.T})
endsnippet

snippet TestUDPSingleConnWithMultipleGroupListeners "TestUDPSingleConnWithMultipleGroupListeners(t *testing.T)"
TestUDPSingleConnWithMultipleGroupListeners( ${1:t *testing.T})
endsnippet

snippet TestUDPSinglePacketConnWithMultipleGroupListeners "TestUDPSinglePacketConnWithMultipleGroupListeners(t *testing.T)"
TestUDPSinglePacketConnWithMultipleGroupListeners( ${1:t *testing.T})
endsnippet

snippet TestUDPUnicastSockopt "TestUDPUnicastSockopt(t *testing.T)"
TestUDPUnicastSockopt( ${1:t *testing.T})
endsnippet

snippet TestUDPWriteError "TestUDPWriteError(t *testing.T)"
TestUDPWriteError( ${1:t *testing.T})
endsnippet

snippet TestUHash "TestUHash(t *testing.T)"
TestUHash( ${1:t *testing.T})
endsnippet

snippet TestUSTARLongName "TestUSTARLongName(t *testing.T)"
TestUSTARLongName( ${1:t *testing.T})
endsnippet

snippet TestUnescape "TestUnescape(t *testing.T)"
TestUnescape( ${1:t *testing.T})
endsnippet

snippet TestUnescapeEscape "TestUnescapeEscape(t *testing.T)"
TestUnescapeEscape( ${1:t *testing.T})
endsnippet

snippet TestUninitializedRead "TestUninitializedRead(t *testing.T)"
TestUninitializedRead( ${1:t *testing.T})
endsnippet

snippet TestUnixFDs "TestUnixFDs(t *testing.T)"
TestUnixFDs( ${1:t *testing.T})
endsnippet

snippet TestUnknowProtocol "TestUnknowProtocol(t *testing.T)"
TestUnknowProtocol( ${1:t *testing.T})
endsnippet

snippet TestUnknown "TestUnknown(t *testing.T)"
TestUnknown( ${1:t *testing.T})
endsnippet

snippet TestUnlockArmyReq "TestUnlockArmyReq(t *testing.T)"
TestUnlockArmyReq( ${1:t *testing.T})
endsnippet

snippet TestUnpauseContainer "TestUnpauseContainer(t *testing.T)"
TestUnpauseContainer( ${1:t *testing.T})
endsnippet

snippet TestUnpauseContainerNotFound "TestUnpauseContainerNotFound(t *testing.T)"
TestUnpauseContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestUnpauseContainerNotPaused "TestUnpauseContainerNotPaused(t *testing.T)"
TestUnpauseContainerNotPaused( ${1:t *testing.T})
endsnippet

snippet TestUnreadByte "TestUnreadByte(t *testing.T)"
TestUnreadByte( ${1:t *testing.T})
endsnippet

snippet TestUnreadRune "TestUnreadRune(t *testing.T)"
TestUnreadRune( ${1:t *testing.T})
endsnippet

snippet TestUnreadRuneAtEOF "TestUnreadRuneAtEOF(t *testing.T)"
TestUnreadRuneAtEOF( ${1:t *testing.T})
endsnippet

snippet TestUnreadRuneError "TestUnreadRuneError(t *testing.T)"
TestUnreadRuneError( ${1:t *testing.T})
endsnippet

snippet TestUnsert "TestUnsert(t *testing.T)"
TestUnsert( ${1:t *testing.T})
endsnippet

snippet TestUntarInvalidFilenames "TestUntarInvalidFilenames(t *testing.T)"
TestUntarInvalidFilenames( ${1:t *testing.T})
endsnippet

snippet TestUntarInvalidHardlink "TestUntarInvalidHardlink(t *testing.T)"
TestUntarInvalidHardlink( ${1:t *testing.T})
endsnippet

snippet TestUntarInvalidSymlink "TestUntarInvalidSymlink(t *testing.T)"
TestUntarInvalidSymlink( ${1:t *testing.T})
endsnippet

snippet TestUntarUstarGnuConflict "TestUntarUstarGnuConflict(t *testing.T)"
TestUntarUstarGnuConflict( ${1:t *testing.T})
endsnippet

snippet TestUnusualStrings "TestUnusualStrings(t *testing.T)"
TestUnusualStrings( ${1:t *testing.T})
endsnippet

snippet TestUpdate "TestUpdate(t *testing.T)"
TestUpdate( ${1:t *testing.T})
endsnippet

snippet TestUpdateAccount "TestUpdateAccount(t *testing.T)"
TestUpdateAccount( ${1:t *testing.T})
endsnippet

snippet TestUrlBuilding "TestUrlBuilding(t *testing.T)"
TestUrlBuilding( ${1:t *testing.T})
endsnippet

snippet TestUrlEncodedFind "TestUrlEncodedFind(t *testing.T)"
TestUrlEncodedFind( ${1:t *testing.T})
endsnippet

snippet TestUsage "TestUsage(t *testing.T)"
TestUsage( ${1:t *testing.T})
endsnippet

snippet TestUseBuffReq "TestUseBuffReq(t *testing.T)"
TestUseBuffReq( ${1:t *testing.T})
endsnippet

snippet TestUseHeroReq "TestUseHeroReq(t *testing.T)"
TestUseHeroReq( ${1:t *testing.T})
endsnippet

snippet TestUseItemReq "TestUseItemReq(t *testing.T)"
TestUseItemReq( ${1:t *testing.T})
endsnippet

snippet TestUseSpeedUpItemReq "TestUseSpeedUpItemReq(t *testing.T)"
TestUseSpeedUpItemReq( ${1:t *testing.T})
endsnippet

snippet TestUser "TestUser(t *testing.T)"
TestUser( ${1:t *testing.T})
endsnippet

snippet TestUser1ConfigArmyReq "TestUser1ConfigArmyReq(t *testing.T)"
TestUser1ConfigArmyReq( ${1:t *testing.T})
endsnippet

snippet TestUserConfigArmyReq "TestUserConfigArmyReq(t *testing.T)"
TestUserConfigArmyReq( ${1:t *testing.T})
endsnippet

snippet TestUserDefined "TestUserDefined(t *testing.T)"
TestUserDefined( ${1:t *testing.T})
endsnippet

snippet TestUserDefinedBool "TestUserDefinedBool(t *testing.T)"
TestUserDefinedBool( ${1:t *testing.T})
endsnippet

snippet TestUserParseGroup "TestUserParseGroup(t *testing.T)"
TestUserParseGroup( ${1:t *testing.T})
endsnippet

snippet TestUserParseLine "TestUserParseLine(t *testing.T)"
TestUserParseLine( ${1:t *testing.T})
endsnippet

snippet TestUserParsePasswd "TestUserParsePasswd(t *testing.T)"
TestUserParsePasswd( ${1:t *testing.T})
endsnippet

snippet TestUserSpeakInWord "TestUserSpeakInWord(t *testing.T)"
TestUserSpeakInWord( ${1:t *testing.T})
endsnippet

snippet TestUserSuppliedFieldDoesNotOverwriteDefaults "TestUserSuppliedFieldDoesNotOverwriteDefaults(t *testing.T)"
TestUserSuppliedFieldDoesNotOverwriteDefaults( ${1:t *testing.T})
endsnippet

snippet TestUserSuppliedLevelFieldHasPrefix "TestUserSuppliedLevelFieldHasPrefix(t *testing.T)"
TestUserSuppliedLevelFieldHasPrefix( ${1:t *testing.T})
endsnippet

snippet TestUserSuppliedMsgFieldHasPrefix "TestUserSuppliedMsgFieldHasPrefix(t *testing.T)"
TestUserSuppliedMsgFieldHasPrefix( ${1:t *testing.T})
endsnippet

snippet TestUserSuppliedTimeFieldHasPrefix "TestUserSuppliedTimeFieldHasPrefix(t *testing.T)"
TestUserSuppliedTimeFieldHasPrefix( ${1:t *testing.T})
endsnippet

snippet TestValidContainerNames "TestValidContainerNames(t *testing.T)"
TestValidContainerNames( ${1:t *testing.T})
endsnippet

snippet TestValidGetExecUser "TestValidGetExecUser(t *testing.T)"
TestValidGetExecUser( ${1:t *testing.T})
endsnippet

snippet TestValidGitTransport "TestValidGitTransport(t *testing.T)"
TestValidGitTransport( ${1:t *testing.T})
endsnippet

snippet TestValidRepositoryName "TestValidRepositoryName(t *testing.T)"
TestValidRepositoryName( ${1:t *testing.T})
endsnippet

snippet TestValidTagName "TestValidTagName(t *testing.T)"
TestValidTagName( ${1:t *testing.T})
endsnippet

snippet TestValidTypeflagWithPAXHeader "TestValidTypeflagWithPAXHeader(t *testing.T)"
TestValidTypeflagWithPAXHeader( ${1:t *testing.T})
endsnippet

snippet TestValidateDnsSearch "TestValidateDnsSearch(t *testing.T)"
TestValidateDnsSearch( ${1:t *testing.T})
endsnippet

snippet TestValidateIPAddress "TestValidateIPAddress(t *testing.T)"
TestValidateIPAddress( ${1:t *testing.T})
endsnippet

snippet TestValidation "TestValidation(t *testing.T)"
TestValidation( ${1:t *testing.T})
endsnippet

snippet TestValueForExpr "TestValueForExpr(t *testing.T)"
TestValueForExpr( ${1:t *testing.T})
endsnippet

snippet TestValues "TestValues(t *testing.T)"
TestValues( ${1:t *testing.T})
endsnippet

snippet TestValuesInfo "TestValuesInfo(t *testing.T)"
TestValuesInfo( ${1:t *testing.T})
endsnippet

snippet TestVariableNames "TestVariableNames(t *testing.T)"
TestVariableNames( ${1:t *testing.T})
endsnippet

snippet TestVerify "TestVerify(t *testing.T)"
TestVerify( ${1:t *testing.T})
endsnippet

snippet TestVersion "TestVersion(t *testing.T)"
TestVersion( ${1:t *testing.T})
endsnippet

snippet TestVersionEnsureSucceeds "TestVersionEnsureSucceeds(t *testing.T)"
TestVersionEnsureSucceeds( ${1:t *testing.T})
endsnippet

snippet TestVersionError "TestVersionError(t *testing.T)"
TestVersionError( ${1:t *testing.T})
endsnippet

snippet TestVet "TestVet(t *testing.T)"
TestVet( ${1:t *testing.T})
endsnippet

snippet TestVfsCreateBase "TestVfsCreateBase(t *testing.T)"
TestVfsCreateBase( ${1:t *testing.T})
endsnippet

snippet TestVfsCreateEmpty "TestVfsCreateEmpty(t *testing.T)"
TestVfsCreateEmpty( ${1:t *testing.T})
endsnippet

snippet TestVfsCreateSnap "TestVfsCreateSnap(t *testing.T)"
TestVfsCreateSnap( ${1:t *testing.T})
endsnippet

snippet TestVfsSetup "TestVfsSetup(t *testing.T)"
TestVfsSetup( ${1:t *testing.T})
endsnippet

snippet TestVfsTeardown "TestVfsTeardown(t *testing.T)"
TestVfsTeardown( ${1:t *testing.T})
endsnippet

snippet TestVolumesFromGetsProperMode "TestVolumesFromGetsProperMode(t *testing.T)"
TestVolumesFromGetsProperMode( ${1:t *testing.T})
endsnippet

snippet TestVolumesFromHasPriority "TestVolumesFromHasPriority(t *testing.T)"
TestVolumesFromHasPriority( ${1:t *testing.T})
endsnippet

snippet TestVolumesNoCopyData "TestVolumesNoCopyData(t *testing.T)"
TestVolumesNoCopyData( ${1:t *testing.T})
endsnippet

snippet TestWait "TestWait(t *testing.T)"
TestWait( ${1:t *testing.T})
endsnippet

snippet TestWaitContainer "TestWaitContainer(t *testing.T)"
TestWaitContainer( ${1:t *testing.T})
endsnippet

snippet TestWaitContainerNotFound "TestWaitContainerNotFound(t *testing.T)"
TestWaitContainerNotFound( ${1:t *testing.T})
endsnippet

snippet TestWaitContainerStatus "TestWaitContainerStatus(t *testing.T)"
TestWaitContainerStatus( ${1:t *testing.T})
endsnippet

snippet TestWalkAll "TestWalkAll(t *testing.T)"
TestWalkAll( ${1:t *testing.T})
endsnippet

snippet TestWarn "TestWarn(t *testing.T)"
TestWarn( ${1:t *testing.T})
endsnippet

snippet TestWeb "TestWeb(t *testing.T)"
TestWeb( ${1:t *testing.T})
endsnippet

snippet TestWithBadProtocol "TestWithBadProtocol(t *testing.T)"
TestWithBadProtocol( ${1:t *testing.T})
endsnippet

snippet TestWithCancel "TestWithCancel(t *testing.T)"
TestWithCancel( ${1:t *testing.T})
endsnippet

snippet TestWithFieldsShouldAllowAssignments "TestWithFieldsShouldAllowAssignments(t *testing.T)"
TestWithFieldsShouldAllowAssignments( ${1:t *testing.T})
endsnippet

snippet TestWithProtocol "TestWithProtocol(t *testing.T)"
TestWithProtocol( ${1:t *testing.T})
endsnippet

snippet TestWithQuery "TestWithQuery(t *testing.T)"
TestWithQuery( ${1:t *testing.T})
endsnippet

snippet TestWithQueryString "TestWithQueryString(t *testing.T)"
TestWithQueryString( ${1:t *testing.T})
endsnippet

snippet TestWithTwoProtocol "TestWithTwoProtocol(t *testing.T)"
TestWithTwoProtocol( ${1:t *testing.T})
endsnippet

snippet TestWordseg "TestWordseg(t *testing.T)"
TestWordseg( ${1:t *testing.T})
endsnippet

snippet TestWorld "TestWorld(t *testing.T)"
TestWorld( ${1:t *testing.T})
endsnippet

snippet TestWorldMapInfoReq "TestWorldMapInfoReq(t *testing.T)"
TestWorldMapInfoReq( ${1:t *testing.T})
endsnippet

snippet TestWrapCells "TestWrapCells(t *testing.T)"
TestWrapCells( ${1:t *testing.T})
endsnippet

snippet TestWrapCellsSimple "TestWrapCellsSimple(t *testing.T)"
TestWrapCellsSimple( ${1:t *testing.T})
endsnippet

snippet TestWrapMiddlewares "TestWrapMiddlewares(t *testing.T)"
TestWrapMiddlewares( ${1:t *testing.T})
endsnippet

snippet TestWriteBlocking "TestWriteBlocking(t *testing.T)"
TestWriteBlocking( ${1:t *testing.T})
endsnippet

snippet TestWriteErrors "TestWriteErrors(t *testing.T)"
TestWriteErrors( ${1:t *testing.T})
endsnippet

snippet TestWriteLog "TestWriteLog(t *testing.T)"
TestWriteLog( ${1:t *testing.T})
endsnippet

snippet TestWriteString "TestWriteString(t *testing.T)"
TestWriteString( ${1:t *testing.T})
endsnippet

snippet TestWriteTo "TestWriteTo(t *testing.T)"
TestWriteTo( ${1:t *testing.T})
endsnippet

snippet TestWriter "TestWriter(t *testing.T)"
TestWriter( ${1:t *testing.T})
endsnippet

snippet TestWriterReadFrom "TestWriterReadFrom(t *testing.T)"
TestWriterReadFrom( ${1:t *testing.T})
endsnippet

snippet TestWriterReadFromCounts "TestWriterReadFromCounts(t *testing.T)"
TestWriterReadFromCounts( ${1:t *testing.T})
endsnippet

snippet TestWriterReadFromErrors "TestWriterReadFromErrors(t *testing.T)"
TestWriterReadFromErrors( ${1:t *testing.T})
endsnippet

snippet TestWritingToUDP "TestWritingToUDP(t *testing.T)"
TestWritingToUDP( ${1:t *testing.T})
endsnippet

snippet TestXPoweredByCustom "TestXPoweredByCustom(t *testing.T)"
TestXPoweredByCustom( ${1:t *testing.T})
endsnippet

snippet TestXPoweredByDisabled "TestXPoweredByDisabled(t *testing.T)"
TestXPoweredByDisabled( ${1:t *testing.T})
endsnippet

snippet TestZeroTok "TestZeroTok(t *testing.T)"
TestZeroTok( ${1:t *testing.T})
endsnippet

snippet TestZmqErrorComparison "TestZmqErrorComparison(t *testing.T)"
TestZmqErrorComparison( ${1:t *testing.T})
endsnippet

snippet TestZmqErrorStr "TestZmqErrorStr(t *testing.T)"
TestZmqErrorStr( ${1:t *testing.T})
endsnippet

snippet Test_ActiveRoute "Test_ActiveRoute(t *testing.T)"
Test_ActiveRoute( ${1:t *testing.T})
endsnippet

snippet Test_AllRoutes "Test_AllRoutes(t *testing.T)"
Test_AllRoutes( ${1:t *testing.T})
endsnippet

snippet Test_Any "Test_Any(t *testing.T)"
Test_Any( ${1:t *testing.T})
endsnippet

snippet Test_BasicAuth "Test_BasicAuth(t *testing.T)"
Test_BasicAuth( ${1:t *testing.T})
endsnippet

snippet Test_BasicFuncAuth "Test_BasicFuncAuth(t *testing.T)"
Test_BasicFuncAuth( ${1:t *testing.T})
endsnippet

snippet Test_CanFormatAsBytes "Test_CanFormatAsBytes(t *testing.T)"
Test_CanFormatAsBytes( ${1:t *testing.T})
endsnippet

snippet Test_CanFormatAsInteger "Test_CanFormatAsInteger(t *testing.T)"
Test_CanFormatAsInteger( ${1:t *testing.T})
endsnippet

snippet Test_DefaultsToInteger "Test_DefaultsToInteger(t *testing.T)"
Test_DefaultsToInteger( ${1:t *testing.T})
endsnippet

snippet Test_GetExt "Test_GetExt(t *testing.T)"
Test_GetExt( ${1:t *testing.T})
endsnippet

snippet Test_IncrementAddsOne "Test_IncrementAddsOne(t *testing.T)"
Test_IncrementAddsOne( ${1:t *testing.T})
endsnippet

snippet Test_InjectorApply "Test_InjectorApply(t *testing.T)"
Test_InjectorApply( ${1:t *testing.T})
endsnippet

snippet Test_InjectorGet "Test_InjectorGet(t *testing.T)"
Test_InjectorGet( ${1:t *testing.T})
endsnippet

snippet Test_InjectorInvoke "Test_InjectorInvoke(t *testing.T)"
Test_InjectorInvoke( ${1:t *testing.T})
endsnippet

snippet Test_InjectorInvokeReturnValues "Test_InjectorInvokeReturnValues(t *testing.T)"
Test_InjectorInvokeReturnValues( ${1:t *testing.T})
endsnippet

snippet Test_InjectorSet "Test_InjectorSet(t *testing.T)"
Test_InjectorSet( ${1:t *testing.T})
endsnippet

snippet Test_InjectorSetParent "Test_InjectorSetParent(t *testing.T)"
Test_InjectorSetParent( ${1:t *testing.T})
endsnippet

snippet Test_InterfaceOf "Test_InterfaceOf(t *testing.T)"
Test_InterfaceOf( ${1:t *testing.T})
endsnippet

snippet Test_Logger "Test_Logger(t *testing.T)"
Test_Logger( ${1:t *testing.T})
endsnippet

snippet Test_MagicCode "Test_MagicCode(t *testing.T)"
Test_MagicCode( ${1:t *testing.T})
endsnippet

snippet Test_Martini_Basic_NoRace "Test_Martini_Basic_NoRace(t *testing.T)"
Test_Martini_Basic_NoRace( ${1:t *testing.T})
endsnippet

snippet Test_Martini_EarlyWrite "Test_Martini_EarlyWrite(t *testing.T)"
Test_Martini_EarlyWrite( ${1:t *testing.T})
endsnippet

snippet Test_Martini_Handlers "Test_Martini_Handlers(t *testing.T)"
Test_Martini_Handlers( ${1:t *testing.T})
endsnippet

snippet Test_Martini_Run "Test_Martini_Run(t *testing.T)"
Test_Martini_Run( ${1:t *testing.T})
endsnippet

snippet Test_Martini_RunOnAddr "Test_Martini_RunOnAddr(t *testing.T)"
Test_Martini_RunOnAddr( ${1:t *testing.T})
endsnippet

snippet Test_Martini_ServeHTTP "Test_Martini_ServeHTTP(t *testing.T)"
Test_Martini_ServeHTTP( ${1:t *testing.T})
endsnippet

snippet Test_Martini_Written "Test_Martini_Written(t *testing.T)"
Test_Martini_Written( ${1:t *testing.T})
endsnippet

snippet Test_MethodsFor "Test_MethodsFor(t *testing.T)"
Test_MethodsFor( ${1:t *testing.T})
endsnippet

snippet Test_New "Test_New(t *testing.T)"
Test_New( ${1:t *testing.T})
endsnippet

snippet Test_NotFound "Test_NotFound(t *testing.T)"
Test_NotFound( ${1:t *testing.T})
endsnippet

snippet Test_NotFoundAsHandler "Test_NotFoundAsHandler(t *testing.T)"
Test_NotFoundAsHandler( ${1:t *testing.T})
endsnippet

snippet Test_NotFoundStacking "Test_NotFoundStacking(t *testing.T)"
Test_NotFoundStacking( ${1:t *testing.T})
endsnippet

snippet Test_Recovery "Test_Recovery(t *testing.T)"
Test_Recovery( ${1:t *testing.T})
endsnippet

snippet Test_Recovery_ResponseWriter "Test_Recovery_ResponseWriter(t *testing.T)"
Test_Recovery_ResponseWriter( ${1:t *testing.T})
endsnippet

snippet Test_Render_Bad_HTML "Test_Render_Bad_HTML(t *testing.T)"
Test_Render_Bad_HTML( ${1:t *testing.T})
endsnippet

snippet Test_Render_BinaryData "Test_Render_BinaryData(t *testing.T)"
Test_Render_BinaryData( ${1:t *testing.T})
endsnippet

snippet Test_Render_BinaryData_CustomMimeType "Test_Render_BinaryData_CustomMimeType(t *testing.T)"
Test_Render_BinaryData_CustomMimeType( ${1:t *testing.T})
endsnippet

snippet Test_Render_Charset_JSON "Test_Render_Charset_JSON(t *testing.T)"
Test_Render_Charset_JSON( ${1:t *testing.T})
endsnippet

snippet Test_Render_Default_Charset_HTML "Test_Render_Default_Charset_HTML(t *testing.T)"
Test_Render_Default_Charset_HTML( ${1:t *testing.T})
endsnippet

snippet Test_Render_Delimiters "Test_Render_Delimiters(t *testing.T)"
Test_Render_Delimiters( ${1:t *testing.T})
endsnippet

snippet Test_Render_Error404 "Test_Render_Error404(t *testing.T)"
Test_Render_Error404( ${1:t *testing.T})
endsnippet

snippet Test_Render_Error500 "Test_Render_Error500(t *testing.T)"
Test_Render_Error500( ${1:t *testing.T})
endsnippet

snippet Test_Render_Extensions "Test_Render_Extensions(t *testing.T)"
Test_Render_Extensions( ${1:t *testing.T})
endsnippet

snippet Test_Render_Funcs "Test_Render_Funcs(t *testing.T)"
Test_Render_Funcs( ${1:t *testing.T})
endsnippet

snippet Test_Render_HTML "Test_Render_HTML(t *testing.T)"
Test_Render_HTML( ${1:t *testing.T})
endsnippet

snippet Test_Render_Indented_JSON "Test_Render_Indented_JSON(t *testing.T)"
Test_Render_Indented_JSON( ${1:t *testing.T})
endsnippet

snippet Test_Render_Indented_XML "Test_Render_Indented_XML(t *testing.T)"
Test_Render_Indented_XML( ${1:t *testing.T})
endsnippet

snippet Test_Render_JSON "Test_Render_JSON(t *testing.T)"
Test_Render_JSON( ${1:t *testing.T})
endsnippet

snippet Test_Render_JSON_Prefix "Test_Render_JSON_Prefix(t *testing.T)"
Test_Render_JSON_Prefix( ${1:t *testing.T})
endsnippet

snippet Test_Render_Layout "Test_Render_Layout(t *testing.T)"
Test_Render_Layout( ${1:t *testing.T})
endsnippet

snippet Test_Render_Layout_Current "Test_Render_Layout_Current(t *testing.T)"
Test_Render_Layout_Current( ${1:t *testing.T})
endsnippet

snippet Test_Render_Nested_HTML "Test_Render_Nested_HTML(t *testing.T)"
Test_Render_Nested_HTML( ${1:t *testing.T})
endsnippet

snippet Test_Render_NoRace "Test_Render_NoRace(t *testing.T)"
Test_Render_NoRace( ${1:t *testing.T})
endsnippet

snippet Test_Render_Override_Layout "Test_Render_Override_Layout(t *testing.T)"
Test_Render_Override_Layout( ${1:t *testing.T})
endsnippet

snippet Test_Render_Redirect_Code "Test_Render_Redirect_Code(t *testing.T)"
Test_Render_Redirect_Code( ${1:t *testing.T})
endsnippet

snippet Test_Render_Redirect_Default "Test_Render_Redirect_Default(t *testing.T)"
Test_Render_Redirect_Default( ${1:t *testing.T})
endsnippet

snippet Test_Render_Status204 "Test_Render_Status204(t *testing.T)"
Test_Render_Status204( ${1:t *testing.T})
endsnippet

snippet Test_Render_XHTML "Test_Render_XHTML(t *testing.T)"
Test_Render_XHTML( ${1:t *testing.T})
endsnippet

snippet Test_Render_XML "Test_Render_XML(t *testing.T)"
Test_Render_XML( ${1:t *testing.T})
endsnippet

snippet Test_Render_XML_Prefix "Test_Render_XML_Prefix(t *testing.T)"
Test_Render_XML_Prefix( ${1:t *testing.T})
endsnippet

snippet Test_ResponseWrite_Hijack_NotOK "Test_ResponseWrite_Hijack_NotOK(t *testing.T)"
Test_ResponseWrite_Hijack_NotOK( ${1:t *testing.T})
endsnippet

snippet Test_ResponseWriter_Before "Test_ResponseWriter_Before(t *testing.T)"
Test_ResponseWriter_Before( ${1:t *testing.T})
endsnippet

snippet Test_ResponseWriter_CloseNotify "Test_ResponseWriter_CloseNotify(t *testing.T)"
Test_ResponseWriter_CloseNotify( ${1:t *testing.T})
endsnippet

snippet Test_ResponseWriter_Flusher "Test_ResponseWriter_Flusher(t *testing.T)"
Test_ResponseWriter_Flusher( ${1:t *testing.T})
endsnippet

snippet Test_ResponseWriter_FlusherHandler "Test_ResponseWriter_FlusherHandler(t *testing.T)"
Test_ResponseWriter_FlusherHandler( ${1:t *testing.T})
endsnippet

snippet Test_ResponseWriter_Hijack "Test_ResponseWriter_Hijack(t *testing.T)"
Test_ResponseWriter_Hijack( ${1:t *testing.T})
endsnippet

snippet Test_ResponseWriter_WritingHeader "Test_ResponseWriter_WritingHeader(t *testing.T)"
Test_ResponseWriter_WritingHeader( ${1:t *testing.T})
endsnippet

snippet Test_ResponseWriter_WritingString "Test_ResponseWriter_WritingString(t *testing.T)"
Test_ResponseWriter_WritingString( ${1:t *testing.T})
endsnippet

snippet Test_ResponseWriter_WritingStrings "Test_ResponseWriter_WritingStrings(t *testing.T)"
Test_ResponseWriter_WritingStrings( ${1:t *testing.T})
endsnippet

snippet Test_Root "Test_Root(t *testing.T)"
Test_Root( ${1:t *testing.T})
endsnippet

snippet Test_RouteMatching "Test_RouteMatching(t *testing.T)"
Test_RouteMatching( ${1:t *testing.T})
endsnippet

snippet Test_RouterHandlerStacking "Test_RouterHandlerStacking(t *testing.T)"
Test_RouterHandlerStacking( ${1:t *testing.T})
endsnippet

snippet Test_RouterHandlerStatusCode "Test_RouterHandlerStatusCode(t *testing.T)"
Test_RouterHandlerStatusCode( ${1:t *testing.T})
endsnippet

snippet Test_Routing "Test_Routing(t *testing.T)"
Test_Routing( ${1:t *testing.T})
endsnippet

snippet Test_SecureCompare "Test_SecureCompare(t *testing.T)"
Test_SecureCompare( ${1:t *testing.T})
endsnippet

snippet Test_SetENV "Test_SetENV(t *testing.T)"
Test_SetENV( ${1:t *testing.T})
endsnippet

snippet Test_Static "Test_Static(t *testing.T)"
Test_Static( ${1:t *testing.T})
endsnippet

snippet Test_Static_As_Post "Test_Static_As_Post(t *testing.T)"
Test_Static_As_Post( ${1:t *testing.T})
endsnippet

snippet Test_Static_BadDir "Test_Static_BadDir(t *testing.T)"
Test_Static_BadDir( ${1:t *testing.T})
endsnippet

snippet Test_Static_Head "Test_Static_Head(t *testing.T)"
Test_Static_Head( ${1:t *testing.T})
endsnippet

snippet Test_Static_Local_Path "Test_Static_Local_Path(t *testing.T)"
Test_Static_Local_Path( ${1:t *testing.T})
endsnippet

snippet Test_Static_Options_Expires "Test_Static_Options_Expires(t *testing.T)"
Test_Static_Options_Expires( ${1:t *testing.T})
endsnippet

snippet Test_Static_Options_Logging "Test_Static_Options_Logging(t *testing.T)"
Test_Static_Options_Logging( ${1:t *testing.T})
endsnippet

snippet Test_Static_Options_Prefix "Test_Static_Options_Prefix(t *testing.T)"
Test_Static_Options_Prefix( ${1:t *testing.T})
endsnippet

snippet Test_Static_Options_ServeIndex "Test_Static_Options_ServeIndex(t *testing.T)"
Test_Static_Options_ServeIndex( ${1:t *testing.T})
endsnippet

snippet Test_Static_Redirect "Test_Static_Redirect(t *testing.T)"
Test_Static_Redirect( ${1:t *testing.T})
endsnippet

snippet Test_URLFor "Test_URLFor(t *testing.T)"
Test_URLFor( ${1:t *testing.T})
endsnippet

snippet Test_Width "Test_Width(t *testing.T)"
Test_Width( ${1:t *testing.T})
endsnippet

snippet Test_get_name_server_addr "Test_get_name_server_addr(t *testing.T)"
Test_get_name_server_addr( ${1:t *testing.T})
endsnippet

snippet Test_refresh_village "Test_refresh_village(t *testing.T)"
Test_refresh_village( ${1:t *testing.T})
endsnippet

snippet TesthttpError "TesthttpError(t *testing.T)"
TesthttpError( ${1:t *testing.T})
endsnippet

snippet TestingQuux "TestingQuux(t *testing.T)"
TestingQuux( ${1:t *testing.T})
endsnippet

snippet Tick "Tick(c appengine.Context)"
Tick( ${1:c appengine.Context})
endsnippet

snippet Time "Time(t time.Time)"
Time( ${1:t time.Time})
endsnippet

snippet Timeout "Timeout(t *testing.T, f func()"
Timeout( ${1:t *testing.T}, ${2:f func(})
endsnippet

snippet TitanicRequest "TitanicRequest(chRequest chan<- string)"
TitanicRequest( ${1:chRequest chan<- string})
endsnippet

snippet ToASCII "ToASCII(s string)"
ToASCII( ${1:s string})
endsnippet

snippet ToParam "ToParam(a Args)"
ToParam( ${1:a Args})
endsnippet

snippet ToStr "ToStr(value interface{}, args ...int)"
ToStr( ${1:value interface{}}, ${2:args ...int})
endsnippet

snippet ToString "ToString(data interface{})"
ToString( ${1:data interface{}})
endsnippet

snippet ToUnicode "ToUnicode(s string)"
ToUnicode( ${1:s string})
endsnippet

snippet TpEndHandle "TpEndHandle(user *User, object interface{}, code int16)"
TpEndHandle( ${1:user *User}, ${2:object interface{}}, ${3:code int16})
endsnippet

snippet Transform "Transform(v Value, m *Lens)"
Transform( ${1:v Value}, ${2:m *Lens})
endsnippet

snippet Trap "Trap(cleanup func()"
Trap( ${1:cleanup func(})
endsnippet

snippet TreeSize "TreeSize(dir string)"
TreeSize( ${1:dir string})
endsnippet

snippet Trunc "Trunc(s string, maxlen int)"
Trunc( ${1:s string}, ${2:maxlen int})
endsnippet

snippet Truncate "Truncate(s string, w int, tail string)"
Truncate( ${1:s string}, ${2:w int}, ${3:tail string})
endsnippet

snippet TruncateID "TruncateID(id string)"
TruncateID( ${1:id string})
endsnippet

snippet TweakCapabilities "TweakCapabilities(basics, adds, drops []string)"
TweakCapabilities( ${1:basics}, ${2:adds}, ${3:drops []string})
endsnippet

snippet TypeOf "TypeOf(v Value)"
TypeOf( ${1:v Value})
endsnippet

snippet TypeString "TypeString(this *Package, typ Type)"
TypeString( ${1:this *Package}, ${2:typ Type})
endsnippet

snippet UHashInit "UHashInit(numbins uint32)"
UHashInit( ${1:numbins uint32})
endsnippet

snippet U_E_scout "U_E_scout(user *User, data interface{}, code int16)"
U_E_scout( ${1:user *User}, ${2:data interface{}}, ${3:code int16})
endsnippet

snippet U_P_alliance_dismiss "U_P_alliance_dismiss(user *User, data interface{}, code int16)"
U_P_alliance_dismiss( ${1:user *User}, ${2:data interface{}}, ${3:code int16})
endsnippet

snippet U_P_been_fired_from_alliance_req "U_P_been_fired_from_alliance_req(user *User, data interface{}, code int16)"
U_P_been_fired_from_alliance_req( ${1:user *User}, ${2:data interface{}}, ${3:code int16})
endsnippet

snippet U_P_been_helped_by_others_req "U_P_been_helped_by_others_req(user *User, data interface{}, code int16)"
U_P_been_helped_by_others_req( ${1:user *User}, ${2:data interface{}}, ${3:code int16})
endsnippet

snippet U_P_been_helped_resource_by_others_req "U_P_been_helped_resource_by_others_req(user *User, data interface{}, code int16)"
U_P_been_helped_resource_by_others_req( ${1:user *User}, ${2:data interface{}}, ${3:code int16})
endsnippet

snippet U_P_join_alliance "U_P_join_alliance(user *User, data interface{}, code int16)"
U_P_join_alliance( ${1:user *User}, ${2:data interface{}}, ${3:code int16})
endsnippet

snippet U_P_search_alliance_req "U_P_search_alliance_req(user *User, data interface{}, code int16)"
U_P_search_alliance_req( ${1:user *User}, ${2:data interface{}}, ${3:code int16})
endsnippet

snippet UdevWait "UdevWait(cookie uint)"
UdevWait( ${1:cookie uint})
endsnippet

snippet Uint "Uint(names []string, value uint, usage string)"
Uint( ${1:names []string}, ${2:value uint}, ${3:usage string})
endsnippet

snippet Uint64 "Uint64(names []string, value uint64, usage string)"
Uint64( ${1:names []string}, ${2:value uint64}, ${3:usage string})
endsnippet

snippet Uint64Val "Uint64Val(x Value)"
Uint64Val( ${1:x Value})
endsnippet

snippet Uint64Var "Uint64Var(p *uint64, names []string, value uint64, usage string)"
Uint64Var( ${1:p *uint64}, ${2:names []string}, ${3:value uint64}, ${4:usage string})
endsnippet

snippet UintVar "UintVar(p *uint, names []string, value uint, usage string)"
UintVar( ${1:p *uint}, ${2:names []string}, ${3:value uint}, ${4:usage string})
endsnippet

snippet Umask "Umask(newmask int)"
Umask( ${1:newmask int})
endsnippet

snippet UnaryOp "UnaryOp(op token.Token, y Value, size int)"
UnaryOp( ${1:op token.Token}, ${2:y Value}, ${3:size int})
endsnippet

snippet UnderScore "UnderScore(str string)"
UnderScore( ${1:str string})
endsnippet

snippet UnescapeString "UnescapeString(s string)"
UnescapeString( ${1:s string})
endsnippet

snippet UnitFloat64ToRangedFloat64 "UnitFloat64ToRangedFloat64(lo, hi float64)"
UnitFloat64ToRangedFloat64( ${1:lo}, ${2:hi float64})
endsnippet

snippet UnlockCityDealCountNeedGems "UnlockCityDealCountNeedGems(old int32, new int32)"
UnlockCityDealCountNeedGems( ${1:old int32}, ${2:new int32})
endsnippet

snippet UnlockCityUpgradeCountNeedGems "UnlockCityUpgradeCountNeedGems(old int32, new int32)"
UnlockCityUpgradeCountNeedGems( ${1:old int32}, ${2:new int32})
endsnippet

snippet UnlockRecruitSoldierPostionNeedGems "UnlockRecruitSoldierPostionNeedGems(old int32, new int32)"
UnlockRecruitSoldierPostionNeedGems( ${1:old int32}, ${2:new int32})
endsnippet

snippet Unlockpt "Unlockpt(f *os.File)"
Unlockpt( ${1:f *os.File})
endsnippet

snippet Unmap "Unmap(host net.Addr)"
Unmap( ${1:host net.Addr})
endsnippet

snippet Unmarshal "Unmarshal(fromv, v interface{})"
Unmarshal( ${1:fromv}, ${2:v interface{}})
endsnippet

snippet UnmarshalDir "UnmarshalDir(b []byte)"
UnmarshalDir( ${1:b []byte})
endsnippet

snippet UnmarshalDirs "UnmarshalDirs(b []byte)"
UnmarshalDirs( ${1:b []byte})
endsnippet

snippet UnmarshalFcall "UnmarshalFcall(b []byte)"
UnmarshalFcall( ${1:b []byte})
endsnippet

snippet UnmarshalPrivateKeyJWK "UnmarshalPrivateKeyJWK(data []byte)"
UnmarshalPrivateKeyJWK( ${1:data []byte})
endsnippet

snippet UnmarshalPrivateKeyPEM "UnmarshalPrivateKeyPEM(data []byte)"
UnmarshalPrivateKeyPEM( ${1:data []byte})
endsnippet

snippet UnmarshalPublicKeyJWK "UnmarshalPublicKeyJWK(data []byte)"
UnmarshalPublicKeyJWK( ${1:data []byte})
endsnippet

snippet UnmarshalPublicKeyJWKSet "UnmarshalPublicKeyJWKSet(data []byte)"
UnmarshalPublicKeyJWKSet( ${1:data []byte})
endsnippet

snippet UnmarshalPublicKeyPEM "UnmarshalPublicKeyPEM(data []byte)"
UnmarshalPublicKeyPEM( ${1:data []byte})
endsnippet

snippet UnmarshalPublicKeyPEMBundle "UnmarshalPublicKeyPEMBundle(data []byte)"
UnmarshalPublicKeyPEMBundle( ${1:data []byte})
endsnippet

snippet Unmount "Unmount(target string)"
Unmount( ${1:target string})
endsnippet

snippet Unpack "Unpack(buf []byte, dotu bool)"
Unpack( ${1:buf []byte}, ${2:dotu bool})
endsnippet

snippet UnpackDir "UnpackDir(buf []byte, dotu bool)"
UnpackDir( ${1:buf []byte}, ${2:dotu bool})
endsnippet

snippet UnpackLayer "UnpackLayer(dest string, layer ArchiveReader)"
UnpackLayer( ${1:dest string}, ${2:layer ArchiveReader})
endsnippet

snippet Unparen "Unparen(e ast.Expr)"
Unparen( ${1:e ast.Expr})
endsnippet

snippet Unregister "Unregister(name string)"
Unregister( ${1:name string})
endsnippet

snippet UnregisterAllianceInMemory "UnregisterAllianceInMemory(id int32)"
UnregisterAllianceInMemory( ${1:id int32})
endsnippet

snippet UnregisterInMemory "UnregisterInMemory(id int32)"
UnregisterInMemory( ${1:id int32})
endsnippet

snippet UnregisterOnline "UnregisterOnline(id int32)"
UnregisterOnline( ${1:id int32})
endsnippet

snippet UnreserveLabel "UnreserveLabel(label string)"
UnreserveLabel( ${1:label string})
endsnippet

snippet UnstructuredSwitchInAForLoop "UnstructuredSwitchInAForLoop(x int)"
UnstructuredSwitchInAForLoop( ${1:x int})
endsnippet

snippet Untar "Untar(archive io.Reader, dest string, options *TarOptions)"
Untar( ${1:archive io.Reader}, ${2:dest string}, ${3:options *TarOptions})
endsnippet

snippet UntarPath "UntarPath(src, dst string)"
UntarPath( ${1:src}, ${2:dst string})
endsnippet

snippet Update "Update(path, IP, hostname string)"
Update( ${1:path}, ${2:IP}, ${3:hostname string})
endsnippet

snippet UpdateAccount "UpdateAccount(account string, server_id T_server_id, pass string)"
UpdateAccount( ${1:account string}, ${2:server_id T_server_id}, ${3:pass string})
endsnippet

snippet UpdateActionPointStatus "UpdateActionPointStatus(user *User, now int64)"
UpdateActionPointStatus( ${1:user *User}, ${2:now int64})
endsnippet

snippet UpdateArmyStatus "UpdateArmyStatus(user *User, now int64)"
UpdateArmyStatus( ${1:user *User}, ${2:now int64})
endsnippet

snippet UpdateBattleVillageQuest "UpdateBattleVillageQuest(user *User, _hero *hero.Hero)"
UpdateBattleVillageQuest( ${1:user *User}, ${2:_hero *hero.Hero})
endsnippet

snippet UpdateCityHeroSkillBuff "UpdateCityHeroSkillBuff(user *User, city *City)"
UpdateCityHeroSkillBuff( ${1:user *User}, ${2:city *City})
endsnippet

snippet UpdateCityLoyaltyStatus "UpdateCityLoyaltyStatus(city *City, now int64)"
UpdateCityLoyaltyStatus( ${1:city *City}, ${2:now int64})
endsnippet

snippet UpdateCityResourceStatus "UpdateCityResourceStatus(user *User, alliance *Alliance)"
UpdateCityResourceStatus( ${1:user *User}, ${2:alliance *Alliance})
endsnippet

snippet UpdateCityStatus "UpdateCityStatus(user *User, alliance *Alliance, city_id T_obj_id, now int64)"
UpdateCityStatus( ${1:user *User}, ${2:alliance *Alliance}, ${3:city_id T_obj_id}, ${4:now int64})
endsnippet

snippet UpdateDailyAllianceQuest "UpdateDailyAllianceQuest(user *User, alliance *Alliance, now int64)"
UpdateDailyAllianceQuest( ${1:user *User}, ${2:alliance *Alliance}, ${3:now int64})
endsnippet

snippet UpdateDailyStatus "UpdateDailyStatus(user *User, alliance *Alliance, now int64)"
UpdateDailyStatus(⟪user *User⟫, ⟪alliance *Alliance⟫, ⟪now int64⟫) $1
endsnippet

snippet UpdateDau "UpdateDau(uid int32)"
UpdateDau( ${1:uid int32})
endsnippet

snippet UpdateFoodReducePerHour "UpdateFoodReducePerHour(user *User, alliance *Alliance)"
UpdateFoodReducePerHour( ${1:user *User}, ${2:alliance *Alliance})
endsnippet

snippet UpdatePerfConfig "UpdatePerfConfig(c appengine.Context, r *http.Request, req *PerfRequest)"
UpdatePerfConfig( ${1:c appengine.Context}, ${2:r *http.Request}, ${3:req *PerfRequest})
endsnippet

snippet UpdateStatus "UpdateStatus(user *User, alliance *Alliance)"
UpdateStatus( ${1:user *User}, ${2:alliance *Alliance})
endsnippet

snippet UpdateSupplyStatus "UpdateSupplyStatus(user *User, now int64)"
UpdateSupplyStatus( ${1:user *User}, ${2:now int64})
endsnippet

snippet UpdateVillageNum "UpdateVillageNum(village_type int, change_num int)"
UpdateVillageNum( ${1:village_type int}, ${2:change_num int})
endsnippet

snippet UseAbsolutLoyal "UseAbsolutLoyal(user *User, key string, num int32, city_id int32)"
UseAbsolutLoyal( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseBaldachineLv10 "UseBaldachineLv10(user *User, key string, num int32, city_id int32)"
UseBaldachineLv10( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseBigTravelBackpack "UseBigTravelBackpack(user *User, key string, num int32, army_id int32)"
UseBigTravelBackpack( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseClairvoyance "UseClairvoyance(user *User, key string, num int32, army_id int32)"
UseClairvoyance( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseCommanderArmorRelic "UseCommanderArmorRelic(user *User, key string, num int32, army_id int32)"
UseCommanderArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseConquerorArmorRelic "UseConquerorArmorRelic(user *User, key string, num int32, army_id int32)"
UseConquerorArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseDragonArmorRelic "UseDragonArmorRelic(user *User, key string, num int32, army_id int32)"
UseDragonArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseExtraFood "UseExtraFood(user *User, key string, num int32, city_id int32)"
UseExtraFood( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseExtraGold "UseExtraGold(user *User, key string, num int32, city_id int32)"
UseExtraGold( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseExtraIron "UseExtraIron(user *User, key string, num int32, city_id int32)"
UseExtraIron( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseExtraStone "UseExtraStone(user *User, key string, num int32, city_id int32)"
UseExtraStone( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseExtraWood "UseExtraWood(user *User, key string, num int32, city_id int32)"
UseExtraWood( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseFaithValue11000 "UseFaithValue11000(user *User, key string, num int32, city_id int32)"
UseFaithValue11000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseFaithValue2500 "UseFaithValue2500(user *User, key string, num int32, city_id int32)"
UseFaithValue2500( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseFaithValue36000 "UseFaithValue36000(user *User, key string, num int32, city_id int32)"
UseFaithValue36000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseFastHorse "UseFastHorse(user *User, key string, num int32, army_id int32)"
UseFastHorse( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseFearlessArmorRelic "UseFearlessArmorRelic(user *User, key string, num int32, army_id int32)"
UseFearlessArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseFood200000 "UseFood200000(user *User, key string, num int32, city_id int32)"
UseFood200000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseFood25000 "UseFood25000(user *User, key string, num int32, city_id int32)"
UseFood25000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseFood6000 "UseFood6000(user *User, key string, num int32, city_id int32)"
UseFood6000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseFood80000 "UseFood80000(user *User, key string, num int32, city_id int32)"
UseFood80000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseGiftLv10 "UseGiftLv10(user *User, key string, num int32, city_id int32)"
UseGiftLv10( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseGiftLv15 "UseGiftLv15(user *User, key string, num int32, city_id int32)"
UseGiftLv15( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseGiftLv20 "UseGiftLv20(user *User, key string, num int32, city_id int32)"
UseGiftLv20( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseGiftLv25 "UseGiftLv25(user *User, key string, num int32, city_id int32)"
UseGiftLv25( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseGiftLv5 "UseGiftLv5(user *User, key string, num int32, city_id int32)"
UseGiftLv5( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseGold20000 "UseGold20000(user *User, key string, num int32, city_id int32)"
UseGold20000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseGold2500 "UseGold2500(user *User, key string, num int32, city_id int32)"
UseGold2500( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseGold600 "UseGold600(user *User, key string, num int32, city_id int32)"
UseGold600( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseGold8000 "UseGold8000(user *User, key string, num int32, city_id int32)"
UseGold8000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseGriffinArmorRelic "UseGriffinArmorRelic(user *User, key string, num int32, army_id int32)"
UseGriffinArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseGuardianArmorRelic "UseGuardianArmorRelic(user *User, key string, num int32, army_id int32)"
UseGuardianArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseImmortalArmorRelic "UseImmortalArmorRelic(user *User, key string, num int32, army_id int32)"
UseImmortalArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseIron200000 "UseIron200000(user *User, key string, num int32, city_id int32)"
UseIron200000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseIron25000 "UseIron25000(user *User, key string, num int32, city_id int32)"
UseIron25000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseIron6000 "UseIron6000(user *User, key string, num int32, city_id int32)"
UseIron6000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseIron80000 "UseIron80000(user *User, key string, num int32, city_id int32)"
UseIron80000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseIronPart "UseIronPart(user *User, key string, num int32, army_id int32)"
UseIronPart( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseIronwillArmorRelic "UseIronwillArmorRelic(user *User, key string, num int32, army_id int32)"
UseIronwillArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseMarchHorn "UseMarchHorn(user *User, key string, num int32, army_id int32)"
UseMarchHorn( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UsePeaceAgreement "UsePeaceAgreement(user *User, key string, num int32, city_id int32)"
UsePeaceAgreement( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseRebornSeal "UseRebornSeal(user *User, key string, num int32, army_id int32)"
UseRebornSeal( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseSpeedupArcher "UseSpeedupArcher(user *User, key string, num int32, city_id int32)"
UseSpeedupArcher( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseSpeedupBook "UseSpeedupBook(user *User, key string, num int32, army_id int32)"
UseSpeedupBook( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseSpeedupCavalvy "UseSpeedupCavalvy(user *User, key string, num int32, city_id int32)"
UseSpeedupCavalvy( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseSpeedupInfantry "UseSpeedupInfantry(user *User, key string, num int32, city_id int32)"
UseSpeedupInfantry( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseSpeedupScorll "UseSpeedupScorll(user *User, key string, num int32, army_id int32)"
UseSpeedupScorll( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseSpeedupSiege "UseSpeedupSiege(user *User, key string, num int32, city_id int32)"
UseSpeedupSiege( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseStringFastHorse "UseStringFastHorse(user *User, key string, num int32, army_id int32)"
UseStringFastHorse( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseStron200000 "UseStron200000(user *User, key string, num int32, city_id int32)"
UseStron200000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseStron25000 "UseStron25000(user *User, key string, num int32, city_id int32)"
UseStron25000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseStron6000 "UseStron6000(user *User, key string, num int32, city_id int32)"
UseStron6000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseStron80000 "UseStron80000(user *User, key string, num int32, city_id int32)"
UseStron80000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseStrongClairvoyance "UseStrongClairvoyance(user *User, key string, num int32, army_id int32)"
UseStrongClairvoyance( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseStrongIronPart "UseStrongIronPart(user *User, key string, num int32, army_id int32)"
UseStrongIronPart( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseStrongMarchHorn "UseStrongMarchHorn(user *User, key string, num int32, army_id int32)"
UseStrongMarchHorn( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseStrongRebornSeal "UseStrongRebornSeal(user *User, key string, num int32, army_id int32)"
UseStrongRebornSeal( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseSupply100 "UseSupply100(user *User, key string, num int32, city_id int32)"
UseSupply100( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseSupply20 "UseSupply20(user *User, key string, num int32, city_id int32)"
UseSupply20( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseTitanArmorRelic "UseTitanArmorRelic(user *User, key string, num int32, army_id int32)"
UseTitanArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseTpBook "UseTpBook(user *User, key string, num int32, army_id int32)"
UseTpBook( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseTpScroll "UseTpScroll(user *User, key string, num int32, army_id int32)"
UseTpScroll( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseTravelBackpack "UseTravelBackpack(user *User, key string, num int32, army_id int32)"
UseTravelBackpack( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseUnicornArmorRelic "UseUnicornArmorRelic(user *User, key string, num int32, army_id int32)"
UseUnicornArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseValorArmorRelic "UseValorArmorRelic(user *User, key string, num int32, army_id int32)"
UseValorArmorRelic( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:army_id int32})
endsnippet

snippet UseWarFog "UseWarFog(user *User, key string, num int32, city_id int32)"
UseWarFog( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseWood200000 "UseWood200000(user *User, key string, num int32, city_id int32)"
UseWood200000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseWood25000 "UseWood25000(user *User, key string, num int32, city_id int32)"
UseWood25000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseWood6000 "UseWood6000(user *User, key string, num int32, city_id int32)"
UseWood6000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UseWood80000 "UseWood80000(user *User, key string, num int32, city_id int32)"
UseWood80000( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:city_id int32})
endsnippet

snippet UserCallBackAllHeroes "UserCallBackAllHeroes(user *User)"
UserCallBackAllHeroes( ${1:user *User})
endsnippet

snippet UserCancleAllDeals "UserCancleAllDeals(user *User)"
UserCancleAllDeals( ${1:user *User})
endsnippet

snippet UserReceieveAllianceDailyQuestPerReward "UserReceieveAllianceDailyQuestPerReward(user *User, quest_id int32)"
UserReceieveAllianceDailyQuestPerReward( ${1:user *User}, ${2:quest_id int32})
endsnippet

snippet UserReceieveAllianceDailyQuestReward "UserReceieveAllianceDailyQuestReward(user *User, quest_id int32)"
UserReceieveAllianceDailyQuestReward( ${1:user *User}, ${2:quest_id int32})
endsnippet

snippet UserReceieveDailyQuestReward "UserReceieveDailyQuestReward(user *User, quest_id int32)"
UserReceieveDailyQuestReward( ${1:user *User}, ${2:quest_id int32})
endsnippet

snippet UserRequestProxy "UserRequestProxy(sess *Session, p []byte, quit_signal chan bool)"
UserRequestProxy( ${1:sess *Session}, ${2:p []byte}, ${3:quit_signal chan bool})
endsnippet

snippet UsesImport "UsesImport(f *ast.File, path string)"
UsesImport( ${1:f *ast.File}, ${2:path string})
endsnippet

snippet UtimesNano "UtimesNano(path string, ts []syscall.Timespec)"
UtimesNano( ${1:path string}, ${2:ts []syscall.Timespec})
endsnippet

snippet Validate "Validate(obj interface{})"
Validate( ${1:obj interface{}})
endsnippet

snippet ValidateAttach "ValidateAttach(val string)"
ValidateAttach( ${1:val string})
endsnippet

snippet ValidateContextDirectory "ValidateContextDirectory(srcPath string, excludes []string)"
ValidateContextDirectory( ${1:srcPath string}, ${2:excludes []string})
endsnippet

snippet ValidateDnsSearch "ValidateDnsSearch(val string)"
ValidateDnsSearch( ${1:val string})
endsnippet

snippet ValidateEnv "ValidateEnv(val string)"
ValidateEnv( ${1:val string})
endsnippet

snippet ValidateExtraHost "ValidateExtraHost(val string)"
ValidateExtraHost( ${1:val string})
endsnippet

snippet ValidateHost "ValidateHost(val string)"
ValidateHost( ${1:val string})
endsnippet

snippet ValidateID "ValidateID(id string)"
ValidateID( ${1:id string})
endsnippet

snippet ValidateIPAddress "ValidateIPAddress(val string)"
ValidateIPAddress( ${1:val string})
endsnippet

snippet ValidateLabel "ValidateLabel(val string)"
ValidateLabel( ${1:val string})
endsnippet

snippet ValidateLink "ValidateLink(val string)"
ValidateLink( ${1:val string})
endsnippet

snippet ValidateMirror "ValidateMirror(val string)"
ValidateMirror( ${1:val string})
endsnippet

snippet ValidatePath "ValidatePath(val string)"
ValidatePath( ${1:val string})
endsnippet

snippet ValidateTagName "ValidateTagName(name string)"
ValidateTagName( ${1:name string})
endsnippet

snippet ValueOf "ValueOf(interface{})"
ValueOf( ${1:interface{}})
endsnippet

snippet Var "Var(value Value, names []string, usage string)"
Var( ${1:value Value}, ${2:names []string}, ${3:usage string})
endsnippet

snippet Vars "Vars(r *http.Request)"
Vars( ${1:r *http.Request})
endsnippet

snippet VillageBattleEndHandle "VillageBattleEndHandle(user *User, object interface{}, code int16)"
VillageBattleEndHandle( ${1:user *User}, ${2:object interface{}}, ${3:code int16})
endsnippet

snippet Visit "Visit(fn func(*Flag)"
Visit( ${1:fn func(*Flag})
endsnippet

snippet VisitAll "VisitAll(fn func(*Flag)"
VisitAll( ${1:fn func(*Flag})
endsnippet

snippet WARN "WARN(v ...interface{})"
WARN( ${1:v ...interface{}})
endsnippet

snippet Walk "Walk(v Visitor, node Node)"
Walk( ${1:v Visitor}, ${2:node Node})
endsnippet

snippet WarehouseCurrentShelter "WarehouseCurrentShelter(city *City)"
WarehouseCurrentShelter( ${1:city *City})
endsnippet

snippet Warn "Warn(args ...interface{})"
Warn( ${1:args ...interface{}})
endsnippet

snippet Warnf "Warnf(format string, args ...interface{})"
Warnf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet Warning "Warning(args ...interface{})"
Warning( ${1:args ...interface{}})
endsnippet

snippet Warningf "Warningf(format string, args ...interface{})"
Warningf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet Warningln "Warningln(args ...interface{})"
Warningln( ${1:args ...interface{}})
endsnippet

snippet Warnln "Warnln(args ...interface{})"
Warnln( ${1:args ...interface{}})
endsnippet

snippet WithCancel "WithCancel(parent Context)"
WithCancel( ${1:parent Context})
endsnippet

snippet WithCausef "WithCausef(underlying, cause error, f string, a ...interface{})"
WithCausef( ${1:underlying}, ${2:cause error}, ${3:f string}, ${4:a ...interface{}})
endsnippet

snippet WithDeadline "WithDeadline(parent Context, deadline time.Time)"
WithDeadline( ${1:parent Context}, ${2:deadline time.Time})
endsnippet

snippet WithField "WithField(key string, value interface{})"
WithField( ${1:key string}, ${2:value interface{}})
endsnippet

snippet WithFields "WithFields(fields Fields)"
WithFields( ${1:fields Fields})
endsnippet

snippet WithTestDSN "WithTestDSN(t *testing.T, tf func(string, <-chan *raven.Packet)"
WithTestDSN( ${1:t *testing.T}, ${2:tf func(string}, ${3:<-chan *raven.Packet})
endsnippet

snippet WithTimeout "WithTimeout(parent Context, timeout time.Duration)"
WithTimeout( ${1:parent Context}, ${2:timeout time.Duration})
endsnippet

snippet WithValue "WithValue(parent Context, key interface{}, val interface{})"
WithValue( ${1:parent Context}, ${2:key interface{}}, ${3:val interface{}})
endsnippet

snippet WordsPerLine "WordsPerLine(r image.Rectangle, depth int)"
WordsPerLine( ${1:r image.Rectangle}, ${2:depth int})
endsnippet

snippet WrapMiddlewares "WrapMiddlewares(middlewares []Middleware, handler HandlerFunc)"
WrapMiddlewares( ${1:middlewares []Middleware}, ${2:handler HandlerFunc})
endsnippet

snippet Write "Write(fd int, p []byte)"
Write( ${1:fd int}, ${2:p []byte})
endsnippet

snippet WriteAST "WriteAST(fset *token.FileSet, filename string, f *ast.File)"
WriteAST( ${1:fset *token.FileSet}, ${2:filename string}, ${3:f *ast.File})
endsnippet

snippet WriteExpr "WriteExpr(buf *bytes.Buffer, x ast.Expr)"
WriteExpr( ${1:buf *bytes.Buffer}, ${2:x ast.Expr})
endsnippet

snippet WriteFcall "WriteFcall(w io.Writer, f *Fcall)"
WriteFcall( ${1:w io.Writer}, ${2:f *Fcall})
endsnippet

snippet WriteFunction "WriteFunction(buf *bytes.Buffer, f *Function)"
WriteFunction( ${1:buf *bytes.Buffer}, ${2:f *Function})
endsnippet

snippet WriteLog "WriteLog(src io.Reader, dst io.Writer, format string)"
WriteLog( ${1:src io.Reader}, ${2:dst io.Writer}, ${3:format string})
endsnippet

snippet WritePackage "WritePackage(buf *bytes.Buffer, p *Package)"
WritePackage( ${1:buf *bytes.Buffer}, ${2:p *Package})
endsnippet

snippet WriteResult "WriteResult(w io.Writer, res *oracle.Result)"
WriteResult( ${1:w io.Writer}, ${2:res *oracle.Result})
endsnippet

snippet WriteSignature "WriteSignature(buf *bytes.Buffer, this *Package, sig *Signature)"
WriteSignature( ${1:buf *bytes.Buffer}, ${2:this *Package}, ${3:sig *Signature})
endsnippet

snippet WriteStatus "WriteStatus(requestedTag string, out io.Writer, sf *utils.StreamFormatter, layers_downloaded bool)"
WriteStatus( ${1:requestedTag string}, ${2:out io.Writer}, ${3:sf *utils.StreamFormatter}, ${4:layers_downloaded bool})
endsnippet

snippet WriteType "WriteType(buf *bytes.Buffer, this *Package, typ Type)"
WriteType( ${1:buf *bytes.Buffer}, ${2:this *Package}, ${3:typ Type})
endsnippet

snippet WriteWav "WriteWav(filename string, input Widget)"
WriteWav( ${1:filename string}, ${2:input Widget})
endsnippet

snippet WriteableRingBuf "WriteableRingBuf(size, maxsize int, wblocking bool, fmt Format)"
WriteableRingBuf( ${1:size}, ${2:maxsize int}, ${3:wblocking bool}, ${4:fmt Format})
endsnippet

snippet XattrEnabled "XattrEnabled(path string)"
XattrEnabled( ${1:path string})
endsnippet

snippet Z85decode "Z85decode(s string)"
Z85decode( ${1:s string})
endsnippet

snippet Z85encode "Z85encode(data string)"
Z85encode( ${1:data string})
endsnippet

snippet Zero "Zero(Type)"
Zero( ${1:Type})
endsnippet

snippet ZeroInitializedVarsAreConstants "ZeroInitializedVarsAreConstants(x int)"
ZeroInitializedVarsAreConstants( ${1:x int})
endsnippet

snippet _ "_(x int)"
_( ${1:x int})
endsnippet

snippet _IO "_IO(group byte, ioctl_num uintptr)"
_IO( ${1:group byte}, ${2:ioctl_num uintptr})
endsnippet

snippet _IOC "_IOC(inout uintptr, group byte, ioctl_num uintptr, param_len uintptr)"
_IOC( ${1:inout uintptr}, ${2:group byte}, ${3:ioctl_num uintptr}, ${4:param_len uintptr})
endsnippet

snippet _IOC_PARM_LEN "_IOC_PARM_LEN(ioctl uintptr)"
_IOC_PARM_LEN( ${1:ioctl uintptr})
endsnippet

snippet _IOR "_IOR(group byte, ioctl_num uintptr, param_len uintptr)"
_IOR( ${1:group byte}, ${2:ioctl_num uintptr}, ${3:param_len uintptr})
endsnippet

snippet _IOW "_IOW(group byte, ioctl_num uintptr, param_len uintptr)"
_IOW( ${1:group byte}, ${2:ioctl_num uintptr}, ${3:param_len uintptr})
endsnippet

snippet _IOWR "_IOWR(group byte, ioctl_num uintptr, param_len uintptr)"
_IOWR( ${1:group byte}, ${2:ioctl_num uintptr}, ${3:param_len uintptr})
endsnippet

snippet _activity_info "_activity_info(user *User)"
_activity_info( ${1:user *User})
endsnippet

snippet _add_army_buff "_add_army_buff(user *User, key string, left_times int64, value float32, army_id int32)"
_add_army_buff( ${1:user *User}, ${2:key string}, ${3:left_times int64}, ${4:value float32}, ${5:army_id int32})
endsnippet

snippet _add_city_buff "_add_city_buff(user *User, key string, left_seconds int64, value float32, city_id int32)"
_add_city_buff( ${1:user *User}, ${2:key string}, ${3:left_seconds int64}, ${4:value float32}, ${5:city_id int32})
endsnippet

snippet _add_user_buff "_add_user_buff(user *User, key string, left_seconds int64, value float32)"
_add_user_buff( ${1:user *User}, ${2:key string}, ${3:left_seconds int64}, ${4:value float32})
endsnippet

snippet _addikey_next "_addikey_next(addikey *ff_addikey)"
_addikey_next( ${1:addikey *ff_addikey})
endsnippet

snippet _admin_fix "_admin_fix(msg string, user *User)"
_admin_fix( ${1:msg string}, ${2:user *User})
endsnippet

snippet _alliance_basic_info "_alliance_basic_info(a *Alliance)"
_alliance_basic_info( ${1:a *Alliance})
endsnippet

snippet _alliance_public_info "_alliance_public_info(a *Alliance)"
_alliance_public_info( ${1:a *Alliance})
endsnippet

snippet _alliance_quest "_alliance_quest(quest *alliance_daily_quest.AllianceDailyQuest)"
_alliance_quest( ${1:quest *alliance_daily_quest.AllianceDailyQuest})
endsnippet

snippet _alliance_quests "_alliance_quests(user *User)"
_alliance_quests( ${1:user *User})
endsnippet

snippet _alliance_resource_event "_alliance_resource_event(event *ResourceEvent)"
_alliance_resource_event( ${1:event *ResourceEvent})
endsnippet

snippet _alliance_resource_events "_alliance_resource_events(events map[string]*ResourceEvent, now int64)"
_alliance_resource_events( ${1:events map[string]*ResourceEvent}, ${2:now int64})
endsnippet

snippet _alliance_snapshot "_alliance_snapshot(a *Alliance)"
_alliance_snapshot( ${1:a *Alliance})
endsnippet

snippet _alliance_speed_up_event "_alliance_speed_up_event(a *Alliance, event *SpeedUpEvent)"
_alliance_speed_up_event( ${1:a *Alliance}, ${2:event *SpeedUpEvent})
endsnippet

snippet _alliance_speed_up_events "_alliance_speed_up_events(a *Alliance, events []*SpeedUpEvent, now int64)"
_alliance_speed_up_events( ${1:a *Alliance}, ${2:events []*SpeedUpEvent}, ${3:now int64})
endsnippet

snippet _armies "_armies(user *User)"
_armies( ${1:user *User})
endsnippet

snippet _army_change_result "_army_change_result(user *User, code int16)"
_army_change_result( ${1:user *User}, ${2:code int16})
endsnippet

snippet _attack_all_die "_attack_all_die(user *User, object interface{})"
_attack_all_die( ${1:user *User}, ${2:object interface{}})
endsnippet

snippet _attack_not_all_die "_attack_not_all_die(user *User, object interface{})"
_attack_not_all_die( ${1:user *User}, ${2:object interface{}})
endsnippet

snippet _auto_retry_request "_auto_retry_request(method string, url string, values url.Values)"
_auto_retry_request( ${1:method string}, ${2:url string}, ${3:values url.Values})
endsnippet

snippet _battle_message_detail "_battle_message_detail(battle_message *BattleMessage)"
_battle_message_detail( ${1:battle_message *BattleMessage})
endsnippet

snippet _battle_messages_titles "_battle_messages_titles(userid int32)"
_battle_messages_titles( ${1:userid int32})
endsnippet

snippet _battle_round "_battle_round(_battle_round *BattleRound)"
_battle_round( ${1:_battle_round *BattleRound})
endsnippet

snippet _battle_turns "_battle_turns(_battle_info *BattleInfo)"
_battle_turns( ${1:_battle_info *BattleInfo})
endsnippet

snippet _buffs "_buffs(city *City)"
_buffs( ${1:city *City})
endsnippet

snippet _build_up_alliance_rank "_build_up_alliance_rank(start int, ids []int32, values []int32)"
_build_up_alliance_rank( ${1:start int}, ${2:ids []int32}, ${3:values []int32})
endsnippet

snippet _build_up_user_rank "_build_up_user_rank(start int, ids []int32, values []int32)"
_build_up_user_rank( ${1:start int}, ${2:ids []int32}, ${3:values []int32})
endsnippet

snippet _building_operation_result "_building_operation_result(user *User, building *building.Building, code int16)"
_building_operation_result( ${1:user *User}, ${2:building *building.Building}, ${3:code int16})
endsnippet

snippet _buildings "_buildings(city *City)"
_buildings( ${1:city *City})
endsnippet

snippet _bulding_info "_bulding_info(building *building.Building)"
_bulding_info( ${1:building *building.Building})
endsnippet

snippet _call "_call(data []byte)"
_call( ${1:data []byte})
endsnippet

snippet _chang_user_resource "_chang_user_resource(user *User, data map[string]string)"
_chang_user_resource( ${1:user *User}, ${2:data map[string]string})
endsnippet

snippet _chang_user_soldiers "_chang_user_soldiers(user *User, data map[string]string)"
_chang_user_soldiers( ${1:user *User}, ${2:data map[string]string})
endsnippet

snippet _change_city_name "_change_city_name(user *User, city_id int32, name string)"
_change_city_name( ${1:user *User}, ${2:city_id int32}, ${3:name string})
endsnippet

snippet _change_client_soldier_to_sever "_change_client_soldier_to_sever(side []soldiers_info)"
_change_client_soldier_to_sever( ${1:side []soldiers_info})
endsnippet

snippet _change_gems_do "_change_gems_do(formdata ChangeGemsForm)"
_change_gems_do( ${1:formdata ChangeGemsForm})
endsnippet

snippet _change_hero_result "_change_hero_result(user *User, code int16)"
_change_hero_result( ${1:user *User}, ${2:code int16})
endsnippet

snippet _change_hero_status_do "_change_hero_status_do(formdata ChangeForm)"
_change_hero_status_do( ${1:formdata ChangeForm})
endsnippet

snippet _change_items_do "_change_items_do(formdata ChangeForm)"
_change_items_do( ${1:formdata ChangeForm})
endsnippet

snippet _change_mail_do "_change_mail_do(data MailSystemForm)"
_change_mail_do( ${1:data MailSystemForm})
endsnippet

snippet _change_map_to_returnthings_array "_change_map_to_returnthings_array(item_map map[string]int32)"
_change_map_to_returnthings_array( ${1:item_map map[string]int32})
endsnippet

snippet _change_name "_change_name(new_conn *net.TCPConn, mac string, t *testing.T)"
_change_name( ${1:new_conn *net.TCPConn}, ${2:mac string}, ${3:t *testing.T})
endsnippet

snippet _change_resource_do "_change_resource_do(formdata ChangeResourceForm)"
_change_resource_do( ${1:formdata ChangeResourceForm})
endsnippet

snippet _change_soldiers_do "_change_soldiers_do(formdata ChangeForm)"
_change_soldiers_do( ${1:formdata ChangeForm})
endsnippet

snippet _change_uid_on_map "_change_uid_on_map(uid int32, x, y T_coordinate)"
_change_uid_on_map( ${1:uid int32}, ${2:x}, ${3:y T_coordinate})
endsnippet

snippet _change_user_gems "_change_user_gems(user *User, data map[string]string)"
_change_user_gems( ${1:user *User}, ${2:data map[string]string})
endsnippet

snippet _change_user_heros "_change_user_heros(user *User, data map[string]string)"
_change_user_heros( ${1:user *User}, ${2:data map[string]string})
endsnippet

snippet _change_user_items "_change_user_items(user *User, data map[string]string)"
_change_user_items( ${1:user *User}, ${2:data map[string]string})
endsnippet

snippet _change_user_name "_change_user_name(user *User, name string)"
_change_user_name( ${1:user *User}, ${2:name string})
endsnippet

snippet _check_can_attack_plot "_check_can_attack_plot(user *User, country_name string, plot_id int32)"
_check_can_attack_plot( ${1:user *User}, ${2:country_name string}, ${3:plot_id int32})
endsnippet

snippet _check_hero_can_move "_check_hero_can_move(hero *hero.Hero, user *User)"
_check_hero_can_move( ${1:hero *hero.Hero}, ${2:user *User})
endsnippet

snippet _check_item_enough "_check_item_enough(user *User, item_type string, need_buy_count int32, use_count int32)"
_check_item_enough( ${1:user *User}, ${2:item_type string}, ${3:need_buy_count int32}, ${4:use_count int32})
endsnippet

snippet _check_name "_check_name(name string)"
_check_name( ${1:name string})
endsnippet

snippet _cities "_cities(user *User)"
_cities( ${1:user *User})
endsnippet

snippet _city "_city(user *User, city *City)"
_city( ${1:user *User}, ${2:city *City})
endsnippet

snippet _city_be_attacked_events "_city_be_attacked_events(user *User)"
_city_be_attacked_events( ${1:user *User})
endsnippet

snippet _city_buy_deals "_city_buy_deals(city *City)"
_city_buy_deals( ${1:city *City})
endsnippet

snippet _city_sell_deals "_city_sell_deals(city *City)"
_city_sell_deals( ${1:city *City})
endsnippet

snippet _city_time_buff_content "_city_time_buff_content(user *User, alliance *Alliance)"
_city_time_buff_content( ${1:user *User}, ${2:alliance *Alliance})
endsnippet

snippet _clear_act "_clear_act(user *User)"
_clear_act( ${1:user *User})
endsnippet

snippet _clear_buff "_clear_buff(user *User)"
_clear_buff( ${1:user *User})
endsnippet

snippet _clear_user_mac "_clear_user_mac(user *User)"
_clear_user_mac( ${1:user *User})
endsnippet

snippet _client_user_resource_snapshot "_client_user_resource_snapshot(user *User, code int16)"
_client_user_resource_snapshot( ${1:user *User}, ${2:code int16})
endsnippet

snippet _client_user_snapshot "_client_user_snapshot(user *User, alliance *Alliance, code int16)"
_client_user_snapshot( ${1:user *User}, ${2:alliance *Alliance}, ${3:code int16})
endsnippet

snippet _config_exsit "_config_exsit(filename string)"
_config_exsit( ${1:filename string})
endsnippet

snippet _config_hero_result "_config_hero_result(user *User, code int16)"
_config_hero_result( ${1:user *User}, ${2:code int16})
endsnippet

snippet _create_broadcast_ipcobject "_create_broadcast_ipcobject(service int16, object interface{})"
_create_broadcast_ipcobject( ${1:service int16}, ${2:object interface{}})
endsnippet

snippet _create_market "_create_market(user *User)"
_create_market( ${1:user *User})
endsnippet

snippet _daily_hero_lists "_daily_hero_lists(city *City)"
_daily_hero_lists( ${1:city *City})
endsnippet

snippet _daily_quests "_daily_quests(user *User)"
_daily_quests( ${1:user *User})
endsnippet

snippet _deal_change_result "_deal_change_result(user *User, code int16)"
_deal_change_result( ${1:user *User}, ${2:code int16})
endsnippet

snippet _delete_hero "_delete_hero(user *User, value int64)"
_delete_hero( ${1:user *User}, ${2:value int64})
endsnippet

snippet _delete_uid_on_old_map_area "_delete_uid_on_old_map_area(uid int32)"
_delete_uid_on_old_map_area( ${1:uid int32})
endsnippet

snippet _error "_error(code int16, err string)"
_error( ${1:code int16}, ${2:err string})
endsnippet

snippet _find_alliance_id "_find_alliance_id(name string)"
_find_alliance_id( ${1:name string})
endsnippet

snippet _find_user "_find_user(name string)"
_find_user( ${1:name string})
endsnippet

snippet _find_user_id "_find_user_id(name string)"
_find_user_id( ${1:name string})
endsnippet

snippet _find_user_str "_find_user_str(name string)"
_find_user_str( ${1:name string})
endsnippet

snippet _finish_count_quest "_finish_count_quest(user *User, quest_type string, content string, number int32)"
_finish_count_quest( ${1:user *User}, ${2:quest_type string}, ${3:content string}, ${4:number int32})
endsnippet

snippet _finish_first_time_quest "_finish_first_time_quest(user *User, quest_type string, content string)"
_finish_first_time_quest( ${1:user *User}, ${2:quest_type string}, ${3:content string})
endsnippet

snippet _finish_level_quest "_finish_level_quest(user *User, quest_type string, content string, number T_level)"
_finish_level_quest( ${1:user *User}, ${2:quest_type string}, ${3:content string}, ${4:number T_level})
endsnippet

snippet _flush "_flush(sess *Session)"
_flush( ${1:sess *Session})
endsnippet

snippet _flush_from_alliance_memory "_flush_from_alliance_memory(alliance_memory *AllianceMemory)"
_flush_from_alliance_memory( ${1:alliance_memory *AllianceMemory})
endsnippet

snippet _flush_from_user "_flush_from_user(user *User)"
_flush_from_user( ${1:user *User})
endsnippet

snippet _flush_work "_flush_work(sess *Session)"
_flush_work( ${1:sess *Session})
endsnippet

snippet _flush_work_from_user "_flush_work_from_user(user *User)"
_flush_work_from_user( ${1:user *User})
endsnippet

snippet _gacha_hero_lv_1 "_gacha_hero_lv_1(tbl gacha_hero_indicate, user *User, code int16)"
_gacha_hero_lv_1( ${1:tbl gacha_hero_indicate}, ${2:user *User}, ${3:code int16})
endsnippet

snippet _gacha_hero_lv_2 "_gacha_hero_lv_2(tbl gacha_hero_indicate, user *User, code int16)"
_gacha_hero_lv_2( ${1:tbl gacha_hero_indicate}, ${2:user *User}, ${3:code int16})
endsnippet

snippet _gacha_hero_lv_3 "_gacha_hero_lv_3(tbl gacha_hero_indicate, user *User, code int16)"
_gacha_hero_lv_3( ${1:tbl gacha_hero_indicate}, ${2:user *User}, ${3:code int16})
endsnippet

snippet _gen_activity_list "_gen_activity_list(user *User)"
_gen_activity_list( ${1:user *User})
endsnippet

snippet _gen_army_info "_gen_army_info(army *ArmyInfo)"
_gen_army_info( ${1:army *ArmyInfo})
endsnippet

snippet _gen_finished_quest_list "_gen_finished_quest_list(user *User)"
_gen_finished_quest_list( ${1:user *User})
endsnippet

snippet _gen_hero_info "_gen_hero_info(hero_id int32, _hero *hero.Hero)"
_gen_hero_info( ${1:hero_id int32}, ${2:_hero *hero.Hero})
endsnippet

snippet _gen_hero_soldier_info "_gen_hero_soldier_info(_hero *hero.Hero)"
_gen_hero_soldier_info( ${1:_hero *hero.Hero})
endsnippet

snippet _gen_map_area "_gen_map_area(area *region_map.Area, user_id int32, alliance_id int32)"
_gen_map_area( ${1:area *region_map.Area}, ${2:user_id int32}, ${3:alliance_id int32})
endsnippet

snippet _gen_map_area_event "_gen_map_area_event(ev event.Event, end_is_village bool)"
_gen_map_area_event( ${1:ev event.Event}, ${2:end_is_village bool})
endsnippet

snippet _gen_outdate_quest_list "_gen_outdate_quest_list(user *User)"
_gen_outdate_quest_list( ${1:user *User})
endsnippet

snippet _gen_plot_user "_gen_plot_user(user *User, country_name string, plot_id int32, star int32)"
_gen_plot_user( ${1:user *User}, ${2:country_name string}, ${3:plot_id int32}, ${4:star int32})
endsnippet

snippet _gen_point_info "_gen_point_info(index int32)"
_gen_point_info( ${1:index int32})
endsnippet

snippet _gen_properties "_gen_properties(tile_json tiled_json)"
_gen_properties( ${1:tile_json tiled_json})
endsnippet

snippet _gen_self_alliance_rank "_gen_self_alliance_rank(rank_name string, alliance_id int32)"
_gen_self_alliance_rank( ${1:rank_name string}, ${2:alliance_id int32})
endsnippet

snippet _gen_self_user_rank "_gen_self_user_rank(rank_name string, user_id int32)"
_gen_self_user_rank( ${1:rank_name string}, ${2:user_id int32})
endsnippet

snippet _gen_user_chat_info "_gen_user_chat_info(user *User)"
_gen_user_chat_info( ${1:user *User})
endsnippet

snippet _gen_user_rank_result "_gen_user_rank_result(top []rank_info, self []rank_info)"
_gen_user_rank_result( ${1:top []rank_info}, ${2:self []rank_info})
endsnippet

snippet _gen_village_event "_gen_village_event(user *User, ev event.Event)"
_gen_village_event( ${1:user *User}, ${2:ev event.Event})
endsnippet

snippet _generate "_generate(ctx *Pike)"
_generate( ${1:ctx *Pike})
endsnippet

snippet _generate_battle_log "_generate_battle_log(battle_message *BattleMessage, attack_army_info *ArmyInfo, defense_army_info *ArmyInfo, server_id int32, source string)"
_generate_battle_log( ${1:battle_message *BattleMessage}, ${2:attack_army_info *ArmyInfo}, ${3:defense_army_info *ArmyInfo}, ${4:server_id int32}, ${5:source string})
endsnippet

snippet _generate_daily_quest "_generate_daily_quest(quest_type string, _manager *Manager, last_refresh_time int64)"
_generate_daily_quest( ${1:quest_type string}, ${2:_manager *Manager}, ${3:last_refresh_time int64})
endsnippet

snippet _generate_get_items_result_array "_generate_get_items_result_array(return_things []T_return_thing)"
_generate_get_items_result_array( ${1:return_things []T_return_thing})
endsnippet

snippet _get "_get(tblname string, rowname string, fieldname string)"
_get( ${1:tblname string}, ${2:rowname string}, ${3:fieldname string})
endsnippet

snippet _get_alliance "_get_alliance(user *User)"
_get_alliance( ${1:user *User})
endsnippet

snippet _get_alliance_applications "_get_alliance_applications(alliance *Alliance)"
_get_alliance_applications( ${1:alliance *Alliance})
endsnippet

snippet _get_alliance_assist_buff "_get_alliance_assist_buff(alliance *Alliance)"
_get_alliance_assist_buff( ${1:alliance *Alliance})
endsnippet

snippet _get_alliance_chat_room "_get_alliance_chat_room(user *User)"
_get_alliance_chat_room( ${1:user *User})
endsnippet

snippet _get_alliance_member_list "_get_alliance_member_list(a *Alliance)"
_get_alliance_member_list( ${1:a *Alliance})
endsnippet

snippet _get_alliance_resource_buff "_get_alliance_resource_buff(alliance *Alliance)"
_get_alliance_resource_buff( ${1:alliance *Alliance})
endsnippet

snippet _get_alliance_resource_events "_get_alliance_resource_events(alliance *Alliance)"
_get_alliance_resource_events( ${1:alliance *Alliance})
endsnippet

snippet _get_alliance_soldier_buff "_get_alliance_soldier_buff(alliance *Alliance)"
_get_alliance_soldier_buff( ${1:alliance *Alliance})
endsnippet

snippet _get_alliance_speed_up_events "_get_alliance_speed_up_events(alliance *Alliance)"
_get_alliance_speed_up_events( ${1:alliance *Alliance})
endsnippet

snippet _get_alliance_tech "_get_alliance_tech(alliance *Alliance)"
_get_alliance_tech( ${1:alliance *Alliance})
endsnippet

snippet _get_items "_get_items(item_lists map[string]int32)"
_get_items( ${1:item_lists map[string]int32})
endsnippet

snippet _get_mail_lang_list "_get_mail_lang_list(mail *AdminMail)"
_get_mail_lang_list( ${1:mail *AdminMail})
endsnippet

snippet _get_mail_select_list "_get_mail_select_list(key string)"
_get_mail_select_list( ${1:key string})
endsnippet

snippet _get_mail_send_list "_get_mail_send_list(mail *AdminMail)"
_get_mail_send_list( ${1:mail *AdminMail})
endsnippet

snippet _get_mail_touser_list "_get_mail_touser_list(mail *AdminMail)"
_get_mail_touser_list( ${1:mail *AdminMail})
endsnippet

snippet _get_month_login_rewards_result "_get_month_login_rewards_result(user *User, code int16)"
_get_month_login_rewards_result( ${1:user *User}, ${2:code int16})
endsnippet

snippet _get_online_gift "_get_online_gift(conn *net.TCPConn, t *testing.T)"
_get_online_gift( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet _get_plot_medal "_get_plot_medal(plot string, star int32)"
_get_plot_medal( ${1:plot string}, ${2:star int32})
endsnippet

snippet _get_probability "_get_probability(scout_level, scout_type string)"
_get_probability( ${1:scout_level}, ${2:scout_type string})
endsnippet

snippet _get_probably_result "_get_probably_result(percent int)"
_get_probably_result( ${1:percent int})
endsnippet

snippet _get_quest_award_result "_get_quest_award_result(user *User, code int16)"
_get_quest_award_result( ${1:user *User}, ${2:code int16})
endsnippet

snippet _get_range_random_coordinate "_get_range_random_coordinate(x, y T_coordinate)"
_get_range_random_coordinate( ${1:x}, ${2:y T_coordinate})
endsnippet

snippet _get_rank_type "_get_rank_type(activity_type int32)"
_get_rank_type( ${1:activity_type int32})
endsnippet

snippet _get_roulette_rewards_result "_get_roulette_rewards_result(user *User, hit_id int32, code int16)"
_get_roulette_rewards_result( ${1:user *User}, ${2:hit_id int32}, ${3:code int16})
endsnippet

snippet _get_score_reward "_get_score_reward(user *User, activity_type int32, score_level int32, score int32)"
_get_score_reward( ${1:user *User}, ${2:activity_type int32}, ${3:score_level int32}, ${4:score int32})
endsnippet

snippet _get_self_alliance_rank_num "_get_self_alliance_rank_num(alliance_id int32)"
_get_self_alliance_rank_num( ${1:alliance_id int32})
endsnippet

snippet _get_top_one_rank_user_name "_get_top_one_rank_user_name(rank_name string)"
_get_top_one_rank_user_name( ${1:rank_name string})
endsnippet

snippet _get_url_resp_html "_get_url_resp_html(strUrl string, postDict map[string]string)"
_get_url_resp_html( ${1:strUrl string}, ${2:postDict map[string]string})
endsnippet

snippet _get_user_info "_get_user_info(name string)"
_get_user_info( ${1:name string})
endsnippet

snippet _get_user_server "_get_user_server(mac string)"
_get_user_server( ${1:mac string})
endsnippet

snippet _gethash "_gethash(h_tblname uint32, h_rowname uint32, h_fieldname uint32)"
_gethash( ${1:h_tblname uint32}, ${2:h_rowname uint32}, ${3:h_fieldname uint32})
endsnippet

snippet _heartbeat "_heartbeat(port string)"
_heartbeat( ${1:port string})
endsnippet

snippet _help_alliance_resource_event_by_who "_help_alliance_resource_event_by_who(user *User, event *ResourceEvent, who string)"
_help_alliance_resource_event_by_who( ${1:user *User}, ${2:event *ResourceEvent}, ${3:who string})
endsnippet

snippet _help_alliance_speed_up_event_by_who "_help_alliance_speed_up_event_by_who(a *Alliance, event *SpeedUpEvent, who string, help_time int64)"
_help_alliance_speed_up_event_by_who( ${1:a *Alliance}, ${2:event *SpeedUpEvent}, ${3:who string}, ${4:help_time int64})
endsnippet

snippet _help_list "_help_list(help_events []HelpResourceEvent)"
_help_list( ${1:help_events []HelpResourceEvent})
endsnippet

snippet _help_list_from_map "_help_list_from_map(help_events map[string]*HelpResourceEvent)"
_help_list_from_map( ${1:help_events map[string]*HelpResourceEvent})
endsnippet

snippet _hero_be_attacked_events "_hero_be_attacked_events(user *User)"
_hero_be_attacked_events( ${1:user *User})
endsnippet

snippet _hero_skill_info "_hero_skill_info(hero *hero.Hero, number string)"
_hero_skill_info( ${1:hero *hero.Hero}, ${2:number string})
endsnippet

snippet _hero_soldiers_info "_hero_soldiers_info(hero *hero.Hero)"
_hero_soldiers_info( ${1:hero *hero.Hero})
endsnippet

snippet _hero_start_battle_skills "_hero_start_battle_skills(skill_map map[string]bool)"
_hero_start_battle_skills( ${1:skill_map map[string]bool})
endsnippet

snippet _heroes "_heroes(user *User)"
_heroes( ${1:user *User})
endsnippet

snippet _hire_hero_result "_hire_hero_result(user *User, city *City, code int16)"
_hire_hero_result( ${1:user *User}, ${2:city *City}, ${3:code int16})
endsnippet

snippet _init_rank_data "_init_rank_data(rank_name string)"
_init_rank_data( ${1:rank_name string})
endsnippet

snippet _int64_ip "_int64_ip(_ip net.IP)"
_int64_ip( ${1:_ip net.IP})
endsnippet

snippet _ip2int "_ip2int(_ip net.IP)"
_ip2int( ${1:_ip net.IP})
endsnippet

snippet _is_exsit_row "_is_exsit_row(tblname, rowname string)"
_is_exsit_row( ${1:tblname}, ${2:rowname string})
endsnippet

snippet _is_exsit_row_hash "_is_exsit_row_hash(h_tblname, h_rowname uint32)"
_is_exsit_row_hash( ${1:h_tblname}, ${2:h_rowname uint32})
endsnippet

snippet _is_primitive "_is_primitive(f reflect.Value)"
_is_primitive( ${1:f reflect.Value})
endsnippet

snippet _js_alter "_js_alter(message string)"
_js_alter( ${1:message string})
endsnippet

snippet _last_battle_messages_title "_last_battle_messages_title(userid int32)"
_last_battle_messages_title( ${1:userid int32})
endsnippet

snippet _load_config "_load_config(path string)"
_load_config( ${1:path string})
endsnippet

snippet _mail_send "_mail_send(mail *AdminMail)"
_mail_send( ${1:mail *AdminMail})
endsnippet

snippet _map_move_events "_map_move_events(user *User)"
_map_move_events( ${1:user *User})
endsnippet

snippet _mark_alliance_change_on_agent "_mark_alliance_change_on_agent(alliance *Alliance)"
_mark_alliance_change_on_agent( ${1:alliance *Alliance})
endsnippet

snippet _max "_max(a, b T_coordinate)"
_max( ${1:a}, ${2:b T_coordinate})
endsnippet

snippet _md5 "_md5(str string)"
_md5( ${1:str string})
endsnippet

snippet _min "_min(a, b T_coordinate)"
_min( ${1:a}, ${2:b T_coordinate})
endsnippet

snippet _move_to_other_server "_move_to_other_server(user *User, server_id T_server_id, x, y T_coordinate)"
_move_to_other_server( ${1:user *User}, ${2:server_id T_server_id}, ${3:x}, ${4:y T_coordinate})
endsnippet

snippet _msb "_msb(n uint32)"
_msb( ${1:n uint32})
endsnippet

snippet _new_action_event "_new_action_event(params *event.MoveOnMapParams)"
_new_action_event( ${1:params *event.MoveOnMapParams})
endsnippet

snippet _nodesize "_nodesize(n *Node)"
_nodesize( ${1:n *Node})
endsnippet

snippet _notice_change_do "_notice_change_do(data NoticeForm)"
_notice_change_do( ${1:data NoticeForm})
endsnippet

snippet _notice_send "_notice_send(id int32)"
_notice_send( ${1:id int32})
endsnippet

snippet _notification_messages "_notification_messages(language string, max_id int32)"
_notification_messages( ${1:language string}, ${2:max_id int32})
endsnippet

snippet _notify "_notify(code int16, notify int16)"
_notify( ${1:code int16}, ${2:notify int16})
endsnippet

snippet _notify_alliance_dismiss_to_members "_notify_alliance_dismiss_to_members(f *Alliance)"
_notify_alliance_dismiss_to_members( ${1:f *Alliance})
endsnippet

snippet _notify_alliance_member_resource_been_helped_by_others "_notify_alliance_member_resource_been_helped_by_others(alliance *Alliance, event *ResourceEvent)"
_notify_alliance_member_resource_been_helped_by_others( ${1:alliance *Alliance}, ${2:event *ResourceEvent})
endsnippet

snippet _notify_alliance_members_been_helped_by_others "_notify_alliance_members_been_helped_by_others(alliance *Alliance, events []*SpeedUpEvent)"
_notify_alliance_members_been_helped_by_others( ${1:alliance *Alliance}, ${2:events []*SpeedUpEvent})
endsnippet

snippet _online_gift_return_things "_online_gift_return_things(item_map map[string]int32)"
_online_gift_return_things( ${1:item_map map[string]int32})
endsnippet

snippet _parse_conditions_string_to_map "_parse_conditions_string_to_map(str string)"
_parse_conditions_string_to_map( ${1:str string})
endsnippet

snippet _parse_conditions_string_to_map2 "_parse_conditions_string_to_map2(str string)"
_parse_conditions_string_to_map2( ${1:str string})
endsnippet

snippet _parse_rewards_string_to_map "_parse_rewards_string_to_map(str string)"
_parse_rewards_string_to_map( ${1:str string})
endsnippet

snippet _parse_string_to_map "_parse_string_to_map(str string)"
_parse_string_to_map( ${1:str string})
endsnippet

snippet _passed_plots "_passed_plots(user *User)"
_passed_plots( ${1:user *User})
endsnippet

snippet _push_alliance_daily_quest_change_to_members "_push_alliance_daily_quest_change_to_members(f *Alliance, quest *alliance_daily_quest.AllianceDailyQuest)"
_push_alliance_daily_quest_change_to_members( ${1:f *Alliance}, ${2:quest *alliance_daily_quest.AllianceDailyQuest})
endsnippet

snippet _push_alliance_resource_change_to_members "_push_alliance_resource_change_to_members(f *Alliance, events map[string]*ResourceEvent)"
_push_alliance_resource_change_to_members( ${1:f *Alliance}, ${2:events map[string]*ResourceEvent})
endsnippet

snippet _push_alliance_snapshot_to_members "_push_alliance_snapshot_to_members(f *Alliance)"
_push_alliance_snapshot_to_members( ${1:f *Alliance})
endsnippet

snippet _push_alliance_some_change_to_members "_push_alliance_some_change_to_members(f *Alliance, ret []byte)"
_push_alliance_some_change_to_members( ${1:f *Alliance}, ${2:ret []byte})
endsnippet

snippet _push_alliance_speed_up_change_to_members "_push_alliance_speed_up_change_to_members(f *Alliance, events []*SpeedUpEvent)"
_push_alliance_speed_up_change_to_members( ${1:f *Alliance}, ${2:events []*SpeedUpEvent})
endsnippet

snippet _rank_and_reward "_rank_and_reward(id int32)"
_rank_and_reward( ${1:id int32})
endsnippet

snippet _recruit_events "_recruit_events(city *City)"
_recruit_events( ${1:city *City})
endsnippet

snippet _refresh_hero_list_result "_refresh_hero_list_result(user *User, city *City, code int16)"
_refresh_hero_list_result( ${1:user *User}, ${2:city *City}, ${3:code int16})
endsnippet

snippet _refresh_village "_refresh_village(user *User)"
_refresh_village( ${1:user *User})
endsnippet

snippet _regist_on_router "_regist_on_router(port string)"
_regist_on_router( ${1:port string})
endsnippet

snippet _reset_build "_reset_build(user *User)"
_reset_build( ${1:user *User})
endsnippet

snippet _reset_daily "_reset_daily(user *User)"
_reset_daily( ${1:user *User})
endsnippet

snippet _reset_gift "_reset_gift(user *User)"
_reset_gift( ${1:user *User})
endsnippet

snippet _reset_hero "_reset_hero(user *User, value int64)"
_reset_hero( ${1:user *User}, ${2:value int64})
endsnippet

snippet _reset_plot_level "_reset_plot_level(user *User)"
_reset_plot_level( ${1:user *User})
endsnippet

snippet _reset_user "_reset_user(user *User)"
_reset_user( ${1:user *User})
endsnippet

snippet _resource_cities "_resource_cities(user *User)"
_resource_cities( ${1:user *User})
endsnippet

snippet _resources "_resources(resource_map map[string]int32)"
_resources( ${1:resource_map map[string]int32})
endsnippet

snippet _return_hero_skill "_return_hero_skill(skill_string string, skill_type string)"
_return_hero_skill( ${1:skill_string string}, ${2:skill_type string})
endsnippet

snippet _return_search_alliances_info "_return_search_alliances_info(alliances []Alliance)"
_return_search_alliances_info( ${1:alliances []Alliance})
endsnippet

snippet _return_search_users_info "_return_search_users_info(users []User)"
_return_search_users_info( ${1:users []User})
endsnippet

snippet _return_use_buff_result_info "_return_use_buff_result_info(user *User, code int16, city_id T_obj_id)"
_return_use_buff_result_info( ${1:user *User}, ${2:code int16}, ${3:city_id T_obj_id})
endsnippet

snippet _return_use_item_result_info "_return_use_item_result_info(return_things []T_return_thing)"
_return_use_item_result_info( ${1:return_things []T_return_thing})
endsnippet

snippet _return_user_info "_return_user_info(user *User)"
_return_user_info( ${1:user *User})
endsnippet

snippet _return_user_info_with_id "_return_user_info_with_id(uid int32)"
_return_user_info_with_id( ${1:uid int32})
endsnippet

snippet _revive_event_soldiers "_revive_event_soldiers(soldiers map[string]int32)"
_revive_event_soldiers( ${1:soldiers map[string]int32})
endsnippet

snippet _revive_events "_revive_events(city *City)"
_revive_events( ${1:city *City})
endsnippet

snippet _scout_city "_scout_city(user *User, city_id T_obj_id, scout_level string)"
_scout_city( ${1:user *User}, ${2:city_id T_obj_id}, ${3:scout_level string})
endsnippet

snippet _scout_hero "_scout_hero(_hero *hero.Hero, scout_level string)"
_scout_hero( ${1:_hero *hero.Hero}, ${2:scout_level string})
endsnippet

snippet _search_user "_search_user(name string)"
_search_user( ${1:name string})
endsnippet

snippet _send_activity_mail "_send_activity_mail(user *User, key string, num int32, reward map[string]int32)"
_send_activity_mail( ${1:user *User}, ${2:key string}, ${3:num int32}, ${4:reward map[string]int32})
endsnippet

snippet _send_building_speed_up_to_alliance "_send_building_speed_up_to_alliance(user *User, city_id int32, building *building.Building, alliance *Alliance)"
_send_building_speed_up_to_alliance( ${1:user *User}, ${2:city_id int32}, ${3:building *building.Building}, ${4:alliance *Alliance})
endsnippet

snippet _send_map_battle_end_push "_send_map_battle_end_push(to_area *region_map.Area, loser_army *ArmyInfo, winner_army *ArmyInfo, is_win bool, attacker_battle_message_id int32, defenser_battle_message_id int32)"
_send_map_battle_end_push( ${1:to_area *region_map.Area}, ${2:loser_army *ArmyInfo}, ${3:winner_army *ArmyInfo}, ${4:is_win bool}, ${5:attacker_battle_message_id int32}, ${6:defenser_battle_message_id int32})
endsnippet

snippet _send_map_change_push "_send_map_change_push(change_type string, ev *event.Event, path []int32)"
_send_map_change_push( ${1:change_type string}, ${2:ev *event.Event}, ${3:path []int32})
endsnippet

snippet _send_mq_to_user "_send_mq_to_user(from_type int16, uid int32, data interface{}, code int16)"
_send_mq_to_user( ${1:from_type int16}, ${2:uid int32}, ${3:data interface{}}, ${4:code int16})
endsnippet

snippet _send_push_to_other_server "_send_push_to_other_server($/;"	f
_send_push_with_packet_to_other_server	src/agent/gsmemory/handle_private.go	/^func _send_push_with_packet_to_other_server($/;"	f
_send_system_mail	src/admin/func.go	/^func _send_system_mail(user *User, m *AdminMail)"
_send_push_to_other_server( ${1:$/;"	f
_send_push_with_packet_to_other_server	src/agent/gsmemory/handle_private.go	/^func _send_push_with_packet_to_other_server($/;"	f
_send_system_mail	src/admin/func.go	/^func _send_system_mail(user *User}, ${2:m *AdminMail})
endsnippet

snippet _send_system_mail "_send_system_mail(user *User, reward map[string]int32, title string, body string)"
_send_system_mail( ${1:user *User}, ${2:reward map[string]int32}, ${3:title string}, ${4:body string})
endsnippet

snippet _send_technology_speed_up_to_alliance "_send_technology_speed_up_to_alliance(user *User, city_id int32, technology *Technology, alliance *Alliance)"
_send_technology_speed_up_to_alliance( ${1:user *User}, ${2:city_id int32}, ${3:technology *Technology}, ${4:alliance *Alliance})
endsnippet

snippet _set "_set(tblname string, rowname string, fieldname string, value string)"
_set( ${1:tblname string}, ${2:rowname string}, ${3:fieldname string}, ${4:value string})
endsnippet

snippet _set_action_point "_set_action_point(user *User, value int64)"
_set_action_point( ${1:user *User}, ${2:value int64})
endsnippet

snippet _set_bug "_set_bug(user *User, value int64)"
_set_bug( ${1:user *User}, ${2:value int64})
endsnippet

snippet _set_build "_set_build(user *User, value int64)"
_set_build( ${1:user *User}, ${2:value int64})
endsnippet

snippet _set_dead_soldiers "_set_dead_soldiers(t string, user *User, value int64)"
_set_dead_soldiers( ${1:t string}, ${2:user *User}, ${3:value int64})
endsnippet

snippet _set_enhance_hero_item_ready "_set_enhance_hero_item_ready(user *User)"
_set_enhance_hero_item_ready( ${1:user *User})
endsnippet

snippet _set_hero "_set_hero(user *User, value int64)"
_set_hero( ${1:user *User}, ${2:value int64})
endsnippet

snippet _set_hero_bug "_set_hero_bug(user *User, value int64)"
_set_hero_bug( ${1:user *User}, ${2:value int64})
endsnippet

snippet _set_hero_refresh "_set_hero_refresh(user *User, value int64)"
_set_hero_refresh( ${1:user *User}, ${2:value int64})
endsnippet

snippet _set_item "_set_item(user *User, value int64)"
_set_item( ${1:user *User}, ${2:value int64})
endsnippet

snippet _set_item_empty "_set_item_empty(user *User)"
_set_item_empty( ${1:user *User})
endsnippet

snippet _set_resource "_set_resource(t string, user *User, value int64)"
_set_resource( ${1:t string}, ${2:user *User}, ${3:value int64})
endsnippet

snippet _set_soldiers "_set_soldiers(t string, user *User, value int64)"
_set_soldiers( ${1:t string}, ${2:user *User}, ${3:value int64})
endsnippet

snippet _set_speed "_set_speed(value int64)"
_set_speed( ${1:value int64})
endsnippet

snippet _set_supply "_set_supply(user *User, value int64)"
_set_supply( ${1:user *User}, ${2:value int64})
endsnippet

snippet _set_tech "_set_tech(user *User, value int64)"
_set_tech( ${1:user *User}, ${2:value int64})
endsnippet

snippet _set_tech_level "_set_tech_level(user *User, value int64)"
_set_tech_level( ${1:user *User}, ${2:value int64})
endsnippet

snippet _set_user_level "_set_user_level(user *User, value int64)"
_set_user_level( ${1:user *User}, ${2:value int64})
endsnippet

snippet _simple_receiver "_simple_receiver(sess *Session, wg *sync.WaitGroup)"
_simple_receiver( ${1:sess *Session}, ${2:wg *sync.WaitGroup})
endsnippet

snippet _soldier_change_result "_soldier_change_result(user *User, city *City, code int16)"
_soldier_change_result( ${1:user *User}, ${2:city *City}, ${3:code int16})
endsnippet

snippet _soldiers "_soldiers(soldiers map[string]*soldier.Soldier)"
_soldiers( ${1:soldiers map[string]*soldier.Soldier})
endsnippet

snippet _string "_string(dst *Image, pt image.Point, src *Image, sp image.Point, f *Font, s string, b []byte, r []rune, clipr image.Rectangle, bg *Image, bgp image.Point, op Op)"
_string( ${1:dst *Image}, ${2:pt image.Point}, ${3:src *Image}, ${4:sp image.Point}, ${5:f *Font}, ${6:s string}, ${7:b []byte}, ${8:r []rune}, ${9:clipr image.Rectangle}, ${10:bg *Image}, ${11:bgp image.Point}, ${12:op Op})
endsnippet

snippet _success "_success(code int16)"
_success( ${1:code int16})
endsnippet

snippet _system_msg "_system_msg(msg string)"
_system_msg( ${1:msg string})
endsnippet

snippet _technologies "_technologies(city *City)"
_technologies( ${1:city *City})
endsnippet

snippet _technology_info "_technology_info(technology *Technology)"
_technology_info( ${1:technology *Technology})
endsnippet

snippet _technology_operation_result "_technology_operation_result(user *User, tech *Technology, code int16)"
_technology_operation_result( ${1:user *User}, ${2:tech *Technology}, ${3:code int16})
endsnippet

snippet _test_delete_alliance "_test_delete_alliance(conn *net.TCPConn, t *testing.T)"
_test_delete_alliance( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet _tiled_data_to_map_type "_tiled_data_to_map_type(layer, data_content int, tile_properties T_json_map)"
_tiled_data_to_map_type( ${1:layer}, ${2:data_content int}, ${3:tile_properties T_json_map})
endsnippet

snippet _trigger "_trigger(level int)"
_trigger( ${1:level int})
endsnippet

snippet _unlock_position "_unlock_position(city *City)"
_unlock_position( ${1:city *City})
endsnippet

snippet _update_apk_version_do "_update_apk_version_do(formdata ChangeForm)"
_update_apk_version_do( ${1:formdata ChangeForm})
endsnippet

snippet _use_gift_package "_use_gift_package(user *User, item_key string, num int32)"
_use_gift_package( ${1:user *User}, ${2:item_key string}, ${3:num int32})
endsnippet

snippet _use_random_enhance_hero_item "_use_random_enhance_hero_item(user *User, name string, value int32)"
_use_random_enhance_hero_item( ${1:user *User}, ${2:name string}, ${3:value int32})
endsnippet

snippet _use_resource_item "_use_resource_item(user *User, name string, value int32, city_id int32)"
_use_resource_item( ${1:user *User}, ${2:name string}, ${3:value int32}, ${4:city_id int32})
endsnippet

snippet _user_alliance_info "_user_alliance_info(user *User)"
_user_alliance_info( ${1:user *User})
endsnippet

snippet _user_basic_info "_user_basic_info(user *User, city *City)"
_user_basic_info( ${1:user *User}, ${2:city *City})
endsnippet

snippet _user_daily_status "_user_daily_status(user *User, city *City)"
_user_daily_status( ${1:user *User}, ${2:city *City})
endsnippet

snippet _user_requested_alliances "_user_requested_alliances(user *User)"
_user_requested_alliances( ${1:user *User})
endsnippet

snippet _user_resource_info "_user_resource_info(user *User, city *City)"
_user_resource_info( ${1:user *User}, ${2:city *City})
endsnippet

snippet _user_short_snapshot "_user_short_snapshot(user *User)"
_user_short_snapshot( ${1:user *User})
endsnippet

snippet _user_snapshot "_user_snapshot(user *User, alliance *Alliance)"
_user_snapshot( ${1:user *User}, ${2:alliance *Alliance})
endsnippet

snippet _user_spend_items "_user_spend_items(user *User, item_type string, need_buy_count int32, use_count int32)"
_user_spend_items( ${1:user *User}, ${2:item_type string}, ${3:need_buy_count int32}, ${4:use_count int32})
endsnippet

snippet _user_status_info "_user_status_info(user *User)"
_user_status_info( ${1:user *User})
endsnippet

snippet _value_in_array "_value_in_array(value int32, arr []int32)"
_value_in_array( ${1:value int32}, ${2:arr []int32})
endsnippet

snippet _village_be_attacked_events "_village_be_attacked_events(user *User)"
_village_be_attacked_events( ${1:user *User})
endsnippet

snippet _village_events "_village_events(user *User)"
_village_events( ${1:user *User})
endsnippet

snippet _wall_recruit_events "_wall_recruit_events(city *City)"
_wall_recruit_events( ${1:city *City})
endsnippet

snippet _wall_soldiers "_wall_soldiers(soldiers map[string]*soldier.Soldier)"
_wall_soldiers( ${1:soldiers map[string]*soldier.Soldier})
endsnippet

snippet _write_file "_write_file(rank_str string)"
_write_file( ${1:rank_str string})
endsnippet

snippet _write_primitive "_write_primitive(f reflect.Value, writer *Packet)"
_write_primitive( ${1:f reflect.Value}, ${2:writer *Packet})
endsnippet

snippet abs "abs(x int64)"
abs( ${1:x int64})
endsnippet

snippet absDuration "absDuration(d time.Duration)"
absDuration( ${1:d time.Duration})
endsnippet

snippet absInt "absInt(v exact.Value)"
absInt( ${1:v exact.Value})
endsnippet

snippet abs_path_for_package "abs_path_for_package(filename, p string, context build.Context)"
abs_path_for_package( ${1:filename}, ${2:p string}, ${3:context build.Context})
endsnippet

snippet acceptor "acceptor(t *testing.T, ln net.Listener, done chan<- bool)"
acceptor( ${1:t *testing.T}, ${2:ln net.Listener}, ${3:done chan<- bool})
endsnippet

snippet accessibleMethods "accessibleMethods(t types.Type, from *types.Package)"
accessibleMethods( ${1:t types.Type}, ${2:from *types.Package})
endsnippet

snippet adapt "adapt(delta, numPoints int32, firstTime bool)"
adapt( ${1:delta}, ${2:numPoints int32}, ${3:firstTime bool})
endsnippet

snippet add "add(b *Builder, args []string, attributes map[string]bool, original string)"
add( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet addBSON "addBSON(b []byte, doc interface{})"
addBSON( ${1:b []byte}, ${2:doc interface{}})
endsnippet

snippet addBreakpointHandlers "addBreakpointHandlers(mygdb *gdblib.GDB)"
addBreakpointHandlers( ${1:mygdb *gdblib.GDB})
endsnippet

snippet addBuilder "addBuilder(c buildConfig)"
addBuilder( ${1:c buildConfig})
endsnippet

snippet addCString "addCString(b []byte, s string)"
addCString( ${1:b []byte}, ${2:s string})
endsnippet

snippet addCommit "addCommit(c appengine.Context, com *Commit)"
addCommit( ${1:c appengine.Context}, ${2:com *Commit})
endsnippet

snippet addContainers "addContainers(server *DockerServer, n int)"
addContainers( ${1:server *DockerServer}, ${2:n int})
endsnippet

snippet addDelImportFn "addDelImportFn(p1 string, p2 string)"
addDelImportFn( ${1:p1 string}, ${2:p2 string})
endsnippet

snippet addEdge "addEdge(from, to *BasicBlock)"
addEdge( ${1:from}, ${2:to *BasicBlock})
endsnippet

snippet addExecHandlers "addExecHandlers(mygdb *gdblib.GDB)"
addExecHandlers( ${1:mygdb *gdblib.GDB})
endsnippet

snippet addFrameHandlers "addFrameHandlers(mygdb *gdblib.GDB)"
addFrameHandlers( ${1:mygdb *gdblib.GDB})
endsnippet

snippet addHeader "addHeader(b []byte, opcode int)"
addHeader( ${1:b []byte}, ${2:opcode int})
endsnippet

snippet addImages "addImages(server *DockerServer, n int, repo bool)"
addImages( ${1:server *DockerServer}, ${2:n int}, ${3:repo bool})
endsnippet

snippet addImport "addImport(f *ast.File, ipath string, name string, renameConflicts bool)"
addImport( ${1:f *ast.File}, ${2:ipath string}, ${3:name string}, ${4:renameConflicts bool})
endsnippet

snippet addImportFn "addImportFn(path ...string)"
addImportFn( ${1:path ...string})
endsnippet

snippet addImportSpaces "addImportSpaces(r io.Reader, breaks []string)"
addImportSpaces( ${1:r io.Reader}, ${2:breaks []string})
endsnippet

snippet addImportViaSourceModification "addImportViaSourceModification(fset *token.FileSet, f *ast.File, name, ipath string)"
addImportViaSourceModification( ${1:fset *token.FileSet}, ${2:f *ast.File}, ${3:name}, ${4:ipath string})
endsnippet

snippet addInt32 "addInt32(b []byte, i int32)"
addInt32( ${1:b []byte}, ${2:i int32})
endsnippet

snippet addInt64 "addInt64(b []byte, i int64)"
addInt64( ${1:b []byte}, ${2:i int64})
endsnippet

snippet addKeySetJSONFile "addKeySetJSONFile(filename string, key PublicKey)"
addKeySetJSONFile( ${1:filename string}, ${2:key PublicKey})
endsnippet

snippet addKeySetPEMFile "addKeySetPEMFile(filename string, key PublicKey)"
addKeySetPEMFile( ${1:filename string}, ${2:key PublicKey})
endsnippet

snippet addLine "addLine(p0, p1 image.Point)"
addLine( ${1:p0}, ${2:p1 image.Point})
endsnippet

snippet addLink "addLink(t *testing.T, name string, linkType string)"
addLink( ${1:t *testing.T}, ${2:name string}, ${3:linkType string})
endsnippet

snippet addMap "addMap(m map[string]bool, ss []string)"
addMap( ${1:m map[string]bool}, ${2:ss []string})
endsnippet

snippet addNames "addNames(names map[string]bool, decl ast.Decl)"
addNames( ${1:names map[string]bool}, ${2:decl ast.Decl})
endsnippet

snippet addOne "addOne(x int)"
addOne( ${1:x int})
endsnippet

snippet addPEMHeadersToKey "addPEMHeadersToKey(pemBlock *pem.Block, pubKey PublicKey)"
addPEMHeadersToKey( ${1:pemBlock *pem.Block}, ${2:pubKey PublicKey})
endsnippet

snippet addPerfResult "addPerfResult(c appengine.Context, r *http.Request, req *PerfRequest)"
addPerfResult( ${1:c appengine.Context}, ${2:r *http.Request}, ${3:req *PerfRequest})
endsnippet

snippet addSome "addSome(raster *canvas.RasterItem, p []raster.Point)"
addSome( ${1:raster *canvas.RasterItem}, ${2:p []raster.Point})
endsnippet

snippet addTestCases "addTestCases(t []testCase, fn func(*ast.File)"
addTestCases( ${1:t []testCase}, ${2:fn func(*ast.File})
endsnippet

snippet addThreadHandlers "addThreadHandlers(mygdb *gdblib.GDB)"
addThreadHandlers( ${1:mygdb *gdblib.GDB})
endsnippet

snippet addToDoc "addToDoc(doc bson.D, key string, add bson.D)"
addToDoc( ${1:doc bson.D}, ${2:key string}, ${3:add bson.D})
endsnippet

snippet addVariableHandlers "addVariableHandlers(mygdb *gdblib.GDB)"
addVariableHandlers( ${1:mygdb *gdblib.GDB})
endsnippet

snippet addWatcher "addWatcher(c watchConfig)"
addWatcher( ${1:c watchConfig})
endsnippet

snippet add_ast_decl_to_package "add_ast_decl_to_package(pkg *decl, decl ast.Decl, scope *scope)"
add_ast_decl_to_package( ${1:pkg *decl}, ${2:decl ast.Decl}, ${3:scope *scope})
endsnippet

snippet add_gems "add_gems(conn *net.TCPConn, t *testing.T, num int32)"
add_gems( ${1:conn *net.TCPConn}, ${2:t *testing.T}, ${3:num int32})
endsnippet

snippet add_recruit_soldier "add_recruit_soldier(user *User, alliance *Alliance, soldier_name string, value int32)"
add_recruit_soldier( ${1:user *User}, ${2:alliance *Alliance}, ${3:soldier_name string}, ${4:value int32})
endsnippet

snippet add_soldier "add_soldier(user *User, alliance *Alliance, soldier_map map[string]int32, source string)"
add_soldier( ${1:user *User}, ${2:alliance *Alliance}, ${3:soldier_map map[string]int32}, ${4:source string})
endsnippet

snippet add_soldier_map "add_soldier_map(user *User, alliance *Alliance, soldiers map[string]*soldier.Soldier, source string)"
add_soldier_map( ${1:user *User}, ${2:alliance *Alliance}, ${3:soldiers map[string]*soldier.Soldier}, ${4:source string})
endsnippet

snippet add_soldier_to_city "add_soldier_to_city(city *City, soldier_name string, value int32)"
add_soldier_to_city( ${1:city *City}, ${2:soldier_name string}, ${3:value int32})
endsnippet

snippet add_wall_soldier "add_wall_soldier(user *User, city *City, soldier_name string, value int32)"
add_wall_soldier( ${1:user *User}, ${2:city *City}, ${3:soldier_name string}, ${4:value int32})
endsnippet

snippet addcoord "addcoord(p []byte, oldx, newx int)"
addcoord( ${1:p []byte}, ${2:oldx}, ${3:newx int})
endsnippet

snippet addrNumber "addrNumber(data []byte, lo, hi int, dir byte, n int, charOffset bool)"
addrNumber( ${1:data []byte}, ${2:lo}, ${3:hi int}, ${4:dir byte}, ${5:n int}, ${6:charOffset bool})
endsnippet

snippet addrRegexp "addrRegexp(data []byte, lo, hi int, dir byte, pattern string)"
addrRegexp( ${1:data []byte}, ${2:lo}, ${3:hi int}, ${4:dir byte}, ${5:pattern string})
endsnippet

snippet addrToByteRange "addrToByteRange(addr string, start int, data []byte)"
addrToByteRange( ${1:addr string}, ${2:start int}, ${3:data []byte})
endsnippet

snippet adjustAttributeNames "adjustAttributeNames(aa []Attribute, nameMap map[string]string)"
adjustAttributeNames( ${1:aa []Attribute}, ${2:nameMap map[string]string})
endsnippet

snippet adjustForeignAttributes "adjustForeignAttributes(aa []Attribute)"
adjustForeignAttributes( ${1:aa []Attribute})
endsnippet

snippet admin_controller "admin_controller(w rest.ResponseWriter, r *rest.Request)"
admin_controller( ${1:w rest.ResponseWriter}, ${2:r *rest.Request})
endsnippet

snippet advance_scope "advance_scope(s *scope)"
advance_scope( ${1:s *scope})
endsnippet

snippet advance_to_struct_or_interface "advance_to_struct_or_interface(decl *decl)"
advance_to_struct_or_interface( ${1:decl *decl})
endsnippet

snippet advance_to_type "advance_to_type(pred type_predicate, v ast.Expr, scope *scope)"
advance_to_type( ${1:pred type_predicate}, ${2:v ast.Expr}, ${3:scope *scope})
endsnippet

snippet after "after(msg string)"
after( ${1:msg string})
endsnippet

snippet afterAfterBodyIM "afterAfterBodyIM(p *parser)"
afterAfterBodyIM( ${1:p *parser})
endsnippet

snippet afterAfterFramesetIM "afterAfterFramesetIM(p *parser)"
afterAfterFramesetIM( ${1:p *parser})
endsnippet

snippet afterBodyIM "afterBodyIM(p *parser)"
afterBodyIM( ${1:p *parser})
endsnippet

snippet afterFramesetIM "afterFramesetIM(p *parser)"
afterFramesetIM( ${1:p *parser})
endsnippet

snippet afterHeadIM "afterHeadIM(p *parser)"
afterHeadIM( ${1:p *parser})
endsnippet

snippet agefont "agefont(f *Font)"
agefont( ${1:f *Font})
endsnippet

snippet agent_new "agent_new(pipe *zmq.Socket)"
agent_new( ${1:pipe *zmq.Socket})
endsnippet

snippet align "align(x, a int64)"
align( ${1:x}, ${2:a int64})
endsnippet

snippet alignment "alignment(t reflect.Type)"
alignment( ${1:t reflect.Type})
endsnippet

snippet all "all(r bounds)"
all( ${1:r bounds})
endsnippet

snippet allOutput "allOutput(w io.Writer)"
allOutput( ${1:w io.Writer})
endsnippet

snippet allPackages "allPackages(ctxt *build.Context, sema chan bool, root string, found func(string, error)"
allPackages( ${1:ctxt *build.Context}, ${2:sema chan bool}, ${3:root string}, ${4:found func(string}, ${5:error})
endsnippet

snippet allPackagesInFS "allPackagesInFS(pattern string)"
allPackagesInFS( ${1:pattern string})
endsnippet

snippet alliance_donate "alliance_donate(conn *net.TCPConn, t *testing.T)"
alliance_donate( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet alliance_help_speed_up_all_req "alliance_help_speed_up_all_req(conn *net.TCPConn, t *testing.T)"
alliance_help_speed_up_all_req( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet alloc "alloc(r image.Rectangle, pix Pix, repl bool, color Color)"
alloc( ${1:r image.Rectangle}, ${2:pix Pix}, ${3:repl bool}, ${4:color Color})
endsnippet

snippet allocImage "allocImage(d *Display, ai *Image, r image.Rectangle, pix Pix, repl bool, val Color, screenid uint32, refresh int)"
allocImage( ${1:d *Display}, ${2:ai *Image}, ${3:r image.Rectangle}, ${4:pix Pix}, ${5:repl bool}, ${6:val Color}, ${7:screenid uint32}, ${8:refresh int})
endsnippet

snippet allocateDaemonPort "allocateDaemonPort(addr string)"
allocateDaemonPort( ${1:addr string})
endsnippet

snippet allocateIOVecs "allocateIOVecs(options []string)"
allocateIOVecs( ${1:options []string})
endsnippet

snippet allocwindow "allocwindow(i *Image, s *Screen, r image.Rectangle, ref int, val Color)"
allocwindow( ${1:i *Image}, ${2:s *Screen}, ${3:r image.Rectangle}, ${4:ref int}, ${5:val Color})
endsnippet

snippet alphaColorImage "alphaColorImage(alpha uint16)"
alphaColorImage( ${1:alpha uint16})
endsnippet

snippet ambiguityError "ambiguityError(fset *token.FileSet, objects []types.Object)"
ambiguityError( ${1:fset *token.FileSet}, ${2:objects []types.Object})
endsnippet

snippet anchor "anchor(r image.Rectangle, flags Anchor, p image.Point)"
anchor( ${1:r image.Rectangle}, ${2:flags Anchor}, ${3:p image.Point})
endsnippet

snippet animateBall "animateBall(c <-chan (chan<- bool)"
animateBall( ${1:c <-chan (chan<- bool})
endsnippet

snippet annotate "annotate(name string)"
annotate( ${1:name string})
endsnippet

snippet anonVar "anonVar(typ types.Type)"
anonVar( ${1:typ types.Type})
endsnippet

snippet anonymify_ast "anonymify_ast(node ast.Node, flags decl_flags, scope *scope)"
anonymify_ast( ${1:node ast.Node}, ${2:flags decl_flags}, ${3:scope *scope})
endsnippet

snippet anonymousFieldIdent "anonymousFieldIdent(e ast.Expr)"
anonymousFieldIdent( ${1:e ast.Expr})
endsnippet

snippet api "api(base string)"
api( ${1:base string})
endsnippet

snippet apiError "apiError(w http.ResponseWriter, message string, code int)"
apiError( ${1:w http.ResponseWriter}, ${2:message string}, ${3:code int})
endsnippet

snippet append2Is "append2Is(indexstack []int, j int)"
append2Is( ${1:indexstack []int}, ${2:j int})
endsnippet

snippet appendBlkioStatEntry "appendBlkioStatEntry(blkioStatEntries *[]cgroups.BlkioStatEntry, major, minor, value uint64, op string)"
appendBlkioStatEntry( ${1:blkioStatEntries *[]cgroups.BlkioStatEntry}, ${2:major}, ${3:minor}, ${4:value uint64}, ${5:op string})
endsnippet

snippet appendPkg "appendPkg(pkgs []string, pkg string)"
appendPkg( ${1:pkgs []string}, ${2:pkg string})
endsnippet

snippet appendPkgs "appendPkgs(pkgs, more []string)"
appendPkgs( ${1:pkgs}, ${2:more []string})
endsnippet

snippet appendVariable "appendVariable(w io.Writer, name, value string)"
appendVariable( ${1:w io.Writer}, ${2:name}, ${3:value string})
endsnippet

snippet appendVersions "appendVersions(base string, versions ...VersionInfo)"
appendVersions( ${1:base string}, ${2:versions ...VersionInfo})
endsnippet

snippet append_to_top_decls "append_to_top_decls(decls map[string]*decl, decl ast.Decl, scope *scope)"
append_to_top_decls( ${1:decls map[string]*decl}, ${2:decl ast.Decl}, ${3:scope *scope})
endsnippet

snippet apply "apply(f func(x *int)"
apply( ${1:f func(x *int})
endsnippet

snippet applyTemplate "applyTemplate(t *template.Template, name string, data interface{})"
applyTemplate( ${1:t *template.Template}, ${2:name string}, ${3:data interface{}})
endsnippet

snippet applyTemplateToResponseWriter "applyTemplateToResponseWriter(rw http.ResponseWriter, t *template.Template, data interface{})"
applyTemplateToResponseWriter( ${1:rw http.ResponseWriter}, ${2:t *template.Template}, ${3:data interface{}})
endsnippet

snippet approxDataSize "approxDataSize(rv reflect.Value)"
approxDataSize( ${1:rv reflect.Value})
endsnippet

snippet arg1 "arg1(x int8, y uint8)"
arg1( ${1:x int8}, ${2:y uint8})
endsnippet

snippet arg2 "arg2(x int16, y uint16)"
arg2( ${1:x int16}, ${2:y uint16})
endsnippet

snippet arg4 "arg4(x int32, y uint32)"
arg4( ${1:x int32}, ${2:y uint32})
endsnippet

snippet arg8 "arg8(x int64, y uint64)"
arg8( ${1:x int64}, ${2:y uint64})
endsnippet

snippet argCount "argCount(f interface{})"
argCount( ${1:f interface{}})
endsnippet

snippet argiface "argiface(x interface{}, y interface {$/;"	f
argiface	src/golang.org/x/tools/cmd/vet/testdata/asm.go	/^func argiface(x interface{}, y interface {$/;"	f
argint	src/code.google.com/p/go.tools/cmd/vet/testdata/asm.go	/^func argint(x int, y uint)"
argiface( ${1:x interface{}}, ${2:y interface {$/;"	f
argiface	src/golang.org/x/tools/cmd/vet/testdata/asm.go	/^func argiface(x interface{}}, ${3:y interface {$/;"	f
argint	src/code.google.com/p/go.tools/cmd/vet/testdata/asm.go	/^func argint(x int}, ${4:y uint})
endsnippet

snippet argint "argint(x int, y uint)"
argint( ${1:x int}, ${2:y uint})
endsnippet

snippet argjoin "argjoin(x []string)"
argjoin( ${1:x []string})
endsnippet

snippet argptr "argptr(x *byte, y *byte, c chan int, m map[int]int, f func()"
argptr( ${1:x *byte}, ${2:y *byte}, ${3:c chan int}, ${4:m map[int]int}, ${5:f func(})
endsnippet

snippet argsForLog "argsForLog(args []interface{})"
argsForLog( ${1:args []interface{}})
endsnippet

snippet argslice "argslice(x, y []string)"
argslice( ${1:x}, ${2:y []string})
endsnippet

snippet argstring "argstring(x, y string)"
argstring( ${1:x}, ${2:y string})
endsnippet

snippet asInt "asInt(x value)"
asInt( ${1:x value})
endsnippet

snippet asUint64 "asUint64(x value)"
asUint64( ${1:x value})
endsnippet

snippet ascii "ascii(s string)"
ascii( ${1:s string})
endsnippet

snippet ask_alliance_resource "ask_alliance_resource(conn *net.TCPConn, t *testing.T)"
ask_alliance_resource( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet asmCheck "asmCheck(pkg *Package)"
asmCheck( ${1:pkg *Package})
endsnippet

snippet asmCheckVar "asmCheckVar(badf func(string, ...interface{})"
asmCheckVar( ${1:badf func(string}, ${2:...interface{}})
endsnippet

snippet assert "assert(p bool, msg string)"
assert( ${1:p bool}, ${2:msg string})
endsnippet

snippet assertContainerList "assertContainerList(out string, expected []string)"
assertContainerList( ${1:out string}, ${2:expected []string})
endsnippet

snippet assertContentType "assertContentType(recorder *httptest.ResponseRecorder, content_type string, t *testing.T)"
assertContentType( ${1:recorder *httptest.ResponseRecorder}, ${2:content_type string}, ${3:t *testing.T})
endsnippet

snippet assertEqual "assertEqual(t *testing.T, a interface{}, b interface{}, message string)"
assertEqual( ${1:t *testing.T}, ${2:a interface{}}, ${3:b interface{}}, ${4:message string})
endsnippet

snippet assertEquals "assertEquals(t *testing.T, expected, actual interface{})"
assertEquals( ${1:t *testing.T}, ${2:expected}, ${3:actual interface{}})
endsnippet

snippet assertError "assertError(t *testing.T, fn parseFn, arg string)"
assertError( ${1:t *testing.T}, ${2:fn parseFn}, ${3:arg string})
endsnippet

snippet assertFileAsExpected "assertFileAsExpected(t *testing.T, testCase fileTestCase, actual *multipart.FileHeader, expected *fileInfo)"
assertFileAsExpected( ${1:t *testing.T}, ${2:testCase fileTestCase}, ${3:actual *multipart.FileHeader}, ${4:expected *fileInfo})
endsnippet

snippet assertGrantSame "assertGrantSame(t *testing.T, actual, expected *Grant)"
assertGrantSame( ${1:t *testing.T}, ${2:actual}, ${3:expected *Grant})
endsnippet

snippet assertHttpError "assertHttpError(r *httptest.ResponseRecorder, t Fataler)"
assertHttpError( ${1:r *httptest.ResponseRecorder}, ${2:t Fataler})
endsnippet

snippet assertHttpNotError "assertHttpNotError(r *httptest.ResponseRecorder, t *testing.T)"
assertHttpNotError( ${1:r *httptest.ResponseRecorder}, ${2:t *testing.T})
endsnippet

snippet assertIPEquals "assertIPEquals(t *testing.T, ip1, ip2 net.IP)"
assertIPEquals( ${1:t *testing.T}, ${2:ip1}, ${3:ip2 net.IP})
endsnippet

snippet assertIndexGet "assertIndexGet(t *testing.T, index *TruncIndex, input, expectedResult string, expectError bool)"
assertIndexGet( ${1:t *testing.T}, ${2:index *TruncIndex}, ${3:input}, ${4:expectedResult string}, ${5:expectError bool})
endsnippet

snippet assertKernelVersion "assertKernelVersion(t *testing.T, a, b *KernelVersionInfo, result int)"
assertKernelVersion( ${1:t *testing.T}, ${2:a}, ${3:b *KernelVersionInfo}, ${4:result int})
endsnippet

snippet assertNImages "assertNImages(graph *graph.Graph, t *testing.T, n int)"
assertNImages( ${1:graph *graph.Graph}, ${2:t *testing.T}, ${3:n int})
endsnippet

snippet assertParseRelease "assertParseRelease(t *testing.T, release string, b *KernelVersionInfo, result int)"
assertParseRelease( ${1:t *testing.T}, ${2:release string}, ${3:b *KernelVersionInfo}, ${4:result int})
endsnippet

snippet assertPipe "assertPipe(input, output string, r io.Reader, w io.Writer, count int)"
assertPipe( ${1:input}, ${2:output string}, ${3:r io.Reader}, ${4:w io.Writer}, ${5:count int})
endsnippet

snippet assertPortList "assertPortList(t *testing.T, out string, expected []string)"
assertPortList( ${1:t *testing.T}, ${2:out string}, ${3:expected []string})
endsnippet

snippet assertSuccessEquals "assertSuccessEquals(t *testing.T, expected int64, fn parseFn, arg string)"
assertSuccessEquals( ${1:t *testing.T}, ${2:expected int64}, ${3:fn parseFn}, ${4:arg string})
endsnippet

snippet assertVersion "assertVersion(t *testing.T, a, b string, result int)"
assertVersion( ${1:t *testing.T}, ${2:a}, ${3:b string}, ${4:result int})
endsnippet

snippet assertableTo "assertableTo(V *Interface, T Type)"
assertableTo( ${1:V *Interface}, ${2:T Type})
endsnippet

snippet assignIndexes "assignIndexes(w io.Writer, n *node)"
assignIndexes( ${1:w io.Writer}, ${2:n *node})
endsnippet

snippet assignOp "assignOp(op token.Token)"
assignOp( ${1:op token.Token})
endsnippet

snippet assignsTo "assignsTo(x *ast.Ident, scope []ast.Stmt)"
assignsTo( ${1:x *ast.Ident}, ${2:scope []ast.Stmt})
endsnippet

snippet splitVarDecl "splitVarDecl(name string, names []*ast.Ident, values []ast.Expr, vtype ast.Expr)"
splitVarDecl( ${1:name string}, ${2:names []*ast.Ident}, ${3:values []ast.Expr}, ${4:vtype ast.Expr})
endsnippet

snippet astString "astString(fset *token.FileSet, n ast.Node)"
astString( ${1:fset *token.FileSet}, ${2:n ast.Node})
endsnippet

snippet ast_decl_class "ast_decl_class(d ast.Decl)"
ast_decl_class( ${1:d ast.Decl})
endsnippet

snippet ast_decl_convertable "ast_decl_convertable(d ast.Decl)"
ast_decl_convertable( ${1:d ast.Decl})
endsnippet

snippet ast_decl_names "ast_decl_names(d ast.Decl)"
ast_decl_names( ${1:d ast.Decl})
endsnippet

snippet ast_decl_split "ast_decl_split(d ast.Decl)"
ast_decl_split( ${1:d ast.Decl})
endsnippet

snippet ast_decl_type "ast_decl_type(d ast.Decl)"
ast_decl_type( ${1:d ast.Decl})
endsnippet

snippet ast_decl_values "ast_decl_values(d ast.Decl)"
ast_decl_values( ${1:d ast.Decl})
endsnippet

snippet ast_field_list_to_decls "ast_field_list_to_decls(f *ast.FieldList, class decl_class, flags decl_flags, scope *scope, add_anonymous bool)"
ast_field_list_to_decls( ${1:f *ast.FieldList}, ${2:class decl_class}, ${3:flags decl_flags}, ${4:scope *scope}, ${5:add_anonymous bool})
endsnippet

snippet ast_field_list_to_embedded "ast_field_list_to_embedded(f *ast.FieldList)"
ast_field_list_to_embedded( ${1:f *ast.FieldList})
endsnippet

snippet ast_type_to_children "ast_type_to_children(ty ast.Expr, flags decl_flags, scope *scope)"
ast_type_to_children( ${1:ty ast.Expr}, ${2:flags decl_flags}, ${3:scope *scope})
endsnippet

snippet ast_type_to_embedded "ast_type_to_embedded(ty ast.Expr)"
ast_type_to_embedded( ${1:ty ast.Expr})
endsnippet

snippet atoi "atoi(b []byte)"
atoi( ${1:b []byte})
endsnippet

snippet atomicCounterStmt "atomicCounterStmt(f *File, counter ast.Expr)"
atomicCounterStmt( ${1:f *File}, ${2:counter ast.Expr})
endsnippet

snippet atop "atop(b []byte)"
atop( ${1:b []byte})
endsnippet

snippet ator "ator(b []byte)"
ator( ${1:b []byte})
endsnippet

snippet attr "attr(node *html.Node, key string)"
attr( ${1:node *html.Node}, ${2:key string})
endsnippet

snippet attrValue "attrValue(attrs []xml.Attr, name string)"
attrValue( ${1:attrs []xml.Attr}, ${2:name string})
endsnippet

snippet auth "auth(c cmd, conn *ec2.EC2, args []string)"
auth( ${1:c cmd}, ${2:conn *ec2.EC2}, ${3:args []string})
endsnippet

snippet authReadLine "authReadLine(in *bufio.Reader)"
authReadLine( ${1:in *bufio.Reader})
endsnippet

snippet authWriteLine "authWriteLine(out io.Writer, data ...[]byte)"
authWriteLine( ${1:out io.Writer}, ${2:data ...[]byte})
endsnippet

snippet auth_allow_for_domain "auth_allow_for_domain(domain string, addresses ...string)"
auth_allow_for_domain( ${1:domain string}, ${2:addresses ...string})
endsnippet

snippet auth_deny_for_domain "auth_deny_for_domain(domain string, addresses ...string)"
auth_deny_for_domain( ${1:domain string}, ${2:addresses ...string})
endsnippet

snippet auth_has_allow "auth_has_allow(domain string)"
auth_has_allow( ${1:domain string})
endsnippet

snippet auth_has_deny "auth_has_deny(domain string)"
auth_has_deny( ${1:domain string})
endsnippet

snippet auth_isIP "auth_isIP(addr string)"
auth_isIP( ${1:addr string})
endsnippet

snippet auth_is_allowed "auth_is_allowed(domain, address string)"
auth_is_allowed( ${1:domain}, ${2:address string})
endsnippet

snippet auth_is_denied "auth_is_denied(domain, address string)"
auth_is_denied( ${1:domain}, ${2:address string})
endsnippet

snippet auth_meta_blob "auth_meta_blob(name, value string)"
auth_meta_blob( ${1:name}, ${2:value string})
endsnippet

snippet auth_meta_handler_default "auth_meta_handler_default(version, request_id, domain, address, identity, mechanism string, credentials ...string)"
auth_meta_handler_default( ${1:version}, ${2:request_id}, ${3:domain}, ${4:address}, ${5:identity}, ${6:mechanism string}, ${7:credentials ...string})
endsnippet

snippet authenticate "authenticate(w *bufio.Writer, displayStr string)"
authenticate( ${1:w *bufio.Writer}, ${2:displayStr string})
endsnippet

snippet authenticate_curve "authenticate_curve(domain, client_key string)"
authenticate_curve( ${1:domain}, ${2:client_key string})
endsnippet

snippet authenticate_plain "authenticate_plain(domain, username, password string)"
authenticate_plain( ${1:domain}, ${2:username}, ${3:password string})
endsnippet

snippet authorName "authorName(a present.Author)"
authorName( ${1:a present.Author})
endsnippet

snippet authors "authors(authors []present.Author)"
authors( ${1:authors []present.Author})
endsnippet

snippet autoLink "autoLink(oldPath, newPath string)"
autoLink( ${1:oldPath}, ${2:newPath string})
endsnippet

snippet autobuild "autobuild(p *build.Package)"
autobuild( ${1:p *build.Package})
endsnippet

snippet avg "avg(items []time.Duration)"
avg( ${1:items []time.Duration})
endsnippet

snippet b "b(mode uint32, s uint8)"
b( ${1:mode uint32}, ${2:s uint8})
endsnippet

snippet badPrefix "badPrefix(fpath string)"
badPrefix( ${1:fpath string})
endsnippet

snippet badRequest "badRequest(msg string)"
badRequest( ${1:msg string})
endsnippet

snippet bake "bake(files []string)"
bake( ${1:files []string})
endsnippet

snippet ballMaker "ballMaker(m ui.MouseEvent, ec <-chan interface{}, mkball chan<- ball)"
ballMaker( ${1:m ui.MouseEvent}, ${2:ec <-chan interface{}}, ${3:mkball chan<- ball})
endsnippet

snippet before "before(msg string)"
before( ${1:msg string})
endsnippet

snippet beforeHTMLIM "beforeHTMLIM(p *parser)"
beforeHTMLIM( ${1:p *parser})
endsnippet

snippet beforeHeadIM "beforeHeadIM(p *parser)"
beforeHeadIM( ${1:p *parser})
endsnippet

snippet benchmarkC "benchmarkC(t *testing.T)"
benchmarkC( ${1:t *testing.T})
endsnippet

snippet benchmarkE "benchmarkE(t *testing.T)"
benchmarkE( ${1:t *testing.T})
endsnippet

snippet benchmarkEncodeDecode "benchmarkEncodeDecode(b *testing.B, src, dst interface{})"
benchmarkEncodeDecode( ${1:b *testing.B}, ${2:src}, ${3:dst interface{}})
endsnippet

snippet benchmarkMutex "benchmarkMutex(b *testing.B, numReaders, numWriters, iterations int)"
benchmarkMutex( ${1:b *testing.B}, ${2:numReaders}, ${3:numWriters}, ${4:iterations int})
endsnippet

snippet benchmarkReadWriteIPv4UDP "benchmarkReadWriteIPv4UDP(b *testing.B, p *ipv4.PacketConn, wb, rb []byte, dst net.Addr, ifi *net.Interface)"
benchmarkReadWriteIPv4UDP( ${1:b *testing.B}, ${2:p *ipv4.PacketConn}, ${3:wb}, ${4:rb []byte}, ${5:dst net.Addr}, ${6:ifi *net.Interface})
endsnippet

snippet benchmarkReadWriteIPv6UDP "benchmarkReadWriteIPv6UDP(b *testing.B, p *ipv6.PacketConn, wb, rb []byte, dst net.Addr, ifi *net.Interface)"
benchmarkReadWriteIPv6UDP( ${1:b *testing.B}, ${2:p *ipv6.PacketConn}, ${3:wb}, ${4:rb []byte}, ${5:dst net.Addr}, ${6:ifi *net.Interface})
endsnippet

snippet benchmarkReadWriteNetUDP "benchmarkReadWriteNetUDP(b *testing.B, c net.PacketConn, wb, rb []byte, dst net.Addr)"
benchmarkReadWriteNetUDP( ${1:b *testing.B}, ${2:c net.PacketConn}, ${3:wb}, ${4:rb []byte}, ${5:dst net.Addr})
endsnippet

snippet benchmarkServe "benchmarkServe(b *testing.B, srv, cli *Conn)"
benchmarkServe( ${1:b *testing.B}, ${2:srv}, ${3:cli *Conn})
endsnippet

snippet benchmarkServeAsync "benchmarkServeAsync(b *testing.B, srv, cli *Conn)"
benchmarkServeAsync( ${1:b *testing.B}, ${2:srv}, ${3:cli *Conn})
endsnippet

snippet benchmarkTar "benchmarkTar(b *testing.B, opts sizedOptions, isGzip bool)"
benchmarkTar( ${1:b *testing.B}, ${2:opts sizedOptions}, ${3:isGzip bool})
endsnippet

snippet benchmarkTokenizer "benchmarkTokenizer(b *testing.B, level int)"
benchmarkTokenizer( ${1:b *testing.B}, ${2:level int})
endsnippet

snippet bid "bid(n int)"
bid( ${1:n int})
endsnippet

snippet bids "bids(ns ...int)"
bids( ${1:ns ...int})
endsnippet

snippet bigIntToIP "bigIntToIP(v *big.Int)"
bigIntToIP( ${1:v *big.Int})
endsnippet

snippet bigLsh "bigLsh(z, x, y *big.Int)"
bigLsh( ${1:z}, ${2:x}, ${3:y *big.Int})
endsnippet

snippet bigRsh "bigRsh(z, x, y *big.Int)"
bigRsh( ${1:z}, ${2:x}, ${3:y *big.Int})
endsnippet

snippet binarySearch "binarySearch(nodes []*node, word Text)"
binarySearch( ${1:nodes []*node}, ${2:word Text})
endsnippet

snippet binop "binop(op token.Token, t types.Type, x, y value)"
binop( ${1:op token.Token}, ${2:t types.Type}, ${3:x}, ${4:y value})
endsnippet

snippet binread "binread(r io.Reader, e binary.ByteOrder, x interface{})"
binread( ${1:r io.Reader}, ${2:e binary.ByteOrder}, ${3:x interface{}})
endsnippet

snippet bitbucketVCS "bitbucketVCS(match map[string]string)"
bitbucketVCS( ${1:match map[string]string})
endsnippet

snippet blkioStatEntryEquals "blkioStatEntryEquals(expected, actual []cgroups.BlkioStatEntry)"
blkioStatEntryEquals( ${1:expected}, ${2:actual []cgroups.BlkioStatEntry})
endsnippet

snippet blogRedirectHandler "blogRedirectHandler(w http.ResponseWriter, r *http.Request)"
blogRedirectHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet boing "boing(av realPoint, ln line)"
boing( ${1:av realPoint}, ${2:ln line})
endsnippet

snippet bold "bold(str string)"
bold( ${1:str string})
endsnippet

snippet boolString "boolString(s string)"
boolString( ${1:s string})
endsnippet

snippet boolbyte "boolbyte(b bool)"
boolbyte( ${1:b bool})
endsnippet

snippet boolint "boolint(b bool)"
boolint( ${1:b bool})
endsnippet

snippet bottomnwindows "bottomnwindows(w []*Image)"
bottomnwindows( ${1:w []*Image})
endsnippet

snippet bottomwindow "bottomwindow(w *Image)"
bottomwindow( ${1:w *Image})
endsnippet

snippet bounce "bounce(w http.ResponseWriter, r *http.Request)"
bounce( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet bplong "bplong(b []byte, n uint32)"
bplong( ${1:b []byte}, ${2:n uint32})
endsnippet

snippet bpshort "bpshort(b []byte, n uint16)"
bpshort( ${1:b []byte}, ${2:n uint16})
endsnippet

snippet braceIndices "braceIndices(s string)"
braceIndices( ${1:s string})
endsnippet

snippet bresham "bresham(ra int, sqa, sqb int, pts *pointVec, rev bool)"
bresham( ${1:ra int}, ${2:sqa}, ${3:sqb int}, ${4:pts *pointVec}, ${5:rev bool})
endsnippet

snippet bufferMouse "bufferMouse(mc <-chan draw.MouseEvent, out chan<- interface{})"
bufferMouse( ${1:mc <-chan draw.MouseEvent}, ${2:out chan<- interface{}})
endsnippet

snippet buildBinary "buildBinary(ctx *cli.Context, args ...string)"
buildBinary( ${1:ctx *cli.Context}, ${2:args ...string})
endsnippet

snippet buildDomFrontier "buildDomFrontier(fn *Function)"
buildDomFrontier( ${1:fn *Function})
endsnippet

snippet buildDomTree "buildDomTree(f *Function)"
buildDomTree( ${1:f *Function})
endsnippet

snippet buildEndpointsList "buildEndpointsList(headers []string, indexEp string)"
buildEndpointsList( ${1:headers []string}, ${2:indexEp string})
endsnippet

snippet buildGodoc "buildGodoc(t *testing.T)"
buildGodoc( ${1:t *testing.T})
endsnippet

snippet buildImage "buildImage(name, dockerfile string, useCache bool)"
buildImage( ${1:name}, ${2:dockerfile string}, ${3:useCache bool})
endsnippet

snippet buildImageFromContext "buildImageFromContext(name string, ctx *FakeContext, useCache bool)"
buildImageFromContext( ${1:name string}, ${2:ctx *FakeContext}, ${3:useCache bool})
endsnippet

snippet buildImageFromPath "buildImageFromPath(name, path string, useCache bool)"
buildImageFromPath( ${1:name}, ${2:path string}, ${3:useCache bool})
endsnippet

snippet buildImageWithOut "buildImageWithOut(name, dockerfile string, useCache bool)"
buildImageWithOut( ${1:name}, ${2:dockerfile string}, ${3:useCache bool})
endsnippet

snippet buildImageWithStdoutStderr "buildImageWithStdoutStderr(name, dockerfile string, useCache bool)"
buildImageWithStdoutStderr( ${1:name}, ${2:dockerfile string}, ${3:useCache bool})
endsnippet

snippet buildPerfTodo "buildPerfTodo(c appengine.Context, builder string)"
buildPerfTodo( ${1:c appengine.Context}, ${2:builder string})
endsnippet

snippet buildReferrers "buildReferrers(f *Function)"
buildReferrers( ${1:f *Function})
endsnippet

snippet buildRequestWithFile "buildRequestWithFile(testCase fileTestCase)"
buildRequestWithFile( ${1:testCase fileTestCase})
endsnippet

snippet buildSSA "buildSSA(o *Oracle)"
buildSSA( ${1:o *Oracle})
endsnippet

snippet buildTodo "buildTodo(c appengine.Context, builder, packagePath, goHash string)"
buildTodo( ${1:c appengine.Context}, ${2:builder}, ${3:packagePath}, ${4:goHash string})
endsnippet

snippet build_package "build_package(p *build.Package)"
build_package( ${1:p *build.Package})
endsnippet

snippet builderArch "builderArch(s string)"
builderArch( ${1:s string})
endsnippet

snippet builderArchChar "builderArchChar(s string)"
builderArchChar( ${1:s string})
endsnippet

snippet builderKey "builderKey(c appengine.Context, builder string)"
builderKey( ${1:c appengine.Context}, ${2:builder string})
endsnippet

snippet builderKeyFromMaster "builderKeyFromMaster(builder string)"
builderKeyFromMaster( ${1:builder string})
endsnippet

snippet builderOS "builderOS(s string)"
builderOS( ${1:s string})
endsnippet

snippet builderOSOrRace "builderOSOrRace(s string)"
builderOSOrRace( ${1:s string})
endsnippet

snippet builderPriority "builderPriority(builder string)"
builderPriority( ${1:builder string})
endsnippet

snippet builderSpans "builderSpans(s []string)"
builderSpans( ${1:s []string})
endsnippet

snippet builderSubheading "builderSubheading(s string)"
builderSubheading( ${1:s string})
endsnippet

snippet builderTitle "builderTitle(s string)"
builderTitle( ${1:s string})
endsnippet

snippet buy_resource "buy_resource(conn *net.TCPConn, t *testing.T)"
buy_resource( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet bypassCanInterface "bypassCanInterface(v reflect.Value)"
bypassCanInterface( ${1:v reflect.Value})
endsnippet

snippet byteSizeFromString "byteSizeFromString(arg string)"
byteSizeFromString( ${1:arg string})
endsnippet

snippet byteToLine "byteToLine(data []byte, i int)"
byteToLine( ${1:data []byte}, ${2:i int})
endsnippet

snippet byte_slice_grow "byte_slice_grow(s []byte, desired_cap int)"
byte_slice_grow( ${1:s []byte}, ${2:desired_cap int})
endsnippet

snippet byte_slice_insert "byte_slice_insert(text []byte, offset int, what []byte)"
byte_slice_insert( ${1:text []byte}, ${2:offset int}, ${3:what []byte})
endsnippet

snippet byte_slice_remove "byte_slice_remove(text []byte, from, to int)"
byte_slice_remove( ${1:text []byte}, ${2:from}, ${3:to int})
endsnippet

snippet bytediff "bytediff(a []byte, b []byte)"
bytediff( ${1:a []byte}, ${2:b []byte})
endsnippet

snippet bytes2samples "bytes2samples(b []byte, s []float32)"
bytes2samples( ${1:b []byte}, ${2:s []float32})
endsnippet

snippet bytesToString "bytesToString(bytes []Text)"
bytesToString( ${1:bytes []Text})
endsnippet

snippet bytesize "bytesize(b []byte)"
bytesize( ${1:b []byte})
endsnippet

snippet bytestr "bytestr(offset int, b []byte)"
bytestr( ${1:offset int}, ${2:b []byte})
endsnippet

snippet cString "cString(b []byte)"
cString( ${1:b []byte})
endsnippet

snippet cachechars "cachechars(f *Font, in *input, cp []uint16, max int)"
cachechars( ${1:f *Font}, ${2:in *input}, ${3:cp []uint16}, ${4:max int})
endsnippet

snippet calcCopyInfo "calcCopyInfo(b *Builder, cmdName string, cInfos *[]*copyInfo, origPath string, destPath string, allowRemote bool, allowDecompression bool)"
calcCopyInfo( ${1:b *Builder}, ${2:cmdName string}, ${3:cInfos *[]*copyInfo}, ${4:origPath string}, ${5:destPath string}, ${6:allowRemote bool}, ${7:allowDecompression bool})
endsnippet

snippet call "call(i *interpreter, caller *frame, callpos token.Pos, fn value, args []value)"
call( ${1:i *interpreter}, ${2:caller *frame}, ${3:callpos token.Pos}, ${4:fn value}, ${5:args []value})
endsnippet

snippet call2 "call2(f func()"
call2( ${1:f func(})
endsnippet

snippet callBuiltin "callBuiltin(caller *frame, callpos token.Pos, fn *ssa.Builtin, args []value)"
callBuiltin( ${1:caller *frame}, ${2:callpos token.Pos}, ${3:fn *ssa.Builtin}, ${4:args []value})
endsnippet

snippet callSSA "callSSA(i *interpreter, caller *frame, callpos token.Pos, fn *ssa.Function, args []value, env []value)"
callSSA( ${1:i *interpreter}, ${2:caller *frame}, ${3:callpos token.Pos}, ${4:fn *ssa.Function}, ${5:args []value}, ${6:env []value})
endsnippet

snippet calleeFuncs "calleeFuncs(r *oracle.Result)"
calleeFuncs( ${1:r *oracle.Result})
endsnippet

snippet callees "callees(o *Oracle, qpos *QueryPos)"
callees( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet caller "caller(n int)"
caller( ${1:n int})
endsnippet

snippet callers "callers(o *Oracle, qpos *QueryPos)"
callers( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet callstack "callstack(o *Oracle, qpos *QueryPos)"
callstack( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet canDeref "canDeref(val reflect.Value)"
canDeref( ${1:val reflect.Value})
endsnippet

snippet canReach "canReach(m map[reflect.Type]*typeInfo, t, xt reflect.Type)"
canReach( ${1:m map[reflect.Type]*typeInfo}, ${2:t}, ${3:xt reflect.Type})
endsnippet

snippet cancel_building "cancel_building(conn *net.TCPConn, t *testing.T)"
cancel_building( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet cancel_sell_resource "cancel_sell_resource(conn *net.TCPConn, t *testing.T)"
cancel_sell_resource( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet canfit "canfit(p *Piece)"
canfit( ${1:p *Piece})
endsnippet

snippet canonical "canonical(w string)"
canonical( ${1:w string})
endsnippet

snippet canonicalMethod "canonicalMethod(f *File, id *ast.Ident, t *ast.FuncType)"
canonicalMethod( ${1:f *File}, ${2:id *ast.Ident}, ${3:t *ast.FuncType})
endsnippet

snippet capget "capget(hdr *capHeader, data *capData)"
capget( ${1:hdr *capHeader}, ${2:data *capData})
endsnippet

snippet capset "capset(hdr *capHeader, data *capData)"
capset( ${1:hdr *capHeader}, ${2:data *capData})
endsnippet

snippet case3_1 "case3_1(case3_2 int)"
case3_1( ${1:case3_2 int})
endsnippet

snippet casterr "casterr(fromcgo error)"
casterr( ${1:fromcgo error})
endsnippet

snippet causeExpr "causeExpr(errgoIdent string, ident string)"
causeExpr( ${1:errgoIdent string}, ${2:ident string})
endsnippet

snippet cell_to_char_info "cell_to_char_info(c Cell)"
cell_to_char_info( ${1:c Cell})
endsnippet

snippet centre "centre(r image.Rectangle)"
centre( ${1:r image.Rectangle})
endsnippet

snippet centreDist "centreDist(r image.Rectangle)"
centreDist( ${1:r image.Rectangle})
endsnippet

snippet certify "certify(typ ast.Node, kind ast.ObjKind, pkg string, importer Importer)"
certify( ${1:typ ast.Node}, ${2:kind ast.ObjKind}, ${3:pkg string}, ${4:importer Importer})
endsnippet

snippet cf2subfont "cf2subfont(cf *cachefont, f *Font)"
cf2subfont( ${1:cf *cachefont}, ${2:f *Font})
endsnippet

snippet cflags "cflags(p *build.Package, def bool)"
cflags( ${1:p *build.Package}, ${2:def bool})
endsnippet

snippet chanOps "chanOps(instr ssa.Instruction)"
chanOps( ${1:instr ssa.Instruction})
endsnippet

snippet chan_predicate "chan_predicate(v ast.Expr)"
chan_predicate( ${1:v ast.Expr})
endsnippet

snippet changeColor "changeColor(fg Color, fgBright bool, bg Color, bgBright bool)"
changeColor( ${1:fg Color}, ${2:fgBright bool}, ${3:bg Color}, ${4:bgBright bool})
endsnippet

snippet changeFloats "changeFloats(v interface{})"
changeFloats( ${1:v interface{}})
endsnippet

snippet changeGroup "changeGroup(addr string, nameOrGid string)"
changeGroup( ${1:addr string}, ${2:nameOrGid string})
endsnippet

snippet changeHandler "changeHandler(w http.ResponseWriter, r *http.Request)"
changeHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet changeRecv "changeRecv(sig *types.Signature)"
changeRecv( ${1:sig *types.Signature})
endsnippet

snippet chaos "chaos(bpname string)"
chaos( ${1:bpname string})
endsnippet

snippet char_to_byte_offset "char_to_byte_offset(s []byte, offset_c int)"
char_to_byte_offset( ${1:s []byte}, ${2:offset_c int})
endsnippet

snippet charsetReader "charsetReader(charset string, input io.Reader)"
charsetReader( ${1:charset string}, ${2:input io.Reader})
endsnippet

snippet check "check(line, count uint32)"
check( ${1:line}, ${2:count uint32})
endsnippet

snippet checkAgentStatus "checkAgentStatus(server *rpc_args.AgentServer)"
checkAgentStatus( ${1:server *rpc_args.AgentServer})
endsnippet

snippet checkAlliance "checkAlliance(server_rpc_addr string, server_time time.Time, index int)"
checkAlliance( ${1:server_rpc_addr string}, ${2:server_time time.Time}, ${3:index int})
endsnippet

snippet checkAssignStmt "checkAssignStmt(f *File, node ast.Node)"
checkAssignStmt( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkAtomicAssignment "checkAtomicAssignment(f *File, node ast.Node)"
checkAtomicAssignment( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkBool "checkBool(f *File, n ast.Node)"
checkBool( ${1:f *File}, ${2:n ast.Node})
endsnippet

snippet checkBuildTag "checkBuildTag(name string, data []byte)"
checkBuildTag( ${1:name string}, ${2:data []byte})
endsnippet

snippet checkCallsExpectation "checkCallsExpectation(prog *ssa.Program, e *expectation, cg *callgraph.Graph)"
checkCallsExpectation( ${1:prog *ssa.Program}, ${2:e *expectation}, ${3:cg *callgraph.Graph})
endsnippet

snippet checkCanonicalFieldTag "checkCanonicalFieldTag(f *File, node ast.Node)"
checkCanonicalFieldTag( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkCanonicalMethod "checkCanonicalMethod(f *File, node ast.Node)"
checkCanonicalMethod( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkCommandCompletions "checkCommandCompletions(c *Context, name string)"
checkCommandCompletions( ${1:c *Context}, ${2:name string})
endsnippet

snippet checkCommandHelp "checkCommandHelp(c *Context, name string)"
checkCommandHelp( ${1:c *Context}, ${2:name string})
endsnippet

snippet checkCompletions "checkCompletions(c *Context)"
checkCompletions( ${1:c *Context})
endsnippet

snippet checkConstValue "checkConstValue(t *testing.T, prog *ssa.Program, obj *types.Const)"
checkConstValue( ${1:t *testing.T}, ${2:prog *ssa.Program}, ${3:obj *types.Const})
endsnippet

snippet checkCopyLocks "checkCopyLocks(f *File, node ast.Node)"
checkCopyLocks( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkCopyLocksFunc "checkCopyLocksFunc(f *File, d *ast.FuncDecl)"
checkCopyLocksFunc( ${1:f *File}, ${2:d *ast.FuncDecl})
endsnippet

snippet checkCopyLocksRange "checkCopyLocksRange(f *File, r *ast.RangeStmt)"
checkCopyLocksRange( ${1:f *File}, ${2:r *ast.RangeStmt})
endsnippet

snippet checkCopyLocksRangeVar "checkCopyLocksRangeVar(f *File, rtok token.Token, e ast.Expr)"
checkCopyLocksRangeVar( ${1:f *File}, ${2:rtok token.Token}, ${3:e ast.Expr})
endsnippet

snippet checkDepths "checkDepths(r io.Reader, b []byte, n int, visual uint32)"
checkDepths( ${1:r io.Reader}, ${2:b []byte}, ${3:n int}, ${4:visual uint32})
endsnippet

snippet checkEqualButNotIdentical "checkEqualButNotIdentical(t *testing.T, x, y types.Type, comment string)"
checkEqualButNotIdentical( ${1:t *testing.T}, ${2:x}, ${3:y types.Type}, ${4:comment string})
endsnippet

snippet checkEqualT "checkEqualT(t *testing.T, v1 interface{}, v2 interface{})"
checkEqualT( ${1:t *testing.T}, ${2:v1 interface{}}, ${3:v2 interface{}})
endsnippet

snippet checkErr "checkErr(err error)"
checkErr( ${1:err error})
endsnippet

snippet checkErr0 "checkErr0(err error)"
checkErr0( ${1:err error})
endsnippet

snippet checkErrT "checkErrT(t *testing.T, err error)"
checkErrT( ${1:t *testing.T}, ${2:err error})
endsnippet

snippet checkError "checkError(err error)"
checkError( ${1:err error})
endsnippet

snippet checkEvent "checkEvent(index int, event *APIEvents)"
checkEvent( ${1:index int}, ${2:event *APIEvents})
endsnippet

snippet checkExports "checkExports(t *testing.T, c *Corpus, ix *Index)"
checkExports( ${1:t *testing.T}, ${2:c *Corpus}, ${3:ix *Index})
endsnippet

snippet checkExprs "checkExprs(t *testing.T, pkg *ast.File, importer Importer)"
checkExprs( ${1:t *testing.T}, ${2:pkg *ast.File}, ${3:importer Importer})
endsnippet

snippet checkFiles "checkFiles(t *testing.T, testfiles []string)"
checkFiles( ${1:t *testing.T}, ${2:testfiles []string})
endsnippet

snippet checkFmtPrintfCall "checkFmtPrintfCall(f *File, node ast.Node)"
checkFmtPrintfCall( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkForJson "checkForJson(r *http.Request)"
checkForJson( ${1:r *http.Request})
endsnippet

snippet checkFuncValue "checkFuncValue(t *testing.T, prog *ssa.Program, obj *types.Func)"
checkFuncValue( ${1:t *testing.T}, ${2:prog *ssa.Program}, ${3:obj *types.Func})
endsnippet

snippet checkHelp "checkHelp(c *Context)"
checkHelp( ${1:c *Context})
endsnippet

snippet checkIdents "checkIdents(t *testing.T, c *Corpus, ix *Index)"
checkIdents( ${1:t *testing.T}, ${2:c *Corpus}, ${3:ix *Index})
endsnippet

snippet checkImportCount "checkImportCount(t *testing.T, c *Corpus, ix *Index)"
checkImportCount( ${1:t *testing.T}, ${2:c *Corpus}, ${3:ix *Index})
endsnippet

snippet checkInterface "checkInterface(i *interpreter, itype *types.Interface, x iface)"
checkInterface( ${1:i *interpreter}, ${2:itype *types.Interface}, ${3:x iface})
endsnippet

snippet checkLongShift "checkLongShift(f *File, node ast.Node, x, y ast.Expr)"
checkLongShift( ${1:f *File}, ${2:node ast.Node}, ${3:x}, ${4:y ast.Expr})
endsnippet

snippet checkNilFuncComparison "checkNilFuncComparison(f *File, node ast.Node)"
checkNilFuncComparison( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkNoChanges "checkNoChanges(fileNum int, hardlinks bool)"
checkNoChanges( ${1:fileNum int}, ${2:hardlinks bool})
endsnippet

snippet checkNodeConsistency "checkNodeConsistency(n *Node)"
checkNodeConsistency( ${1:n *Node})
endsnippet

snippet checkOrigin "checkOrigin(config *Config, req *http.Request)"
checkOrigin( ${1:config *Config}, ${2:req *http.Request})
endsnippet

snippet checkOverflow "checkOverflow(ui uint64, i int64, bitsize uint8)"
checkOverflow( ${1:ui uint64}, ${2:i int64}, ${3:bitsize uint8})
endsnippet

snippet checkOverflowFloat32 "checkOverflowFloat32(f float64, doCheck bool)"
checkOverflowFloat32( ${1:f float64}, ${2:doCheck bool})
endsnippet

snippet checkPackagePath "checkPackagePath(t *testing.T, c *Corpus, ix *Index)"
checkPackagePath( ${1:t *testing.T}, ${2:c *Corpus}, ${3:ix *Index})
endsnippet

snippet checkPerfChanges "checkPerfChanges(c appengine.Context, r *http.Request, com *Commit, builder string, res *PerfResult)"
checkPerfChanges( ${1:c appengine.Context}, ${2:r *http.Request}, ${3:com *Commit}, ${4:builder string}, ${5:res *PerfResult})
endsnippet

snippet checkPixmapFormats "checkPixmapFormats(r io.Reader, b []byte, n int)"
checkPixmapFormats( ${1:r io.Reader}, ${2:b []byte}, ${3:n int})
endsnippet

snippet checkPkgFiles "checkPkgFiles(files []*ast.File)"
checkPkgFiles( ${1:files []*ast.File})
endsnippet

snippet checkPointsToExpectation "checkPointsToExpectation(e *expectation, pts pointer.PointsToSet, lineMapping map[string]string, prog *ssa.Program)"
checkPointsToExpectation( ${1:e *expectation}, ${2:pts pointer.PointsToSet}, ${3:lineMapping map[string]string}, ${4:prog *ssa.Program})
endsnippet

snippet checkPos "checkPos(t *testing.T, lit string, p token.Pos, expected token.Position)"
checkPos( ${1:t *testing.T}, ${2:lit string}, ${3:p token.Pos}, ${4:expected token.Position})
endsnippet

snippet checkQueryError "checkQueryError(fullname string, d []byte)"
checkQueryError( ${1:fullname string}, ${2:d []byte})
endsnippet

snippet checkRangeLoop "checkRangeLoop(f *File, node ast.Node)"
checkRangeLoop( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkScreens "checkScreens(r io.Reader, b []byte, n int)"
checkScreens( ${1:r io.Reader}, ${2:b []byte}, ${3:n int})
endsnippet

snippet checkSemi "checkSemi(t *testing.T, line string, mode uint)"
checkSemi( ${1:t *testing.T}, ${2:line string}, ${3:mode uint})
endsnippet

snippet checkSeq "checkSeq(seq *seq9p, fid *Fid)"
checkSeq( ${1:seq *seq9p}, ${2:fid *Fid})
endsnippet

snippet checkShadow "checkShadow(f *File, node ast.Node)"
checkShadow( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkShadowAssignment "checkShadowAssignment(f *File, a *ast.AssignStmt)"
checkShadowAssignment( ${1:f *File}, ${2:a *ast.AssignStmt})
endsnippet

snippet checkShadowDecl "checkShadowDecl(f *File, d *ast.GenDecl)"
checkShadowDecl( ${1:f *File}, ${2:d *ast.GenDecl})
endsnippet

snippet checkShadowing "checkShadowing(f *File, ident *ast.Ident)"
checkShadowing( ${1:f *File}, ${2:ident *ast.Ident})
endsnippet

snippet checkShift "checkShift(f *File, node ast.Node)"
checkShift( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkStats "checkStats(t *testing.T, c *Corpus, ix *Index)"
checkStats( ${1:t *testing.T}, ${2:c *Corpus}, ${3:ix *Index})
endsnippet

snippet checkSubcommandHelp "checkSubcommandHelp(c *Context)"
checkSubcommandHelp( ${1:c *Context})
endsnippet

snippet checkTreeConsistency "checkTreeConsistency(n *Node)"
checkTreeConsistency( ${1:n *Node})
endsnippet

snippet checkTreeConsistency1 "checkTreeConsistency1(n *Node, depth int)"
checkTreeConsistency1( ${1:n *Node}, ${2:depth int})
endsnippet

snippet checkTypesExpectation "checkTypesExpectation(e *expectation, pts pointer.PointsToSet, typ types.Type)"
checkTypesExpectation( ${1:e *expectation}, ${2:pts pointer.PointsToSet}, ${3:typ types.Type})
endsnippet

snippet checkUnkeyedLiteral "checkUnkeyedLiteral(f *File, node ast.Node)"
checkUnkeyedLiteral( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkUnreachable "checkUnreachable(f *File, node ast.Node)"
checkUnreachable( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkUnsafePointer "checkUnsafePointer(f *File, node ast.Node)"
checkUnsafePointer( ${1:f *File}, ${2:node ast.Node})
endsnippet

snippet checkVal "checkVal(line, count uint32, val int)"
checkVal( ${1:line}, ${2:count uint32}, ${3:val int})
endsnippet

snippet checkVarValue "checkVarValue(t *testing.T, prog *ssa.Program, pkg *ssa.Package, ref []ast.Node, obj *types.Var, expKind string, wantAddr bool)"
checkVarValue( ${1:t *testing.T}, ${2:prog *ssa.Program}, ${3:pkg *ssa.Package}, ${4:ref []ast.Node}, ${5:obj *types.Var}, ${6:expKind string}, ${7:wantAddr bool})
endsnippet

snippet checkVersion "checkVersion(c *Context)"
checkVersion( ${1:c *Context})
endsnippet

snippet checkWarningExpectation "checkWarningExpectation(prog *ssa.Program, e *expectation, warnings []pointer.Warning)"
checkWarningExpectation( ${1:prog *ssa.Program}, ${2:e *expectation}, ${3:warnings []pointer.Warning})
endsnippet

snippet checkZeroStreamId "checkZeroStreamId(t *testing.T, frame string, method string, err error)"
checkZeroStreamId( ${1:t *testing.T}, ${2:frame string}, ${3:method string}, ${4:err error})
endsnippet

snippet check_around "check_around(x, y T_coordinate)"
check_around( ${1:x}, ${2:y T_coordinate})
endsnippet

snippet check_condition "check_condition($/;"	f
check_cost_condition	src/agent/gsmemory/common.go	/^func check_cost_condition(user *User, condition map[string]int32)"
check_condition( ${1:$/;"	f
check_cost_condition	src/agent/gsmemory/common.go	/^func check_cost_condition(user *User}, ${2:condition map[string]int32})
endsnippet

snippet check_error "check_error(err error)"
check_error( ${1:err error})
endsnippet

snippet check_for_anon_type "check_for_anon_type(t ast.Expr, flags decl_flags, s *scope)"
check_for_anon_type( ${1:t ast.Expr}, ${2:flags decl_flags}, ${3:s *scope})
endsnippet

snippet check_for_builtin_funcs "check_for_builtin_funcs(typ *ast.Ident, c *ast.CallExpr, scope *scope)"
check_for_builtin_funcs( ${1:typ *ast.Ident}, ${2:c *ast.CallExpr}, ${3:scope *scope})
endsnippet

snippet check_func_field_list "check_func_field_list(f *ast.FieldList)"
check_func_field_list( ${1:f *ast.FieldList})
endsnippet

snippet check_str_condition "check_str_condition($/;"	f
check_type_expr	src/github.com/nsf/gocode/autocompletecontext.go	/^func check_type_expr(e ast.Expr)"
check_str_condition( ${1:$/;"	f
check_type_expr	src/github.com/nsf/gocode/autocompletecontext.go	/^func check_type_expr(e ast.Expr})
endsnippet

snippet checkout "checkout(repo, hash, path string)"
checkout( ${1:repo}, ${2:hash}, ${3:path string})
endsnippet

snippet checksum "checksum(header []byte)"
checksum( ${1:header []byte})
endsnippet

snippet childText "childText(node *html.Node)"
childText( ${1:node *html.Node})
endsnippet

snippet childrenOf "childrenOf(n ast.Node)"
childrenOf( ${1:n ast.Node})
endsnippet

snippet chooseBenchmark "chooseBenchmark(benchBin string, doneBenchs []string)"
chooseBenchmark( ${1:benchBin string}, ${2:doneBenchs []string})
endsnippet

snippet chroot "chroot(path string)"
chroot( ${1:path string})
endsnippet

snippet ck "ck(day Day, str string)"
ck( ${1:day Day}, ${2:str string})
endsnippet

snippet clHandler "clHandler(w http.ResponseWriter, r *http.Request)"
clHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet cleanPath "cleanPath(p string)"
cleanPath( ${1:p string})
endsnippet

snippet clean_table "clean_table(tables ...string)"
clean_table( ${1:tables ...string})
endsnippet

snippet cleanup "cleanup(t *testing.T, d *Driver)"
cleanup( ${1:t *testing.T}, ${2:d *Driver})
endsnippet

snippet clear "clear(r *http.Request)"
clear( ${1:r *http.Request})
endsnippet

snippet clearMap "clearMap(m reflect.Value)"
clearMap( ${1:m reflect.Value})
endsnippet

snippet clearResultsHandler "clearResultsHandler(r *http.Request)"
clearResultsHandler( ${1:r *http.Request})
endsnippet

snippet clicker "clicker(m0 draw.Mouse, mc <-chan draw.Mouse)"
clicker( ${1:m0 draw.Mouse}, ${2:mc <-chan draw.Mouse})
endsnippet

snippet client "client(r *http.Request)"
client( ${1:r *http.Request})
endsnippet

snippet client_auto_complete "client_auto_complete(cli *rpc.Client, Arg0 []byte, Arg1 string, Arg2 int, Arg3 go_build_context)"
client_auto_complete( ${1:cli *rpc.Client}, ${2:Arg0 []byte}, ${3:Arg1 string}, ${4:Arg2 int}, ${5:Arg3 go_build_context})
endsnippet

snippet client_close "client_close(cli *rpc.Client, Arg0 int)"
client_close( ${1:cli *rpc.Client}, ${2:Arg0 int})
endsnippet

snippet client_cursor_type_pkg "client_cursor_type_pkg(cli *rpc.Client, Arg0 []byte, Arg1 string, Arg2 int)"
client_cursor_type_pkg( ${1:cli *rpc.Client}, ${2:Arg0 []byte}, ${3:Arg1 string}, ${4:Arg2 int})
endsnippet

snippet client_drop_cache "client_drop_cache(cli *rpc.Client, Arg0 int)"
client_drop_cache( ${1:cli *rpc.Client}, ${2:Arg0 int})
endsnippet

snippet client_set "client_set(cli *rpc.Client, Arg0, Arg1 string)"
client_set( ${1:cli *rpc.Client}, ${2:Arg0}, ${3:Arg1 string})
endsnippet

snippet client_status "client_status(cli *rpc.Client, Arg0 int)"
client_status( ${1:cli *rpc.Client}, ${2:Arg0 int})
endsnippet

snippet client_task "client_task(name string, i int)"
client_task( ${1:name string}, ${2:i int})
endsnippet

snippet client_thread "client_thread(pipe chan<- string)"
client_thread( ${1:pipe chan<- string})
endsnippet

snippet clone_agent "clone_agent(pipename string)"
clone_agent( ${1:pipename string})
endsnippet

snippet close "close(x interface{})"
close( ${1:x interface{}})
endsnippet

snippet closeDir "closeDir(dir *C.DIR)"
closeDir( ${1:dir *C.DIR})
endsnippet

snippet closeStreams "closeStreams(streams ...interface{})"
closeStreams( ${1:streams ...interface{}})
endsnippet

snippet closeWrap "closeWrap(args ...io.Closer)"
closeWrap( ${1:args ...io.Closer})
endsnippet

snippet close_work "close_work(sess *Session)"
close_work( ${1:sess *Session})
endsnippet

snippet close_work_user "close_work_user(user *User)"
close_work_user( ${1:user *User})
endsnippet

snippet cmap2rgb "cmap2rgb(c int)"
cmap2rgb( ${1:c int})
endsnippet

snippet cmap2rgba "cmap2rgba(c int)"
cmap2rgba( ${1:c int})
endsnippet

snippet cmapModel "cmapModel(c color.Color)"
cmapModel( ${1:c color.Color})
endsnippet

snippet cmd "cmd(c *g9pc.Client, cmd string)"
cmd( ${1:c *g9pc.Client}, ${2:cmd string})
endsnippet

snippet cmd_auto_complete "cmd_auto_complete(c *rpc.Client)"
cmd_auto_complete( ${1:c *rpc.Client})
endsnippet

snippet cmd_close "cmd_close(c *rpc.Client)"
cmd_close( ${1:c *rpc.Client})
endsnippet

snippet cmd_cursor_type_pkg "cmd_cursor_type_pkg(c *rpc.Client)"
cmd_cursor_type_pkg( ${1:c *rpc.Client})
endsnippet

snippet cmd_drop_cache "cmd_drop_cache(c *rpc.Client)"
cmd_drop_cache( ${1:c *rpc.Client})
endsnippet

snippet cmd_set "cmd_set(c *rpc.Client)"
cmd_set( ${1:c *rpc.Client})
endsnippet

snippet cmd_status "cmd_status(c *rpc.Client)"
cmd_status( ${1:c *rpc.Client})
endsnippet

snippet cmdcat "cmdcat(c *g9pc.Client, s []string)"
cmdcat( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdcd "cmdcd(c *g9pc.Client, s []string)"
cmdcd( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdecho "cmdecho(c *g9pc.Client, s []string)"
cmdecho( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdget "cmdget(c *g9pc.Client, s []string)"
cmdget( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdhelp "cmdhelp(c *g9pc.Client, s []string)"
cmdhelp( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdls "cmdls(c *g9pc.Client, s []string)"
cmdls( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdmkdir "cmdmkdir(c *g9pc.Client, s []string)"
cmdmkdir( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdput "cmdput(c *g9pc.Client, s []string)"
cmdput( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdpwd "cmdpwd(c *g9pc.Client, s []string)"
cmdpwd( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdquit "cmdquit(c *g9pc.Client, s []string)"
cmdquit( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdread "cmdread(ns *g9pc.Ns, s []string)"
cmdread( ${1:ns *g9pc.Ns}, ${2:s []string})
endsnippet

snippet cmdrm "cmdrm(c *g9pc.Client, s []string)"
cmdrm( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdstat "cmdstat(c *g9pc.Client, s []string)"
cmdstat( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmdstream "cmdstream(ns *g9pc.Ns, s []string)"
cmdstream( ${1:ns *g9pc.Ns}, ${2:s []string})
endsnippet

snippet cmdtorture "cmdtorture(ns *g9pc.Ns, s []string)"
cmdtorture( ${1:ns *g9pc.Ns}, ${2:s []string})
endsnippet

snippet cmdwrite "cmdwrite(c *g9pc.Client, s []string)"
cmdwrite( ${1:c *g9pc.Client}, ${2:s []string})
endsnippet

snippet cmpZero "cmpZero(x int, op token.Token)"
cmpZero( ${1:x int}, ${2:op token.Token})
endsnippet

snippet codeLines "codeLines(src []byte, start, end int)"
codeLines( ${1:src []byte}, ${2:start}, ${3:end int})
endsnippet

snippet code_to_error "code_to_error(error_code int32)"
code_to_error( ${1:error_code int32})
endsnippet

snippet codewalk "codewalk(w http.ResponseWriter, r *http.Request)"
codewalk( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet codewalkDir "codewalkDir(w http.ResponseWriter, r *http.Request, relpath, abspath string)"
codewalkDir( ${1:w http.ResponseWriter}, ${2:r *http.Request}, ${3:relpath}, ${4:abspath string})
endsnippet

snippet codewalkFileprint "codewalkFileprint(w http.ResponseWriter, r *http.Request, f string)"
codewalkFileprint( ${1:w http.ResponseWriter}, ${2:r *http.Request}, ${3:f string})
endsnippet

snippet col "col(x int)"
col( ${1:x int})
endsnippet

snippet collapse "collapse(prev, next ast.Spec)"
collapse( ${1:prev}, ${2:next ast.Spec})
endsnippet

snippet collectExamples "collectExamples(c *Corpus, pkg *ast.Package, testfiles map[string]*ast.File)"
collectExamples( ${1:c *Corpus}, ${2:pkg *ast.Package}, ${3:testfiles map[string]*ast.File})
endsnippet

snippet collectFileInfo "collectFileInfo(sourceDir string)"
collectFileInfo( ${1:sourceDir string})
endsnippet

snippet collectList "collectList(all []string, idx int, second string)"
collectList( ${1:all []string}, ${2:idx int}, ${3:second string})
endsnippet

snippet collect_package_imports "collect_package_imports(filename string, decls []ast.Decl, context build.Context)"
collect_package_imports( ${1:filename string}, ${2:decls []ast.Decl}, ${3:context build.Context})
endsnippet

snippet collector "collector(srv *clonesrv_t)"
collector( ${1:srv *clonesrv_t})
endsnippet

snippet collide "collide(pt image.Point, p *Piece)"
collide( ${1:pt image.Point}, ${2:p *Piece})
endsnippet

snippet collider "collider(pt, pmax image.Point)"
collider( ${1:pt}, ${2:pmax image.Point})
endsnippet

snippet color_ "color_(r, g, b, a uint8)"
color_( ${1:r}, ${2:g}, ${3:b}, ${4:a uint8})
endsnippet

snippet combine "combine(fns ...func(ch *character)"
combine( ${1:fns ...func(ch *character})
endsnippet

snippet combinedMethodSet "combinedMethodSet(T *types.Named)"
combinedMethodSet( ${1:T *types.Named})
endsnippet

snippet commaOk "commaOk(x bool)"
commaOk( ${1:x bool})
endsnippet

snippet comment_htmlFunc "comment_htmlFunc(comment string)"
comment_htmlFunc( ${1:comment string})
endsnippet

snippet comment_textFunc "comment_textFunc(comment, indent, preIndent string)"
comment_textFunc( ${1:comment}, ${2:indent}, ${3:preIndent string})
endsnippet

snippet commitBuilders "commitBuilders(commits []*Commit)"
commitBuilders( ${1:commits []*Commit})
endsnippet

snippet commitHandler "commitHandler(r *http.Request)"
commitHandler( ${1:r *http.Request})
endsnippet

snippet commitPoll "commitPoll(repo *Repo, pkg, key string)"
commitPoll( ${1:repo *Repo}, ${2:pkg}, ${3:key string})
endsnippet

snippet commitRepo "commitRepo(c *C, dir, kind string, message string)"
commitRepo( ${1:c *C}, ${2:dir}, ${3:kind string}, ${4:message string})
endsnippet

snippet commitWatcher "commitWatcher(goroot *Repo)"
commitWatcher( ${1:goroot *Repo})
endsnippet

snippet commonNotify "commonNotify(c appengine.Context, com *Commit, builder, logHash string)"
commonNotify( ${1:c appengine.Context}, ${2:com *Commit}, ${3:builder}, ${4:logHash string})
endsnippet

snippet commonPrefix "commonPrefix(a, b []byte)"
commonPrefix( ${1:a}, ${2:b []byte})
endsnippet

snippet compareDirectoryEntries "compareDirectoryEntries(e1 []os.FileInfo, e2 []os.FileInfo)"
compareDirectoryEntries( ${1:e1 []os.FileInfo}, ${2:e2 []os.FileInfo})
endsnippet

snippet compareKeySlices "compareKeySlices(t *testing.T, sliceA, sliceB []PublicKey)"
compareKeySlices( ${1:t *testing.T}, ${2:sliceA}, ${3:sliceB []PublicKey})
endsnippet

snippet comparePerfResults "comparePerfResults(c appengine.Context, pc *PerfConfig, builder string, prevRes, res *PerfResult)"
comparePerfResults( ${1:c appengine.Context}, ${2:pc *PerfConfig}, ${3:builder string}, ${4:prevRes}, ${5:res *PerfResult})
endsnippet

snippet compareRandomizedStrings "compareRandomizedStrings(a, b, c, d string)"
compareRandomizedStrings( ${1:a}, ${2:b}, ${3:c}, ${4:d string})
endsnippet

snippet compblocksize "compblocksize(r image.Rectangle, depth int)"
compblocksize( ${1:r image.Rectangle}, ${2:depth int})
endsnippet

snippet compile "compile(t *testing.T, dirname, filename string)"
compile( ${1:t *testing.T}, ${2:dirname}, ${3:filename string})
endsnippet

snippet computeImplements "computeImplements(cache *types.MethodSetCache, allNamed []*types.Named)"
computeImplements( ${1:cache *types.MethodSetCache}, ${2:allNamed []*types.Named})
endsnippet

snippet concat "concat(list []int, i int)"
concat( ${1:list []int}, ${2:i int})
endsnippet

snippet condUpdateImage "condUpdateImage(img string)"
condUpdateImage( ${1:img string})
endsnippet

snippet configAction "configAction(context *cli.Context)"
configAction( ${1:context *cli.Context})
endsnippet

snippet config_hero "config_hero(conn *net.TCPConn, t *testing.T)"
config_hero( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet config_hero_and_defense "config_hero_and_defense(conn *net.TCPConn, t *testing.T)"
config_hero_and_defense( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet config_hero_and_move_army "config_hero_and_move_army(server_id int32, mac string, city_x int32, city_y int32, new_conn *net.TCPConn, t *testing.T)"
config_hero_and_move_army( ${1:server_id int32}, ${2:mac string}, ${3:city_x int32}, ${4:city_y int32}, ${5:new_conn *net.TCPConn}, ${6:t *testing.T})
endsnippet

snippet configureBridge "configureBridge(bridgeIP string)"
configureBridge( ${1:bridgeIP string})
endsnippet

snippet connect "connect(stats []Stat)"
connect( ${1:stats []Stat})
endsnippet

snippet connector "connector(t *testing.T, network, addr string, done chan<- bool)"
connector( ${1:t *testing.T}, ${2:network}, ${3:addr string}, ${4:done chan<- bool})
endsnippet

snippet connnet "connnet(url string)"
connnet( ${1:url string})
endsnippet

snippet connnet_to_server "connnet_to_server(port string)"
connnet_to_server( ${1:port string})
endsnippet

snippet consolidateMultiples "consolidateMultiples(list []embeddedType)"
consolidateMultiples( ${1:list []embeddedType})
endsnippet

snippet constValue "constValue(c *ssa.Const)"
constValue( ${1:c *ssa.Const})
endsnippet

snippet consumeWithSpeed "consumeWithSpeed(reader io.Reader, chunkSize int, interval time.Duration, stop chan bool)"
consumeWithSpeed( ${1:reader io.Reader}, ${2:chunkSize int}, ${3:interval time.Duration}, ${4:stop chan bool})
endsnippet

snippet containerAssertExists "containerAssertExists(eng *engine.Engine, id string, t Fataler)"
containerAssertExists( ${1:eng *engine.Engine}, ${2:id string}, ${3:t Fataler})
endsnippet

snippet containerAssertNotExists "containerAssertNotExists(eng *engine.Engine, id string, t Fataler)"
containerAssertNotExists( ${1:eng *engine.Engine}, ${2:id string}, ${3:t Fataler})
endsnippet

snippet containerAttach "containerAttach(eng *engine.Engine, id string, t Fataler)"
containerAttach( ${1:eng *engine.Engine}, ${2:id string}, ${3:t Fataler})
endsnippet

snippet containerFileExists "containerFileExists(eng *engine.Engine, id, dir string, t Fataler)"
containerFileExists( ${1:eng *engine.Engine}, ${2:id}, ${3:dir string}, ${4:t Fataler})
endsnippet

snippet containerKill "containerKill(eng *engine.Engine, id string, t Fataler)"
containerKill( ${1:eng *engine.Engine}, ${2:id string}, ${3:t Fataler})
endsnippet

snippet containerRun "containerRun(eng *engine.Engine, id string, t Fataler)"
containerRun( ${1:eng *engine.Engine}, ${2:id string}, ${3:t Fataler})
endsnippet

snippet containerRunning "containerRunning(eng *engine.Engine, id string, t Fataler)"
containerRunning( ${1:eng *engine.Engine}, ${2:id string}, ${3:t Fataler})
endsnippet

snippet containerStorageFile "containerStorageFile(containerId, basename string)"
containerStorageFile( ${1:containerId}, ${2:basename string})
endsnippet

snippet containerWait "containerWait(eng *engine.Engine, id string, t Fataler)"
containerWait( ${1:eng *engine.Engine}, ${2:id string}, ${3:t Fataler})
endsnippet

snippet containerWaitTimeout "containerWaitTimeout(eng *engine.Engine, id string, t Fataler)"
containerWaitTimeout( ${1:eng *engine.Engine}, ${2:id string}, ${3:t Fataler})
endsnippet

snippet contains "contains(t []string, s string)"
contains( ${1:t []string}, ${2:s string})
endsnippet

snippet containsAllIdsOf "containsAllIdsOf(T, U *types.MethodSet)"
containsAllIdsOf( ${1:T}, ${2:U *types.MethodSet})
endsnippet

snippet containsDevice "containsDevice(expected *devices.Device, values []*devices.Device)"
containsDevice( ${1:expected *devices.Device}, ${2:values []*devices.Device})
endsnippet

snippet containsMainFunc "containsMainFunc(file *ast.File)"
containsMainFunc( ${1:file *ast.File})
endsnippet

snippet containsNode "containsNode(node, x ast.Node)"
containsNode( ${1:node}, ${2:x ast.Node})
endsnippet

snippet containsOnlySpace "containsOnlySpace(buf []byte)"
containsOnlySpace( ${1:buf []byte})
endsnippet

snippet contextForRequest "contextForRequest(r *http.Request)"
contextForRequest( ${1:r *http.Request})
endsnippet

snippet conv "conv(t_dst, t_src types.Type, x value)"
conv( ${1:t_dst}, ${2:t_src types.Type}, ${3:x value})
endsnippet

snippet convert "convert(w io.Writer, r io.Reader)"
convert( ${1:w io.Writer}, ${2:r io.Reader})
endsnippet

snippet convertCString "convertCString(cstr string)"
convertCString( ${1:cstr string})
endsnippet

snippet convertNewlines "convertNewlines(s []byte)"
convertNewlines( ${1:s []byte})
endsnippet

snippet convertSliceOfStringsToMap "convertSliceOfStringsToMap(input []string)"
convertSliceOfStringsToMap( ${1:input []string})
endsnippet

snippet copy "copy(to, from string)"
copy( ${1:to}, ${2:from string})
endsnippet

snippet copyAsDirectory "copyAsDirectory(source, destination string, destExisted bool)"
copyAsDirectory( ${1:source}, ${2:destination string}, ${3:destExisted bool})
endsnippet

snippet copyAttributes "copyAttributes(dst *Node, src Token)"
copyAttributes( ${1:dst *Node}, ${2:src Token})
endsnippet

snippet copyBody "copyBody(w io.Writer, win *acme.Win)"
copyBody( ${1:w io.Writer}, ${2:win *acme.Win})
endsnippet

snippet copyBusybox "copyBusybox(dest string)"
copyBusybox( ${1:dest string})
endsnippet

snippet copyDir "copyDir(srcDir, dstDir string, flags CopyFlags)"
copyDir( ${1:srcDir}, ${2:dstDir string}, ${3:flags CopyFlags})
endsnippet

snippet copyExistingContents "copyExistingContents(source, destination string)"
copyExistingContents( ${1:source}, ${2:destination string})
endsnippet

snippet copyFlag "copyFlag(name string, ff *flag.Flag, set *flag.FlagSet)"
copyFlag( ${1:name string}, ${2:ff *flag.Flag}, ${3:set *flag.FlagSet})
endsnippet

snippet copyOwnership "copyOwnership(source, destination string)"
copyOwnership( ${1:source}, ${2:destination string})
endsnippet

snippet copyRegular "copyRegular(srcPath, dstPath string, mode os.FileMode)"
copyRegular( ${1:srcPath}, ${2:dstPath string}, ${3:mode os.FileMode})
endsnippet

snippet copySession "copySession(session *Session, keepCreds bool)"
copySession( ${1:session *Session}, ${2:keepCreds bool})
endsnippet

snippet copyVal "copyVal(v value)"
copyVal( ${1:v value})
endsnippet

snippet copyWithCP "copyWithCP(source, target string)"
copyWithCP( ${1:source}, ${2:target string})
endsnippet

snippet copyXattr "copyXattr(srcPath, dstPath, attr string)"
copyXattr( ${1:srcPath}, ${2:dstPath}, ${3:attr string})
endsnippet

snippet correctStringWritten "correctStringWritten(t *testing.T, r *os.File, expected string)"
correctStringWritten( ${1:t *testing.T}, ${2:r *os.File}, ${3:expected string})
endsnippet

snippet correctStringWrittenNet "correctStringWrittenNet(t *testing.T, r net.Conn, expected string)"
correctStringWrittenNet( ${1:t *testing.T}, ${2:r net.Conn}, ${3:expected string})
endsnippet

snippet cos32 "cos32(x float32)"
cos32( ${1:x float32})
endsnippet

snippet count "count(line uint32)"
count( ${1:line uint32})
endsnippet

snippet countServer "countServer(ws *Conn)"
countServer( ${1:ws *Conn})
endsnippet

snippet countUses "countUses(x *ast.Ident, scope []ast.Stmt)"
countUses( ${1:x *ast.Ident}, ${2:scope []ast.Stmt})
endsnippet

snippet create "create(x int, name string)"
create( ${1:x int}, ${2:name string})
endsnippet

snippet createArrayNode "createArrayNode(input string)"
createArrayNode( ${1:input string})
endsnippet

snippet createBase "createBase(t *testing.T, driver graphdriver.Driver, name string)"
createBase( ${1:t *testing.T}, ${2:driver graphdriver.Driver}, ${3:name string})
endsnippet

snippet createBridgeIface "createBridgeIface(name string)"
createBridgeIface( ${1:name string})
endsnippet

snippet createEnvFromGetImagesJSONStruct "createEnvFromGetImagesJSONStruct(data getImagesJSONStruct)"
createEnvFromGetImagesJSONStruct( ${1:data getImagesJSONStruct})
endsnippet

snippet createFile "createFile(path string)"
createFile( ${1:path string})
endsnippet

snippet createFromBool "createFromBool(data [][]bool)"
createFromBool( ${1:data [][]bool})
endsnippet

snippet createFromFloat64 "createFromFloat64(data [][]float64, format byte)"
createFromFloat64( ${1:data [][]float64}, ${2:format byte})
endsnippet

snippet createFromInt "createFromInt(data [][]int)"
createFromInt( ${1:data [][]int})
endsnippet

snippet createFromInt32 "createFromInt32(data [][]int32)"
createFromInt32( ${1:data [][]int32})
endsnippet

snippet createFromInt64 "createFromInt64(data [][]int64)"
createFromInt64( ${1:data [][]int64})
endsnippet

snippet createFromMapMixed "createFromMapMixed(data map[string][]interface{}, format byte)"
createFromMapMixed( ${1:data map[string][]interface{}}, ${2:format byte})
endsnippet

snippet createFromMapString "createFromMapString(data map[string][]string)"
createFromMapString( ${1:data map[string][]string})
endsnippet

snippet createFromMixed "createFromMixed(data [][]interface{}, format byte)"
createFromMixed( ${1:data [][]interface{}}, ${2:format byte})
endsnippet

snippet createFromString "createFromString(data [][]string)"
createFromString( ${1:data [][]string})
endsnippet

snippet createIfNotExists "createIfNotExists(path string, isDir bool)"
createIfNotExists( ${1:path string}, ${2:isDir bool})
endsnippet

snippet createKeyValueNode "createKeyValueNode(input string)"
createKeyValueNode( ${1:input string})
endsnippet

snippet createNamedTestContainer "createNamedTestContainer(eng *engine.Engine, config *runconfig.Config, f Fataler, name string)"
createNamedTestContainer( ${1:eng *engine.Engine}, ${2:config *runconfig.Config}, ${3:f Fataler}, ${4:name string})
endsnippet

snippet createObjectNode "createObjectNode(input string)"
createObjectNode( ${1:input string})
endsnippet

snippet createParams "createParams(fn *Function, start int)"
createParams( ${1:fn *Function}, ${2:start int})
endsnippet

snippet createPemBlock "createPemBlock(name string, derBytes []byte, headers map[string]interface{})"
createPemBlock( ${1:name string}, ${2:derBytes []byte}, ${3:headers map[string]interface{}})
endsnippet

snippet createRecoverBlock "createRecoverBlock(f *Function)"
createRecoverBlock( ${1:f *Function})
endsnippet

snippet createRouter "createRouter(eng *engine.Engine, logging, enableCors bool, dockerVersion string)"
createRouter( ${1:eng *engine.Engine}, ${2:logging}, ${3:enableCors bool}, ${4:dockerVersion string})
endsnippet

snippet createRunningContainer "createRunningContainer(t *testing.T, name string)"
createRunningContainer( ${1:t *testing.T}, ${2:name string})
endsnippet

snippet createSampleDir "createSampleDir(t *testing.T, root string)"
createSampleDir( ${1:t *testing.T}, ${2:root string})
endsnippet

snippet createScript "createScript(text string, createPipes bool)"
createScript( ${1:text string}, ${2:createPipes bool})
endsnippet

snippet createScriptFile "createScriptFile(text string)"
createScriptFile( ${1:text string})
endsnippet

snippet createStringNode "createStringNode(input string)"
createStringNode( ${1:input string})
endsnippet

snippet createTarFile "createTarFile(path, extractDir string, hdr *tar.Header, reader io.Reader, Lchown bool)"
createTarFile( ${1:path}, ${2:extractDir string}, ${3:hdr *tar.Header}, ${4:reader io.Reader}, ${5:Lchown bool})
endsnippet

snippet createTarStream "createTarStream(srcPath string)"
createTarStream( ${1:srcPath string})
endsnippet

snippet createTestContainer "createTestContainer(eng *engine.Engine, config *runconfig.Config, f Fataler)"
createTestContainer( ${1:eng *engine.Engine}, ${2:config *runconfig.Config}, ${3:f Fataler})
endsnippet

snippet createTestImage "createTestImage(graph *graph.Graph, t *testing.T)"
createTestImage( ${1:graph *graph.Graph}, ${2:t *testing.T})
endsnippet

snippet createTestInput "createTestInput(n int)"
createTestInput( ${1:n int})
endsnippet

snippet createTestJSON "createTestJSON(sigKey string, indent string)"
createTestJSON( ${1:sigKey string}, ${2:indent string})
endsnippet

snippet createTestKeysAndGrants "createTestKeysAndGrants(count int)"
createTestKeysAndGrants( ${1:count int})
endsnippet

snippet createVethPair "createVethPair(prefix string, txQueueLen int)"
createVethPair( ${1:prefix string}, ${2:txQueueLen int})
endsnippet

snippet create_building "create_building(F_position_id string, F_type string, F_force_finish bool, conn *net.TCPConn, t *testing.T)"
create_building( ${1:F_position_id string}, ${2:F_type string}, ${3:F_force_finish bool}, ${4:conn *net.TCPConn}, ${5:t *testing.T})
endsnippet

snippet create_sock_flag "create_sock_flag(name, desc string)"
create_sock_flag( ${1:name}, ${2:desc string})
endsnippet

snippet crgb15Model "crgb15Model(c color.Color)"
crgb15Model( ${1:c color.Color})
endsnippet

snippet crgb16Model "crgb16Model(c color.Color)"
crgb16Model( ${1:c color.Color})
endsnippet

snippet cutSpace "cutSpace(b []byte)"
cutSpace( ${1:b []byte})
endsnippet

snippet cutoff "cutoff(e *ast.BinaryExpr, depth int)"
cutoff( ${1:e *ast.BinaryExpr}, ${2:depth int})
endsnippet

snippet daemon "daemon(eng *engine.Engine)"
daemon( ${1:eng *engine.Engine})
endsnippet

snippet dash "dash(meth, cmd string, args url.Values, req, resp interface{})"
dash( ${1:meth}, ${2:cmd string}, ${3:args url.Values}, ${4:req}, ${5:resp interface{}})
endsnippet

snippet dashCommits "dashCommits(c appengine.Context, pkg *Package, page int)"
dashCommits( ${1:c appengine.Context}, ${2:pkg *Package}, ${3:page int})
endsnippet

snippet dashPerfCommits "dashPerfCommits(c appengine.Context, page int)"
dashPerfCommits( ${1:c appengine.Context}, ${2:page int})
endsnippet

snippet dashboardCommit "dashboardCommit(pkg, hash string)"
dashboardCommit( ${1:pkg}, ${2:hash string})
endsnippet

snippet dashboardForRequest "dashboardForRequest(r *http.Request)"
dashboardForRequest( ${1:r *http.Request})
endsnippet

snippet dashboardPackages "dashboardPackages(kind string)"
dashboardPackages( ${1:kind string})
endsnippet

snippet dayMatches "dayMatches(s *SpecSchedule, t time.Time)"
dayMatches( ${1:s *SpecSchedule}, ${2:t time.Time})
endsnippet

snippet debug "debug(v ...interface{})"
debug( ${1:v ...interface{}})
endsnippet

snippet debugf "debugf(format string, args ...interface{})"
debugf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet debugln "debugln(v ...interface{})"
debugln( ${1:v ...interface{}})
endsnippet

snippet debugp "debugp(f string, a ...interface{})"
debugp( ${1:f string}, ${2:a ...interface{}})
endsnippet

snippet decContLens "decContLens(dd decDriver, currEncodedType valueType)"
decContLens( ${1:dd decDriver}, ${2:currEncodedType valueType})
endsnippet

snippet decErr "decErr(format string, params ...interface{})"
decErr( ${1:format string}, ${2:params ...interface{}})
endsnippet

snippet declExports "declExports(decl Decl)"
declExports( ${1:decl Decl})
endsnippet

snippet declImports "declImports(gen *ast.GenDecl, path string)"
declImports( ${1:gen *ast.GenDecl}, ${2:path string})
endsnippet

snippet declObj "declObj(kind ast.ObjKind, name string)"
declObj( ${1:kind ast.ObjKind}, ${2:name string})
endsnippet

snippet declPos "declPos(name string, decl ast.Node)"
declPos( ${1:name string}, ${2:decl ast.Node})
endsnippet

snippet declToken "declToken(decl ast.Decl)"
declToken( ${1:decl ast.Decl})
endsnippet

snippet declTypeName "declTypeName(pkg *types.Package, name string)"
declTypeName( ${1:pkg *types.Package}, ${2:name string})
endsnippet

snippet decode "decode(encoded string)"
decode( ${1:encoded string})
endsnippet

snippet decodeAPIClass "decodeAPIClass(d *msgpack.Decoder)"
decodeAPIClass( ${1:d *msgpack.Decoder})
endsnippet

snippet decodeAPIClassSlice "decodeAPIClassSlice(d *msgpack.Decoder)"
decodeAPIClassSlice( ${1:d *msgpack.Decoder})
endsnippet

snippet decodeAPIFunction "decodeAPIFunction(d *msgpack.Decoder)"
decodeAPIFunction( ${1:d *msgpack.Decoder})
endsnippet

snippet decodeAPIFunctionParameter "decodeAPIFunctionParameter(d *msgpack.Decoder)"
decodeAPIFunctionParameter( ${1:d *msgpack.Decoder})
endsnippet

snippet decodeAPIFunctionParameterSlice "decodeAPIFunctionParameterSlice(d *msgpack.Decoder)"
decodeAPIFunctionParameterSlice( ${1:d *msgpack.Decoder})
endsnippet

snippet decodeAPIFunctionSlice "decodeAPIFunctionSlice(d *msgpack.Decoder)"
decodeAPIFunctionSlice( ${1:d *msgpack.Decoder})
endsnippet

snippet decodeAuth "decodeAuth(authStr string)"
decodeAuth( ${1:authStr string})
endsnippet

snippet decodeDatastoreCursorValue "decodeDatastoreCursorValue(d *Decoder, v reflect.Value)"
decodeDatastoreCursorValue( ${1:d *Decoder}, ${2:v reflect.Value})
endsnippet

snippet decodeDatastoreKeyValue "decodeDatastoreKeyValue(d *Decoder, v reflect.Value)"
decodeDatastoreKeyValue( ${1:d *Decoder}, ${2:v reflect.Value})
endsnippet

snippet decodeDigit "decodeDigit(x byte)"
decodeDigit( ${1:x byte})
endsnippet

snippet decodeMap "decodeMap(d *Decoder)"
decodeMap( ${1:d *Decoder})
endsnippet

snippet decodeTime "decodeTime(bs []byte)"
decodeTime( ${1:bs []byte})
endsnippet

snippet decr "decr(x int)"
decr( ${1:x int})
endsnippet

snippet dedupPerfChanges "dedupPerfChanges(changes []*PerfChange)"
dedupPerfChanges( ${1:changes []*PerfChange})
endsnippet

snippet deepCopyInfo "deepCopyInfo(store *infoStore, t reflect.Type)"
deepCopyInfo( ${1:store *infoStore}, ${2:t reflect.Type})
endsnippet

snippet deepEqual "deepEqual(v1, v2 interface{})"
deepEqual( ${1:v1}, ${2:v2 interface{}})
endsnippet

snippet deepValueEqual "deepValueEqual(path string, v1, v2 reflect.Value, visited map[visit]bool, depth int)"
deepValueEqual( ${1:path string}, ${2:v1}, ${3:v2 reflect.Value}, ${4:visited map[visit]bool}, ${5:depth int})
endsnippet

snippet def "def(obj Object)"
def( ${1:obj Object})
endsnippet

snippet defaultRequest "defaultRequest(method string, urlStr string, body io.Reader, t *testing.T)"
defaultRequest( ${1:method string}, ${2:urlStr string}, ${3:body io.Reader}, ${4:t *testing.T})
endsnippet

snippet defaultType "defaultType(typ Type)"
defaultType( ${1:typ Type})
endsnippet

snippet defaultUsage "defaultUsage(f *FlagSet)"
defaultUsage( ${1:f *FlagSet})
endsnippet

snippet deferMutatesResults "deferMutatesResults(noArgReturn bool)"
deferMutatesResults( ${1:noArgReturn bool})
endsnippet

snippet definition "definition(o *Oracle, qpos *QueryPos)"
definition( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet delWorker "delWorker(workers []*Worker, worker *Worker)"
delWorker( ${1:workers []*Worker}, ${2:worker *Worker})
endsnippet

snippet delay "delay(stats []Stat)"
delay( ${1:stats []Stat})
endsnippet

snippet deleteBodies "deleteBodies(pkg *ssa.Package, except ...string)"
deleteBodies( ${1:pkg *ssa.Package}, ${2:except ...string})
endsnippet

snippet deleteContainer "deleteContainer(container string)"
deleteContainer( ${1:container string})
endsnippet

snippet deleteContainers "deleteContainers(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
deleteContainers( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet deleteImages "deleteImages(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
deleteImages( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet deleteImport "deleteImport(f *ast.File, path string)"
deleteImport( ${1:f *ast.File}, ${2:path string})
endsnippet

snippet deleteImportFn "deleteImportFn(path string)"
deleteImportFn( ${1:path string})
endsnippet

snippet deleteLink "deleteLink(t *testing.T, name string)"
deleteLink( ${1:t *testing.T}, ${2:name string})
endsnippet

snippet deleteUnreachableBlocks "deleteUnreachableBlocks(f *Function)"
deleteUnreachableBlocks( ${1:f *Function})
endsnippet

snippet delete_client_config "delete_client_config(w rest.ResponseWriter, r *rest.Request)"
delete_client_config( ${1:w rest.ResponseWriter}, ${2:r *rest.Request})
endsnippet

snippet delete_platform "delete_platform(w rest.ResponseWriter, r *rest.Request)"
delete_platform( ${1:w rest.ResponseWriter}, ${2:r *rest.Request})
endsnippet

snippet delgroup "delgroup(c cmd, conn *ec2.EC2, args []string)"
delgroup( ${1:c cmd}, ${2:conn *ec2.EC2}, ${3:args []string})
endsnippet

snippet dependencyGraph "dependencyGraph(objMap map[Object]*declInfo)"
dependencyGraph( ${1:objMap map[Object]*declInfo})
endsnippet

snippet depointer "depointer(x ast.Node)"
depointer( ${1:x ast.Node})
endsnippet

snippet deref "deref(typ types.Type)"
deref( ${1:typ types.Type})
endsnippet

snippet derefStructPtr "derefStructPtr(typ Type)"
derefStructPtr( ${1:typ Type})
endsnippet

snippet dereferenceAll "dereferenceAll(vs []interface{})"
dereferenceAll( ${1:vs []interface{}})
endsnippet

snippet describe "describe(o *Oracle, qpos *QueryPos)"
describe( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet describePackage "describePackage(o *Oracle, qpos *QueryPos, path []ast.Node)"
describePackage( ${1:o *Oracle}, ${2:qpos *QueryPos}, ${3:path []ast.Node})
endsnippet

snippet describeStmt "describeStmt(o *Oracle, qpos *QueryPos, path []ast.Node)"
describeStmt( ${1:o *Oracle}, ${2:qpos *QueryPos}, ${3:path []ast.Node})
endsnippet

snippet describeType "describeType(o *Oracle, qpos *QueryPos, path []ast.Node)"
describeType( ${1:o *Oracle}, ${2:qpos *QueryPos}, ${3:path []ast.Node})
endsnippet

snippet describeValue "describeValue(o *Oracle, qpos *QueryPos, path []ast.Node)"
describeValue( ${1:o *Oracle}, ${2:qpos *QueryPos}, ${3:path []ast.Node})
endsnippet

snippet destroyTestDb "destroyTestDb(dbPath string)"
destroyTestDb( ${1:dbPath string})
endsnippet

snippet destroy_building "destroy_building(conn *net.TCPConn, t *testing.T)"
destroy_building( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet detectJSONIndent "detectJSONIndent(jsonContent []byte)"
detectJSONIndent( ${1:jsonContent []byte})
endsnippet

snippet diff "diff(b1, b2 []byte)"
diff( ${1:b1}, ${2:b2 []byte})
endsnippet

snippet diffPrec "diffPrec(expr ast.Expr, prec int)"
diffPrec( ${1:expr ast.Expr}, ${2:prec int})
endsnippet

snippet digitVal "digitVal(ch rune)"
digitVal( ${1:ch rune})
endsnippet

snippet digraph "digraph(cmd string, args []string)"
digraph( ${1:cmd string}, ${2:args []string})
endsnippet

snippet dirFilter "dirFilter(f os.FileInfo)"
dirFilter( ${1:f os.FileInfo})
endsnippet

snippet dirHandler "dirHandler(w http.ResponseWriter, r *http.Request)"
dirHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet dirInfo "dirInfo(name string)"
dirInfo( ${1:name string})
endsnippet

snippet dirList "dirList(w io.Writer, name string)"
dirList( ${1:w io.Writer}, ${2:name string})
endsnippet

snippet dirToProject "dirToProject(dir string)"
dirToProject( ${1:dir string})
endsnippet

snippet dirUnpack "dirUnpack(b []byte)"
dirUnpack( ${1:b []byte})
endsnippet

snippet dirtostr "dirtostr(d *g9p.Dir)"
dirtostr( ${1:d *g9p.Dir})
endsnippet

snippet disabledHandler "disabledHandler(w http.ResponseWriter, r *http.Request)"
disabledHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet dispatchCopy "dispatchCopy(b *Builder, args []string, attributes map[string]bool, original string)"
dispatchCopy( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet dispatch_press "dispatch_press(ev *termbox.Event)"
dispatch_press( ${1:ev *termbox.Event})
endsnippet

snippet displayFdGoroutines "displayFdGoroutines(t *testing.T)"
displayFdGoroutines( ${1:t *testing.T})
endsnippet

snippet distance "distance(start int, goal int, col int)"
distance( ${1:start int}, ${2:goal int}, ${3:col int})
endsnippet

snippet dmGetLibraryVersionFct "dmGetLibraryVersionFct(version *string)"
dmGetLibraryVersionFct( ${1:version *string})
endsnippet

snippet dmGetNextTargetFct "dmGetNextTargetFct(task *CDmTask, next uintptr, start, length *uint64, target, params *string)"
dmGetNextTargetFct( ${1:task *CDmTask}, ${2:next uintptr}, ${3:start}, ${4:length *uint64}, ${5:target}, ${6:params *string})
endsnippet

snippet dmLogInitVerboseFct "dmLogInitVerboseFct(level int)"
dmLogInitVerboseFct( ${1:level int})
endsnippet

snippet dmSetDevDirFct "dmSetDevDirFct(dir string)"
dmSetDevDirFct( ${1:dir string})
endsnippet

snippet dmTaskAddTargetFct "dmTaskAddTargetFct(task *CDmTask,$/;"	f
dmTaskCreateFct	src/github.com/docker/docker/pkg/devicemapper/devmapper_wrapper.go	/^func dmTaskCreateFct(taskType int)"
dmTaskAddTargetFct( ${1:task *CDmTask}, ${2:$/;"	f
dmTaskCreateFct	src/github.com/docker/docker/pkg/devicemapper/devmapper_wrapper.go	/^func dmTaskCreateFct(taskType int})
endsnippet

snippet dmTaskDestroyFct "dmTaskDestroyFct(task *CDmTask)"
dmTaskDestroyFct( ${1:task *CDmTask})
endsnippet

snippet dmTaskGetDepsFct "dmTaskGetDepsFct(task *CDmTask)"
dmTaskGetDepsFct( ${1:task *CDmTask})
endsnippet

snippet dmTaskGetDriverVersionFct "dmTaskGetDriverVersionFct(task *CDmTask)"
dmTaskGetDriverVersionFct( ${1:task *CDmTask})
endsnippet

snippet dmTaskGetInfoFct "dmTaskGetInfoFct(task *CDmTask, info *Info)"
dmTaskGetInfoFct( ${1:task *CDmTask}, ${2:info *Info})
endsnippet

snippet dmTaskRunFct "dmTaskRunFct(task *CDmTask)"
dmTaskRunFct( ${1:task *CDmTask})
endsnippet

snippet dmTaskSetAddNodeFct "dmTaskSetAddNodeFct(task *CDmTask, addNode AddNodeType)"
dmTaskSetAddNodeFct( ${1:task *CDmTask}, ${2:addNode AddNodeType})
endsnippet

snippet dmTaskSetCookieFct "dmTaskSetCookieFct(task *CDmTask, cookie *uint, flags uint16)"
dmTaskSetCookieFct( ${1:task *CDmTask}, ${2:cookie *uint}, ${3:flags uint16})
endsnippet

snippet dmTaskSetMessageFct "dmTaskSetMessageFct(task *CDmTask, message string)"
dmTaskSetMessageFct( ${1:task *CDmTask}, ${2:message string})
endsnippet

snippet dmTaskSetNameFct "dmTaskSetNameFct(task *CDmTask, name string)"
dmTaskSetNameFct( ${1:task *CDmTask}, ${2:name string})
endsnippet

snippet dmTaskSetRoFct "dmTaskSetRoFct(task *CDmTask)"
dmTaskSetRoFct( ${1:task *CDmTask})
endsnippet

snippet dmTaskSetSectorFct "dmTaskSetSectorFct(task *CDmTask, sector uint64)"
dmTaskSetSectorFct( ${1:task *CDmTask}, ${2:sector uint64})
endsnippet

snippet dmUdevWaitFct "dmUdevWaitFct(cookie uint)"
dmUdevWaitFct( ${1:cookie uint})
endsnippet

snippet doBenchCheck "doBenchCheck(name string, encfn benchEncFn, decfn benchDecFn)"
doBenchCheck( ${1:name string}, ${2:encfn benchEncFn}, ${3:decfn benchDecFn})
endsnippet

snippet doBenchmark "doBenchmark(b *testing.B, formatter Formatter, fields Fields)"
doBenchmark( ${1:b *testing.B}, ${2:formatter Formatter}, ${3:fields Fields})
endsnippet

snippet doBenchmarkSendReceive "doBenchmarkSendReceive(b *testing.B, size int, addr string)"
doBenchmarkSendReceive( ${1:b *testing.B}, ${2:size int}, ${3:addr string})
endsnippet

snippet doCallgraph "doCallgraph(o *Oracle, qpos *QueryPos)"
doCallgraph( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet doInterfaceMembers "doInterfaceMembers(fields []*ast.Field, pkg string, importer Importer, fn func(*ast.Object)"
doInterfaceMembers( ${1:fields []*ast.Field}, ${2:pkg string}, ${3:importer Importer}, ${4:fn func(*ast.Object})
endsnippet

snippet doMembers "doMembers(typ Type, name string, importer Importer, fn func(*ast.Object)"
doMembers( ${1:typ Type}, ${2:name string}, ${3:importer Importer}, ${4:fn func(*ast.Object})
endsnippet

snippet doOneInput "doOneInput(input, filename string)"
doOneInput( ${1:input}, ${2:filename string})
endsnippet

snippet doOp "doOp(x Value, op token.Token, y Value)"
doOp( ${1:x Value}, ${2:op token.Token}, ${3:y Value})
endsnippet

snippet doPackage "doPackage(directory string, names []string)"
doPackage( ${1:directory string}, ${2:names []string})
endsnippet

snippet doPackageDir "doPackageDir(directory string)"
doPackageDir( ${1:directory string})
endsnippet

snippet doPanic "doPanic(tag string, format string, params []interface{})"
doPanic( ${1:tag string}, ${2:format string}, ${3:params []interface{}})
endsnippet

snippet doQuery "doQuery(out io.Writer, q *query, useJson bool)"
doQuery( ${1:out io.Writer}, ${2:q *query}, ${3:useJson bool})
endsnippet

snippet doRecover "doRecover(caller *frame)"
doRecover( ${1:caller *frame})
endsnippet

snippet doRequest "doRequest(req *http.Request, jar http.CookieJar, timeout TimeoutType, secure bool)"
doRequest( ${1:req *http.Request}, ${2:jar http.CookieJar}, ${3:timeout TimeoutType}, ${4:secure bool})
endsnippet

snippet doScan "doScan(a []interface{})"
doScan( ${1:a []interface{}})
endsnippet

snippet doScope "doScope(s *ast.Scope, name string, fn func(*ast.Object)"
doScope( ${1:s *ast.Scope}, ${2:name string}, ${3:fn func(*ast.Object})
endsnippet

snippet doStructMembers "doStructMembers(fields []*ast.Field, pkg string, importer Importer, fn func(*ast.Object)"
doStructMembers( ${1:fields []*ast.Field}, ${2:pkg string}, ${3:importer Importer}, ${4:fn func(*ast.Object})
endsnippet

snippet doTestCodecTableOne "doTestCodecTableOne(t *testing.T, testNil bool, h Handle,$/;"	f
doTestMsgpackPythonGenStreams	src/github.com/ugorji/go/codec/codecs_test.go	/^func doTestMsgpackPythonGenStreams(t *testing.T)"
doTestCodecTableOne( ${1:t *testing.T}, ${2:testNil bool}, ${3:h Handle}, ${4:$/;"	f
doTestMsgpackPythonGenStreams	src/github.com/ugorji/go/codec/codecs_test.go	/^func doTestMsgpackPythonGenStreams(t *testing.T})
endsnippet

snippet doTestMsgpackRpcSpecGoClientToPythonSvc "doTestMsgpackRpcSpecGoClientToPythonSvc(t *testing.T)"
doTestMsgpackRpcSpecGoClientToPythonSvc( ${1:t *testing.T})
endsnippet

snippet doTestMsgpackRpcSpecPythonClientToGoSvc "doTestMsgpackRpcSpecPythonClientToGoSvc(t *testing.T)"
doTestMsgpackRpcSpecPythonClientToGoSvc( ${1:t *testing.T})
endsnippet

snippet doTestMsgpacks "doTestMsgpacks(t *testing.T, testNil bool, opts DecoderContainerResolver, \/\/ *DecoderOptions DecoderContainerResolver,	$/;"	f
doTestRpcOne	src/github.com/ugorji/go/codec/codecs_test.go	/^func doTestRpcOne(t *testing.T, rr Rpc, h Handle, doRequest bool, exitSleepMs time.Duration,$/;"	f
doTypeInfo	src/code.google.com/p/go.tools/godoc/analysis/typeinfo.go	/^func (a *analysis)"
doTestMsgpacks( ${1:t *testing.T}, ${2:testNil bool}, ${3:opts DecoderContainerResolver}, ${4:\/\/ *DecoderOptions DecoderContainerResolver}, ${5:$/;"	f
doTestRpcOne	src/github.com/ugorji/go/codec/codecs_test.go	/^func doTestRpcOne(t *testing.T}, ${6:rr Rpc}, ${7:h Handle}, ${8:doRequest bool}, ${9:exitSleepMs time.Duration}, ${10:$/;"	f
doTypeInfo	src/code.google.com/p/go.tools/godoc/analysis/typeinfo.go	/^func (a *analysis})
endsnippet

snippet doTypeMembers "doTypeMembers(t Type, name string, importer Importer, fn func(*ast.Object)"
doTypeMembers( ${1:t Type}, ${2:name string}, ${3:importer Importer}, ${4:fn func(*ast.Object})
endsnippet

snippet docLinkFunc "docLinkFunc(s string, ident string)"
docLinkFunc( ${1:s string}, ${2:ident string})
endsnippet

snippet dockerCmd "dockerCmd(t *testing.T, args ...string)"
dockerCmd( ${1:t *testing.T}, ${2:args ...string})
endsnippet

snippet dockerCmdInDir "dockerCmdInDir(t *testing.T, path string, args ...string)"
dockerCmdInDir( ${1:t *testing.T}, ${2:path string}, ${3:args ...string})
endsnippet

snippet dockerCmdInDirWithTimeout "dockerCmdInDirWithTimeout(timeout time.Duration, path string, args ...string)"
dockerCmdInDirWithTimeout( ${1:timeout time.Duration}, ${2:path string}, ${3:args ...string})
endsnippet

snippet dockerCmdWithTimeout "dockerCmdWithTimeout(timeout time.Duration, args ...string)"
dockerCmdWithTimeout( ${1:timeout time.Duration}, ${2:args ...string})
endsnippet

snippet dockerInitSha1 "dockerInitSha1(target string)"
dockerInitSha1( ${1:target string})
endsnippet

snippet dockerVersion "dockerVersion(job *engine.Job)"
dockerVersion( ${1:job *engine.Job})
endsnippet

snippet doellipse "doellipse(cmd byte, dst *Image, c image.Point, xr, yr, thick int, src *Image, sp image.Point, alpha uint32, phi int, op Op)"
doellipse( ${1:cmd byte}, ${2:dst *Image}, ${3:c image.Point}, ${4:xr}, ${5:yr}, ${6:thick int}, ${7:src *Image}, ${8:sp image.Point}, ${9:alpha uint32}, ${10:phi int}, ${11:op Op})
endsnippet

snippet done "done(obj *ast.Object, typ types.Type)"
done( ${1:obj *ast.Object}, ${2:typ types.Type})
endsnippet

snippet dopoly "dopoly(cmd byte, dst *Image, pp []image.Point, end0, end1, radius int, src *Image, sp image.Point, op Op)"
dopoly( ${1:cmd byte}, ${2:dst *Image}, ${3:pp []image.Point}, ${4:end0}, ${5:end1}, ${6:radius int}, ${7:src *Image}, ${8:sp image.Point}, ${9:op Op})
endsnippet

snippet downLink "downLink(t *testing.T, name string)"
downLink( ${1:t *testing.T}, ${2:name string})
endsnippet

snippet downloadPackage "downloadPackage(ctx *cli.Context, n *doc.Node)"
downloadPackage( ${1:ctx *cli.Context}, ${2:n *doc.Node})
endsnippet

snippet downloadPackages "downloadPackages(target string, ctx *cli.Context, nodes []*doc.Node)"
downloadPackages( ${1:target string}, ${2:ctx *cli.Context}, ${3:nodes []*doc.Node})
endsnippet

snippet dragRect "dragRect(cvs *canvas.Canvas, m draw.Mouse, mc <-chan draw.Mouse)"
dragRect( ${1:cvs *canvas.Canvas}, ${2:m draw.Mouse}, ${3:mc <-chan draw.Mouse})
endsnippet

snippet draw "draw(dst *Image, r image.Rectangle, src *Image, p0 image.Point, mask *Image, p1 image.Point, op Op)"
draw( ${1:dst *Image}, ${2:r image.Rectangle}, ${3:src *Image}, ${4:p0 image.Point}, ${5:mask *Image}, ${6:p1 image.Point}, ${7:op Op})
endsnippet

snippet draw2realPoint "draw2realPoint(p image.Point)"
draw2realPoint( ${1:p image.Point})
endsnippet

snippet drawCopyOver "drawCopyOver(dst *image.RGBA, r Rectangle, src *image.RGBA, sp Point)"
drawCopyOver( ${1:dst *image.RGBA}, ${2:r Rectangle}, ${3:src *image.RGBA}, ${4:sp Point})
endsnippet

snippet drawCopySrc "drawCopySrc(dst *image.RGBA, r Rectangle, src *image.RGBA, sp Point)"
drawCopySrc( ${1:dst *image.RGBA}, ${2:r Rectangle}, ${3:src *image.RGBA}, ${4:sp Point})
endsnippet

snippet drawFillOver "drawFillOver(dst *image.RGBA, r Rectangle, src image.Uniform)"
drawFillOver( ${1:dst *image.RGBA}, ${2:r Rectangle}, ${3:src image.Uniform})
endsnippet

snippet drawFillSrc "drawFillSrc(dst *image.RGBA, r Rectangle, src image.Uniform)"
drawFillSrc( ${1:dst *image.RGBA}, ${2:r Rectangle}, ${3:src image.Uniform})
endsnippet

snippet drawGlyphOver "drawGlyphOver(dst *image.RGBA, r Rectangle, src image.Uniform, mask *image.Alpha, mp Point)"
drawGlyphOver( ${1:dst *image.RGBA}, ${2:r Rectangle}, ${3:src image.Uniform}, ${4:mask *image.Alpha}, ${5:mp Point})
endsnippet

snippet drawRGBA "drawRGBA(dst *image.RGBA, r Rectangle, src image.Image, sp Point, mask image.Image, mp Point, op Op)"
drawRGBA( ${1:dst *image.RGBA}, ${2:r Rectangle}, ${3:src image.Image}, ${4:sp Point}, ${5:mask image.Image}, ${6:mp Point}, ${7:op Op})
endsnippet

snippet draw_key "draw_key(k []key, fg, bg termbox.Attribute)"
draw_key( ${1:k []key}, ${2:fg}, ${3:bg termbox.Attribute})
endsnippet

snippet drawsq "drawsq(b *draw.Image, p image.Point, ptx int)"
drawsq( ${1:b *draw.Image}, ${2:p image.Point}, ${3:ptx int})
endsnippet

snippet drop "drop(f bool)"
drop( ${1:f bool})
endsnippet

snippet dummyTraverser "dummyTraverser(fv reflect.Value, xv reflect.Value)"
dummyTraverser( ${1:fv reflect.Value}, ${2:xv reflect.Value})
endsnippet

snippet dump "dump(n *Node)"
dump( ${1:n *Node})
endsnippet

snippet dumpIndent "dumpIndent(w io.Writer, level int)"
dumpIndent( ${1:w io.Writer}, ${2:level int})
endsnippet

snippet dumpLevel "dumpLevel(w io.Writer, n *Node, level int)"
dumpLevel( ${1:w io.Writer}, ${2:n *Node}, ${3:level int})
endsnippet

snippet dumpsome "dumpsome(b []byte)"
dumpsome( ${1:b []byte})
endsnippet

snippet dup "dup(s string)"
dup( ${1:s string})
endsnippet

snippet dupok "dupok(x int)"
dupok( ${1:x int})
endsnippet

snippet eachName "eachName(longName string, fn func(string)"
eachName( ${1:longName string}, ${2:fn func(string})
endsnippet

snippet eatLines "eatLines(scan *bufio.Scanner, prefix string, n int)"
eatLines( ${1:scan *bufio.Scanner}, ${2:prefix string}, ${3:n int})
endsnippet

snippet ecPrivateKeyFromMap "ecPrivateKeyFromMap(jwk map[string]interface{})"
ecPrivateKeyFromMap( ${1:jwk map[string]interface{}})
endsnippet

snippet ecPublicKeyFromMap "ecPublicKeyFromMap(jwk map[string]interface{})"
ecPublicKeyFromMap( ${1:jwk map[string]interface{}})
endsnippet

snippet echo "echo(socket *zmq.Socket)"
echo( ${1:socket *zmq.Socket})
endsnippet

snippet echoServer "echoServer(ws *Conn)"
echoServer( ${1:ws *Conn})
endsnippet

snippet eliminate "eliminate(t *testing.T, errmap map[string][]string, errlist []error)"
eliminate( ${1:t *testing.T}, ${2:errmap map[string][]string}, ${3:errlist []error})
endsnippet

snippet emitArith "emitArith(f *Function, op token.Token, x, y Value, t types.Type, pos token.Pos)"
emitArith( ${1:f *Function}, ${2:op token.Token}, ${3:x}, ${4:y Value}, ${5:t types.Type}, ${6:pos token.Pos})
endsnippet

snippet emitCompare "emitCompare(f *Function, op token.Token, x, y Value, pos token.Pos)"
emitCompare( ${1:f *Function}, ${2:op token.Token}, ${3:x}, ${4:y Value}, ${5:pos token.Pos})
endsnippet

snippet emitConv "emitConv(f *Function, val Value, typ types.Type)"
emitConv( ${1:f *Function}, ${2:val Value}, ${3:typ types.Type})
endsnippet

snippet emitDebugRef "emitDebugRef(f *Function, e ast.Expr, v Value, isAddr bool)"
emitDebugRef( ${1:f *Function}, ${2:e ast.Expr}, ${3:v Value}, ${4:isAddr bool})
endsnippet

snippet emitExtract "emitExtract(f *Function, tuple Value, index int)"
emitExtract( ${1:f *Function}, ${2:tuple Value}, ${3:index int})
endsnippet

snippet emitFieldSelection "emitFieldSelection(f *Function, v Value, index int, wantAddr bool, id *ast.Ident)"
emitFieldSelection( ${1:f *Function}, ${2:v Value}, ${3:index int}, ${4:wantAddr bool}, ${5:id *ast.Ident})
endsnippet

snippet emitIf "emitIf(f *Function, cond Value, tblock, fblock *BasicBlock)"
emitIf( ${1:f *Function}, ${2:cond Value}, ${3:tblock}, ${4:fblock *BasicBlock})
endsnippet

snippet emitImplicitSelections "emitImplicitSelections(f *Function, v Value, indices []int)"
emitImplicitSelections( ${1:f *Function}, ${2:v Value}, ${3:indices []int})
endsnippet

snippet emitJump "emitJump(f *Function, target *BasicBlock)"
emitJump( ${1:f *Function}, ${2:target *BasicBlock})
endsnippet

snippet emitLoad "emitLoad(f *Function, addr Value)"
emitLoad( ${1:f *Function}, ${2:addr Value})
endsnippet

snippet emitMemClear "emitMemClear(f *Function, ptr Value)"
emitMemClear( ${1:f *Function}, ${2:ptr Value})
endsnippet

snippet emitNew "emitNew(f *Function, typ types.Type, pos token.Pos)"
emitNew( ${1:f *Function}, ${2:typ types.Type}, ${3:pos token.Pos})
endsnippet

snippet emitStore "emitStore(f *Function, addr, val Value)"
emitStore( ${1:f *Function}, ${2:addr}, ${3:val Value})
endsnippet

snippet emitTailCall "emitTailCall(f *Function, call *Call)"
emitTailCall( ${1:f *Function}, ${2:call *Call})
endsnippet

snippet emitTypeAssert "emitTypeAssert(f *Function, x Value, t types.Type, pos token.Pos)"
emitTypeAssert( ${1:f *Function}, ${2:x Value}, ${3:t types.Type}, ${4:pos token.Pos})
endsnippet

snippet emitTypeTest "emitTypeTest(f *Function, x Value, t types.Type, pos token.Pos)"
emitTypeTest( ${1:f *Function}, ${2:x Value}, ${3:t types.Type}, ${4:pos token.Pos})
endsnippet

snippet empty "empty(t *testing.T, testname string, buf *Buffer, s string, fub []byte)"
empty( ${1:t *testing.T}, ${2:testname string}, ${3:buf *Buffer}, ${4:s string}, ${5:fub []byte})
endsnippet

snippet emptyTarSum "emptyTarSum(gzip bool)"
emptyTarSum( ${1:gzip bool})
endsnippet

snippet encErr "encErr(format string, params ...interface{})"
encErr( ${1:format string}, ${2:params ...interface{}})
endsnippet

snippet encode "encode(prefix, s string)"
encode( ${1:prefix}, ${2:s string})
endsnippet

snippet encodeAuth "encodeAuth(authConfig *AuthConfig)"
encodeAuth( ${1:authConfig *AuthConfig})
endsnippet

snippet encodeDatastoreCursorValue "encodeDatastoreCursorValue(e *Encoder, v reflect.Value)"
encodeDatastoreCursorValue( ${1:e *Encoder}, ${2:v reflect.Value})
endsnippet

snippet encodeDatastoreKeyValue "encodeDatastoreKeyValue(e *Encoder, v reflect.Value)"
encodeDatastoreKeyValue( ${1:e *Encoder}, ${2:v reflect.Value})
endsnippet

snippet encodeDigit "encodeDigit(digit int32)"
encodeDigit( ${1:digit int32})
endsnippet

snippet encodeTime "encodeTime(t time.Time)"
encodeTime( ${1:t time.Time})
endsnippet

snippet ensureMountedAs "ensureMountedAs(mountPoint, options string)"
ensureMountedAs( ${1:mountPoint}, ${2:options string})
endsnippet

snippet ensureNotPointer "ensureNotPointer(obj interface{})"
ensureNotPointer( ${1:obj interface{}})
endsnippet

snippet entrypoint "entrypoint(b *Builder, args []string, attributes map[string]bool, original string)"
entrypoint( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet env "env(b *Builder, args []string, attributes map[string]bool, original string)"
env( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet envForDir "envForDir(dir string)"
envForDir( ${1:dir string})
endsnippet

snippet envList "envList(key, def string)"
envList( ${1:key}, ${2:def string})
endsnippet

snippet environ "environ(vars ...string)"
environ( ${1:vars ...string})
endsnippet

snippet eofNilError "eofNilError(err error)"
eofNilError( ${1:err error})
endsnippet

snippet eq "eq(c0, c1 color.Color)"
eq( ${1:c0}, ${2:c1 color.Color})
endsnippet

snippet eqPtr "eqPtr(x, y interface{})"
eqPtr( ${1:x}, ${2:y interface{}})
endsnippet

snippet eql "eql(x, y Value)"
eql( ${1:x}, ${2:y Value})
endsnippet

snippet eqnil "eqnil(t types.Type, x, y value)"
eqnil( ${1:t types.Type}, ${2:x}, ${3:y value})
endsnippet

snippet equals "equals(t types.Type, x, y value)"
equals( ${1:t types.Type}, ${2:x}, ${3:y value})
endsnippet

snippet errMap "errMap(t *testing.T, testname string, files []*ast.File)"
errMap( ${1:t *testing.T}, ${2:testname string}, ${3:files []*ast.File})
endsnippet

snippet errget "errget(err error)"
errget( ${1:err error})
endsnippet

snippet errgoCause "errgoCause(f *ast.File)"
errgoCause( ${1:f *ast.File})
endsnippet

snippet errgoMask "errgoMask(f *ast.File)"
errgoMask( ${1:f *ast.File})
endsnippet

snippet errgoNew "errgoNew(f *ast.File)"
errgoNew( ${1:f *ast.File})
endsnippet

snippet errorHandler "errorHandler(err *error)"
errorHandler( ${1:err *error})
endsnippet

snippet errorf "errorf(format string, args ...interface{})"
errorf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet errors "errors(stats []Stat)"
errors( ${1:stats []Stat})
endsnippet

snippet escape "escape(w writer, s string)"
escape( ${1:w writer}, ${2:s string})
endsnippet

snippet escapeFstabSpaces "escapeFstabSpaces(field string)"
escapeFstabSpaces( ${1:field string})
endsnippet

snippet escapeName "escapeName(name string)"
escapeName( ${1:name string})
endsnippet

snippet escapedPath "escapedPath(urlObj *url.URL)"
escapedPath( ${1:urlObj *url.URL})
endsnippet

snippet escapedPathExp "escapedPathExp(pathExp string)"
escapedPathExp( ${1:pathExp string})
endsnippet

snippet evalSymlinksInScope "evalSymlinksInScope(path, root string)"
evalSymlinksInScope( ${1:path}, ${2:root string})
endsnippet

snippet evenOddAlternate "evenOddAlternate(until int)"
evenOddAlternate( ${1:until int})
endsnippet

snippet evenUntil "evenUntil(space int)"
evenUntil( ${1:space int})
endsnippet

snippet eventCallback "eventCallback(a unsafe.Pointer)"
eventCallback( ${1:a unsafe.Pointer})
endsnippet

snippet events "events(w *acme.Win)"
events( ${1:w *acme.Win})
endsnippet

snippet example "example(n int)"
example( ${1:n int})
endsnippet

snippet execAction "execAction(context *cli.Context)"
execAction( ${1:context *cli.Context})
endsnippet

snippet execCmd "execCmd(gopath, curPath string, args ...string)"
execCmd( ${1:gopath}, ${2:curPath string}, ${3:args ...string})
endsnippet

snippet execTemplate "execTemplate(t *template.Template, name string, data interface{})"
execTemplate( ${1:t *template.Template}, ${2:name string}, ${3:data interface{}})
endsnippet

snippet exists "exists(filename string)"
exists( ${1:filename string})
endsnippet

snippet exitsZero "exitsZero(exitcode int, _ string)"
exitsZero( ${1:exitcode int}, ${2:_ string})
endsnippet

snippet expand "expand(match map[string]string, s string)"
expand( ${1:match map[string]string}, ${2:s string})
endsnippet

snippet expect "expect(t *testing.T, a interface{}, b interface{})"
expect( ${1:t *testing.T}, ${2:a interface{}}, ${3:b interface{}})
endsnippet

snippet expectBlkioStatsEquals "expectBlkioStatsEquals(t *testing.T, expected, actual cgroups.BlkioStats)"
expectBlkioStatsEquals( ${1:t *testing.T}, ${2:expected}, ${3:actual cgroups.BlkioStats})
endsnippet

snippet expectMemoryStatEquals "expectMemoryStatEquals(t *testing.T, expected, actual cgroups.MemoryStats)"
expectMemoryStatEquals( ${1:t *testing.T}, ${2:expected}, ${3:actual cgroups.MemoryStats})
endsnippet

snippet expectPipe "expectPipe(expected string, r io.Reader)"
expectPipe( ${1:expected string}, ${2:r io.Reader})
endsnippet

snippet expectThrottlingDataEquals "expectThrottlingDataEquals(t *testing.T, expected, actual cgroups.ThrottlingData)"
expectThrottlingDataEquals( ${1:t *testing.T}, ${2:expected}, ${3:actual cgroups.ThrottlingData})
endsnippet

snippet expectation "expectation(f *ast.File)"
expectation( ${1:f *ast.File})
endsnippet

snippet exported "exported(name string)"
exported( ${1:name string})
endsnippet

snippet exportedMethod "exportedMethod(v interface{}, name string)"
exportedMethod( ${1:v interface{}}, ${2:name string})
endsnippet

snippet exportedType "exportedType(typ types.Type)"
exportedType( ${1:typ types.Type})
endsnippet

snippet expose "expose(b *Builder, args []string, attributes map[string]bool, original string)"
expose( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet expr "expr(s string)"
expr( ${1:s string})
endsnippet

snippet exprName "exprName(typ interface{})"
exprName( ${1:typ interface{}})
endsnippet

snippet exprType "exprType(n ast.Node, expectTuple bool, pkg string, importer Importer)"
exprType( ${1:n ast.Node}, ${2:expectTuple bool}, ${3:pkg string}, ${4:importer Importer})
endsnippet

snippet expr_to_decl "expr_to_decl(e ast.Expr, scope *scope)"
expr_to_decl( ${1:e ast.Expr}, ${2:scope *scope})
endsnippet

snippet exprsToIdents "exprsToIdents(exprs []ast.Expr)"
exprsToIdents( ${1:exprs []ast.Expr})
endsnippet

snippet expvarHandler "expvarHandler(w http.ResponseWriter, r *http.Request)"
expvarHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet extraRolls "extraRolls(n int)"
extraRolls( ${1:n int})
endsnippet

snippet extractFile "extractFile(f *zip.File, destPath string)"
extractFile( ${1:f *zip.File}, ${2:destPath string})
endsnippet

snippet extractMetadata "extractMetadata(b []byte)"
extractMetadata( ${1:b []byte})
endsnippet

snippet extract_event "extract_event(event *Event)"
extract_event( ${1:event *Event})
endsnippet

snippet f "f(x interface{})"
f( ${1:x interface{}})
endsnippet

snippet f1 "f1(c C)"
f1( ${1:c C})
endsnippet

snippet f1v "f1v(x int, v ...int)"
f1v( ${1:x int}, ${2:v ...int})
endsnippet

snippet f2 "f2(c *C)"
f2( ${1:c *C})
endsnippet

snippet f2v "f2v(x, y int, v ...int)"
f2v( ${1:x}, ${2:y int}, ${3:v ...int})
endsnippet

snippet f3 "f3(d D)"
f3( ${1:d D})
endsnippet

snippet f4 "f4(d *D)"
f4( ${1:d *D})
endsnippet

snippet fail "fail(tok *scanner.Scanner, f string, a ...interface{})"
fail( ${1:tok *scanner.Scanner}, ${2:f string}, ${3:a ...interface{}})
endsnippet

snippet failMode "failMode(builders []*Builder)"
failMode( ${1:builders []*Builder})
endsnippet

snippet failT "failT(t *testing.T)"
failT( ${1:t *testing.T})
endsnippet

snippet failuresHandler "failuresHandler(w http.ResponseWriter, r *http.Request, data *uiTemplateData)"
failuresHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request}, ${3:data *uiTemplateData})
endsnippet

snippet fakeContext "fakeContext(pkgs map[string]string)"
fakeContext( ${1:pkgs map[string]string})
endsnippet

snippet fakeGIT "fakeGIT(name string, files map[string]string)"
fakeGIT( ${1:name string}, ${2:files map[string]string})
endsnippet

snippet fakeStorage "fakeStorage(files map[string]string)"
fakeStorage( ${1:files map[string]string})
endsnippet

snippet fastQueryPos "fastQueryPos(posFlag string)"
fastQueryPos( ${1:posFlag string})
endsnippet

snippet fatal "fatal(msg interface{})"
fatal( ${1:msg interface{}})
endsnippet

snippet fatalf "fatalf(format string, args ...interface{})"
fatalf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet fcntl "fcntl(fd int, cmd int, arg int)"
fcntl( ${1:fd int}, ${2:cmd int}, ${3:arg int})
endsnippet

snippet fetchMeta "fetchMeta(client *http.Client, importPath string)"
fetchMeta( ${1:client *http.Client}, ${2:importPath string})
endsnippet

snippet ffjson_WriteJsonString "ffjson_WriteJsonString(buf *bytes.Buffer, s string)"
ffjson_WriteJsonString( ${1:buf *bytes.Buffer}, ${2:s string})
endsnippet

snippet fib "fib(x int)"
fib( ${1:x int})
endsnippet

snippet fibgen "fibgen(ch chan int)"
fibgen( ${1:ch chan int})
endsnippet

snippet fieldIndex "fieldIndex(fields []*Var, pkg *Package, name string)"
fieldIndex( ${1:fields []*Var}, ${2:pkg *Package}, ${3:name string})
endsnippet

snippet fieldListExports "fieldListExports(fields *FieldList)"
fieldListExports( ${1:fields *FieldList})
endsnippet

snippet fieldName "fieldName(x Expr)"
fieldName( ${1:x Expr})
endsnippet

snippet fields "fields(s string)"
fields( ${1:s string})
endsnippet

snippet fields2type "fields2type(fields *ast.FieldList)"
fields2type( ${1:fields *ast.FieldList})
endsnippet

snippet fileInfo "fileInfo(name, contents string)"
fileInfo( ${1:name}, ${2:contents string})
endsnippet

snippet fileInfoNameFunc "fileInfoNameFunc(fi os.FileInfo)"
fileInfoNameFunc( ${1:fi os.FileInfo})
endsnippet

snippet fileInfoTimeFunc "fileInfoTimeFunc(fi os.FileInfo)"
fileInfoTimeFunc( ${1:fi os.FileInfo})
endsnippet

snippet fileServer "fileServer(files map[string]string)"
fileServer( ${1:files map[string]string})
endsnippet

snippet file_exists "file_exists(filename string)"
file_exists( ${1:filename string})
endsnippet

snippet file_package_name "file_package_name(filename string)"
file_package_name( ${1:filename string})
endsnippet

snippet filename "filename(p string)"
filename( ${1:p string})
endsnippet

snippet filenameFunc "filenameFunc(path string)"
filenameFunc( ${1:path string})
endsnippet

snippet fill "fill(x, y, w, h int, cell termbox.Cell)"
fill( ${1:x}, ${2:y}, ${3:w}, ${4:h int}, ${5:cell termbox.Cell})
endsnippet

snippet fillAlpha "fillAlpha(alpha int)"
fillAlpha( ${1:alpha int})
endsnippet

snippet fillBlue "fillBlue(alpha int)"
fillBlue( ${1:alpha int})
endsnippet

snippet fillBytes "fillBytes(t *testing.T, testname string, buf *Buffer, s string, n int, fub []byte)"
fillBytes( ${1:t *testing.T}, ${2:testname string}, ${3:buf *Buffer}, ${4:s string}, ${5:n int}, ${6:fub []byte})
endsnippet

snippet fillStat "fillStat(st *syscall.Stat_t, stat structure)"
fillStat( ${1:st *syscall.Stat_t}, ${2:stat structure})
endsnippet

snippet fillString "fillString(t *testing.T, testname string, buf *Buffer, s string, n int, fus string)"
fillString( ${1:t *testing.T}, ${2:testname string}, ${3:buf *Buffer}, ${4:s string}, ${5:n int}, ${6:fus string})
endsnippet

snippet fill_console_output_attribute "fill_console_output_attribute(h syscall.Handle, attr word, n int)"
fill_console_output_attribute( ${1:h syscall.Handle}, ${2:attr word}, ${3:n int})
endsnippet

snippet fill_console_output_character "fill_console_output_character(h syscall.Handle, char wchar, n int)"
fill_console_output_character( ${1:h syscall.Handle}, ${2:char wchar}, ${3:n int})
endsnippet

snippet filterFieldList "filterFieldList(fields *FieldList, filter Filter)"
filterFieldList( ${1:fields *FieldList}, ${2:filter Filter})
endsnippet

snippet filterIdentList "filterIdentList(list []*Ident, f Filter)"
filterIdentList( ${1:list []*Ident}, ${2:f Filter})
endsnippet

snippet filterInfo "filterInfo(args []string, info *PageInfo)"
filterInfo( ${1:args []string}, ${2:info *PageInfo})
endsnippet

snippet filterMouseEvents "filterMouseEvents(ec <-chan interface{}, mc chan<- draw.MouseEvent)"
filterMouseEvents( ${1:ec <-chan interface{}}, ${2:mc chan<- draw.MouseEvent})
endsnippet

snippet filterSpec "filterSpec(spec Spec, f Filter)"
filterSpec( ${1:spec Spec}, ${2:f Filter})
endsnippet

snippet filterSpecList "filterSpecList(list []Spec, f Filter)"
filterSpecList( ${1:list []Spec}, ${2:f Filter})
endsnippet

snippet filter_out_shebang "filter_out_shebang(data []byte)"
filter_out_shebang( ${1:data []byte})
endsnippet

snippet final1a "final1a(x *int)"
final1a( ${1:x *int})
endsnippet

snippet final1b "final1b(x *bool)"
final1b( ${1:x *bool})
endsnippet

snippet final2a "final2a(x *bool)"
final2a( ${1:x *bool})
endsnippet

snippet final2b "final2b(x *bool)"
final2b( ${1:x *bool})
endsnippet

snippet final4 "final4(x *int)"
final4( ${1:x *int})
endsnippet

snippet finalizeFile "finalizeFile(file *GridFile)"
finalizeFile( ${1:file *GridFile})
endsnippet

snippet finalizeNamespace "finalizeNamespace(args *InitArgs)"
finalizeNamespace( ${1:args *InitArgs})
endsnippet

snippet find "find(label string, lo, hi uint32)"
find( ${1:label string}, ${2:lo}, ${3:hi uint32})
endsnippet

snippet findAll "findAll(node *html.Node, fn selector)"
findAll( ${1:node *html.Node}, ${2:fn selector})
endsnippet

snippet findCallSite "findCallSite(fn *ssa.Function, lparen token.Pos)"
findCallSite( ${1:fn *ssa.Function}, ${2:lparen token.Pos})
endsnippet

snippet findCallees "findCallees(o *Oracle, site ssa.CallInstruction)"
findCallees( ${1:o *Oracle}, ${2:site ssa.CallInstruction})
endsnippet

snippet findContainerIP "findContainerIP(t *testing.T, id string)"
findContainerIP( ${1:t *testing.T}, ${2:id string})
endsnippet

snippet findDepInfo "findDepInfo(dir string, infoByDir map[string][]*depInfo)"
findDepInfo( ${1:dir string}, ${2:infoByDir map[string][]*depInfo})
endsnippet

snippet findDuplicate "findDuplicate(blocks []*BasicBlock)"
findDuplicate( ${1:blocks []*BasicBlock})
endsnippet

snippet findEnclosingPackageLevelFunction "findEnclosingPackageLevelFunction(pkg *Package, path []ast.Node)"
findEnclosingPackageLevelFunction( ${1:pkg *Package}, ${2:path []ast.Node})
endsnippet

snippet findExportFile "findExportFile(searchpaths []string, pkgpath string)"
findExportFile( ${1:searchpaths []string}, ${2:pkgpath string})
endsnippet

snippet findFile "findFile(file string)"
findFile( ${1:file string})
endsnippet

snippet findFixture "findFixture(target string, t *testing.T)"
findFixture( ${1:target string}, ${2:t *testing.T})
endsnippet

snippet findFreePort "findFreePort(t *testing.T)"
findFreePort( ${1:t *testing.T})
endsnippet

snippet findFromObjects "findFromObjects(iprog *loader.Program, spec *spec)"
findFromObjects( ${1:iprog *loader.Program}, ${2:spec *spec})
endsnippet

snippet findFromObjectsInFile "findFromObjectsInFile(iprog *loader.Program, spec *spec)"
findFromObjectsInFile( ${1:iprog *loader.Program}, ${2:spec *spec})
endsnippet

snippet findFuncs "findFuncs(name string)"
findFuncs( ${1:name string})
endsnippet

snippet findIdentifier "findIdentifier(f *ast.File, searchpos int)"
findIdentifier( ${1:f *ast.File}, ${2:searchpos int})
endsnippet

snippet findImportGoPath "findImportGoPath(pkgName string, symbols map[string]bool)"
findImportGoPath( ${1:pkgName string}, ${2:symbols map[string]bool})
endsnippet

snippet findImportStdlib "findImportStdlib(shortPkg string, symbols map[string]bool)"
findImportStdlib( ${1:shortPkg string}, ${2:symbols map[string]bool})
endsnippet

snippet findImports "findImports(packageName string, allPkgs map[string][]string)"
findImports( ${1:packageName string}, ${2:allPkgs map[string][]string})
endsnippet

snippet findInterestingNode "findInterestingNode(pkginfo *loader.PackageInfo, path []ast.Node)"
findInterestingNode( ${1:pkginfo *loader.PackageInfo}, ${2:path []ast.Node})
endsnippet

snippet findInterval "findInterval(t *testing.T, fset *token.FileSet, input, substr string)"
findInterval( ${1:t *testing.T}, ${2:fset *token.FileSet}, ${3:input}, ${4:substr string})
endsnippet

snippet findMatching "findMatching(s string, left, right rune)"
findMatching( ${1:s string}, ${2:left}, ${3:right rune})
endsnippet

snippet findMetric "findMetric(c *perfChangesCommit, metric string)"
findMetric( ${1:c *perfChangesCommit}, ${2:metric string})
endsnippet

snippet findMode "findMode(mode string)"
findMode( ${1:mode string})
endsnippet

snippet findNamedFunc "findNamedFunc(pkg *Package, pos token.Pos)"
findNamedFunc( ${1:pkg *Package}, ${2:pos token.Pos})
endsnippet

snippet findObjects "findObjects(info *loader.PackageInfo, spec *spec)"
findObjects( ${1:info *loader.PackageInfo}, ${2:spec *spec})
endsnippet

snippet findOp "findOp(qpos *QueryPos)"
findOp( ${1:qpos *QueryPos})
endsnippet

snippet findPath "findPath(a, z *objNode, mark int)"
findPath( ${1:a}, ${2:z *objNode}, ${3:mark int})
endsnippet

snippet findPos "findPos(ch *character, where string, i int)"
findPos( ${1:ch *character}, ${2:where string}, ${3:i int})
endsnippet

snippet findProbe "findProbe(prog *ssa.Program, probes map[*ssa.CallCommon]bool, queries map[ssa.Value]pointer.Pointer, e *expectation)"
findProbe( ${1:prog *ssa.Program}, ${2:probes map[*ssa.CallCommon]bool}, ${3:queries map[ssa.Value]pointer.Pointer}, ${4:e *expectation})
endsnippet

snippet findQueryPos "findQueryPos(fset *token.FileSet, filename string, startOffset, endOffset int)"
findQueryPos( ${1:fset *token.FileSet}, ${2:filename string}, ${3:startOffset}, ${4:endOffset int})
endsnippet

snippet findSpec "findSpec(list []ast.Spec, id *ast.Ident)"
findSpec( ${1:list []ast.Spec}, ${2:id *ast.Ident})
endsnippet

snippet findVisibleConsts "findVisibleConsts(prog *ssa.Program, qpos *QueryPos)"
findVisibleConsts( ${1:prog *ssa.Program}, ${2:qpos *QueryPos})
endsnippet

snippet findVisibleErrs "findVisibleErrs(prog *ssa.Program, qpos *QueryPos)"
findVisibleErrs( ${1:prog *ssa.Program}, ${2:qpos *QueryPos})
endsnippet

snippet findWork "findWork(builderName, dashURL string)"
findWork( ${1:builderName}, ${2:dashURL string})
endsnippet

snippet findWorkLoop "findWorkLoop(builderName, dashURL string, work chan<- builderRev)"
findWorkLoop( ${1:builderName}, ${2:dashURL string}, ${3:work chan<- builderRev})
endsnippet

snippet find_global_file "find_global_file(imp string, context build.Context)"
find_global_file( ${1:imp string}, ${2:context build.Context})
endsnippet

snippet find_go_dag_package "find_go_dag_package(imp, filedir string)"
find_go_dag_package( ${1:imp}, ${2:filedir string})
endsnippet

snippet find_one_in_db "find_one_in_db(table string, i interface{})"
find_one_in_db( ${1:table string}, ${2:i interface{}})
endsnippet

snippet find_other_package_files "find_other_package_files(filename, package_name string)"
find_other_package_files( ${1:filename}, ${2:package_name string})
endsnippet

snippet finished "finished(buf Float32Buf, t int64)"
finished( ${1:buf Float32Buf}, ${2:t int64})
endsnippet

snippet fireEmUp "fireEmUp(n *node)"
fireEmUp( ${1:n *node})
endsnippet

snippet fire_hero "fire_hero(conn *net.TCPConn, t *testing.T)"
fire_hero( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet firstComment "firstComment(filename string)"
firstComment( ${1:filename string})
endsnippet

snippet firstMatch "firstMatch(c appengine.Context, q *datastore.Query, v interface{})"
firstMatch( ${1:c appengine.Context}, ${2:q *datastore.Query}, ${3:v interface{}})
endsnippet

snippet fitsFloat32 "fitsFloat32(x exact.Value)"
fitsFloat32( ${1:x exact.Value})
endsnippet

snippet fitsFloat64 "fitsFloat64(x exact.Value)"
fitsFloat64( ${1:x exact.Value})
endsnippet

snippet five "five(i I, j J)"
five( ${1:i I}, ${2:j J})
endsnippet

snippet fix "fix(s string)"
fix( ${1:s string})
endsnippet

snippet fix2int "fix2int(i raster.Fix32)"
fix2int( ${1:i raster.Fix32})
endsnippet

snippet fix2pixelPoint "fix2pixelPoint(p raster.Point)"
fix2pixelPoint( ${1:p raster.Point})
endsnippet

snippet fixCmd "fixCmd(cmd *exec.Cmd)"
fixCmd( ${1:cmd *exec.Cmd})
endsnippet

snippet fixGocheck "fixGocheck(n *ast.CallExpr, errgoIdent, gocheckIdent string)"
fixGocheck( ${1:n *ast.CallExpr}, ${2:errgoIdent}, ${3:gocheckIdent string})
endsnippet

snippet fixIfErrEqualSomething "fixIfErrEqualSomething(n *ast.IfStmt, errgoIdent string)"
fixIfErrEqualSomething( ${1:n *ast.IfStmt}, ${2:errgoIdent string})
endsnippet

snippet fixIfErrNotEqualNil "fixIfErrNotEqualNil(n *ast.IfStmt)"
fixIfErrNotEqualNil( ${1:n *ast.IfStmt})
endsnippet

snippet fixImports "fixImports(fset *token.FileSet, f *ast.File)"
fixImports( ${1:fset *token.FileSet}, ${2:f *ast.File})
endsnippet

snippet fixMROut "fixMROut(out interface{})"
fixMROut( ${1:out interface{}})
endsnippet

snippet fixPermissions "fixPermissions(source, destination string, uid, gid int, destExisted bool)"
fixPermissions( ${1:source}, ${2:destination string}, ${3:uid}, ${4:gid int}, ${5:destExisted bool})
endsnippet

snippet fixed2float "fixed2float(f raster.Fix32)"
fixed2float( ${1:f raster.Fix32})
endsnippet

snippet fixup_m "fixup_m(n *Node)"
fixup_m( ${1:n *Node})
endsnippet

snippet fixup_packages "fixup_packages(filescope *scope, pkgs []package_import, pcache package_cache)"
fixup_packages( ${1:filescope *scope}, ${2:pkgs []package_import}, ${3:pcache package_cache})
endsnippet

snippet fixup_size "fixup_size(n *Node)"
fixup_size( ${1:n *Node})
endsnippet

snippet flagField "flagField(v *reflect.Value)"
flagField( ${1:v *reflect.Value})
endsnippet

snippet flagSet "flagSet(name string, flags []Flag)"
flagSet( ${1:name string}, ${2:flags []Flag})
endsnippet

snippet float2fix "float2fix(f float64)"
float2fix( ${1:f float64})
endsnippet

snippet float2fixed "float2fixed(f float64)"
float2fixed( ${1:f float64})
endsnippet

snippet float32toint16 "float32toint16(data []int16, samples []float32)"
float32toint16( ${1:data []int16}, ${2:samples []float32})
endsnippet

snippet float32toint16le "float32toint16le(data []byte, samples []float32)"
float32toint16le( ${1:data []byte}, ${2:samples []float32})
endsnippet

snippet floatString "floatString(v exact.Value)"
floatString( ${1:v exact.Value})
endsnippet

snippet flush "flush(r io.Reader)"
flush( ${1:r io.Reader})
endsnippet

snippet flushFunc "flushFunc(ctxt ui.Window)"
flushFunc( ${1:ctxt ui.Window})
endsnippet

snippet flush_ttl "flush_ttl(srv *clonesrv_t)"
flush_ttl( ${1:srv *clonesrv_t})
endsnippet

snippet fmtHandler "fmtHandler(w http.ResponseWriter, r *http.Request)"
fmtHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet fnBenchmarkDecode "fnBenchmarkDecode(b *testing.B, encfn benchFn, decfn benchFn)"
fnBenchmarkDecode( ${1:b *testing.B}, ${2:encfn benchFn}, ${3:decfn benchFn})
endsnippet

snippet fnBenchmarkEncode "fnBenchmarkEncode(b *testing.B, encName string, ts interface{}, encfn benchEncFn)"
fnBenchmarkEncode( ${1:b *testing.B}, ${2:encName string}, ${3:ts interface{}}, ${4:encfn benchEncFn})
endsnippet

snippet fnBincDecodeFn "fnBincDecodeFn(buf []byte, ts interface{}, sym AsSymbolFlag)"
fnBincDecodeFn( ${1:buf []byte}, ${2:ts interface{}}, ${3:sym AsSymbolFlag})
endsnippet

snippet fnBincEncodeFn "fnBincEncodeFn(ts interface{}, sym AsSymbolFlag)"
fnBincEncodeFn( ${1:ts interface{}}, ${2:sym AsSymbolFlag})
endsnippet

snippet fnBincNoSymDecodeFn "fnBincNoSymDecodeFn(buf []byte, ts interface{})"
fnBincNoSymDecodeFn( ${1:buf []byte}, ${2:ts interface{}})
endsnippet

snippet fnBincNoSymEncodeFn "fnBincNoSymEncodeFn(ts interface{})"
fnBincNoSymEncodeFn( ${1:ts interface{}})
endsnippet

snippet fnBincSymDecodeFn "fnBincSymDecodeFn(buf []byte, ts interface{})"
fnBincSymDecodeFn( ${1:buf []byte}, ${2:ts interface{}})
endsnippet

snippet fnBincSymEncodeFn "fnBincSymEncodeFn(ts interface{})"
fnBincSymEncodeFn( ${1:ts interface{}})
endsnippet

snippet fnBsonDecodeFn "fnBsonDecodeFn(buf *bytes.Buffer, ts *TestStruc)"
fnBsonDecodeFn( ${1:buf *bytes.Buffer}, ${2:ts *TestStruc})
endsnippet

snippet fnBsonEncodeFn "fnBsonEncodeFn(buf *bytes.Buffer, ts *TestStruc)"
fnBsonEncodeFn( ${1:buf *bytes.Buffer}, ${2:ts *TestStruc})
endsnippet

snippet fnGobDecodeFn "fnGobDecodeFn(buf *bytes.Buffer, ts *TestStruc)"
fnGobDecodeFn( ${1:buf *bytes.Buffer}, ${2:ts *TestStruc})
endsnippet

snippet fnGobEncodeFn "fnGobEncodeFn(buf *bytes.Buffer, ts *TestStruc)"
fnGobEncodeFn( ${1:buf *bytes.Buffer}, ${2:ts *TestStruc})
endsnippet

snippet fnJsonDecodeFn "fnJsonDecodeFn(buf *bytes.Buffer, ts *TestStruc)"
fnJsonDecodeFn( ${1:buf *bytes.Buffer}, ${2:ts *TestStruc})
endsnippet

snippet fnJsonEncodeFn "fnJsonEncodeFn(buf *bytes.Buffer, ts *TestStruc)"
fnJsonEncodeFn( ${1:buf *bytes.Buffer}, ${2:ts *TestStruc})
endsnippet

snippet fnMsgpackDecodeFn "fnMsgpackDecodeFn(buf *bytes.Buffer, ts *TestStruc)"
fnMsgpackDecodeFn( ${1:buf *bytes.Buffer}, ${2:ts *TestStruc})
endsnippet

snippet fnMsgpackEncodeFn "fnMsgpackEncodeFn(buf *bytes.Buffer, ts *TestStruc)"
fnMsgpackEncodeFn( ${1:buf *bytes.Buffer}, ${2:ts *TestStruc})
endsnippet

snippet fnSimpleDecodeFn "fnSimpleDecodeFn(buf []byte, ts interface{})"
fnSimpleDecodeFn( ${1:buf []byte}, ${2:ts interface{}})
endsnippet

snippet fnSimpleEncodeFn "fnSimpleEncodeFn(ts interface{})"
fnSimpleEncodeFn( ${1:ts interface{}})
endsnippet

snippet fnVMsgpackDecodeFn "fnVMsgpackDecodeFn(buf []byte, ts interface{})"
fnVMsgpackDecodeFn( ${1:buf []byte}, ${2:ts interface{}})
endsnippet

snippet fnVMsgpackEncodeFn "fnVMsgpackEncodeFn(ts interface{})"
fnVMsgpackEncodeFn( ${1:ts interface{}})
endsnippet

snippet fnop "fnop(*ast.File)"
fnop( ${1:*ast.File})
endsnippet

snippet fnv "fnv(h uint32, s []byte)"
fnv( ${1:h uint32}, ${2:s []byte})
endsnippet

snippet font "font(s string)"
font( ${1:s string})
endsnippet

snippet fontPipe "fontPipe(name string)"
fontPipe( ${1:name string})
endsnippet

snippet fontSize "fontSize(x, y int)"
fontSize( ${1:x}, ${2:y int})
endsnippet

snippet fontresize "fontresize(f *Font, wid, ncache, depth int)"
fontresize( ${1:f *Font}, ${2:wid}, ${3:ncache}, ${4:depth int})
endsnippet

snippet forTurns "forTurns(n int, check func(d int)"
forTurns( ${1:n int}, ${2:check func(d int})
endsnippet

snippet foreach_decl "foreach_decl(decl ast.Decl, do foreach_decl_func)"
foreach_decl( ${1:decl ast.Decl}, ${2:do foreach_decl_func})
endsnippet

snippet func "func(data *foreach_decl_struct)"
func( ${1:data *foreach_decl_struct})
endsnippet

snippet formatGoSource "formatGoSource(buf *bytes.Buffer, text []byte, links []analysis.Link, pattern string, selection Selection)"
formatGoSource( ${1:buf *bytes.Buffer}, ${2:text []byte}, ${3:links []analysis.Link}, ${4:pattern string}, ${5:selection Selection})
endsnippet

snippet formatLines "formatLines(lines []codeLine, highlight string)"
formatLines( ${1:lines []codeLine}, ${2:highlight string})
endsnippet

snippet formatMember "formatMember(obj types.Object, maxname int)"
formatMember( ${1:obj types.Object}, ${2:maxname int})
endsnippet

snippet formatNs "formatNs(ns float64)"
formatNs( ${1:ns float64})
endsnippet

snippet forward "forward(action iptables.Action, proto string, sourceIP net.IP, sourcePort int, containerIP string, containerPort int)"
forward( ${1:action iptables.Action}, ${2:proto string}, ${3:sourceIP net.IP}, ${4:sourcePort int}, ${5:containerIP string}, ${6:containerPort int})
endsnippet

snippet foundWalkFunc "foundWalkFunc(*Grant, []*Grant)"
foundWalkFunc( ${1:*Grant}, ${2:[]*Grant})
endsnippet

snippet four "four(i I, j J)"
four( ${1:i I}, ${2:j J})
endsnippet

snippet fprintf "fprintf(w io.Writer, fset *token.FileSet, pos interface{}, format string, args ...interface{})"
fprintf( ${1:w io.Writer}, ${2:fset *token.FileSet}, ${3:pos interface{}}, ${4:format string}, ${5:args ...interface{}})
endsnippet

snippet free "free(p *C.char)"
free( ${1:p *C.char})
endsnippet

snippet freevars "freevars(o *Oracle, qpos *QueryPos)"
freevars( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet from "from(b *Builder, args []string, attributes map[string]bool, original string)"
from( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet fromECPrivateKey "fromECPrivateKey(cryptoPrivateKey *ecdsa.PrivateKey)"
fromECPrivateKey( ${1:cryptoPrivateKey *ecdsa.PrivateKey})
endsnippet

snippet fromECPublicKey "fromECPublicKey(cryptoPublicKey *ecdsa.PublicKey)"
fromECPublicKey( ${1:cryptoPublicKey *ecdsa.PublicKey})
endsnippet

snippet fromMetaElement "fromMetaElement(s string)"
fromMetaElement( ${1:s string})
endsnippet

snippet fromRSAPrivateKey "fromRSAPrivateKey(cryptoPrivateKey *rsa.PrivateKey)"
fromRSAPrivateKey( ${1:cryptoPrivateKey *rsa.PrivateKey})
endsnippet

snippet fromRSAPublicKey "fromRSAPublicKey(cryptoPublicKey *rsa.PublicKey)"
fromRSAPublicKey( ${1:cryptoPublicKey *rsa.PublicKey})
endsnippet

snippet fromStatT "fromStatT(s *syscall.Stat_t)"
fromStatT( ${1:s *syscall.Stat_t})
endsnippet

snippet fullDispatch "fullDispatch(cmd, args string)"
fullDispatch( ${1:cmd}, ${2:args string})
endsnippet

snippet fullHash "fullHash(h string)"
fullHash( ${1:h string})
endsnippet

snippet func8 "func8(x ...int)"
func8( ${1:x ...int})
endsnippet

snippet funcDecl "funcDecl(info *loader.PackageInfo, fn *types.Func)"
funcDecl( ${1:info *loader.PackageInfo}, ${2:fn *types.Func})
endsnippet

snippet funcField "funcField(slice types.Type)"
funcField( ${1:slice types.Type})
endsnippet

snippet funcOutput "funcOutput(profile, outputFile string)"
funcOutput( ${1:profile}, ${2:outputFile string})
endsnippet

snippet funcSig "funcSig(pkg *types.Package, name string)"
funcSig( ${1:pkg *types.Package}, ${2:name string})
endsnippet

snippet funcToken "funcToken(fn *ssa.Function)"
funcToken( ${1:fn *ssa.Function})
endsnippet

snippet func_predicate "func_predicate(v ast.Expr)"
func_predicate( ${1:v ast.Expr})
endsnippet

snippet func_return_type "func_return_type(f *ast.FuncType, index int)"
func_return_type( ${1:f *ast.FuncType}, ${2:index int})
endsnippet

snippet funckeymap "funckeymap(k termbox.Key)"
funckeymap( ${1:k termbox.Key})
endsnippet

snippet function "function(pc uintptr)"
function( ${1:pc uintptr})
endsnippet

snippet fuseBlocks "fuseBlocks(f *Function, a *BasicBlock)"
fuseBlocks( ${1:f *Function}, ${2:a *BasicBlock})
endsnippet

snippet g "g(p *bool)"
g( ${1:p *bool})
endsnippet

snippet gbit16 "gbit16(b []byte)"
gbit16( ${1:b []byte})
endsnippet

snippet gbit32 "gbit32(b []byte)"
gbit32( ${1:b []byte})
endsnippet

snippet gbit64 "gbit64(b []byte)"
gbit64( ${1:b []byte})
endsnippet

snippet gbit8 "gbit8(b []byte)"
gbit8( ${1:b []byte})
endsnippet

snippet gbool "gbool(b []byte)"
gbool( ${1:b []byte})
endsnippet

snippet gbytes "gbytes(b []byte)"
gbytes( ${1:b []byte})
endsnippet

snippet gcExportData "gcExportData(path string)"
gcExportData( ${1:path string})
endsnippet

snippet gcImportData "gcImportData(imports map[string]*types.Package, data []byte, path string)"
gcImportData( ${1:imports map[string]*types.Package}, ${2:data []byte}, ${3:path string})
endsnippet

snippet gceProjectMetadata "gceProjectMetadata(attr string)"
gceProjectMetadata( ${1:attr string})
endsnippet

snippet genAPI "genAPI(a *API)"
genAPI( ${1:a *API})
endsnippet

snippet genArgs "genArgs(i interface{}, v ...interface{})"
genArgs( ${1:i interface{}}, ${2:v ...interface{}})
endsnippet

snippet genErr "genErr(i int)"
genErr( ${1:i int})
endsnippet

snippet genMethodTemplates "genMethodTemplates(fs []APIFunction)"
genMethodTemplates( ${1:fs []APIFunction})
endsnippet

snippet genPrefixes "genPrefixes(out chan string, all bool)"
genPrefixes( ${1:out chan string}, ${2:all bool})
endsnippet

snippet genTypeTemplates "genTypeTemplates(ts []APIClass)"
genTypeTemplates( ${1:ts []APIClass})
endsnippet

snippet generateCert "generateCert(pub PublicKey, priv PrivateKey, subInfo, issInfo *certTemplateInfo)"
generateCert( ${1:pub PublicKey}, ${2:priv PrivateKey}, ${3:subInfo}, ${4:issInfo *certTemplateInfo})
endsnippet

snippet generateCertTemplate "generateCertTemplate(info *certTemplateInfo)"
generateCertTemplate( ${1:info *certTemplateInfo})
endsnippet

snippet generateECPrivateKey "generateECPrivateKey(curve elliptic.Curve)"
generateECPrivateKey( ${1:curve elliptic.Curve})
endsnippet

snippet generateECTestKeys "generateECTestKeys(t *testing.T)"
generateECTestKeys( ${1:t *testing.T})
endsnippet

snippet generateMacAddr "generateMacAddr(ip net.IP)"
generateMacAddr( ${1:ip net.IP})
endsnippet

snippet generateProfile "generateProfile(out io.Writer)"
generateProfile( ${1:out io.Writer})
endsnippet

snippet generateRSAPrivateKey "generateRSAPrivateKey(bits int)"
generateRSAPrivateKey( ${1:bits int})
endsnippet

snippet generateStatement "generateStatement(grants []*Grant, key libtrust.PrivateKey, chain []*x509.Certificate)"
generateStatement( ${1:grants []*Grant}, ${2:key libtrust.PrivateKey}, ${3:chain []*x509.Certificate})
endsnippet

snippet generateTrustChain "generateTrustChain(t *testing.T, key PrivateKey, ca *x509.Certificate)"
generateTrustChain( ${1:t *testing.T}, ${2:key PrivateKey}, ${3:ca *x509.Certificate})
endsnippet

snippet generate_client_rpc_wrapper "generate_client_rpc_wrapper(out io.Writer, fun *ast.FuncDecl, name string, argcnt, replycnt int)"
generate_client_rpc_wrapper( ${1:out io.Writer}, ${2:fun *ast.FuncDecl}, ${3:name string}, ${4:argcnt}, ${5:replycnt int})
endsnippet

snippet generate_server_rpc_wrapper "generate_server_rpc_wrapper(out io.Writer, fun *ast.FuncDecl, name string, argcnt, replycnt int)"
generate_server_rpc_wrapper( ${1:out io.Writer}, ${2:fun *ast.FuncDecl}, ${3:name string}, ${4:argcnt}, ${5:replycnt int})
endsnippet

snippet generate_struct_wrapper "generate_struct_wrapper(out io.Writer, fun *ast.FieldList, structname, name string)"
generate_struct_wrapper( ${1:out io.Writer}, ${2:fun *ast.FieldList}, ${3:structname}, ${4:name string})
endsnippet

snippet getAllImages "getAllImages(eng *engine.Engine, t *testing.T)"
getAllImages( ${1:eng *engine.Engine}, ${2:t *testing.T})
endsnippet

snippet getAndDel "getAndDel(d logrus.Fields, key string)"
getAndDel( ${1:d logrus.Fields}, ${2:key string})
endsnippet

snippet getBits "getBits(min, max, step uint)"
getBits( ${1:min}, ${2:max}, ${3:step uint})
endsnippet

snippet getBlkioStat "getBlkioStat(path string)"
getBlkioStat( ${1:path string})
endsnippet

snippet getBoolParam "getBoolParam(value string)"
getBoolParam( ${1:value string})
endsnippet

snippet getBoolValue "getBoolValue(boolString string)"
getBoolValue( ${1:boolString string})
endsnippet

snippet getByGopmfile "getByGopmfile(ctx *cli.Context)"
getByGopmfile( ${1:ctx *cli.Context})
endsnippet

snippet getByPaths "getByPaths(ctx *cli.Context)"
getByPaths( ${1:ctx *cli.Context})
endsnippet

snippet getCFQStats "getCFQStats(path string, stats *cgroups.Stats)"
getCFQStats( ${1:path string}, ${2:stats *cgroups.Stats})
endsnippet

snippet getCallerName "getCallerName(depth int)"
getCallerName( ${1:depth int})
endsnippet

snippet getCgroupData "getCgroupData(c *cgroups.Cgroup, pid int)"
getCgroupData( ${1:c *cgroups.Cgroup}, ${2:pid int})
endsnippet

snippet getCgroupParamKeyValue "getCgroupParamKeyValue(t string)"
getCgroupParamKeyValue( ${1:t string})
endsnippet

snippet getCgroupParamUint "getCgroupParamUint(cgroupPath, cgroupFile string)"
getCgroupParamUint( ${1:cgroupPath}, ${2:cgroupFile string})
endsnippet

snippet getChallengeResponse "getChallengeResponse(number1, number2 uint32, key3 []byte)"
getChallengeResponse( ${1:number1}, ${2:number2 uint32}, ${3:key3 []byte})
endsnippet

snippet getConsoleScreenBufferInfo "getConsoleScreenBufferInfo(hConsoleOutput uintptr)"
getConsoleScreenBufferInfo( ${1:hConsoleOutput uintptr})
endsnippet

snippet getContainer "getContainer(eng *engine.Engine, id string, t Fataler)"
getContainer( ${1:eng *engine.Engine}, ${2:id string}, ${3:t Fataler})
endsnippet

snippet getContainerByteDesc "getContainerByteDesc(ct ContainerType)"
getContainerByteDesc( ${1:ct ContainerType})
endsnippet

snippet getContainerState "getContainerState(t *testing.T, id string)"
getContainerState( ${1:t *testing.T}, ${2:id string})
endsnippet

snippet getContainersByName "getContainersByName(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getContainersByName( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getContainersChanges "getContainersChanges(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getContainersChanges( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getContainersExport "getContainersExport(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getContainersExport( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getContainersJSON "getContainersJSON(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getContainersJSON( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getContainersLogs "getContainersLogs(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getContainersLogs( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getContainersTop "getContainersTop(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getContainersTop( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getCpuUsageBreakdown "getCpuUsageBreakdown(path string)"
getCpuUsageBreakdown( ${1:path string})
endsnippet

snippet getDefault "getDefault(m map[string]interface{}, key string, deflt interface{})"
getDefault( ${1:m map[string]interface{}}, ${2:key string}, ${3:deflt interface{}})
endsnippet

snippet getDepList "getDepList(ctx *cli.Context, target, pkgPath, vendor string)"
getDepList( ${1:ctx *cli.Context}, ${2:target}, ${3:pkgPath}, ${4:vendor string})
endsnippet

snippet getDevName "getDevName(name string)"
getDevName( ${1:name string})
endsnippet

snippet getDeviceNodes "getDeviceNodes(path string)"
getDeviceNodes( ${1:path string})
endsnippet

snippet getDirFd "getDirFd(dir *C.DIR)"
getDirFd( ${1:dir *C.DIR})
endsnippet

snippet getDirs "getDirs(t *testing.T, dir string)"
getDirs( ${1:t *testing.T}, ${2:dir string})
endsnippet

snippet getEnabledCapabilities "getEnabledCapabilities(capList []string)"
getEnabledCapabilities( ${1:capList []string})
endsnippet

snippet getEnv "getEnv(args *InitArgs, key string)"
getEnv( ${1:args *InitArgs}, ${2:key string})
endsnippet

snippet getErrors "getErrors(context martini.Context)"
getErrors( ${1:context martini.Context})
endsnippet

snippet getEvents "getEvents(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getEvents( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getExecByID "getExecByID(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getExecByID( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getExecExitCode "getExecExitCode(cli *DockerCli, execId string)"
getExecExitCode( ${1:cli *DockerCli}, ${2:execId string})
endsnippet

snippet getExitCode "getExitCode(cli *DockerCli, containerId string)"
getExitCode( ${1:cli *DockerCli}, ${2:containerId string})
endsnippet

snippet getExt "getExt(s string)"
getExt( ${1:s string})
endsnippet

snippet getField "getField(field string, r bounds)"
getField( ${1:field string}, ${2:r bounds})
endsnippet

snippet getFileName "getFileName(fd int)"
getFileName( ${1:fd int})
endsnippet

snippet getFloat32 "getFloat32(args map[string]interface{}, name string, min, max, deflt float32)"
getFloat32( ${1:args map[string]interface{}}, ${2:name string}, ${3:min}, ${4:max}, ${5:deflt float32})
endsnippet

snippet getHost "getHost(r *http.Request)"
getHost( ${1:r *http.Request})
endsnippet

snippet getHostname "getHostname(env []string)"
getHostname( ${1:env []string})
endsnippet

snippet getICMPFilter "getICMPFilter(fd int, opt *sockOpt)"
getICMPFilter( ${1:fd int}, ${2:opt *sockOpt})
endsnippet

snippet getIDByName "getIDByName(name string)"
getIDByName( ${1:name string})
endsnippet

snippet getIPAndPort "getIPAndPort(a net.Addr)"
getIPAndPort( ${1:a net.Addr})
endsnippet

snippet getIfaceForUnit "getIfaceForUnit(unitName string)"
getIfaceForUnit( ${1:unitName string})
endsnippet

snippet getImages "getImages(eng *engine.Engine, t *testing.T, all bool, filter string)"
getImages( ${1:eng *engine.Engine}, ${2:t *testing.T}, ${3:all bool}, ${4:filter string})
endsnippet

snippet getImagesByName "getImagesByName(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getImagesByName( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getImagesGet "getImagesGet(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getImagesGet( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getImagesHistory "getImagesHistory(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getImagesHistory( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getImagesJSON "getImagesJSON(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getImagesJSON( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getImagesSearch "getImagesSearch(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getImagesSearch( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getImagesViz "getImagesViz(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getImagesViz( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getInfo "getInfo(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getInfo( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getInode "getInode(path string)"
getInode( ${1:path string})
endsnippet

snippet getInput "getInput(ctxt *context, name string)"
getInput( ${1:ctxt *context}, ${2:name string})
endsnippet

snippet getInt "getInt(fd int, opt *sockOpt)"
getInt( ${1:fd int}, ${2:opt *sockOpt})
endsnippet

snippet getInt32 "getInt32(b []byte, pos int)"
getInt32( ${1:b []byte}, ${2:pos int})
endsnippet

snippet getInt64 "getInt64(b []byte, pos int)"
getInt64( ${1:b []byte}, ${2:pos int})
endsnippet

snippet getInterface "getInterface(fd int, opt *sockOpt)"
getInterface( ${1:fd int}, ${2:opt *sockOpt})
endsnippet

snippet getIpFamily "getIpFamily(ip net.IP)"
getIpFamily( ${1:ip net.IP})
endsnippet

snippet getKey "getKey(a net.Addr)"
getKey( ${1:a net.Addr})
endsnippet

snippet getKeyNumber "getKeyNumber(s string)"
getKeyNumber( ${1:s string})
endsnippet

snippet getLabel "getLabel(c map[string][]string, name string)"
getLabel( ${1:c map[string][]string}, ${2:name string})
endsnippet

snippet getLines "getLines(input []byte, commentMarker []byte)"
getLines( ${1:input []byte}, ${2:commentMarker []byte})
endsnippet

snippet getLoopbackBackingFile "getLoopbackBackingFile(file *os.File)"
getLoopbackBackingFile( ${1:file *os.File})
endsnippet

snippet getMTUInfo "getMTUInfo(fd int, opt *sockOpt)"
getMTUInfo( ${1:fd int}, ${2:opt *sockOpt})
endsnippet

snippet getMemorySwap "getMemorySwap(v *execdriver.Resources)"
getMemorySwap( ${1:v *execdriver.Resources})
endsnippet

snippet getMouse "getMouse(ec <-chan interface{})"
getMouse( ${1:ec <-chan interface{}})
endsnippet

snippet getNlink "getNlink(path string)"
getNlink( ${1:path string})
endsnippet

snippet getNodeString "getNodeString(node *node)"
getNodeString( ${1:node *node})
endsnippet

snippet getNonceAccept "getNonceAccept(nonce []byte)"
getNonceAccept( ${1:nonce []byte})
endsnippet

snippet getOpCounters "getOpCounters(server string)"
getOpCounters( ${1:server string})
endsnippet

snippet getOption "getOption(ctx *Context, o C.int)"
getOption( ${1:ctx *Context}, ${2:o C.int})
endsnippet

snippet getPackages "getPackages(target string, ctx *cli.Context, nodes []*doc.Node)"
getPackages( ${1:target string}, ${2:ctx *cli.Context}, ${3:nodes []*doc.Node})
endsnippet

snippet getParentIds "getParentIds(root, id string)"
getParentIds( ${1:root}, ${2:id string})
endsnippet

snippet getPercpuUsage "getPercpuUsage(path string)"
getPercpuUsage( ${1:path string})
endsnippet

snippet getPkgFiles "getPkgFiles(args []string)"
getPkgFiles( ${1:args []string})
endsnippet

snippet getPortFromRequest "getPortFromRequest(r *http.Request)"
getPortFromRequest( ${1:r *http.Request})
endsnippet

snippet getRange "getRange(expr string, r bounds)"
getRange( ${1:expr string}, ${2:r bounds})
endsnippet

snippet getRouteTemplate "getRouteTemplate(route *Route)"
getRouteTemplate( ${1:route *Route})
endsnippet

snippet getSetter "getSetter(outt reflect.Type, out reflect.Value)"
getSetter( ${1:outt reflect.Type}, ${2:out reflect.Value})
endsnippet

snippet getSignature "getSignature(t reflect.Type)"
getSignature( ${1:t reflect.Type})
endsnippet

snippet getStats "getStats(path string, stats *cgroups.Stats)"
getStats( ${1:path string}, ${2:stats *cgroups.Stats})
endsnippet

snippet getStatus "getStatus(work builderRev)"
getStatus( ${1:work builderRev})
endsnippet

snippet getStructFieldInfos "getStructFieldInfos(rt reflect.Type)"
getStructFieldInfos( ${1:rt reflect.Type})
endsnippet

snippet getStructInfo "getStructInfo(st reflect.Type)"
getStructInfo( ${1:st reflect.Type})
endsnippet

snippet getSubsystemPath "getSubsystemPath(c *cgroups.Cgroup, subsystem string)"
getSubsystemPath( ${1:c *cgroups.Cgroup}, ${2:subsystem string})
endsnippet

snippet getTarHeaderSelector "getTarHeaderSelector(v Version)"
getTarHeaderSelector( ${1:v Version})
endsnippet

snippet getTime "getTime(value string)"
getTime( ${1:value string})
endsnippet

snippet getTlsConfig "getTlsConfig(certFile, keyFile string, t *testing.T)"
getTlsConfig( ${1:certFile}, ${2:keyFile string}, ${3:t *testing.T})
endsnippet

snippet getTransport "getTransport(address string)"
getTransport( ${1:address string})
endsnippet

snippet getTraverserFunc "getTraverserFunc(m map[reflect.Type]*typeInfo, t, xt reflect.Type)"
getTraverserFunc( ${1:m map[reflect.Type]*typeInfo}, ${2:t}, ${3:xt reflect.Type})
endsnippet

snippet getType "getType(t string)"
getType( ${1:t string})
endsnippet

snippet getTypeInfo "getTypeInfo(rtid uintptr, rt reflect.Type)"
getTypeInfo( ${1:rtid uintptr}, ${2:rt reflect.Type})
endsnippet

snippet getU32LE "getU32LE(b []byte)"
getU32LE( ${1:b []byte})
endsnippet

snippet getUnitName "getUnitName(c *cgroups.Cgroup)"
getUnitName( ${1:c *cgroups.Cgroup})
endsnippet

snippet getV2URL "getV2URL(e *Endpoint, routeName string, vars map[string]string)"
getV2URL( ${1:e *Endpoint}, ${2:routeName string}, ${3:vars map[string]string})
endsnippet

snippet getVersion "getVersion(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
getVersion( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet getVfsCap "getVfsCap(path string, dest *vfscapData)"
getVfsCap( ${1:path string}, ${2:dest *vfscapData})
endsnippet

snippet get_array_len "get_array_len(e ast.Expr)"
get_array_len( ${1:e ast.Expr})
endsnippet

snippet get_client_config "get_client_config(w rest.ResponseWriter, r *rest.Request)"
get_client_config( ${1:w rest.ResponseWriter}, ${2:r *rest.Request})
endsnippet

snippet get_console_cursor_info "get_console_cursor_info(h syscall.Handle, info *console_cursor_info)"
get_console_cursor_info( ${1:h syscall.Handle}, ${2:info *console_cursor_info})
endsnippet

snippet get_console_mode "get_console_mode(h syscall.Handle, mode *dword)"
get_console_mode( ${1:h syscall.Handle}, ${2:mode *dword})
endsnippet

snippet get_console_screen_buffer_info "get_console_screen_buffer_info(h syscall.Handle, info *console_screen_buffer_info)"
get_console_screen_buffer_info( ${1:h syscall.Handle}, ${2:info *console_screen_buffer_info})
endsnippet

snippet get_cursor_position "get_cursor_position(out syscall.Handle)"
get_cursor_position( ${1:out syscall.Handle})
endsnippet

snippet get_deal_list "get_deal_list(conn *net.TCPConn, t *testing.T)"
get_deal_list( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet get_district_next_city_area "get_district_next_city_area(id int)"
get_district_next_city_area( ${1:id int})
endsnippet

snippet get_formatter "get_formatter(name string)"
get_formatter( ${1:name string})
endsnippet

snippet get_month_reward "get_month_reward(conn *net.TCPConn, t *testing.T)"
get_month_reward( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet get_other_package_files "get_other_package_files(filename, packageName string, declcache *decl_cache)"
get_other_package_files( ${1:filename}, ${2:packageName string}, ${3:declcache *decl_cache})
endsnippet

snippet get_platform_version "get_platform_version(w rest.ResponseWriter, r *rest.Request)"
get_platform_version( ${1:w rest.ResponseWriter}, ${2:r *rest.Request})
endsnippet

snippet get_plus_or_minus "get_plus_or_minus(num int32)"
get_plus_or_minus( ${1:num int32})
endsnippet

snippet get_roulette_reward "get_roulette_reward(conn *net.TCPConn, t *testing.T)"
get_roulette_reward( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet get_term_size "get_term_size(fd uintptr)"
get_term_size( ${1:fd uintptr})
endsnippet

snippet get_type_path "get_type_path(e ast.Expr)"
get_type_path( ${1:e ast.Expr})
endsnippet

snippet get_win_size "get_win_size(out syscall.Handle)"
get_win_size( ${1:out syscall.Handle})
endsnippet

snippet getdefont "getdefont(d *Display)"
getdefont( ${1:d *Display})
endsnippet

snippet getenvOk "getenvOk(k string)"
getenvOk( ${1:k string})
endsnippet

snippet getsockopt "getsockopt(fd, level, name int, v unsafe.Pointer, l *sysSockoptLen)"
getsockopt( ${1:fd}, ${2:level}, ${3:name int}, ${4:v unsafe.Pointer}, ${5:l *sysSockoptLen})
endsnippet

snippet getsockoptIPMreqn "getsockoptIPMreqn(fd, name int)"
getsockoptIPMreqn( ${1:fd}, ${2:name int})
endsnippet

snippet getsockoptInterface "getsockoptInterface(fd, name int)"
getsockoptInterface( ${1:fd}, ${2:name int})
endsnippet

snippet getsubfont "getsubfont(d *Display, name string)"
getsubfont( ${1:d *Display}, ${2:name string})
endsnippet

snippet gint16 "gint16(buf []byte)"
gint16( ${1:buf []byte})
endsnippet

snippet gint32 "gint32(buf []byte)"
gint32( ${1:buf []byte})
endsnippet

snippet gint64 "gint64(buf []byte)"
gint64( ${1:buf []byte})
endsnippet

snippet gint8 "gint8(buf []byte)"
gint8( ${1:buf []byte})
endsnippet

snippet globalNames "globalNames(pkg *ast.Package)"
globalNames( ${1:pkg *ast.Package})
endsnippet

snippet go2jsonType "go2jsonType(t reflect.Type, canAddr bool)"
go2jsonType( ${1:t reflect.Type}, ${2:canAddr bool})
endsnippet

snippet gofmt "gofmt(n interface{})"
gofmt( ${1:n interface{}})
endsnippet

snippet gofmtFile "gofmtFile(f *ast.File)"
gofmtFile( ${1:f *ast.File})
endsnippet

snippet goodOSArch "goodOSArch(filename string)"
goodOSArch( ${1:filename string})
endsnippet

snippet googleAddr "googleAddr(c *icmp.PacketConn, protocol int)"
googleAddr( ${1:c *icmp.PacketConn}, ${2:protocol int})
endsnippet

snippet googleCodeVCS "googleCodeVCS(match map[string]string)"
googleCodeVCS( ${1:match map[string]string})
endsnippet

snippet gperm "gperm(b []byte)"
gperm( ${1:b []byte})
endsnippet

snippet gqid "gqid(b []byte)"
gqid( ${1:b []byte})
endsnippet

snippet grandparent "grandparent(n *Node)"
grandparent( ${1:n *Node})
endsnippet

snippet grantpt "grantpt(f *os.File)"
grantpt( ${1:f *os.File})
endsnippet

snippet gray1Model "gray1Model(c color.Color)"
gray1Model( ${1:c color.Color})
endsnippet

snippet gray2Model "gray2Model(c color.Color)"
gray2Model( ${1:c color.Color})
endsnippet

snippet gray4Model "gray4Model(c color.Color)"
gray4Model( ${1:c color.Color})
endsnippet

snippet grepFile "grepFile(t *testing.T, path string, pattern string)"
grepFile( ${1:t *testing.T}, ${2:path string}, ${3:pattern string})
endsnippet

snippet grepFileWithReverse "grepFileWithReverse(t *testing.T, path string, pattern string, inverseGrep bool)"
grepFileWithReverse( ${1:t *testing.T}, ${2:path string}, ${3:pattern string}, ${4:inverseGrep bool})
endsnippet

snippet groups "groups(c cmd, conn *ec2.EC2, _ []string)"
groups( ${1:c cmd}, ${2:conn *ec2.EC2}, ${3:_ []string})
endsnippet

snippet gstat "gstat(buf []byte, d *Dir, dotu bool)"
gstat( ${1:buf []byte}, ${2:d *Dir}, ${3:dotu bool})
endsnippet

snippet gstr "gstr(buf []byte)"
gstr( ${1:buf []byte})
endsnippet

snippet gstring "gstring(b []byte)"
gstring( ${1:b []byte})
endsnippet

snippet guessImportPath "guessImportPath(filename string, buildContext *build.Context)"
guessImportPath( ${1:filename string}, ${2:buildContext *build.Context})
endsnippet

snippet handleAllianceMemory "handleAllianceMemory(quit_signal chan bool, wg *sync.WaitGroup)"
handleAllianceMemory( ${1:quit_signal chan bool}, ${2:wg *sync.WaitGroup})
endsnippet

snippet handleClient "handleClient(conn net.Conn, quit_signal chan bool, wg *sync.WaitGroup)"
handleClient( ${1:conn net.Conn}, ${2:quit_signal chan bool}, ${3:wg *sync.WaitGroup})
endsnippet

snippet handleContainerKill "handleContainerKill(w http.ResponseWriter, r *http.Request)"
handleContainerKill( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handleContainerLogs "handleContainerLogs(w http.ResponseWriter, r *http.Request)"
handleContainerLogs( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handleErr "handleErr(err *error)"
handleErr( ${1:err *error})
endsnippet

snippet handleExec "handleExec(w http.ResponseWriter, r *http.Request)"
handleExec( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handleFunc "handleFunc(path string, h http.HandlerFunc)"
handleFunc( ${1:path string}, ${2:h http.HandlerFunc})
endsnippet

snippet handleInterrupt "handleInterrupt(fd uintptr, state *State)"
handleInterrupt( ${1:fd uintptr}, ${2:state *State})
endsnippet

snippet handleJsonArgs "handleJsonArgs(args []string, attributes map[string]bool)"
handleJsonArgs( ${1:args []string}, ${2:attributes map[string]bool})
endsnippet

snippet handleLogs "handleLogs(w http.ResponseWriter, r *http.Request)"
handleLogs( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handleMouse "handleMouse(m ui.MouseEvent, ec <-chan interface{}, ecc chan (<-chan interface{})"
handleMouse( ${1:m ui.MouseEvent}, ${2:ec <-chan interface{}}, ${3:ecc chan (<-chan interface{}})
endsnippet

snippet handleOneCommit "handleOneCommit(pc *PerfConfig, com *Commit, rc *PerfResultCache, baseRes *PerfResult)"
handleOneCommit( ${1:pc *PerfConfig}, ${2:com *Commit}, ${3:rc *PerfResultCache}, ${4:baseRes *PerfResult})
endsnippet

snippet handlePathRedirects "handlePathRedirects(mux *http.ServeMux, redirects map[string]string, prefix string)"
handlePathRedirects( ${1:mux *http.ServeMux}, ${2:redirects map[string]string}, ${3:prefix string})
endsnippet

snippet handleRoot "handleRoot(w http.ResponseWriter, r *http.Request)"
handleRoot( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handleSingleEvent "handleSingleEvent(event_id int32)"
handleSingleEvent( ${1:event_id int32})
endsnippet

snippet handleStatus "handleStatus(w http.ResponseWriter, r *http.Request)"
handleStatus( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handleStopSignals "handleStopSignals(p proxy.Proxy)"
handleStopSignals( ${1:p proxy.Proxy})
endsnippet

snippet handleUser "handleUser(user *User)"
handleUser( ${1:user *User})
endsnippet

snippet handleWriteTGZ "handleWriteTGZ(w http.ResponseWriter, r *http.Request)"
handleWriteTGZ( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handle_backend "handle_backend(lbbroker *lbbroker_t)"
handle_backend( ${1:lbbroker *lbbroker_t})
endsnippet

snippet handle_frontend "handle_frontend(lbbroker *lbbroker_t)"
handle_frontend( ${1:lbbroker *lbbroker_t})
endsnippet

snippet handlerAccessLog "handlerAccessLog(handler http.Handler)"
handlerAccessLog( ${1:handler http.Handler})
endsnippet

snippet handlerAuth "handlerAuth(w http.ResponseWriter, r *http.Request)"
handlerAuth( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerGetContainers "handlerGetContainers(w http.ResponseWriter, r *http.Request)"
handlerGetContainers( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerGetDeleteTags "handlerGetDeleteTags(w http.ResponseWriter, r *http.Request)"
handlerGetDeleteTags( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerGetImage "handlerGetImage(w http.ResponseWriter, r *http.Request)"
handlerGetImage( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerGetInfo "handlerGetInfo(w http.ResponseWriter, r *http.Request)"
handlerGetInfo( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerGetPing "handlerGetPing(w http.ResponseWriter, r *http.Request)"
handlerGetPing( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerGetTag "handlerGetTag(w http.ResponseWriter, r *http.Request)"
handlerGetTag( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerImages "handlerImages(w http.ResponseWriter, r *http.Request)"
handlerImages( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerPutImage "handlerPutImage(w http.ResponseWriter, r *http.Request)"
handlerPutImage( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerPutTag "handlerPutTag(w http.ResponseWriter, r *http.Request)"
handlerPutTag( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerSearch "handlerSearch(w http.ResponseWriter, r *http.Request)"
handlerSearch( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handlerUsers "handlerUsers(w http.ResponseWriter, r *http.Request)"
handlerUsers( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet handshake "handshake(c *websocket.Config, req *http.Request)"
handshake( ${1:c *websocket.Config}, ${2:req *http.Request})
endsnippet

snippet has "has(c interface{}, key string)"
has( ${1:c interface{}}, ${2:key string})
endsnippet

snippet hasAttr "hasAttr(key, val string)"
hasAttr( ${1:key}, ${2:val string})
endsnippet

snippet hasBreak "hasBreak(s ast.Stmt, label string, implicit bool)"
hasBreak( ${1:s ast.Stmt}, ${2:label string}, ${3:implicit bool})
endsnippet

snippet hasBreakList "hasBreakList(list []ast.Stmt, label string, implicit bool)"
hasBreakList( ${1:list []ast.Stmt}, ${2:label string}, ${3:implicit bool})
endsnippet

snippet hasClass "hasClass(name string)"
hasClass( ${1:name string})
endsnippet

snippet hasErrMsg "hasErrMsg(d []byte)"
hasErrMsg( ${1:d []byte})
endsnippet

snippet hasFuncLiteral "hasFuncLiteral(n ast.Node)"
hasFuncLiteral( ${1:n ast.Node})
endsnippet

snippet hasMethod "hasMethod(methods []string, method string)"
hasMethod( ${1:methods []string}, ${2:method string})
endsnippet

snippet hasNil "hasNil(typ Type)"
hasNil( ${1:typ Type})
endsnippet

snippet hasPathPrefix "hasPathPrefix(x, y string)"
hasPathPrefix( ${1:x}, ${2:y string})
endsnippet

snippet hasRoutableIP "hasRoutableIP(network string, ifi *net.Interface)"
hasRoutableIP( ${1:network string}, ${2:ifi *net.Interface})
endsnippet

snippet hasSideEffects "hasSideEffects(e ast.Expr)"
hasSideEffects( ${1:e ast.Expr})
endsnippet

snippet hasStruct "hasStruct(v interface{})"
hasStruct( ${1:v interface{}})
endsnippet

snippet hasStyle "hasStyle(s Style)"
hasStyle( ${1:s Style})
endsnippet

snippet hasSuffix "hasSuffix(s, suff string)"
hasSuffix( ${1:s}, ${2:suff string})
endsnippet

snippet hasToken "hasToken(tokens []token, tt token)"
hasToken( ${1:tokens []token}, ${2:tt token})
endsnippet

snippet has_prefix "has_prefix(s, prefix string, ignorecase bool)"
has_prefix( ${1:s}, ${2:prefix string}, ${3:ignorecase bool})
endsnippet

snippet hash "hash(t types.Type, x value)"
hash( ${1:t types.Type}, ${2:x value})
endsnippet

snippet hashString "hashString(s string)"
hashString( ${1:s string})
endsnippet

snippet hashType "hashType(t types.Type)"
hashType( ${1:t types.Type})
endsnippet

snippet headersWithAuth "headersWithAuth(auths ...interface{})"
headersWithAuth( ${1:auths ...interface{}})
endsnippet

snippet help_alliance_resource "help_alliance_resource(conn *net.TCPConn, t *testing.T)"
help_alliance_resource( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet hgHashFromString "hgHashFromString(s string)"
hgHashFromString( ${1:s string})
endsnippet

snippet hgLog "hgLog(dir string, args ...string)"
hgLog( ${1:dir string}, ${2:args ...string})
endsnippet

snippet hgPull "hgPull(dir string)"
hgPull( ${1:dir string})
endsnippet

snippet hgradRed "hgradRed(alpha int)"
hgradRed( ${1:alpha int})
endsnippet

snippet highlight "highlight(node *html.Node, char string)"
highlight( ${1:node *html.Node}, ${2:char string})
endsnippet

snippet hijackServer "hijackServer(w http.ResponseWriter)"
hijackServer( ${1:w http.ResponseWriter})
endsnippet

snippet hire_hero "hire_hero(conn *net.TCPConn, t *testing.T)"
hire_hero( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet hixie75ClientHandshake "hixie75ClientHandshake(config *Config, br *bufio.Reader, bw *bufio.Writer)"
hixie75ClientHandshake( ${1:config *Config}, ${2:br *bufio.Reader}, ${3:bw *bufio.Writer})
endsnippet

snippet hixie76ClientHandshake "hixie76ClientHandshake(config *Config, br *bufio.Reader, bw *bufio.Writer)"
hixie76ClientHandshake( ${1:config *Config}, ${2:br *bufio.Reader}, ${3:bw *bufio.Writer})
endsnippet

snippet hostPort "hostPort(host string)"
hostPort( ${1:host string})
endsnippet

snippet htmlGen "htmlGen(w io.Writer, src []byte, boundaries []cover.Boundary)"
htmlGen( ${1:w io.Writer}, ${2:src []byte}, ${3:boundaries []cover.Boundary})
endsnippet

snippet htmlIntegrationPoint "htmlIntegrationPoint(n *Node)"
htmlIntegrationPoint( ${1:n *Node})
endsnippet

snippet htmlOutput "htmlOutput(profile, outfile string)"
htmlOutput( ${1:profile}, ${2:outfile string})
endsnippet

snippet httpError "httpError(w http.ResponseWriter, err error)"
httpError( ${1:w http.ResponseWriter}, ${2:err error})
endsnippet

snippet httpGET "httpGET(url string)"
httpGET( ${1:url string})
endsnippet

snippet httpsOrHTTP "httpsOrHTTP(importPath string)"
httpsOrHTTP( ${1:importPath string})
endsnippet

snippet hupHandler "hupHandler(sig os.Signal)"
hupHandler( ${1:sig os.Signal})
endsnippet

snippet hybiClientHandshake "hybiClientHandshake(config *Config, br *bufio.Reader, bw *bufio.Writer)"
hybiClientHandshake( ${1:config *Config}, ${2:br *bufio.Reader}, ${3:bw *bufio.Writer})
endsnippet

snippet icannStr "icannStr(icann bool)"
icannStr( ${1:icann bool})
endsnippet

snippet identAtOffset "identAtOffset(fset *token.FileSet, f *ast.File, offset int)"
identAtOffset( ${1:fset *token.FileSet}, ${2:f *ast.File}, ${3:offset int})
endsnippet

snippet identListExports "identListExports(list []*Ident)"
identListExports( ${1:list []*Ident})
endsnippet

snippet identListSize "identListSize(list []*ast.Ident, maxSize int)"
identListSize( ${1:list []*ast.Ident}, ${2:maxSize int})
endsnippet

snippet identModesFor "identModesFor(node ast.Node)"
identModesFor( ${1:node ast.Node})
endsnippet

snippet identical "identical(x, y Type, p *ifacePair)"
identical( ${1:x}, ${2:y Type}, ${3:p *ifacePair})
endsnippet

snippet identifier "identifier(s string)"
identifier( ${1:s string})
endsnippet

snippet ifrDataByte "ifrDataByte(b byte)"
ifrDataByte( ${1:b byte})
endsnippet

snippet imag "imag(c ComplexType)"
imag( ${1:c ComplexType})
endsnippet

snippet imageExists "imageExists(image string)"
imageExists( ${1:image string})
endsnippet

snippet implements "implements(o *Oracle, qpos *QueryPos)"
implements( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet implementsIntf "implementsIntf(typ, iTyp reflect.Type)"
implementsIntf( ${1:typ}, ${2:iTyp reflect.Type})
endsnippet

snippet implicitArrayDeref "implicitArrayDeref(typ Type)"
implicitArrayDeref( ${1:typ Type})
endsnippet

snippet importComment "importComment(s ast.Spec)"
importComment( ${1:s ast.Spec})
endsnippet

snippet importGroup "importGroup(importPath string)"
importGroup( ${1:importPath string})
endsnippet

snippet importName "importName(s ast.Spec)"
importName( ${1:s ast.Spec})
endsnippet

snippet importPath "importPath(s *ast.ImportSpec)"
importPath( ${1:s *ast.ImportSpec})
endsnippet

snippet importPathToIdentMap "importPathToIdentMap(f *ast.File)"
importPathToIdentMap( ${1:f *ast.File})
endsnippet

snippet importPathToNameBasic "importPathToNameBasic(importPath string)"
importPathToNameBasic( ${1:importPath string})
endsnippet

snippet importPathToNameGoPath "importPathToNameGoPath(importPath string)"
importPathToNameGoPath( ${1:importPath string})
endsnippet

snippet importPaths "importPaths(args []string)"
importPaths( ${1:args []string})
endsnippet

snippet importPathsNoDotExpansion "importPathsNoDotExpansion(args []string)"
importPathsNoDotExpansion( ${1:args []string})
endsnippet

snippet importSpec "importSpec(f *ast.File, path string)"
importSpec( ${1:f *ast.File}, ${2:path string})
endsnippet

snippet importType "importType(path, name string)"
importType( ${1:path}, ${2:name string})
endsnippet

snippet imports "imports(f *ast.File, path string)"
imports( ${1:f *ast.File}, ${2:path string})
endsnippet

snippet inBodyIM "inBodyIM(p *parser)"
inBodyIM( ${1:p *parser})
endsnippet

snippet inCaptionIM "inCaptionIM(p *parser)"
inCaptionIM( ${1:p *parser})
endsnippet

snippet inCellIM "inCellIM(p *parser)"
inCellIM( ${1:p *parser})
endsnippet

snippet inColumnGroupIM "inColumnGroupIM(p *parser)"
inColumnGroupIM( ${1:p *parser})
endsnippet

snippet inFramesetIM "inFramesetIM(p *parser)"
inFramesetIM( ${1:p *parser})
endsnippet

snippet inHeadIM "inHeadIM(p *parser)"
inHeadIM( ${1:p *parser})
endsnippet

snippet inRowIM "inRowIM(p *parser)"
inRowIM( ${1:p *parser})
endsnippet

snippet inSelectIM "inSelectIM(p *parser)"
inSelectIM( ${1:p *parser})
endsnippet

snippet inSelectInTableIM "inSelectInTableIM(p *parser)"
inSelectInTableIM( ${1:p *parser})
endsnippet

snippet inSlice "inSlice(a string, list []string)"
inSlice( ${1:a string}, ${2:list []string})
endsnippet

snippet inTableBodyIM "inTableBodyIM(p *parser)"
inTableBodyIM( ${1:p *parser})
endsnippet

snippet inTableIM "inTableIM(p *parser)"
inTableIM( ${1:p *parser})
endsnippet

snippet incCounterStmt "incCounterStmt(f *File, counter ast.Expr)"
incCounterStmt( ${1:f *File}, ${2:counter ast.Expr})
endsnippet

snippet incr "incr(x int)"
incr( ${1:x int})
endsnippet

snippet indent "indent(buf *bytes.Buffer, s string)"
indent( ${1:buf *bytes.Buffer}, ${2:s string})
endsnippet

snippet index_predicate "index_predicate(v ast.Expr)"
index_predicate( ${1:v ast.Expr})
endsnippet

snippet infer_range_type "infer_range_type(e ast.Expr, sc *scope, valueindex int)"
infer_range_type( ${1:e ast.Expr}, ${2:sc *scope}, ${3:valueindex int})
endsnippet

snippet infer_type "infer_type(v ast.Expr, scope *scope, index int)"
infer_type( ${1:v ast.Expr}, ${2:scope *scope}, ${3:index int})
endsnippet

snippet infoKind_htmlFunc "infoKind_htmlFunc(info SpotInfo)"
infoKind_htmlFunc( ${1:info SpotInfo})
endsnippet

snippet initAction "initAction(context *cli.Context)"
initAction( ${1:context *cli.Context})
endsnippet

snippet initHandler "initHandler(w http.ResponseWriter, r *http.Request)"
initHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet initLogging "initLogging(lvl log.Level)"
initLogging( ${1:lvl log.Level})
endsnippet

snippet initNodes "initNodes(n *node, visiting map[*node]bool, deflt Format)"
initNodes( ${1:n *node}, ${2:visiting map[*node]bool}, ${3:deflt Format})
endsnippet

snippet initReflect "initReflect(i *interpreter)"
initReflect( ${1:i *interpreter})
endsnippet

snippet initRepo "initRepo(c *C, kind, rootDir, pkg string)"
initRepo( ${1:c *C}, ${2:kind}, ${3:rootDir}, ${4:pkg string})
endsnippet

snippet initSide "initSide(side, goHash, toolsHash string)"
initSide( ${1:side}, ${2:goHash}, ${3:toolsHash string})
endsnippet

snippet initTemplates "initTemplates(base string)"
initTemplates( ${1:base string})
endsnippet

snippet initialComments "initialComments(content []byte)"
initialComments( ${1:content []byte})
endsnippet

snippet initialIM "initialIM(p *parser)"
initialIM( ${1:p *parser})
endsnippet

snippet initialize "initialize(config *configuration)"
initialize( ${1:config *configuration})
endsnippet

snippet insert "insert(b *Builder, args []string, attributes map[string]bool, original string)"
insert( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet insertPos "insertPos(pos token.Pos, traces [][]token.Pos)"
insertPos( ${1:pos token.Pos}, ${2:traces [][]token.Pos})
endsnippet

snippet inspectField "inspectField(name, field string)"
inspectField( ${1:name}, ${2:field string})
endsnippet

snippet inspectFieldJSON "inspectFieldJSON(name, field string)"
inspectFieldJSON( ${1:name}, ${2:field string})
endsnippet

snippet inspectFieldMap "inspectFieldMap(name, path, field string)"
inspectFieldMap( ${1:name}, ${2:path}, ${3:field string})
endsnippet

snippet install "install(args []string)"
install( ${1:args []string})
endsnippet

snippet installsubfont "installsubfont(name string, subfont *Subfont)"
installsubfont( ${1:name string}, ${2:subfont *Subfont})
endsnippet

snippet instanceDisk "instanceDisk(svc *compute.Service)"
instanceDisk( ${1:svc *compute.Service})
endsnippet

snippet instances "instances(c cmd, conn *ec2.EC2, args []string)"
instances( ${1:c cmd}, ${2:conn *ec2.EC2}, ${3:args []string})
endsnippet

snippet int16tofloat32be "int16tofloat32be(samples []float32, data []byte)"
int16tofloat32be( ${1:samples []float32}, ${2:data []byte})
endsnippet

snippet int16tofloat32le "int16tofloat32le(samples []float32, data []byte)"
int16tofloat32le( ${1:samples []float32}, ${2:data []byte})
endsnippet

snippet int2fix "int2fix(i int)"
int2fix( ${1:i int})
endsnippet

snippet intConst "intConst(i int64)"
intConst( ${1:i int64})
endsnippet

snippet intPow "intPow(z, x, y *big.Int)"
intPow( ${1:z}, ${2:x}, ${3:y *big.Int})
endsnippet

snippet intToHash "intToHash(i int64)"
intToHash( ${1:i int64})
endsnippet

snippet intToString "intToString(size, unit float64, _map []string)"
intToString( ${1:size}, ${2:unit float64}, ${3:_map []string})
endsnippet

snippet interact "interact(client *ncrpc.Client)"
interact( ${1:client *ncrpc.Client})
endsnippet

snippet interactive "interactive(c *g9pc.Client)"
interactive( ${1:c *g9pc.Client})
endsnippet

snippet interfaceOf "interfaceOf(v reflect.Value)"
interfaceOf( ${1:v reflect.Value})
endsnippet

snippet interpolateColor "interpolateColor(c1, c2 color.Color, where float64)"
interpolateColor( ${1:c1}, ${2:c2 color.Color}, ${3:where float64})
endsnippet

snippet interruptInferior "interruptInferior(process *os.Process, pid string)"
interruptInferior( ${1:process *os.Process}, ${2:pid string})
endsnippet

snippet intersect "intersect(p, v realPoint, b line)"
intersect( ${1:p}, ${2:v realPoint}, ${3:b line})
endsnippet

snippet ioctl "ioctl(fd, cmd, ptr uintptr)"
ioctl( ${1:fd}, ${2:cmd}, ${3:ptr uintptr})
endsnippet

snippet ioctlBlkDiscard "ioctlBlkDiscard(fd uintptr, offset, length uint64)"
ioctlBlkDiscard( ${1:fd uintptr}, ${2:offset}, ${3:length uint64})
endsnippet

snippet ioctlBlkGetSize64 "ioctlBlkGetSize64(fd uintptr)"
ioctlBlkGetSize64( ${1:fd uintptr})
endsnippet

snippet ioctlLoopClrFd "ioctlLoopClrFd(loopFd uintptr)"
ioctlLoopClrFd( ${1:loopFd uintptr})
endsnippet

snippet ioctlLoopCtlGetFree "ioctlLoopCtlGetFree(fd uintptr)"
ioctlLoopCtlGetFree( ${1:fd uintptr})
endsnippet

snippet ioctlLoopGetStatus64 "ioctlLoopGetStatus64(loopFd uintptr)"
ioctlLoopGetStatus64( ${1:loopFd uintptr})
endsnippet

snippet ioctlLoopSetCapacity "ioctlLoopSetCapacity(loopFd uintptr, value int)"
ioctlLoopSetCapacity( ${1:loopFd uintptr}, ${2:value int})
endsnippet

snippet ioctlLoopSetFd "ioctlLoopSetFd(loopFd, sparseFd uintptr)"
ioctlLoopSetFd( ${1:loopFd}, ${2:sparseFd uintptr})
endsnippet

snippet ioctlLoopSetStatus64 "ioctlLoopSetStatus64(loopFd uintptr, loopInfo *LoopInfo64)"
ioctlLoopSetStatus64( ${1:loopFd uintptr}, ${2:loopInfo *LoopInfo64})
endsnippet

snippet ipAssigned "ipAssigned(iface *net.Interface, ip net.IP)"
ipAssigned( ${1:iface *net.Interface}, ${2:ip net.IP})
endsnippet

snippet ipPerms "ipPerms(args []string)"
ipPerms( ${1:args []string})
endsnippet

snippet ipPermsFlags "ipPermsFlags(flags *flag.FlagSet)"
ipPermsFlags( ${1:flags *flag.FlagSet})
endsnippet

snippet ipToBigInt "ipToBigInt(ip net.IP)"
ipToBigInt( ${1:ip net.IP})
endsnippet

snippet ipv4HeaderPrepend "ipv4HeaderPrepend(fd int)"
ipv4HeaderPrepend( ${1:fd int})
endsnippet

snippet ipv4MulticastInterface "ipv4MulticastInterface(fd int)"
ipv4MulticastInterface( ${1:fd int})
endsnippet

snippet ipv4MulticastLoopback "ipv4MulticastLoopback(fd int)"
ipv4MulticastLoopback( ${1:fd int})
endsnippet

snippet ipv4MulticastTTL "ipv4MulticastTTL(fd int)"
ipv4MulticastTTL( ${1:fd int})
endsnippet

snippet ipv4PacketInfo "ipv4PacketInfo(fd int)"
ipv4PacketInfo( ${1:fd int})
endsnippet

snippet ipv4ReceiveDestinationAddress "ipv4ReceiveDestinationAddress(fd int)"
ipv4ReceiveDestinationAddress( ${1:fd int})
endsnippet

snippet ipv4ReceiveInterface "ipv4ReceiveInterface(fd int)"
ipv4ReceiveInterface( ${1:fd int})
endsnippet

snippet ipv4ReceiveTOS "ipv4ReceiveTOS(fd int)"
ipv4ReceiveTOS( ${1:fd int})
endsnippet

snippet ipv4ReceiveTTL "ipv4ReceiveTTL(fd int)"
ipv4ReceiveTTL( ${1:fd int})
endsnippet

snippet ipv4SendSourceAddress "ipv4SendSourceAddress(fd int)"
ipv4SendSourceAddress( ${1:fd int})
endsnippet

snippet ipv4TOS "ipv4TOS(fd int)"
ipv4TOS( ${1:fd int})
endsnippet

snippet ipv4TTL "ipv4TTL(fd int)"
ipv4TTL( ${1:fd int})
endsnippet

snippet ipv6Checksum "ipv6Checksum(fd int)"
ipv6Checksum( ${1:fd int})
endsnippet

snippet ipv6HopLimit "ipv6HopLimit(fd int)"
ipv6HopLimit( ${1:fd int})
endsnippet

snippet ipv6ICMPFilter "ipv6ICMPFilter(fd int)"
ipv6ICMPFilter( ${1:fd int})
endsnippet

snippet ipv6MulticastHopLimit "ipv6MulticastHopLimit(fd int)"
ipv6MulticastHopLimit( ${1:fd int})
endsnippet

snippet ipv6MulticastInterface "ipv6MulticastInterface(fd int)"
ipv6MulticastInterface( ${1:fd int})
endsnippet

snippet ipv6MulticastLoopback "ipv6MulticastLoopback(fd int)"
ipv6MulticastLoopback( ${1:fd int})
endsnippet

snippet ipv6PathMTU "ipv6PathMTU(fd int)"
ipv6PathMTU( ${1:fd int})
endsnippet

snippet ipv6ReceiveHopLimit "ipv6ReceiveHopLimit(fd int)"
ipv6ReceiveHopLimit( ${1:fd int})
endsnippet

snippet ipv6ReceivePacketInfo "ipv6ReceivePacketInfo(fd int)"
ipv6ReceivePacketInfo( ${1:fd int})
endsnippet

snippet ipv6ReceivePathMTU "ipv6ReceivePathMTU(fd int)"
ipv6ReceivePathMTU( ${1:fd int})
endsnippet

snippet ipv6ReceiveTrafficClass "ipv6ReceiveTrafficClass(fd int)"
ipv6ReceiveTrafficClass( ${1:fd int})
endsnippet

snippet ipv6TrafficClass "ipv6TrafficClass(fd int)"
ipv6TrafficClass( ${1:fd int})
endsnippet

snippet is32bit "is32bit(x int64)"
is32bit( ${1:x int64})
endsnippet

snippet is63bit "is63bit(x int64)"
is63bit( ${1:x int64})
endsnippet

snippet isASCII "isASCII(s string)"
isASCII( ${1:s string})
endsnippet

snippet isAccessibleFrom "isAccessibleFrom(obj types.Object, pkg *types.Package)"
isAccessibleFrom( ${1:obj types.Object}, ${2:pkg *types.Package})
endsnippet

snippet isAwesome "isAwesome(name string)"
isAwesome( ${1:name string})
endsnippet

snippet isBinary "isBinary(expr ast.Expr)"
isBinary( ${1:expr ast.Expr})
endsnippet

snippet isBlank "isBlank(n ast.Expr)"
isBlank( ${1:n ast.Expr})
endsnippet

snippet isBlankIdent "isBlankIdent(e ast.Expr)"
isBlankIdent( ${1:e ast.Expr})
endsnippet

snippet isBoldTitle "isBoldTitle(s string)"
isBoldTitle( ${1:s string})
endsnippet

snippet isBoolean "isBoolean(typ Type)"
isBoolean( ${1:typ Type})
endsnippet

snippet isBranchCommit "isBranchCommit(c *Commit, b string)"
isBranchCommit( ${1:c *Commit}, ${2:b string})
endsnippet

snippet isByteSlice "isByteSlice(val reflect.Value)"
isByteSlice( ${1:val reflect.Value})
endsnippet

snippet isBytesOrRunes "isBytesOrRunes(typ Type)"
isBytesOrRunes( ${1:typ Type})
endsnippet

snippet isCall "isCall(t ast.Expr, pkg, name string)"
isCall( ${1:t ast.Expr}, ${2:pkg}, ${3:name string})
endsnippet

snippet isClosedError "isClosedError(err error)"
isClosedError( ${1:err error})
endsnippet

snippet isComparison "isComparison(op token.Token)"
isComparison( ${1:op token.Token})
endsnippet

snippet isComparisonBlock "isComparisonBlock(b *ssa.BasicBlock)"
isComparisonBlock( ${1:b *ssa.BasicBlock})
endsnippet

snippet isComplex "isComplex(typ Type)"
isComplex( ${1:typ Type})
endsnippet

snippet isConstType "isConstType(typ Type)"
isConstType( ${1:typ Type})
endsnippet

snippet isDigit "isDigit(ch rune)"
isDigit( ${1:ch rune})
endsnippet

snippet isDir "isDir(filename string)"
isDir( ${1:filename string})
endsnippet

snippet isDirectory "isDirectory(name string)"
isDirectory( ${1:name string})
endsnippet

snippet isDoc "isDoc(path string)"
isDoc( ${1:path string})
endsnippet

snippet isEmpty "isEmpty(f *ssa.Function)"
isEmpty( ${1:f *ssa.Function})
endsnippet

snippet isEmptyString "isEmptyString(n ast.Expr)"
isEmptyString( ${1:n ast.Expr})
endsnippet

snippet isEmptyValue "isEmptyValue(v reflect.Value)"
isEmptyValue( ${1:v reflect.Value})
endsnippet

snippet isEmptyValueDeref "isEmptyValueDeref(v reflect.Value, deref bool)"
isEmptyValueDeref( ${1:v reflect.Value}, ${2:deref bool})
endsnippet

snippet isEven "isEven(d int)"
isEven( ${1:d int})
endsnippet

snippet isExported "isExported(name string)"
isExported( ${1:name string})
endsnippet

snippet isExprSwitch "isExprSwitch(s ast.Stmt)"
isExprSwitch( ${1:s ast.Stmt})
endsnippet

snippet isFile "isFile(name string)"
isFile( ${1:name string})
endsnippet

snippet isFlaky "isFlaky(failLog string)"
isFlaky( ${1:failLog string})
endsnippet

snippet isFloat "isFloat(typ Type)"
isFloat( ${1:typ Type})
endsnippet

snippet isGoFile "isGoFile(f os.FileInfo)"
isGoFile( ${1:f os.FileInfo})
endsnippet

snippet isHybiVersion "isHybiVersion(version int)"
isHybiVersion( ${1:version int})
endsnippet

snippet isIdent "isIdent(n interface{})"
isIdent( ${1:n interface{}})
endsnippet

snippet isIdentifier "isIdentifier(s string)"
isIdentifier( ${1:s string})
endsnippet

snippet isInMatches "isInMatches(test string, matches []*Match)"
isInMatches( ${1:test string}, ${2:matches []*Match})
endsnippet

snippet isInit "isInit(fn *ssa.Function)"
isInit( ${1:fn *ssa.Function})
endsnippet

snippet isInteger "isInteger(typ Type)"
isInteger( ${1:typ Type})
endsnippet

snippet isInterface "isInterface(T types.Type)"
isInterface( ${1:T types.Type})
endsnippet

snippet isKeyType "isKeyType(t reflect.Type)"
isKeyType( ${1:t reflect.Type})
endsnippet

snippet isLetter "isLetter(ch rune)"
isLetter( ${1:ch rune})
endsnippet

snippet isLinkLocalUnicast "isLinkLocalUnicast(ip net.IP)"
isLinkLocalUnicast( ${1:ip net.IP})
endsnippet

snippet isLiteralType "isLiteralType(x ast.Expr)"
isLiteralType( ${1:x ast.Expr})
endsnippet

snippet isLocal "isLocal(obj types.Object)"
isLocal( ${1:obj types.Object})
endsnippet

snippet isMasterKey "isMasterKey(c appengine.Context, k string)"
isMasterKey( ${1:c appengine.Context}, ${2:k string})
endsnippet

snippet isMemberChar "isMemberChar(c rune)"
isMemberChar( ${1:c rune})
endsnippet

snippet isMulticastAvailable "isMulticastAvailable(ifi *net.Interface)"
isMulticastAvailable( ${1:ifi *net.Interface})
endsnippet

snippet isName "isName(n ast.Expr, name string)"
isName( ${1:n ast.Expr}, ${2:name string})
endsnippet

snippet isNamed "isNamed(typ Type)"
isNamed( ${1:typ Type})
endsnippet

snippet isNamedType "isNamedType(typ Type, importer Importer)"
isNamedType( ${1:typ Type}, ${2:importer Importer})
endsnippet

snippet isNoise "isNoise(diff, noise float64)"
isNoise( ${1:diff}, ${2:noise float64})
endsnippet

snippet isNotEmpty "isNotEmpty(err error)"
isNotEmpty( ${1:err error})
endsnippet

snippet isNumeric "isNumeric(typ Type)"
isNumeric( ${1:typ Type})
endsnippet

snippet isOdd "isOdd(d int)"
isOdd( ${1:d int})
endsnippet

snippet isOfficialName "isOfficialName(name string)"
isOfficialName( ${1:name string})
endsnippet

snippet isOne "isOne(expr ast.Expr)"
isOne( ${1:expr ast.Expr})
endsnippet

snippet isOneOf "isOneOf(xs ...int)"
isOneOf( ${1:xs ...int})
endsnippet

snippet isOptSep "isOptSep(c rune)"
isOptSep( ${1:c rune})
endsnippet

snippet isOrdered "isOrdered(typ Type)"
isOrdered( ${1:typ Type})
endsnippet

snippet isPackageLevel "isPackageLevel(obj types.Object)"
isPackageLevel( ${1:obj types.Object})
endsnippet

snippet isPerfFailed "isPerfFailed(res *PerfResult, builder string)"
isPerfFailed( ${1:res *PerfResult}, ${2:builder string})
endsnippet

snippet isPkgDir "isPkgDir(fi os.FileInfo)"
isPkgDir( ${1:fi os.FileInfo})
endsnippet

snippet isPkgDot "isPkgDot(t ast.Expr, pkg, name string)"
isPkgDot( ${1:t ast.Expr}, ${2:pkg}, ${3:name string})
endsnippet

snippet isPkgFile "isPkgFile(fi os.FileInfo)"
isPkgFile( ${1:fi os.FileInfo})
endsnippet

snippet isPointer "isPointer(typ types.Type)"
isPointer( ${1:typ types.Type})
endsnippet

snippet isPtrPkgDot "isPtrPkgDot(t ast.Expr, pkg, name string)"
isPtrPkgDot( ${1:t ast.Expr}, ${2:pkg}, ${3:name string})
endsnippet

snippet isRace "isRace(s string)"
isRace( ${1:s string})
endsnippet

snippet isRef "isRef(n ast.Node, info *loader.PackageInfo)"
isRef( ${1:n ast.Node}, ${2:info *loader.PackageInfo})
endsnippet

snippet isRegexp "isRegexp(s string)"
isRegexp( ${1:s string})
endsnippet

snippet isSecure "isSecure(hostname string, insecureRegistries []string)"
isSecure( ${1:hostname string}, ${2:insecureRegistries []string})
endsnippet

snippet isShift "isShift(op token.Token)"
isShift( ${1:op token.Token})
endsnippet

snippet isSlash "isSlash(c int)"
isSlash( ${1:c int})
endsnippet

snippet isSocketSpaceError "isSocketSpaceError(err error)"
isSocketSpaceError( ${1:err error})
endsnippet

snippet isSpecialElement "isSpecialElement(element *Node)"
isSpecialElement( ${1:element *Node})
endsnippet

snippet isStandardImport "isStandardImport(path string)"
isStandardImport( ${1:path string})
endsnippet

snippet isStdlib "isStdlib(pkg string)"
isStdlib( ${1:pkg string})
endsnippet

snippet isString "isString(typ Type)"
isString( ${1:typ Type})
endsnippet

snippet isStringer "isStringer(f *File, d *ast.FuncDecl)"
isStringer( ${1:f *File}, ${2:d *ast.FuncDecl})
endsnippet

snippet isSubName "isSubName(name, sub string)"
isSubName( ${1:name}, ${2:sub string})
endsnippet

snippet isSubpackage "isSubpackage(rootPath, target string)"
isSubpackage( ${1:rootPath}, ${2:target string})
endsnippet

snippet isTag "isTag(a atom.Atom)"
isTag( ${1:a atom.Atom})
endsnippet

snippet isTest "isTest(name, prefix string)"
isTest( ${1:name}, ${2:prefix string})
endsnippet

snippet isTestSig "isTestSig(f *Function, prefix string, sig *types.Signature)"
isTestSig( ${1:f *Function}, ${2:prefix string}, ${3:sig *types.Signature})
endsnippet

snippet isTopName "isTopName(n ast.Expr, name string)"
isTopName( ${1:n ast.Expr}, ${2:name string})
endsnippet

snippet isType "isType(t string)"
isType( ${1:t string})
endsnippet

snippet isTypeAssertBlock "isTypeAssertBlock(b *ssa.BasicBlock)"
isTypeAssertBlock( ${1:b *ssa.BasicBlock})
endsnippet

snippet isTypeName "isTypeName(x ast.Expr)"
isTypeName( ${1:x ast.Expr})
endsnippet

snippet isTypeSwitchAssert "isTypeSwitchAssert(x ast.Expr)"
isTypeSwitchAssert( ${1:x ast.Expr})
endsnippet

snippet isTypeSwitchGuard "isTypeSwitchGuard(s ast.Stmt)"
isTypeSwitchGuard( ${1:s ast.Stmt})
endsnippet

snippet isTyped "isTyped(typ Type)"
isTyped( ${1:typ Type})
endsnippet

snippet isURL "isURL(u string)"
isURL( ${1:u string})
endsnippet

snippet isUintptr "isUintptr(typ Type)"
isUintptr( ${1:typ Type})
endsnippet

snippet isUnsafePointer "isUnsafePointer(typ Type)"
isUnsafePointer( ${1:typ Type})
endsnippet

snippet isUnsigned "isUnsigned(typ Type)"
isUnsigned( ${1:typ Type})
endsnippet

snippet isUntyped "isUntyped(typ Type)"
isUntyped( ${1:typ Type})
endsnippet

snippet isValidDockerInitPath "isValidDockerInitPath(target string, selfPath string)"
isValidDockerInitPath( ${1:target string}, ${2:selfPath string})
endsnippet

snippet isValidIdentifier "isValidIdentifier(id string)"
isValidIdentifier( ${1:id string})
endsnippet

snippet isValidImport "isValidImport(lit string)"
isValidImport( ${1:lit string})
endsnippet

snippet isValidInterface "isValidInterface(s string)"
isValidInterface( ${1:s string})
endsnippet

snippet isValidMember "isValidMember(s string)"
isValidMember( ${1:s string})
endsnippet

snippet isValidPathElement "isValidPathElement(s string)"
isValidPathElement( ${1:s string})
endsnippet

snippet isValuePreserving "isValuePreserving(ut_src, ut_dst types.Type)"
isValuePreserving( ${1:ut_src}, ${2:ut_dst types.Type})
endsnippet

snippet isWhitelisted "isWhitelisted(filename string)"
isWhitelisted( ${1:filename string})
endsnippet

snippet isZero "isZero(expr ast.Expr)"
isZero( ${1:expr ast.Expr})
endsnippet

snippet is_cursor_hidden "is_cursor_hidden(x, y int)"
is_cursor_hidden( ${1:x}, ${2:y int})
endsnippet

snippet isincos2 "isincos2(x, y raster.Fix32)"
isincos2( ${1:x}, ${2:y raster.Fix32})
endsnippet

snippet isptmaster "isptmaster(fd uintptr)"
isptmaster( ${1:fd uintptr})
endsnippet

snippet itoa "itoa(i int)"
itoa( ${1:i int})
endsnippet

snippet join "join(set map[string]int)"
join( ${1:set map[string]int})
endsnippet

snippet joinCpuset "joinCpuset(c *cgroups.Cgroup, pid int)"
joinCpuset( ${1:c *cgroups.Cgroup}, ${2:pid int})
endsnippet

snippet joinDevices "joinDevices(c *cgroups.Cgroup, pid int)"
joinDevices( ${1:c *cgroups.Cgroup}, ${2:pid int})
endsnippet

snippet joinExistingNamespaces "joinExistingNamespaces(namespaces []libcontainer.Namespace)"
joinExistingNamespaces( ${1:namespaces []libcontainer.Namespace})
endsnippet

snippet joinFreezer "joinFreezer(c *cgroups.Cgroup, pid int)"
joinFreezer( ${1:c *cgroups.Cgroup}, ${2:pid int})
endsnippet

snippet joinFunc "joinFunc(in, out []string)"
joinFunc( ${1:in}, ${2:out []string})
endsnippet

snippet joinIPv4Group "joinIPv4Group(fd int, ifi *net.Interface, grp net.IP)"
joinIPv4Group( ${1:fd int}, ${2:ifi *net.Interface}, ${3:grp net.IP})
endsnippet

snippet joinIPv6Group "joinIPv6Group(fd int, ifi *net.Interface, grp net.IP)"
joinIPv6Group( ${1:fd int}, ${2:ifi *net.Interface}, ${3:grp net.IP})
endsnippet

snippet joinMemory "joinMemory(c *cgroups.Cgroup, pid int)"
joinMemory( ${1:c *cgroups.Cgroup}, ${2:pid int})
endsnippet

snippet joinMountOptions "joinMountOptions(a, b string)"
joinMountOptions( ${1:a}, ${2:b string})
endsnippet

snippet joinPath "joinPath(name string, num int)"
joinPath( ${1:name string}, ${2:num int})
endsnippet

snippet joinPos "joinPos(where string, i int)"
joinPos( ${1:where string}, ${2:i int})
endsnippet

snippet joseBase64UrlDecode "joseBase64UrlDecode(s string)"
joseBase64UrlDecode( ${1:s string})
endsnippet

snippet joseBase64UrlEncode "joseBase64UrlEncode(b []byte)"
joseBase64UrlEncode( ${1:b []byte})
endsnippet

snippet journalError "journalError(s string)"
journalError( ${1:s string})
endsnippet

snippet js_confirm "js_confirm(message string)"
js_confirm( ${1:message string})
endsnippet

snippet jsonFields "jsonFields(t reflect.Type, canAddr bool)"
jsonFields( ${1:t reflect.Type}, ${2:canAddr bool})
endsnippet

snippet jsonMarshal "jsonMarshal(v interface{})"
jsonMarshal( ${1:v interface{}})
endsnippet

snippet jsonPath "jsonPath(root string)"
jsonPath( ${1:root string})
endsnippet

snippet jsonUnmarshal "jsonUnmarshal(msg []byte, payloadType byte, v interface{})"
jsonUnmarshal( ${1:msg []byte}, ${2:payloadType byte}, ${3:v interface{}})
endsnippet

snippet jumpThreading "jumpThreading(f *Function, b *BasicBlock)"
jumpThreading( ${1:f *Function}, ${2:b *BasicBlock})
endsnippet

snippet jumpTo "jumpTo(where string, i int)"
jumpTo( ${1:where string}, ${2:i int})
endsnippet

snippet kbdproc "kbdproc(d *Display, ch chan rune)"
kbdproc( ${1:d *Display}, ${2:ch chan rune})
endsnippet

snippet keepCapabilities "keepCapabilities(adds []string, drops []string)"
keepCapabilities( ${1:adds []string}, ${2:drops []string})
endsnippet

snippet keepTypeColumn "keepTypeColumn(specs []ast.Spec)"
keepTypeColumn( ${1:specs []ast.Spec})
endsnippet

snippet keyHandler "keyHandler(w http.ResponseWriter, r *http.Request)"
keyHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet keyIDEncode "keyIDEncode(b []byte)"
keyIDEncode( ${1:b []byte})
endsnippet

snippet keyIDFromCryptoKey "keyIDFromCryptoKey(pubKey PublicKey)"
keyIDFromCryptoKey( ${1:pubKey PublicKey})
endsnippet

snippet key_event_record_to_event "key_event_record_to_event(r *key_event_record)"
key_event_record_to_event( ${1:r *key_event_record})
endsnippet

snippet keys "keys(m map[string]bool)"
keys( ${1:m map[string]bool})
endsnippet

snippet killAndWait "killAndWait(cmd *exec.Cmd)"
killAndWait( ${1:cmd *exec.Cmd})
endsnippet

snippet killPos "killPos(v reflect.Value)"
killPos( ${1:v reflect.Value})
endsnippet

snippet labelString "labelString(l *pointer.Label, lineMapping map[string]string, prog *ssa.Program)"
labelString( ${1:l *pointer.Label}, ${2:lineMapping map[string]string}, ${3:prog *ssa.Program})
endsnippet

snippet largeFile "largeFile(t *T, enc Encoder)"
largeFile( ${1:t *T}, ${2:enc Encoder})
endsnippet

snippet last "last(s string, b byte)"
last( ${1:s string}, ${2:b byte})
endsnippet

snippet lastLine "lastLine(txt string)"
lastLine( ${1:txt string})
endsnippet

snippet latency "latency(stats []Stat)"
latency( ${1:stats []Stat})
endsnippet

snippet launchpadVCS "launchpadVCS(match map[string]string)"
launchpadVCS( ${1:match map[string]string})
endsnippet

snippet leaf "leaf(x, y int)"
leaf( ${1:x}, ${2:y int})
endsnippet

snippet leaveIPv4Group "leaveIPv4Group(fd int, ifi *net.Interface, grp net.IP)"
leaveIPv4Group( ${1:fd int}, ${2:ifi *net.Interface}, ${3:grp net.IP})
endsnippet

snippet leaveIPv6Group "leaveIPv6Group(fd int, ifi *net.Interface, grp net.IP)"
leaveIPv6Group( ${1:fd int}, ${2:ifi *net.Interface}, ${3:grp net.IP})
endsnippet

snippet lessByDelta "lessByDelta(i, j BenchCmp, calcDelta func(BenchCmp)"
lessByDelta( ${1:i}, ${2:j BenchCmp}, ${3:calcDelta func(BenchCmp})
endsnippet

snippet lessFileRun "lessFileRun(x, y interface{})"
lessFileRun( ${1:x}, ${2:y interface{}})
endsnippet

snippet lessKind "lessKind(x, y interface{})"
lessKind( ${1:x}, ${2:y interface{}})
endsnippet

snippet lessPakRun "lessPakRun(x, y interface{})"
lessPakRun( ${1:x}, ${2:y interface{}})
endsnippet

snippet lessSpot "lessSpot(x, y interface{})"
lessSpot( ${1:x}, ${2:y interface{}})
endsnippet

snippet lessWordPair "lessWordPair(x, y interface{})"
lessWordPair( ${1:x}, ${2:y interface{}})
endsnippet

snippet lesserHeading "lesserHeading(text, prefix string)"
lesserHeading( ${1:text}, ${2:prefix string})
endsnippet

snippet level "level(buf Float32Buf, t int64, level float32)"
level( ${1:buf Float32Buf}, ${2:t int64}, ${3:level float32})
endsnippet

snippet level_up_building "level_up_building(F_position_id string, F_force_finish bool, conn *net.TCPConn, t *testing.T)"
level_up_building( ${1:F_position_id string}, ${2:F_force_finish bool}, ${3:conn *net.TCPConn}, ${4:t *testing.T})
endsnippet

snippet level_up_tech "level_up_tech(F_position_id string, F_force_finish bool, conn *net.TCPConn, t *testing.T)"
level_up_tech( ${1:F_position_id string}, ${2:F_force_finish bool}, ${3:conn *net.TCPConn}, ${4:t *testing.T})
endsnippet

snippet lex "lex(s string)"
lex( ${1:s string})
endsnippet

snippet lift "lift(fn *Function)"
lift( ${1:fn *Function})
endsnippet

snippet liftAlloc "liftAlloc(df domFrontier, alloc *Alloc, newPhis newPhiMap)"
liftAlloc( ${1:df domFrontier}, ${2:alloc *Alloc}, ${3:newPhis newPhiMap})
endsnippet

snippet limitNewlineRuns "limitNewlineRuns(s string)"
limitNewlineRuns( ${1:s string})
endsnippet

snippet limitStringLength "limitStringLength(s string, max int)"
limitStringLength( ${1:s string}, ${2:max int})
endsnippet

snippet limiter "limiter(kill chan<- *Message, dest chan<- *Message)"
limiter( ${1:kill chan<- *Message}, ${2:dest chan<- *Message})
endsnippet

snippet lineAttrs "lineAttrs(x, y int)"
lineAttrs( ${1:x}, ${2:y int})
endsnippet

snippet lineMaker "lineMaker(m ui.MouseEvent, ec <-chan interface{})"
lineMaker( ${1:m ui.MouseEvent}, ${2:ec <-chan interface{}})
endsnippet

snippet lineSelection "lineSelection(text []byte)"
lineSelection( ${1:text []byte})
endsnippet

snippet lineString "lineString(text []byte, i int)"
lineString( ${1:text []byte}, ${2:i int})
endsnippet

snippet lineToByte "lineToByte(data []byte, n int)"
lineToByte( ${1:data []byte}, ${2:n int})
endsnippet

snippet linearity "linearity(key uint32)"
linearity( ${1:key uint32})
endsnippet

snippet linecol "linecol(lines []int, offs int)"
linecol( ${1:lines []int}, ${2:offs int})
endsnippet

snippet linkLxcStart "linkLxcStart(root string)"
linkLxcStart( ${1:root string})
endsnippet

snippet linkUnit "linkUnit(target string, conn *Conn, t *testing.T)"
linkUnit( ${1:target string}, ${2:conn *Conn}, ${3:t *testing.T})
endsnippet

snippet linkVendors "linkVendors(ctx *cli.Context, optTarget string)"
linkVendors( ${1:ctx *cli.Context}, ${2:optTarget string})
endsnippet

snippet linksFor "linksFor(node ast.Node)"
linksFor( ${1:node ast.Node})
endsnippet

snippet lintCapAndPunct "lintCapAndPunct(s string)"
lintCapAndPunct( ${1:s string})
endsnippet

snippet lintDir "lintDir(dirname string)"
lintDir( ${1:dirname string})
endsnippet

snippet lintFiles "lintFiles(filenames ...string)"
lintFiles( ${1:filenames ...string})
endsnippet

snippet lintImportedPackage "lintImportedPackage(pkg *build.Package, err error)"
lintImportedPackage( ${1:pkg *build.Package}, ${2:err error})
endsnippet

snippet lintName "lintName(name string)"
lintName( ${1:name string})
endsnippet

snippet lintPackage "lintPackage(pkgname string)"
lintPackage( ${1:pkgname string})
endsnippet

snippet list "list(pkgs []string, testDeps bool)"
list( ${1:pkgs []string}, ${2:testDeps bool})
endsnippet

snippet list_value "list_value(v reflect.Value, name string, w io.Writer)"
list_value( ${1:v reflect.Value}, ${2:name string}, ${3:w io.Writer})
endsnippet

snippet listcmd "listcmd(srv *rpc.Client, _ []string)"
listcmd( ${1:srv *rpc.Client}, ${2:_ []string})
endsnippet

snippet listenerExists "listenerExists(a chan<- *APIEvents, list *[]chan<- *APIEvents)"
listenerExists( ${1:a chan<- *APIEvents}, ${2:list *[]chan<- *APIEvents})
endsnippet

snippet litToString "litToString(lit *ast.BasicLit)"
litToString( ${1:lit *ast.BasicLit})
endsnippet

snippet loadCodewalk "loadCodewalk(filename string)"
loadCodewalk( ${1:filename string})
endsnippet

snippet loadConfig "loadConfig(name string)"
loadConfig( ${1:name string})
endsnippet

snippet loadExports "loadExports(dir string)"
loadExports( ${1:dir string})
endsnippet

snippet loadExportsGoPath "loadExportsGoPath(dir string)"
loadExportsGoPath( ${1:dir string})
endsnippet

snippet loadFromArgs "loadFromArgs(args []string)"
loadFromArgs( ${1:args []string})
endsnippet

snippet loadIds "loadIds(root string)"
loadIds( ${1:root string})
endsnippet

snippet loadJSONKeySetFile "loadJSONKeySetFile(filename string)"
loadJSONKeySetFile( ${1:filename string})
endsnippet

snippet loadJSONKeySetRaw "loadJSONKeySetRaw(data []byte)"
loadJSONKeySetRaw( ${1:data []byte})
endsnippet

snippet loadMetadata "loadMetadata(pth string)"
loadMetadata( ${1:pth string})
endsnippet

snippet loadPEMKeySetFile "loadPEMKeySetFile(filename string)"
loadPEMKeySetFile( ${1:filename string})
endsnippet

snippet loadPkg "loadPkg(wg *sync.WaitGroup, root, pkgrelpath string)"
loadPkg( ${1:wg *sync.WaitGroup}, ${2:root}, ${3:pkgrelpath string})
endsnippet

snippet loadProgram "loadProgram(ctxt *build.Context, pkgs map[string]bool)"
loadProgram( ${1:ctxt *build.Context}, ${2:pkgs map[string]bool})
endsnippet

snippet loadchar "loadchar(f *Font, r rune, c *cacheinfo, h int, noflush bool)"
loadchar( ${1:f *Font}, ${2:r rune}, ${3:c *cacheinfo}, ${4:h int}, ${5:noflush bool})
endsnippet

snippet loc "loc(fset *token.FileSet, pos token.Pos)"
loc( ${1:fset *token.FileSet}, ${2:pos token.Pos})
endsnippet

snippet location "location(tag string)"
location( ${1:tag string})
endsnippet

snippet lockFileEx "lockFileEx(h syscall.Handle, flags, reserved, locklow, lockhigh uint32, ol *syscall.Overlapped)"
lockFileEx( ${1:h syscall.Handle}, ${2:flags}, ${3:reserved}, ${4:locklow}, ${5:lockhigh uint32}, ${6:ol *syscall.Overlapped})
endsnippet

snippet lockPath "lockPath(tpkg *types.Package, typ types.Type)"
lockPath( ${1:tpkg *types.Package}, ${2:typ types.Type})
endsnippet

snippet log "log(f func(*testing.T)"
log( ${1:f func(*testing.T})
endsnippet

snippet logDone "logDone(message string)"
logDone( ${1:message string})
endsnippet

snippet logErr "logErr(w http.ResponseWriter, r *http.Request, err error)"
logErr( ${1:w http.ResponseWriter}, ${2:r *http.Request}, ${3:err error})
endsnippet

snippet logHandler "logHandler(w http.ResponseWriter, r *http.Request)"
logHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet logStack "logStack(format string, args ...interface{})"
logStack( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet logT "logT(x interface{}, format string, args ...interface{})"
logT( ${1:x interface{}}, ${2:format string}, ${3:args ...interface{}})
endsnippet

snippet log_build_context "log_build_context(context build.Context)"
log_build_context( ${1:context build.Context})
endsnippet

snippet log_found_package_maybe "log_found_package_maybe(imp, pkgpath string)"
log_found_package_maybe( ${1:imp}, ${2:pkgpath string})
endsnippet

snippet logf "logf(format string, args ...interface{})"
logf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet loggerOrStderr "loggerOrStderr(log Logger)"
loggerOrStderr( ${1:log Logger})
endsnippet

snippet loggingHandler "loggingHandler(h http.Handler)"
loggingHandler( ${1:h http.Handler})
endsnippet

snippet login_receive_a_packet_without_notify "login_receive_a_packet_without_notify(conn *net.TCPConn)"
login_receive_a_packet_without_notify( ${1:conn *net.TCPConn})
endsnippet

snippet login_user "login_user(mac string, conn *net.TCPConn)"
login_user( ${1:mac string}, ${2:conn *net.TCPConn})
endsnippet

snippet logln "logln(v ...interface{})"
logln( ${1:v ...interface{}})
endsnippet

snippet lookup "lookup(src string)"
lookup( ${1:src string})
endsnippet

snippet lookupBool "lookupBool(name string, set *flag.FlagSet)"
lookupBool( ${1:name string}, ${2:set *flag.FlagSet})
endsnippet

snippet lookupBoolT "lookupBoolT(name string, set *flag.FlagSet)"
lookupBoolT( ${1:name string}, ${2:set *flag.FlagSet})
endsnippet

snippet lookupBuiltinType "lookupBuiltinType(typ int)"
lookupBuiltinType( ${1:typ int})
endsnippet

snippet lookupCL "lookupCL(c appengine.Context, com *Commit)"
lookupCL( ${1:c appengine.Context}, ${2:com *Commit})
endsnippet

snippet lookupDuration "lookupDuration(name string, set *flag.FlagSet)"
lookupDuration( ${1:name string}, ${2:set *flag.FlagSet})
endsnippet

snippet lookupFieldOrMethod "lookupFieldOrMethod(T Type, addressable bool, pkg *Package, name string)"
lookupFieldOrMethod( ${1:T Type}, ${2:addressable bool}, ${3:pkg *Package}, ${4:name string})
endsnippet

snippet lookupFloat64 "lookupFloat64(name string, set *flag.FlagSet)"
lookupFloat64( ${1:name string}, ${2:set *flag.FlagSet})
endsnippet

snippet lookupGeneric "lookupGeneric(name string, set *flag.FlagSet)"
lookupGeneric( ${1:name string}, ${2:set *flag.FlagSet})
endsnippet

snippet lookupGidByName "lookupGidByName(nameOrGid string)"
lookupGidByName( ${1:nameOrGid string})
endsnippet

snippet lookupGroup "lookupGroup(filter func(g Group)"
lookupGroup( ${1:filter func(g Group})
endsnippet

snippet lookupInt "lookupInt(name string, set *flag.FlagSet)"
lookupInt( ${1:name string}, ${2:set *flag.FlagSet})
endsnippet

snippet lookupIntSlice "lookupIntSlice(name string, set *flag.FlagSet)"
lookupIntSlice( ${1:name string}, ${2:set *flag.FlagSet})
endsnippet

snippet lookupMethod "lookupMethod(i *interpreter, typ types.Type, meth *types.Func)"
lookupMethod( ${1:i *interpreter}, ${2:typ types.Type}, ${3:meth *types.Func})
endsnippet

snippet lookupString "lookupString(name string, set *flag.FlagSet)"
lookupString( ${1:name string}, ${2:set *flag.FlagSet})
endsnippet

snippet lookupStringSlice "lookupStringSlice(name string, set *flag.FlagSet)"
lookupStringSlice( ${1:name string}, ${2:set *flag.FlagSet})
endsnippet

snippet lookupUser "lookupUser(filter func(u User)"
lookupUser( ${1:filter func(u User})
endsnippet

snippet lookup_node "lookup_node(n *Node, rank int)"
lookup_node( ${1:n *Node}, ${2:rank int})
endsnippet

snippet lookup_path "lookup_path(tp type_path, scope *scope)"
lookup_path( ${1:tp type_path}, ${2:scope *scope})
endsnippet

snippet lookup_pkg "lookup_pkg(tp type_path, scope *scope)"
lookup_pkg( ${1:tp type_path}, ${2:scope *scope})
endsnippet

snippet lookupsubfont "lookupsubfont(d *Display, name string)"
lookupsubfont( ${1:d *Display}, ${2:name string})
endsnippet

snippet loopCallback "loopCallback(arg unsafe.Pointer)"
loopCallback( ${1:arg unsafe.Pointer})
endsnippet

snippet lower "lower(b []byte)"
lower( ${1:b []byte})
endsnippet

snippet lsone "lsone(c *g9pc.Client, s string, long bool)"
lsone( ${1:c *g9pc.Client}, ${2:s string}, ${3:long bool})
endsnippet

snippet m "m(_ T)"
m( ${1:_ T})
endsnippet

snippet main "main(content string)"
main( ${1:content string})
endsnippet

snippet mainPackage "mainPackage(prog *ssa.Program, tests bool)"
mainPackage( ${1:prog *ssa.Program}, ${2:tests bool})
endsnippet

snippet maintainer "maintainer(b *Builder, args []string, attributes map[string]bool, original string)"
maintainer( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet major "major(device uint64)"
major( ${1:device uint64})
endsnippet

snippet makeAccessLogJsonRecord "makeAccessLogJsonRecord(r *Request)"
makeAccessLogJsonRecord( ${1:r *Request})
endsnippet

snippet makeAnonField "makeAnonField(t, declType ast.Expr)"
makeAnonField( ${1:t}, ${2:declType ast.Expr})
endsnippet

snippet makeAudioWidget "makeAudioWidget(auw *auWidget, status *abc.Status, args map[string]interface{})"
makeAudioWidget( ${1:auw *auWidget}, ${2:status *abc.Status}, ${3:args map[string]interface{}})
endsnippet

snippet makeAudioenv "makeAudioenv(status *abc.Status, args map[string]interface{})"
makeAudioenv( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeBall "makeBall(b ball)"
makeBall( ${1:b ball})
endsnippet

snippet makeBound "makeBound(prog *Program, obj *types.Func)"
makeBound( ${1:prog *Program}, ${2:obj *types.Func})
endsnippet

snippet makeBuffer "makeBuffer(status *abc.Status, args map[string]interface{})"
makeBuffer( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeCompareWidget "makeCompareWidget(t *testing.T, status *abc.Status, args map[string]interface{})"
makeCompareWidget( ${1:t *testing.T}, ${2:status *abc.Status}, ${3:args map[string]interface{}})
endsnippet

snippet makeDelay "makeDelay(status *abc.Status, args map[string]interface{})"
makeDelay( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeEcho "makeEcho(_ *abc.Status, args map[string]interface{})"
makeEcho( ${1:_ *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeEnvelope "makeEnvelope(status *abc.Status, args map[string]interface{})"
makeEnvelope( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeExprList "makeExprList(a []*ast.Ident)"
makeExprList( ${1:a []*ast.Ident})
endsnippet

snippet makeFs "makeFs(tmpdir string, fs []dirOrLink)"
makeFs( ${1:tmpdir string}, ${2:fs []dirOrLink})
endsnippet

snippet makeGolden "makeGolden(dst image.Image, t drawTest)"
makeGolden( ${1:dst image.Image}, ${2:t drawTest})
endsnippet

snippet makeGraph "makeGraph(status *abc.Status, args map[string]interface{})"
makeGraph( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeHeadings "makeHeadings(body string)"
makeHeadings( ${1:body string})
endsnippet

snippet makeHttpHandler "makeHttpHandler(eng *engine.Engine, logging bool, localMethod string, localRoute string, handlerFunc HttpApiFunc, enableCors bool, dockerVersion version.Version)"
makeHttpHandler( ${1:eng *engine.Engine}, ${2:logging bool}, ${3:localMethod string}, ${4:localRoute string}, ${5:handlerFunc HttpApiFunc}, ${6:enableCors bool}, ${7:dockerVersion version.Version})
endsnippet

snippet makeImplementsType "makeImplementsType(T types.Type, fset *token.FileSet)"
makeImplementsType( ${1:T types.Type}, ${2:fset *token.FileSet})
endsnippet

snippet makeImplementsTypes "makeImplementsTypes(tt []types.Type, fset *token.FileSet)"
makeImplementsTypes( ${1:tt []types.Type}, ${2:fset *token.FileSet})
endsnippet

snippet makeInput "makeInput(log *abc.Status, args map[string]interface{})"
makeInput( ${1:log *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeLen "makeLen(T types.Type)"
makeLen( ${1:T types.Type})
endsnippet

snippet makeLevel "makeLevel(status *abc.Status, args map[string]interface{})"
makeLevel( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeLink "makeLink(srcPath, destPath string)"
makeLink( ${1:srcPath}, ${2:destPath string})
endsnippet

snippet makeMap "makeMap(kt types.Type, reserve int)"
makeMap( ${1:kt types.Type}, ${2:reserve int})
endsnippet

snippet makeMixer "makeMixer(status *abc.Status, args map[string]interface{})"
makeMixer( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeMultipartPayload "makeMultipartPayload(testCase multipartFormTestCase)"
makeMultipartPayload( ${1:testCase multipartFormTestCase})
endsnippet

snippet makeMultiplier "makeMultiplier(status *abc.Status, args map[string]interface{})"
makeMultiplier( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeNamedType "makeNamedType(name string, underlying types.Type)"
makeNamedType( ${1:name string}, ${2:underlying types.Type})
endsnippet

snippet makeOutput "makeOutput(args map[string]interface{})"
makeOutput( ${1:args map[string]interface{}})
endsnippet

snippet makePalette "makePalette(spec []ColorRange, nsteps int)"
makePalette( ${1:spec []ColorRange}, ${2:nsteps int})
endsnippet

snippet makePermute "makePermute(status *abc.Status, args map[string]interface{})"
makePermute( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makePhaser "makePhaser(status *abc.Status, args map[string]interface{})"
makePhaser( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makePkg "makePkg(t *testing.T, src string)"
makePkg( ${1:t *testing.T}, ${2:src string})
endsnippet

snippet makeRandomString "makeRandomString(n int)"
makeRandomString( ${1:n int})
endsnippet

snippet makeRead "makeRead(args map[string]interface{})"
makeRead( ${1:args map[string]interface{}})
endsnippet

snippet makeRect "makeRect(r image.Rectangle, col color.Color)"
makeRect( ${1:r image.Rectangle}, ${2:col color.Color})
endsnippet

snippet makeReflectType "makeReflectType(rt rtype)"
makeReflectType( ${1:rt rtype})
endsnippet

snippet makeReflectValue "makeReflectValue(t types.Type, v value)"
makeReflectValue( ${1:t types.Type}, ${2:v value})
endsnippet

snippet makeRot13 "makeRot13(_ *abc.Status, args map[string]interface{})"
makeRot13( ${1:_ *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeRx "makeRx(names []string)"
makeRx( ${1:names []string})
endsnippet

snippet makeSelection "makeSelection(matches [][]int)"
makeSelection( ${1:matches [][]int})
endsnippet

snippet makeSig "makeSig(res Type, args ...Type)"
makeSig( ${1:res Type}, ${2:args ...Type})
endsnippet

snippet makeSlice "makeSlice(r memRange, t0 reflect.Type)"
makeSlice( ${1:r memRange}, ${2:t0 reflect.Type})
endsnippet

snippet makeSpotInfo "makeSpotInfo(kind SpotKind, lori int, isIndex bool)"
makeSpotInfo( ${1:kind SpotKind}, ${2:lori int}, ${3:isIndex bool})
endsnippet

snippet makeStdin "makeStdin(_ *abc.Status, args map[string]interface{})"
makeStdin( ${1:_ *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeStdout "makeStdout(_ *abc.Status, args map[string]interface{})"
makeStdout( ${1:_ *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeTempFile "makeTempFile(t *testing.T, prefix string)"
makeTempFile( ${1:t *testing.T}, ${2:prefix string})
endsnippet

snippet makeTestSource "makeTestSource(size int, lines []int)"
makeTestSource( ${1:size int}, ${2:lines []int})
endsnippet

snippet makeThunk "makeThunk(prog *Program, sel *types.Selection)"
makeThunk( ${1:prog *Program}, ${2:sel *types.Selection})
endsnippet

snippet makeTime "makeTime(status *abc.Status, args map[string]interface{})"
makeTime( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeURL "makeURL(req string)"
makeURL( ${1:req string})
endsnippet

snippet makeUnit "makeUnit(v realPoint)"
makeUnit( ${1:v realPoint})
endsnippet

snippet makeWavReader "makeWavReader(status *abc.Status, args map[string]interface{})"
makeWavReader( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeWavWriter "makeWavWriter(status *abc.Status, args map[string]interface{})"
makeWavWriter( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeWave "makeWave(status *abc.Status, args map[string]interface{})"
makeWave( ${1:status *abc.Status}, ${2:args map[string]interface{}})
endsnippet

snippet makeWrapper "makeWrapper(prog *Program, sel *types.Selection)"
makeWrapper( ${1:prog *Program}, ${2:sel *types.Selection})
endsnippet

snippet makeWrite "makeWrite(args map[string]interface{})"
makeWrite( ${1:args map[string]interface{}})
endsnippet

snippet makeZero "makeZero(_ memRange, t reflect.Type)"
makeZero( ${1:_ memRange}, ${2:t reflect.Type})
endsnippet

snippet makeZeroDoc "makeZeroDoc(value interface{})"
makeZeroDoc( ${1:value interface{}})
endsnippet

snippet make_decl_set_recursive "make_decl_set_recursive(set map[string]*decl, scope *scope)"
make_decl_set_recursive( ${1:set map[string]*decl}, ${2:scope *scope})
endsnippet

snippet make_expr "make_expr(tokens []token_item)"
make_expr( ${1:tokens []token_item})
endsnippet

snippet make_user "make_user(s string)"
make_user( ${1:s string})
endsnippet

snippet mapForm "mapForm(formStruct reflect.Value, form map[string][]string,$/;"	f
mapFromPairs	src/github.com/docker/docker/vendor/src/github.com/gorilla/mux/mux.go	/^func mapFromPairs(pairs ...string)"
mapForm( ${1:formStruct reflect.Value}, ${2:form map[string][]string}, ${3:$/;"	f
mapFromPairs	src/github.com/docker/docker/vendor/src/github.com/gorilla/mux/mux.go	/^func mapFromPairs(pairs ...string})
endsnippet

snippet mapStrings "mapStrings(a []string, f func(string)"
mapStrings( ${1:a []string}, ${2:f func(string})
endsnippet

snippet mapToPairs "mapToPairs(m map[string]string)"
mapToPairs( ${1:m map[string]string})
endsnippet

snippet markErrorFreePackages "markErrorFreePackages(allPackages map[*types.Package]*PackageInfo)"
markErrorFreePackages( ${1:allPackages map[*types.Package]*PackageInfo})
endsnippet

snippet markReachable "markReachable(b *BasicBlock)"
markReachable( ${1:b *BasicBlock})
endsnippet

snippet marshal "marshal(v interface{})"
marshal( ${1:v interface{}})
endsnippet

snippet marshal2292HopLimit "marshal2292HopLimit(b []byte, cm *ControlMessage)"
marshal2292HopLimit( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet marshal2292NextHop "marshal2292NextHop(b []byte, cm *ControlMessage)"
marshal2292NextHop( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet marshal2292PacketInfo "marshal2292PacketInfo(b []byte, cm *ControlMessage)"
marshal2292PacketInfo( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet marshalControlMessage "marshalControlMessage(cm *ControlMessage)"
marshalControlMessage( ${1:cm *ControlMessage})
endsnippet

snippet marshalDst "marshalDst(b []byte, cm *ControlMessage)"
marshalDst( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet marshalHopLimit "marshalHopLimit(b []byte, cm *ControlMessage)"
marshalHopLimit( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet marshalInterface "marshalInterface(b []byte, cm *ControlMessage)"
marshalInterface( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet marshalJSON "marshalJSON(x interface{})"
marshalJSON( ${1:x interface{}})
endsnippet

snippet marshalNextHop "marshalNextHop(b []byte, cm *ControlMessage)"
marshalNextHop( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet marshalPacketInfo "marshalPacketInfo(b []byte, cm *ControlMessage)"
marshalPacketInfo( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet marshalPathMTU "marshalPathMTU(b []byte, cm *ControlMessage)"
marshalPathMTU( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet marshalTTL "marshalTTL(b []byte, cm *ControlMessage)"
marshalTTL( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet marshalTrafficClass "marshalTrafficClass(b []byte, cm *ControlMessage)"
marshalTrafficClass( ${1:b []byte}, ${2:cm *ControlMessage})
endsnippet

snippet match "match(s string, t []byte)"
match( ${1:s string}, ${2:t []byte})
endsnippet

snippet matchEnv "matchEnv(any interface{})"
matchEnv( ${1:any interface{}})
endsnippet

snippet matchGoImport "matchGoImport(imports []metaImport, importPath string)"
matchGoImport( ${1:imports []metaImport}, ${2:importPath string})
endsnippet

snippet matchInArray "matchInArray(arr []string, value string)"
matchInArray( ${1:arr []string}, ${2:value string})
endsnippet

snippet matchLen "matchLen(x, y string)"
matchLen( ${1:x}, ${2:y string})
endsnippet

snippet matchMap "matchMap(toCheck map[string]string, toMatch map[string][]string,$/;"	f
matchOS	src/github.com/mattn/gom/gomfile.go	/^func matchOS(any interface{})"
matchMap( ${1:toCheck map[string]string}, ${2:toMatch map[string][]string}, ${3:$/;"	f
matchOS	src/github.com/mattn/gom/gomfile.go	/^func matchOS(any interface{}})
endsnippet

snippet matchPackages "matchPackages(pattern string)"
matchPackages( ${1:pattern string})
endsnippet

snippet matchPackagesInFS "matchPackagesInFS(pattern string)"
matchPackagesInFS( ${1:pattern string})
endsnippet

snippet matchPattern "matchPattern(pattern string)"
matchPattern( ${1:pattern string})
endsnippet

snippet matchSpace "matchSpace(orig []byte, src []byte)"
matchSpace( ${1:orig []byte}, ${2:src []byte})
endsnippet

snippet mathAdd "mathAdd(x, y float64)"
mathAdd( ${1:x}, ${2:y float64})
endsnippet

snippet mathMLTextIntegrationPoint "mathMLTextIntegrationPoint(n *Node)"
mathMLTextIntegrationPoint( ${1:n *Node})
endsnippet

snippet mathMul "mathMul(x, y float64)"
mathMul( ${1:x}, ${2:y float64})
endsnippet

snippet mathNeg "mathNeg(x float64)"
mathNeg( ${1:x float64})
endsnippet

snippet mathQuo "mathQuo(x, y float64)"
mathQuo( ${1:x}, ${2:y float64})
endsnippet

snippet mathSub "mathSub(x, y float64)"
mathSub( ${1:x}, ${2:y float64})
endsnippet

snippet max "max(a, b int)"
max( ${1:a}, ${2:b int})
endsnippet

snippet maxInt "maxInt(a, b int)"
maxInt( ${1:a}, ${2:b int})
endsnippet

snippet maximum_node "maximum_node(n *Node)"
maximum_node( ${1:n *Node})
endsnippet

snippet mayBuildRev "mayBuildRev(work builderRev)"
mayBuildRev( ${1:work builderRev})
endsnippet

snippet mayCombine "mayCombine(prev token.Token, next byte)"
mayCombine( ${1:prev token.Token}, ${2:next byte})
endsnippet

snippet mcsAdd "mcsAdd(mcs string)"
mcsAdd( ${1:mcs string})
endsnippet

snippet mcsDelete "mcsDelete(mcs string)"
mcsDelete( ${1:mcs string})
endsnippet

snippet mcsExists "mcsExists(mcs string)"
mcsExists( ${1:mcs string})
endsnippet

snippet memberFromObject "memberFromObject(pkg *Package, obj types.Object, syntax ast.Node)"
memberFromObject( ${1:pkg *Package}, ${2:obj types.Object}, ${3:syntax ast.Node})
endsnippet

snippet membersFromDecl "membersFromDecl(pkg *Package, decl ast.Decl)"
membersFromDecl( ${1:pkg *Package}, ${2:decl ast.Decl})
endsnippet

snippet merge "merge(c0, c1 <-chan line)"
merge( ${1:c0}, ${2:c1 <-chan line})
endsnippet

snippet mergeEnvLists "mergeEnvLists(in, out []string)"
mergeEnvLists( ${1:in}, ${2:out []string})
endsnippet

snippet mergeFiles "mergeFiles(files []string)"
mergeFiles( ${1:files []string})
endsnippet

snippet mergeLxcConfIntoOptions "mergeLxcConfIntoOptions(hostConfig *runconfig.HostConfig)"
mergeLxcConfIntoOptions( ${1:hostConfig *runconfig.HostConfig})
endsnippet

snippet mergePAX "mergePAX(hdr *Header, headers map[string]string)"
mergePAX( ${1:hdr *Header}, ${2:headers map[string]string})
endsnippet

snippet mergeTypeInfo "mergeTypeInfo(dst, src *types.Info)"
mergeTypeInfo( ${1:dst}, ${2:src *types.Info})
endsnippet

snippet merge_decls "merge_decls(filescope *scope, pkg *scope, decls map[string]*decl)"
merge_decls( ${1:filescope *scope}, ${2:pkg *scope}, ${3:decls map[string]*decl})
endsnippet

snippet merge_decls_from_packages "merge_decls_from_packages(pkgscope *scope, pkgs []package_import, pcache package_cache)"
merge_decls_from_packages( ${1:pkgscope *scope}, ${2:pkgs []package_import}, ${3:pcache package_cache})
endsnippet

snippet methodBit "methodBit(x byte)"
methodBit( ${1:x byte})
endsnippet

snippet methodExpr "methodExpr(fd *ast.FuncDecl)"
methodExpr( ${1:fd *ast.FuncDecl})
endsnippet

snippet methodToRequestType "methodToRequestType(m reflect.Method)"
methodToRequestType( ${1:m reflect.Method})
endsnippet

snippet method_of "method_of(d ast.Decl)"
method_of( ${1:d ast.Decl})
endsnippet

snippet methodsFor "methodsFor(obj *types.TypeName)"
methodsFor( ${1:obj *types.TypeName})
endsnippet

snippet methodsToSerial "methodsToSerial(this *types.Package, methods []*types.Selection, fset *token.FileSet)"
methodsToSerial( ${1:this *types.Package}, ${2:methods []*types.Selection}, ${3:fset *token.FileSet})
endsnippet

snippet migrateIfAufs "migrateIfAufs(driver graphdriver.Driver, root string)"
migrateIfAufs( ${1:driver graphdriver.Driver}, ${2:root string})
endsnippet

snippet migratePortMappings "migratePortMappings(config *runconfig.Config, hostConfig *runconfig.HostConfig)"
migratePortMappings( ${1:config *runconfig.Config}, ${2:hostConfig *runconfig.HostConfig})
endsnippet

snippet min "min(a, b int)"
min( ${1:a}, ${2:b int})
endsnippet

snippet minInt "minInt(a, b int)"
minInt( ${1:a}, ${2:b int})
endsnippet

snippet minor "minor(device uint64)"
minor( ${1:device uint64})
endsnippet

snippet mismatchedReceiver "mismatchedReceiver(t *T, enc Encoder)"
mismatchedReceiver( ${1:t *T}, ${2:enc Encoder})
endsnippet

snippet missTurn "missTurn(n int)"
missTurn( ${1:n int})
endsnippet

snippet mkContainer "mkContainer(r *daemon.Daemon, args []string, t *testing.T)"
mkContainer( ${1:r *daemon.Daemon}, ${2:args []string}, ${3:t *testing.T})
endsnippet

snippet mkDaemon "mkDaemon(f Fataler)"
mkDaemon( ${1:f Fataler})
endsnippet

snippet mkDaemonFromEngine "mkDaemonFromEngine(eng *engine.Engine, t Fataler)"
mkDaemonFromEngine( ${1:eng *engine.Engine}, ${2:t Fataler})
endsnippet

snippet mkJob "mkJob(t *testing.T, name string, args ...string)"
mkJob( ${1:t *testing.T}, ${2:name string}, ${3:args ...string})
endsnippet

snippet mkString "mkString(c Capabilities, max CapType)"
mkString( ${1:c Capabilities}, ${2:max CapType})
endsnippet

snippet mkStringCap "mkStringCap(c Capabilities, which CapType)"
mkStringCap( ${1:c Capabilities}, ${2:which CapType})
endsnippet

snippet mkTestTagStore "mkTestTagStore(root string, t *testing.T)"
mkTestTagStore( ${1:root string}, ${2:t *testing.T})
endsnippet

snippet mkType "mkType(t string)"
mkType( ${1:t string})
endsnippet

snippet mkgroup "mkgroup(c cmd, conn *ec2.EC2, args []string)"
mkgroup( ${1:c cmd}, ${2:conn *ec2.EC2}, ${3:args []string})
endsnippet

snippet mkone "mkone(c *g9pc.Client, s string)"
mkone( ${1:c *g9pc.Client}, ${2:s string})
endsnippet

snippet modetostr "modetostr(mode uint32)"
modetostr( ${1:mode uint32})
endsnippet

snippet monitor "monitor(mkball <-chan ball, delball <-chan bool, pause <-chan bool)"
monitor( ${1:mkball <-chan ball}, ${2:delball <-chan bool}, ${3:pause <-chan bool})
endsnippet

snippet mount "mount(source string, target string, fstype string, flags uintptr, data string)"
mount( ${1:source string}, ${2:target string}, ${3:fstype string}, ${4:flags uintptr}, ${5:data string})
endsnippet

snippet mountReadonly "mountReadonly(path string)"
mountReadonly( ${1:path string})
endsnippet

snippet mountSystem "mountSystem(rootfs string, sysReadonly bool, mountConfig *MountConfig)"
mountSystem( ${1:rootfs string}, ${2:sysReadonly bool}, ${3:mountConfig *MountConfig})
endsnippet

snippet mouseproc "mouseproc(mc *Mousectl, d *Display, ch chan Mouse, rch chan bool)"
mouseproc( ${1:mc *Mousectl}, ${2:d *Display}, ${3:ch chan Mouse}, ${4:rch chan bool})
endsnippet

snippet moveBackwards "moveBackwards(turns int)"
moveBackwards( ${1:turns int})
endsnippet

snippet move_city "move_city(conn *net.TCPConn, t *testing.T, server_id int32, x int32, y int32)"
move_city( ${1:conn *net.TCPConn}, ${2:t *testing.T}, ${3:server_id int32}, ${4:x int32}, ${5:y int32})
endsnippet

snippet move_cursor "move_cursor(x, y int)"
move_cursor( ${1:x}, ${2:y int})
endsnippet

snippet move_hero_back_to_city "move_hero_back_to_city(conn *net.TCPConn, t *testing.T)"
move_hero_back_to_city( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet mult "mult(v, alpha, oldAlpha uint8)"
mult( ${1:v}, ${2:alpha}, ${3:oldAlpha uint8})
endsnippet

snippet mustDeref "mustDeref(typ types.Type)"
mustDeref( ${1:typ types.Type})
endsnippet

snippet mustOpen "mustOpen(name string)"
mustOpen( ${1:name string})
endsnippet

snippet mustParse "mustParse(t *testing.T, args string)"
mustParse( ${1:t *testing.T}, ${2:args string})
endsnippet

snippet mustParseInt "mustParseInt(expr string)"
mustParseInt( ${1:expr string})
endsnippet

snippet mustRead "mustRead(name string)"
mustRead( ${1:name string})
endsnippet

snippet mustSanityCheck "mustSanityCheck(fn *Function, reporter io.Writer)"
mustSanityCheck( ${1:fn *Function}, ${2:reporter io.Writer})
endsnippet

snippet mustTypecheck "mustTypecheck(t *testing.T, path, source string, info *Info)"
mustTypecheck( ${1:t *testing.T}, ${2:path}, ${3:source string}, ${4:info *Info})
endsnippet

snippet mutateSampleDir "mutateSampleDir(t *testing.T, root string)"
mutateSampleDir( ${1:t *testing.T}, ${2:root string})
endsnippet

snippet nameFilter "nameFilter(filename string)"
nameFilter( ${1:filename string})
endsnippet

snippet namedimage "namedimage(d *Display, name string)"
namedimage( ${1:d *Display}, ${2:name string})
endsnippet

snippet nameimage "nameimage(i *Image, name string, in bool)"
nameimage( ${1:i *Image}, ${2:name string}, ${3:in bool})
endsnippet

snippet needOneOf "needOneOf(need ...int)"
needOneOf( ${1:need ...int})
endsnippet

snippet needOneOfForTurns "needOneOfForTurns(turns int, need ...int)"
needOneOfForTurns( ${1:turns int}, ${2:need ...int})
endsnippet

snippet needsBenchmarking "needsBenchmarking(log *HgLog)"
needsBenchmarking( ${1:log *HgLog})
endsnippet

snippet needsQuoting "needsQuoting(text string)"
needsQuoting( ${1:text string})
endsnippet

snippet netAddrToIP16 "netAddrToIP16(a net.Addr)"
netAddrToIP16( ${1:a net.Addr})
endsnippet

snippet netAddrToIP4 "netAddrToIP4(a net.Addr)"
netAddrToIP4( ${1:a net.Addr})
endsnippet

snippet netIP4ToInterface "netIP4ToInterface(ip net.IP)"
netIP4ToInterface( ${1:ip net.IP})
endsnippet

snippet netInterfaceToIP4 "netInterfaceToIP4(ifi *net.Interface)"
netInterfaceToIP4( ${1:ifi *net.Interface})
endsnippet

snippet networkLinkIpAction "networkLinkIpAction(action, flags int, ifa IfAddr)"
networkLinkIpAction( ${1:action}, ${2:flags int}, ${3:ifa IfAddr})
endsnippet

snippet networkLinkMacVlan "networkLinkMacVlan(dev_type string, mcvln *MacVlanLink)"
networkLinkMacVlan( ${1:dev_type string}, ${2:mcvln *MacVlanLink})
endsnippet

snippet networkMasterAction "networkMasterAction(iface *net.Interface, rtattr *RtAttr)"
networkMasterAction( ${1:iface *net.Interface}, ${2:rtattr *RtAttr})
endsnippet

snippet networkSetNsAction "networkSetNsAction(iface *net.Interface, rtattr *RtAttr)"
networkSetNsAction( ${1:iface *net.Interface}, ${2:rtattr *RtAttr})
endsnippet

snippet newAllocatedMap "newAllocatedMap(network *net.IPNet)"
newAllocatedMap( ${1:network *net.IPNet})
endsnippet

snippet newAltWords "newAltWords(h RunList)"
newAltWords( ${1:h RunList})
endsnippet

snippet newBoolValue "newBoolValue(val bool, p *bool)"
newBoolValue( ${1:val bool}, ${2:p *bool})
endsnippet

snippet newBox "newBox(cvs *canvas.Canvas, r draw.Rectangle)"
newBox( ${1:cvs *canvas.Canvas}, ${2:r draw.Rectangle})
endsnippet

snippet newBufioReaderPoolWithSize "newBufioReaderPoolWithSize(size int)"
newBufioReaderPoolWithSize( ${1:size int})
endsnippet

snippet newBufioWriterPoolWithSize "newBufioWriterPoolWithSize(size int)"
newBufioWriterPoolWithSize( ${1:size int})
endsnippet

snippet newBuiltin "newBuiltin(id builtinId)"
newBuiltin( ${1:id builtinId})
endsnippet

snippet newCIDFile "newCIDFile(path string)"
newCIDFile( ${1:path string})
endsnippet

snippet newCancelCtx "newCancelCtx(parent Context)"
newCancelCtx( ${1:parent Context})
endsnippet

snippet newChanReader "newChanReader(c <-chan []byte)"
newChanReader( ${1:c <-chan []byte})
endsnippet

snippet newChanWriter "newChanWriter(c chan<- []byte)"
newChanWriter( ${1:c chan<- []byte})
endsnippet

snippet newCharacter "newCharacter(paths map[string][]square)"
newCharacter( ${1:paths map[string][]square})
endsnippet

snippet newClient "newClient(jar http.CookieJar, roots *x509.CertPool, certs []tls.Certificate, timeout TimeoutType, secure bool)"
newClient( ${1:jar http.CookieJar}, ${2:roots *x509.CertPool}, ${3:certs []tls.Certificate}, ${4:timeout TimeoutType}, ${5:secure bool})
endsnippet

snippet newCluster "newCluster(userSeeds []string, direct, failFast bool, dial dialer)"
newCluster( ${1:userSeeds []string}, ${2:direct}, ${3:failFast bool}, ${4:dial dialer})
endsnippet

snippet newCommandLine "newCommandLine(prompt string)"
newCommandLine( ${1:prompt string})
endsnippet

snippet newConfig "newConfig(t *testing.T, path string)"
newConfig( ${1:t *testing.T}, ${2:path string})
endsnippet

snippet newConfigFile "newConfigFile(fileNames []string)"
newConfigFile( ${1:fileNames []string})
endsnippet

snippet newConn "newConn(tr transport)"
newConn( ${1:tr transport})
endsnippet

snippet newConnTrackKey "newConnTrackKey(addr *net.UDPAddr)"
newConnTrackKey( ${1:addr *net.UDPAddr})
endsnippet

snippet newContainerMonitor "newContainerMonitor(container *Container, policy runconfig.RestartPolicy)"
newContainerMonitor( ${1:container *Container}, ${2:policy runconfig.RestartPolicy})
endsnippet

snippet newControlFrame "newControlFrame(frameType ControlFrameType)"
newControlFrame( ${1:frameType ControlFrameType})
endsnippet

snippet newControlMessage "newControlMessage(opt *rawOpt)"
newControlMessage( ${1:opt *rawOpt})
endsnippet

snippet newCorpus "newCorpus(t *testing.T)"
newCorpus( ${1:t *testing.T})
endsnippet

snippet newDecoder "newDecoder(in io.Reader, order binary.ByteOrder)"
newDecoder( ${1:in io.Reader}, ${2:order binary.ByteOrder})
endsnippet

snippet newDenseChildList "newDenseChildList(list *sparseChildList, child *Trie)"
newDenseChildList( ${1:list *sparseChildList}, ${2:child *Trie})
endsnippet

snippet newDriver "newDriver(t *testing.T)"
newDriver( ${1:t *testing.T})
endsnippet

snippet newDurationValue "newDurationValue(val time.Duration, p *time.Duration)"
newDurationValue( ${1:val time.Duration}, ${2:p *time.Duration})
endsnippet

snippet newEncoder "newEncoder(out io.Writer, order binary.ByteOrder)"
newEncoder( ${1:out io.Writer}, ${2:order binary.ByteOrder})
endsnippet

snippet newEndpoint "newEndpoint(hostname string, insecureRegistries []string)"
newEndpoint( ${1:hostname string}, ${2:insecureRegistries []string})
endsnippet

snippet newErrgoFixContext "newErrgoFixContext(f *ast.File)"
newErrgoFixContext( ${1:f *ast.File})
endsnippet

snippet newError "newError(status int, body []byte)"
newError( ${1:status int}, ${2:body []byte})
endsnippet

snippet newFile "newFile(t *T, data []byte)"
newFile( ${1:t *T}, ${2:data []byte})
endsnippet

snippet newFileRun "newFileRun(h RunList)"
newFileRun( ${1:h RunList})
endsnippet

snippet newFloat64Value "newFloat64Value(val float64, p *float64)"
newFloat64Value( ${1:val float64}, ${2:p *float64})
endsnippet

snippet newGridFS "newGridFS(db *Database, prefix string)"
newGridFS( ${1:db *Database}, ${2:prefix string})
endsnippet

snippet newHTTPClient "newHTTPClient(u *url.URL, tlsConfig *tls.Config, timeout time.Duration)"
newHTTPClient( ${1:u *url.URL}, ${2:tlsConfig *tls.Config}, ${3:timeout time.Duration})
endsnippet

snippet newHashMap "newHashMap(f *os.File)"
newHashMap( ${1:f *os.File})
endsnippet

snippet newHixieClientConn "newHixieClientConn(config *Config, buf *bufio.ReadWriter, rwc io.ReadWriteCloser)"
newHixieClientConn( ${1:config *Config}, ${2:buf *bufio.ReadWriter}, ${3:rwc io.ReadWriteCloser})
endsnippet

snippet newHixieConn "newHixieConn(config *Config, buf *bufio.ReadWriter, rwc io.ReadWriteCloser, request *http.Request)"
newHixieConn( ${1:config *Config}, ${2:buf *bufio.ReadWriter}, ${3:rwc io.ReadWriteCloser}, ${4:request *http.Request})
endsnippet

snippet newHixieServerConn "newHixieServerConn(config *Config, buf *bufio.ReadWriter, rwc io.ReadWriteCloser, request *http.Request)"
newHixieServerConn( ${1:config *Config}, ${2:buf *bufio.ReadWriter}, ${3:rwc io.ReadWriteCloser}, ${4:request *http.Request})
endsnippet

snippet newHybiClientConn "newHybiClientConn(config *Config, buf *bufio.ReadWriter, rwc io.ReadWriteCloser)"
newHybiClientConn( ${1:config *Config}, ${2:buf *bufio.ReadWriter}, ${3:rwc io.ReadWriteCloser})
endsnippet

snippet newHybiConn "newHybiConn(config *Config, buf *bufio.ReadWriter, rwc io.ReadWriteCloser, request *http.Request)"
newHybiConn( ${1:config *Config}, ${2:buf *bufio.ReadWriter}, ${3:rwc io.ReadWriteCloser}, ${4:request *http.Request})
endsnippet

snippet newHybiServerConn "newHybiServerConn(config *Config, buf *bufio.ReadWriter, rwc io.ReadWriteCloser, request *http.Request)"
newHybiServerConn( ${1:config *Config}, ${2:buf *bufio.ReadWriter}, ${3:rwc io.ReadWriteCloser}, ${4:request *http.Request})
endsnippet

snippet newIfAddrmsg "newIfAddrmsg(family int)"
newIfAddrmsg( ${1:family int})
endsnippet

snippet newIfInfomsg "newIfInfomsg(family int)"
newIfInfomsg( ${1:family int})
endsnippet

snippet newIfInfomsgChild "newIfInfomsgChild(parent *RtAttr, family int)"
newIfInfomsgChild( ${1:parent *RtAttr}, ${2:family int})
endsnippet

snippet newInt64Value "newInt64Value(val int64, p *int64)"
newInt64Value( ${1:val int64}, ${2:p *int64})
endsnippet

snippet newIntValue "newIntValue(val int, p *int)"
newIntValue( ${1:val int}, ${2:p *int})
endsnippet

snippet newKindRun "newKindRun(h RunList)"
newKindRun( ${1:h RunList})
endsnippet

snippet newListOptsRef "newListOptsRef(values *[]string, validator ValidatorFctType)"
newListOptsRef( ${1:values *[]string}, ${2:validator ValidatorFctType})
endsnippet

snippet newListener "newListener(proto, addr string, bufferRequests bool)"
newListener( ${1:proto}, ${2:addr string}, ${3:bufferRequests bool})
endsnippet

snippet newM "newM(c *zmq.Context, s *zmq.Socket, ss ...*zmq.Socket)"
newM( ${1:c *zmq.Context}, ${2:s *zmq.Socket}, ${3:ss ...*zmq.Socket})
endsnippet

snippet newMerger "newMerger(selections []Selection)"
newMerger( ${1:selections []Selection})
endsnippet

snippet newMethod "newMethod(pkg *ssa.Package, recvType types.Type, name string)"
newMethod( ${1:pkg *ssa.Package}, ${2:recvType types.Type}, ${3:name string})
endsnippet

snippet newNetlinkRequest "newNetlinkRequest(proto, flags int)"
newNetlinkRequest( ${1:proto}, ${2:flags int})
endsnippet

snippet newOracle "newOracle(iprog *loader.Program, ptalog io.Writer, needs int, reflection bool)"
newOracle( ${1:iprog *loader.Program}, ${2:ptalog io.Writer}, ${3:needs int}, ${4:reflection bool})
endsnippet

snippet newPakRun "newPakRun(h RunList)"
newPakRun( ${1:h RunList})
endsnippet

snippet newPid "newPid(pid int)"
newPid( ${1:pid int})
endsnippet

snippet newPkgDot "newPkgDot(pos token.Pos, pkg, name string)"
newPkgDot( ${1:pos token.Pos}, ${2:pkg}, ${3:name string})
endsnippet

snippet newPluginLog "newPluginLog(l neovim.Logger, p string)"
newPluginLog( ${1:l neovim.Logger}, ${2:p string})
endsnippet

snippet newPool "newPool(maxid uint32)"
newPool( ${1:maxid uint32})
endsnippet

snippet newPortAllocationJob "newPortAllocationJob(eng *engine.Engine, port int)"
newPortAllocationJob( ${1:eng *engine.Engine}, ${2:port int})
endsnippet

snippet newPortAllocationJobWithInvalidHostIP "newPortAllocationJobWithInvalidHostIP(eng *engine.Engine, port int)"
newPortAllocationJobWithInvalidHostIP( ${1:eng *engine.Engine}, ${2:port int})
endsnippet

snippet newPosLink_urlFunc "newPosLink_urlFunc(srcPosLinkFunc func(s string, line, low, high int)"
newPosLink_urlFunc( ${1:srcPosLinkFunc func(s string}, ${2:line}, ${3:low}, ${4:high int})
endsnippet

snippet newProp "newProp(name string, units interface{})"
newProp( ${1:name string}, ${2:units interface{}})
endsnippet

snippet newRPCCodec "newRPCCodec(conn io.ReadWriteCloser, opts DecoderContainerResolver)"
newRPCCodec( ${1:conn io.ReadWriteCloser}, ${2:opts DecoderContainerResolver})
endsnippet

snippet newReader "newReader(r io.ByteReader)"
newReader( ${1:r io.ByteReader})
endsnippet

snippet newRenderingLoop "newRenderingLoop(sdlrenderer *clingon.SDLRenderer)"
newRenderingLoop( ${1:sdlrenderer *clingon.SDLRenderer})
endsnippet

snippet newRequest "newRequest(method, url string)"
newRequest( ${1:method}, ${2:url string})
endsnippet

snippet newRot13Reader "newRot13Reader(r io.Reader)"
newRot13Reader( ${1:r io.Reader})
endsnippet

snippet newRoute "newRoute(method string, pattern string, handlers []Handler)"
newRoute( ${1:method string}, ${2:pattern string}, ${3:handlers []Handler})
endsnippet

snippet newRouteRegexp "newRouteRegexp(tpl string, matchHost, matchPrefix, strictSlash bool)"
newRouteRegexp( ${1:tpl string}, ${2:matchHost}, ${3:matchPrefix}, ${4:strictSlash bool})
endsnippet

snippet newRowScanner "newRowScanner(row []string)"
newRowScanner( ${1:row []string})
endsnippet

snippet newRtAttr "newRtAttr(attrType int, data []byte)"
newRtAttr( ${1:attrType int}, ${2:data []byte})
endsnippet

snippet newRtAttrChild "newRtAttrChild(parent *RtAttr, attrType int, data []byte)"
newRtAttrChild( ${1:parent *RtAttr}, ${2:attrType int}, ${3:data []byte})
endsnippet

snippet newServer "newServer(addr string, tcpaddr *net.TCPAddr, sync chan bool, dial dialer)"
newServer( ${1:addr string}, ${2:tcpaddr *net.TCPAddr}, ${3:sync chan bool}, ${4:dial dialer})
endsnippet

snippet newServerConn "newServerConn(rwc io.ReadWriteCloser, buf *bufio.ReadWriter, req *http.Request, config *Config, handshake func(*Config, *http.Request)"
newServerConn( ${1:rwc io.ReadWriteCloser}, ${2:buf *bufio.ReadWriter}, ${3:req *http.Request}, ${4:config *Config}, ${5:handshake func(*Config}, ${6:*http.Request})
endsnippet

snippet newSession "newSession(consistency mode, cluster *mongoCluster, timeout time.Duration)"
newSession( ${1:consistency mode}, ${2:cluster *mongoCluster}, ${3:timeout time.Duration})
endsnippet

snippet newSocket "newSocket(server *mongoServer, conn net.Conn, timeout time.Duration)"
newSocket( ${1:server *mongoServer}, ${2:conn net.Conn}, ${3:timeout time.Duration})
endsnippet

snippet newStdWriter "newStdWriter(w io.Writer, t StdType)"
newStdWriter( ${1:w io.Writer}, ${2:t StdType})
endsnippet

snippet newStringValue "newStringValue(val string, p *string)"
newStringValue( ${1:val string}, ${2:p *string})
endsnippet

snippet newSystemMounts "newSystemMounts(rootfs, mountLabel string, sysReadonly bool)"
newSystemMounts( ${1:rootfs}, ${2:mountLabel string}, ${3:sysReadonly bool})
endsnippet

snippet newTLSClient "newTLSClient(endpoint string)"
newTLSClient( ${1:endpoint string})
endsnippet

snippet newTemplateConfig "newTemplateConfig(rootfs string)"
newTemplateConfig( ${1:rootfs string})
endsnippet

snippet newTestClient "newTestClient(rt *FakeRoundTripper)"
newTestClient( ${1:rt *FakeRoundTripper})
endsnippet

snippet newTestDb "newTestDb(t *testing.T)"
newTestDb( ${1:t *testing.T})
endsnippet

snippet newTestDirectory "newTestDirectory(templateDir string)"
newTestDirectory( ${1:templateDir string})
endsnippet

snippet newTestEngine "newTestEngine(t Fataler, autorestart bool, root string)"
newTestEngine( ${1:t Fataler}, ${2:autorestart bool}, ${3:root string})
endsnippet

snippet newTestStruc "newTestStruc(depth int, bench bool)"
newTestStruc( ${1:depth int}, ${2:bench bool})
endsnippet

snippet newUint64Value "newUint64Value(val uint64, p *uint64)"
newUint64Value( ${1:val uint64}, ${2:p *uint64})
endsnippet

snippet newUintValue "newUintValue(val uint, p *uint)"
newUintValue( ${1:val uint}, ${2:p *uint})
endsnippet

snippet newUnixTransport "newUnixTransport(keys string)"
newUnixTransport( ${1:keys string})
endsnippet

snippet newVar "newVar(name string, typ types.Type)"
newVar( ${1:name string}, ${2:typ types.Type})
endsnippet

snippet new_active "new_active(srv *clonesrv_t)"
new_active( ${1:srv *clonesrv_t})
endsnippet

snippet new_auto_complete_context "new_auto_complete_context(pcache package_cache, declcache *decl_cache)"
new_auto_complete_context( ${1:pcache package_cache}, ${2:declcache *decl_cache})
endsnippet

snippet new_auto_complete_file "new_auto_complete_file(name string, context build.Context)"
new_auto_complete_file( ${1:name string}, ${2:context build.Context})
endsnippet

snippet new_daemon "new_daemon(network, address string)"
new_daemon( ${1:network}, ${2:address string})
endsnippet

snippet new_decl "new_decl(name string, class decl_class, scope *scope)"
new_decl( ${1:name string}, ${2:class decl_class}, ${3:scope *scope})
endsnippet

snippet new_decl_cache "new_decl_cache(context build.Context)"
new_decl_cache( ${1:context build.Context})
endsnippet

snippet new_decl_file_cache "new_decl_file_cache(name string, context build.Context)"
new_decl_file_cache( ${1:name string}, ${2:context build.Context})
endsnippet

snippet new_decl_full "new_decl_full(name string, class decl_class, flags decl_flags, typ, v ast.Expr, vi int, s *scope)"
new_decl_full( ${1:name string}, ${2:class decl_class}, ${3:flags decl_flags}, ${4:typ}, ${5:v ast.Expr}, ${6:vi int}, ${7:s *scope})
endsnippet

snippet new_decl_var "new_decl_var(name string, typ ast.Expr, value ast.Expr, vindex int, scope *scope)"
new_decl_var( ${1:name string}, ${2:typ ast.Expr}, ${3:value ast.Expr}, ${4:vindex int}, ${5:scope *scope})
endsnippet

snippet new_node "new_node(score int32, id int32, color bool, left, right *Node)"
new_node( ${1:score int32}, ${2:id int32}, ${3:color bool}, ${4:left}, ${5:right *Node})
endsnippet

snippet new_out_buffers "new_out_buffers(ctx *auto_complete_context)"
new_out_buffers( ${1:ctx *auto_complete_context})
endsnippet

snippet new_package_file_cache "new_package_file_cache(name string)"
new_package_file_cache( ${1:name string})
endsnippet

snippet new_package_file_cache_forever "new_package_file_cache_forever(name, defalias string)"
new_package_file_cache_forever( ${1:name}, ${2:defalias string})
endsnippet

snippet new_passive "new_passive(srv *clonesrv_t)"
new_passive( ${1:srv *clonesrv_t})
endsnippet

snippet new_peer "new_peer(uuid uuid.UUID)"
new_peer( ${1:uuid uuid.UUID})
endsnippet

snippet new_scope "new_scope(outer *scope)"
new_scope( ${1:outer *scope})
endsnippet

snippet new_token_iterator "new_token_iterator(src []byte, cursor int)"
new_token_iterator( ${1:src []byte}, ${2:cursor int})
endsnippet

snippet newlineCount "newlineCount(s string)"
newlineCount( ${1:s string})
endsnippet

snippet newwalk "newwalk(name string, isDir bool)"
newwalk( ${1:name string}, ${2:isDir bool})
endsnippet

snippet nextContiguous "nextContiguous(ports []nat.Port, value int, index int)"
nextContiguous( ${1:ports []nat.Port}, ${2:value int}, ${3:index int})
endsnippet

snippet nextMouse "nextMouse(ec <-chan interface{})"
nextMouse( ${1:ec <-chan interface{}})
endsnippet

snippet nextRune "nextRune(rd io.RuneReader)"
nextRune( ${1:rd io.RuneReader})
endsnippet

snippet next_char "next_char(current int)"
next_char( ${1:current int})
endsnippet

snippet nilConst "nilConst(typ types.Type)"
nilConst( ${1:typ types.Type})
endsnippet

snippet nlz "nlz(x word)"
nlz( ${1:x word})
endsnippet

snippet noFiles "noFiles(t *T, enc Encoder)"
noFiles( ${1:t *T}, ${2:enc Encoder})
endsnippet

snippet noParens "noParens(typ interface{})"
noParens( ${1:typ interface{}})
endsnippet

snippet noRanges "noRanges(_ reflect.Value, _ *infoStore, _ *memRanges)"
noRanges( ${1:_ reflect.Value}, ${2:_ *infoStore}, ${3:_ *memRanges})
endsnippet

snippet noVCSSuffix "noVCSSuffix(match map[string]string)"
noVCSSuffix( ${1:match map[string]string})
endsnippet

snippet nodeLabel "nodeLabel(i uint32)"
nodeLabel( ${1:i uint32})
endsnippet

snippet nodeTypeStr "nodeTypeStr(n int)"
nodeTypeStr( ${1:n int})
endsnippet

snippet node_color "node_color(n *Node)"
node_color( ${1:n *Node})
endsnippet

snippet nonZeroTerminated "nonZeroTerminated(s string)"
nonZeroTerminated( ${1:s string})
endsnippet

snippet nop "nop(interface{})"
nop( ${1:interface{}})
endsnippet

snippet noprof "noprof(x int)"
noprof( ${1:x int})
endsnippet

snippet noptr "noptr(x int)"
noptr( ${1:x int})
endsnippet

snippet norm "norm(i Word)"
norm( ${1:i Word})
endsnippet

snippet normComplex "normComplex(re, im *big.Rat)"
normComplex( ${1:re}, ${2:im *big.Rat})
endsnippet

snippet normFloat "normFloat(x *big.Rat)"
normFloat( ${1:x *big.Rat})
endsnippet

snippet normInt "normInt(x *big.Int)"
normInt( ${1:x *big.Int})
endsnippet

snippet normalizeFlags "normalizeFlags(flags []Flag, set *flag.FlagSet)"
normalizeFlags( ${1:flags []Flag}, ${2:set *flag.FlagSet})
endsnippet

snippet normpath "normpath(s string)"
normpath( ${1:s string})
endsnippet

snippet nosplit "nosplit(x int)"
nosplit( ${1:x int})
endsnippet

snippet notSpace "notSpace(r rune)"
notSpace( ${1:r rune})
endsnippet

snippet not_use_hero "not_use_hero(conn *net.TCPConn, t *testing.T)"
not_use_hero( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet noteTitle "noteTitle(note string)"
noteTitle( ${1:note string})
endsnippet

snippet notify "notify(c appengine.Context, com *Commit, builder, logHash string)"
notify( ${1:c appengine.Context}, ${2:com *Commit}, ${3:builder}, ${4:logHash string})
endsnippet

snippet notifyOnFailure "notifyOnFailure(c appengine.Context, com *Commit, builder string)"
notifyOnFailure( ${1:c appengine.Context}, ${2:com *Commit}, ${3:builder string})
endsnippet

snippet nsenterExec "nsenterExec(config *libcontainer.Config, args []string)"
nsenterExec( ${1:config *libcontainer.Config}, ${2:args []string})
endsnippet

snippet nsenterIp "nsenterIp(config *libcontainer.Config, args []string)"
nsenterIp( ${1:config *libcontainer.Config}, ${2:args []string})
endsnippet

snippet nsenterMknod "nsenterMknod(config *libcontainer.Config, args []string)"
nsenterMknod( ${1:config *libcontainer.Config}, ${2:args []string})
endsnippet

snippet ntz "ntz(x word)"
ntz( ${1:x word})
endsnippet

snippet nuke "nuke(daemon *daemon.Daemon)"
nuke( ${1:daemon *daemon.Daemon})
endsnippet

snippet nukeEntities "nukeEntities(c appengine.Context, kinds []string)"
nukeEntities( ${1:c appengine.Context}, ${2:kinds []string})
endsnippet

snippet nukeGraph "nukeGraph(graph *graph.Graph)"
nukeGraph( ${1:graph *graph.Graph})
endsnippet

snippet nullDispatch "nullDispatch(b *Builder, args []string, attributes map[string]bool, original string)"
nullDispatch( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet numberDomTree "numberDomTree(v *BasicBlock, pre, post int32)"
numberDomTree( ${1:v *BasicBlock}, ${2:pre}, ${3:post int32})
endsnippet

snippet numberRegisters "numberRegisters(f *Function)"
numberRegisters( ${1:f *Function})
endsnippet

snippet objToDoc "objToDoc(obj interface{})"
objToDoc( ${1:obj interface{}})
endsnippet

snippet objectKind "objectKind(obj types.Object)"
objectKind( ${1:obj types.Object})
endsnippet

snippet obtainerType "obtainerType(m reflect.Method)"
obtainerType( ${1:m reflect.Method})
endsnippet

snippet oddUntil "oddUntil(space int)"
oddUntil( ${1:space int})
endsnippet

snippet offsetAndBitIndex "offsetAndBitIndex(x int)"
offsetAndBitIndex( ${1:x int})
endsnippet

snippet okTransform "okTransform(f reflect.Type)"
okTransform( ${1:f reflect.Type})
endsnippet

snippet oldGoogleCode "oldGoogleCode(match map[string]string)"
oldGoogleCode( ${1:match map[string]string})
endsnippet

snippet oldwalk "oldwalk(name string)"
oldwalk( ${1:name string})
endsnippet

snippet onbuild "onbuild(b *Builder, args []string, attributes map[string]bool, original string)"
onbuild( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet one "one(i I, j J)"
one( ${1:i I}, ${2:j J})
endsnippet

snippet oneFile "oneFile(t *T, enc Encoder)"
oneFile( ${1:t *T}, ${2:enc Encoder})
endsnippet

snippet opaqueColor "opaqueColor(col color.Color)"
opaqueColor( ${1:col color.Color})
endsnippet

snippet openBrowser "openBrowser(url string)"
openBrowser( ${1:url string})
endsnippet

snippet openDir "openDir(path string)"
openDir( ${1:path string})
endsnippet

snippet openExportFile "openExportFile(fpath string)"
openExportFile( ${1:fpath string})
endsnippet

snippet openFile "openFile(path string)"
openFile( ${1:path string})
endsnippet

snippet openLog "openLog(name string)"
openLog( ${1:name string})
endsnippet

snippet openNextAvailableLoopback "openNextAvailableLoopback(index int, sparseFile *os.File)"
openNextAvailableLoopback( ${1:index int}, ${2:sparseFile *os.File})
endsnippet

snippet operandString "operandString(this *Package, x *operand)"
operandString( ${1:this *Package}, ${2:x *operand})
endsnippet

snippet operands "operands(inst ssa.Instruction)"
operands( ${1:inst ssa.Instruction})
endsnippet

snippet optimizeBlocks "optimizeBlocks(f *Function)"
optimizeBlocks( ${1:f *Function})
endsnippet

snippet optionsHandler "optionsHandler(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
optionsHandler( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet or "or(a, b knowledge)"
or( ${1:a}, ${2:b knowledge})
endsnippet

snippet ord "ord(x Value)"
ord( ${1:x Value})
endsnippet

snippet orderPerfTodo "orderPerfTodo(nums []int)"
orderPerfTodo( ${1:nums []int})
endsnippet

snippet orderPrefTodo "orderPrefTodo(nums []int)"
orderPrefTodo( ${1:nums []int})
endsnippet

snippet orderedSetObjects "orderedSetObjects(set map[Object]bool)"
orderedSetObjects( ${1:set map[Object]bool})
endsnippet

snippet originwindow "originwindow(w *Image, log, scr image.Point)"
originwindow( ${1:w *Image}, ${2:log}, ${3:scr image.Point})
endsnippet

snippet packCommon "packCommon(fc *Fcall, size int, id uint8)"
packCommon( ${1:fc *Fcall}, ${2:size int}, ${3:id uint8})
endsnippet

snippet packDir "packDir(srcPath string, recPath string, zw *zip.Writer, fn cae.HookFunc)"
packDir( ${1:srcPath string}, ${2:recPath string}, ${3:zw *zip.Writer}, ${4:fn cae.HookFunc})
endsnippet

snippet packFile "packFile(srcFile string, recPath string, zw *zip.Writer, fi os.FileInfo)"
packFile( ${1:srcFile string}, ${2:recPath string}, ${3:zw *zip.Writer}, ${4:fi os.FileInfo})
endsnippet

snippet packTo "packTo(srcPath, destPath string, fn cae.HookFunc, includeDir bool)"
packTo( ${1:srcPath}, ${2:destPath string}, ${3:fn cae.HookFunc}, ${4:includeDir bool})
endsnippet

snippet packToWriter "packToWriter(srcPath string, w io.Writer, fn func(fullName string, fi os.FileInfo)"
packToWriter( ${1:srcPath string}, ${2:w io.Writer}, ${3:fn func(fullName string}, ${4:fi os.FileInfo})
endsnippet

snippet pack_build_context "pack_build_context(ctx *build.Context)"
pack_build_context( ${1:ctx *build.Context})
endsnippet

snippet packageExports "packageExports(fset *token.FileSet, pkg *ast.Package)"
packageExports( ${1:fset *token.FileSet}, ${2:pkg *ast.Package})
endsnippet

snippet packageName "packageName(body string)"
packageName( ${1:body string})
endsnippet

snippet package_name "package_name(file *ast.File)"
package_name( ${1:file *ast.File})
endsnippet

snippet packagesHandler "packagesHandler(r *http.Request)"
packagesHandler( ${1:r *http.Request})
endsnippet

snippet panicHandler "panicHandler(v *Value)"
panicHandler( ${1:v *Value})
endsnippet

snippet panicToErr "panicToErr(err *error)"
panicToErr( ${1:err *error})
endsnippet

snippet panicToErrT "panicToErrT(panicVal interface{}, err *error)"
panicToErrT( ${1:panicVal interface{}}, ${2:err *error})
endsnippet

snippet panicValToErr "panicValToErr(panicVal interface{}, err *error)"
panicValToErr( ${1:panicVal interface{}}, ${2:err *error})
endsnippet

snippet panicf "panicf(s string, a ...interface{})"
panicf( ${1:s string}, ${2:a ...interface{}})
endsnippet

snippet parallelReader "parallelReader(r *http.Request, key string, iterations int, wait, done chan struct{})"
parallelReader( ${1:r *http.Request}, ${2:key string}, ${3:iterations int}, ${4:wait}, ${5:done chan struct{}})
endsnippet

snippet parallelWriter "parallelWriter(r *http.Request, key, value string, iterations int, wait, done chan struct{})"
parallelWriter( ${1:r *http.Request}, ${2:key}, ${3:value string}, ${4:iterations int}, ${5:wait}, ${6:done chan struct{}})
endsnippet

snippet paramListExports "paramListExports(fields *FieldList)"
paramListExports( ${1:fields *FieldList})
endsnippet

snippet parentCancelCtx "parentCancelCtx(parent Context)"
parentCancelCtx( ${1:parent Context})
endsnippet

snippet parents "parents(path string)"
parents( ${1:path string})
endsnippet

snippet parse "parse(t *testing.T, name, in string)"
parse( ${1:t *testing.T}, ${2:name}, ${3:in string})
endsnippet

snippet parseArg "parseArg(arg interface{}, file string, max int)"
parseArg( ${1:arg interface{}}, ${2:file string}, ${3:max int})
endsnippet

snippet parseArgs "parseArgs(name string, line int, args []string)"
parseArgs( ${1:name string}, ${2:line int}, ${3:args []string})
endsnippet

snippet parseAuthors "parseAuthors(lines *Lines)"
parseAuthors( ${1:lines *Lines})
endsnippet

snippet parseBenchmarkOutput "parseBenchmarkOutput(out io.Reader)"
parseBenchmarkOutput( ${1:out io.Reader})
endsnippet

snippet parseBindMountSpec "parseBindMountSpec(spec string)"
parseBindMountSpec( ${1:spec string})
endsnippet

snippet parseCaption "parseCaption(_ *Context, _ string, _ int, text string)"
parseCaption( ${1:_ *Context}, ${2:_ string}, ${3:_ int}, ${4:text string})
endsnippet

snippet parseCode "parseCode(ctx *Context, sourceFile string, sourceLine int, cmd string)"
parseCode( ${1:ctx *Context}, ${2:sourceFile string}, ${3:sourceLine int}, ${4:cmd string})
endsnippet

snippet parseCondition "parseCondition(s string)"
parseCondition( ${1:s string})
endsnippet

snippet parseConstSpec "parseConstSpec(p *parser, doc *ast.CommentGroup, decl *ast.GenDecl, iota int)"
parseConstSpec( ${1:p *parser}, ${2:doc *ast.CommentGroup}, ${3:decl *ast.GenDecl}, ${4:iota int})
endsnippet

snippet parseControlMessage "parseControlMessage(b []byte)"
parseControlMessage( ${1:b []byte})
endsnippet

snippet parseDSCPRegistry "parseDSCPRegistry(w io.Writer, r io.Reader)"
parseDSCPRegistry( ${1:w io.Writer}, ${2:r io.Reader})
endsnippet

snippet parseDefaultMessageBody "parseDefaultMessageBody(b []byte)"
parseDefaultMessageBody( ${1:b []byte})
endsnippet

snippet parseDepth "parseDepth(s string)"
parseDepth( ${1:s string})
endsnippet

snippet parseDescriptor "parseDescriptor(spec string)"
parseDescriptor( ${1:spec string})
endsnippet

snippet parseDiffOp "parseDiffOp(cmd string)"
parseDiffOp( ${1:cmd string})
endsnippet

snippet parseDir "parseDir(dirname string)"
parseDir( ${1:dirname string})
endsnippet

snippet parseDockerignore "parseDockerignore(root string)"
parseDockerignore( ${1:root string})
endsnippet

snippet parseDoctype "parseDoctype(s string)"
parseDoctype( ${1:s string})
endsnippet

snippet parseDriverOpts "parseDriverOpts(opts opts.ListOpts)"
parseDriverOpts( ${1:opts opts.ListOpts})
endsnippet

snippet parseDst "parseDst(cm *ControlMessage, b []byte)"
parseDst( ${1:cm *ControlMessage}, ${2:b []byte})
endsnippet

snippet parseDstUnreach "parseDstUnreach(b []byte)"
parseDstUnreach( ${1:b []byte})
endsnippet

snippet parseECCoordinate "parseECCoordinate(cB64Url string, curve elliptic.Curve)"
parseECCoordinate( ${1:cB64Url string}, ${2:curve elliptic.Curve})
endsnippet

snippet parseECPrivateParam "parseECPrivateParam(dB64Url string, curve elliptic.Curve)"
parseECPrivateParam( ${1:dB64Url string}, ${2:curve elliptic.Curve})
endsnippet

snippet parseEcho "parseEcho(b []byte)"
parseEcho( ${1:b []byte})
endsnippet

snippet parseEndpoint "parseEndpoint(endpoint string)"
parseEndpoint( ${1:endpoint string})
endsnippet

snippet parseEnv "parseEnv(rest string)"
parseEnv( ${1:rest string})
endsnippet

snippet parseExpr "parseExpr(s *ast.Scope, expr string)"
parseExpr( ${1:s *ast.Scope}, ${2:expr string})
endsnippet

snippet parseFile "parseFile(path string)"
parseFile( ${1:path string})
endsnippet

snippet parseFileInPkg "parseFileInPkg(fset *token.FileSet, pkgs map[string]*ast.Package, filename string, mode uint)"
parseFileInPkg( ${1:fset *token.FileSet}, ${2:pkgs map[string]*ast.Package}, ${3:filename string}, ${4:mode uint})
endsnippet

snippet parseFiles "parseFiles(filenames []string)"
parseFiles( ${1:filenames []string})
endsnippet

snippet parseFixPrint "parseFixPrint(t *testing.T, fn func(*ast.File)"
parseFixPrint( ${1:t *testing.T}, ${2:fn func(*ast.File})
endsnippet

snippet parseForeignContent "parseForeignContent(p *parser)"
parseForeignContent( ${1:p *parser})
endsnippet

snippet parseForm "parseForm(r *http.Request)"
parseForm( ${1:r *http.Request})
endsnippet

snippet parseFromFlag "parseFromFlag(ctxt *build.Context, fromFlag string)"
parseFromFlag( ${1:ctxt *build.Context}, ${2:fromFlag string})
endsnippet

snippet parseGomfile "parseGomfile(filename string)"
parseGomfile( ${1:filename string})
endsnippet

snippet parseGopmfile "parseGopmfile(fileName string)"
parseGopmfile( ${1:fileName string})
endsnippet

snippet parseGroup "parseGroup(s string)"
parseGroup( ${1:s string})
endsnippet

snippet parseHTML "parseHTML(ctx *Context, fileName string, lineno int, text string)"
parseHTML( ${1:ctx *Context}, ${2:fileName string}, ${3:lineno int}, ${4:text string})
endsnippet

snippet parseHeader "parseHeader(doc *Doc, lines *Lines)"
parseHeader( ${1:doc *Doc}, ${2:lines *Lines})
endsnippet

snippet parseHeaderValueBlock "parseHeaderValueBlock(r io.Reader, streamId StreamId)"
parseHeaderValueBlock( ${1:r io.Reader}, ${2:streamId StreamId})
endsnippet

snippet parseHopLimit "parseHopLimit(cm *ControlMessage, b []byte)"
parseHopLimit( ${1:cm *ControlMessage}, ${2:b []byte})
endsnippet

snippet parseICMPEcho "parseICMPEcho(b []byte)"
parseICMPEcho( ${1:b []byte})
endsnippet

snippet parseICMPMessage "parseICMPMessage(b []byte)"
parseICMPMessage( ${1:b []byte})
endsnippet

snippet parseICMPv4Parameters "parseICMPv4Parameters(w io.Writer, r io.Reader)"
parseICMPv4Parameters( ${1:w io.Writer}, ${2:r io.Reader})
endsnippet

snippet parseICMPv6Parameters "parseICMPv6Parameters(w io.Writer, r io.Reader)"
parseICMPv6Parameters( ${1:w io.Writer}, ${2:r io.Reader})
endsnippet

snippet parseIfHeader "parseIfHeader(httpHeader string)"
parseIfHeader( ${1:httpHeader string})
endsnippet

snippet parseIframe "parseIframe(ctx *Context, fileName string, lineno int, text string)"
parseIframe( ${1:ctx *Context}, ${2:fileName string}, ${3:lineno int}, ${4:text string})
endsnippet

snippet parseIgnore "parseIgnore(rest string)"
parseIgnore( ${1:rest string})
endsnippet

snippet parseImage "parseImage(ctx *Context, fileName string, lineno int, text string)"
parseImage( ${1:ctx *Context}, ${2:fileName string}, ${3:lineno int}, ${4:text string})
endsnippet

snippet parseImportPath "parseImportPath(e ast.Expr)"
parseImportPath( ${1:e ast.Expr})
endsnippet

snippet parseImportSpec "parseImportSpec(p *parser, doc *ast.CommentGroup, decl *ast.GenDecl, _ int)"
parseImportSpec( ${1:p *parser}, ${2:doc *ast.CommentGroup}, ${3:decl *ast.GenDecl}, ${4:_ int})
endsnippet

snippet parseIndexKey "parseIndexKey(key []string)"
parseIndexKey( ${1:key []string})
endsnippet

snippet parseInfoFile "parseInfoFile(r io.Reader)"
parseInfoFile( ${1:r io.Reader})
endsnippet

snippet parseInlineLink "parseInlineLink(s string)"
parseInlineLink( ${1:s string})
endsnippet

snippet parseInstructions "parseInstructions(t *testing.T, filename string, src []byte)"
parseInstructions( ${1:t *testing.T}, ${2:filename string}, ${3:src []byte})
endsnippet

snippet parseIntOrName "parseIntOrName(expr string, names map[string]uint)"
parseIntOrName( ${1:expr string}, ${2:names map[string]uint})
endsnippet

snippet parseInterface "parseInterface(cm *ControlMessage, b []byte)"
parseInterface( ${1:cm *ControlMessage}, ${2:b []byte})
endsnippet

snippet parseJSON "parseJSON(rest string)"
parseJSON( ${1:rest string})
endsnippet

snippet parseKeyValueOpts "parseKeyValueOpts(opts opts.ListOpts)"
parseKeyValueOpts( ${1:opts opts.ListOpts})
endsnippet

snippet parseKindMask "parseKindMask(kinds string)"
parseKindMask( ${1:kinds string})
endsnippet

snippet parseLine "parseLine(line string)"
parseLine( ${1:line string})
endsnippet

snippet parseLink "parseLink(ctx *Context, fileName string, lineno int, text string)"
parseLink( ${1:ctx *Context}, ${2:fileName string}, ${3:lineno int}, ${4:text string})
endsnippet

snippet parseList "parseList(s string)"
parseList( ${1:s string})
endsnippet

snippet parseLocalPackage "parseLocalPackage(filename string, src *ast.File, pkgScope *ast.Scope)"
parseLocalPackage( ${1:filename string}, ${2:src *ast.File}, ${3:pkgScope *ast.Scope})
endsnippet

snippet parseLxcInfo "parseLxcInfo(raw string)"
parseLxcInfo( ${1:raw string})
endsnippet

snippet parseMaybeJSON "parseMaybeJSON(rest string)"
parseMaybeJSON( ${1:rest string})
endsnippet

snippet parseMaybeJSONToList "parseMaybeJSONToList(rest string)"
parseMaybeJSONToList( ${1:rest string})
endsnippet

snippet parseMemInfo "parseMemInfo(reader io.Reader)"
parseMemInfo( ${1:reader io.Reader})
endsnippet

snippet parseMeta "parseMeta(scheme, importPath string, r io.Reader)"
parseMeta( ${1:scheme}, ${2:importPath string}, ${3:r io.Reader})
endsnippet

snippet parseMetaGoImports "parseMetaGoImports(r io.Reader)"
parseMetaGoImports( ${1:r io.Reader})
endsnippet

snippet parseMultipartForm "parseMultipartForm(r *http.Request)"
parseMultipartForm( ${1:r *http.Request})
endsnippet

snippet parseName "parseName(s string)"
parseName( ${1:s string})
endsnippet

snippet parseNetMode "parseNetMode(netMode string)"
parseNetMode( ${1:netMode string})
endsnippet

snippet parseNetwork "parseNetwork(net string)"
parseNetwork( ${1:net string})
endsnippet

snippet parseNextHop "parseNextHop(cm *ControlMessage, b []byte)"
parseNextHop( ${1:cm *ControlMessage}, ${2:b []byte})
endsnippet

snippet parseNoTagLists "parseNoTagLists(s string)"
parseNoTagLists( ${1:s string})
endsnippet

snippet parseObjectSpec "parseObjectSpec(spec *spec, main string)"
parseObjectSpec( ${1:spec *spec}, ${2:main string})
endsnippet

snippet parseOctothorpDecimal "parseOctothorpDecimal(s string)"
parseOctothorpDecimal( ${1:s string})
endsnippet

snippet parseOffsetFlag "parseOffsetFlag(ctxt *build.Context, offsetFlag string)"
parseOffsetFlag( ${1:ctxt *build.Context}, ${2:offsetFlag string})
endsnippet

snippet parseOptions "parseOptions(options string)"
parseOptions( ${1:options string})
endsnippet

snippet parsePAX "parsePAX(r io.Reader)"
parsePAX( ${1:r io.Reader})
endsnippet

snippet parsePAXTime "parsePAXTime(t string)"
parsePAXTime( ${1:t string})
endsnippet

snippet parsePacketInfo "parsePacketInfo(cm *ControlMessage, b []byte)"
parsePacketInfo( ${1:cm *ControlMessage}, ${2:b []byte})
endsnippet

snippet parsePacketTooBig "parsePacketTooBig(b []byte)"
parsePacketTooBig( ${1:b []byte})
endsnippet

snippet parseParamProb "parseParamProb(b []byte)"
parseParamProb( ${1:b []byte})
endsnippet

snippet parsePathMTU "parsePathMTU(cm *ControlMessage, b []byte)"
parsePathMTU( ${1:cm *ControlMessage}, ${2:b []byte})
endsnippet

snippet parsePort "parsePort(rawPort string)"
parsePort( ${1:rawPort string})
endsnippet

snippet parsePosFlag "parsePosFlag(posFlag string)"
parsePosFlag( ${1:posFlag string})
endsnippet

snippet parseProtocolNumbers "parseProtocolNumbers(w io.Writer, r io.Reader)"
parseProtocolNumbers( ${1:w io.Writer}, ${2:r io.Reader})
endsnippet

snippet parseQueries "parseQueries(t *testing.T, filename string)"
parseQueries( ${1:t *testing.T}, ${2:filename string})
endsnippet

snippet parseRSAModulusParam "parseRSAModulusParam(nB64Url string)"
parseRSAModulusParam( ${1:nB64Url string})
endsnippet

snippet parseRSAPrivateKeyParamFromMap "parseRSAPrivateKeyParamFromMap(m map[string]interface{}, key string)"
parseRSAPrivateKeyParamFromMap( ${1:m map[string]interface{}}, ${2:key string})
endsnippet

snippet parseRSAPublicExponentParam "parseRSAPublicExponentParam(eB64Url string)"
parseRSAPublicExponentParam( ${1:eB64Url string})
endsnippet

snippet parseRegexp "parseRegexp(text string)"
parseRegexp( ${1:text string})
endsnippet

snippet parseRestartPolicy "parseRestartPolicy(policy string)"
parseRestartPolicy( ${1:policy string})
endsnippet

snippet parseResult "parseResult(result cmdResultRecord, resultObj interface{})"
parseResult( ${1:result cmdResultRecord}, ${2:resultObj interface{}})
endsnippet

snippet parseRun "parseRun(args []string)"
parseRun( ${1:args []string})
endsnippet

snippet parseSections "parseSections(ctx *Context, name string, lines *Lines, number []int, doc *Doc)"
parseSections( ${1:ctx *Context}, ${2:name string}, ${3:lines *Lines}, ${4:number []int}, ${5:doc *Doc})
endsnippet

snippet parseSecurityOpt "parseSecurityOpt(container *Container, config *runconfig.HostConfig)"
parseSecurityOpt( ${1:container *Container}, ${2:config *runconfig.HostConfig})
endsnippet

snippet parseSize "parseSize(sizeStr string, uMap unitMap)"
parseSize( ${1:sizeStr string}, ${2:uMap unitMap})
endsnippet

snippet parseStacks "parseStacks(r io.Reader)"
parseStacks( ${1:r io.Reader})
endsnippet

snippet parseString "parseString(rest string)"
parseString( ${1:rest string})
endsnippet

snippet parseStringPairs "parseStringPairs(input ...string)"
parseStringPairs( ${1:input ...string})
endsnippet

snippet parseStringsWhitespaceDelimited "parseStringsWhitespaceDelimited(rest string)"
parseStringsWhitespaceDelimited( ${1:rest string})
endsnippet

snippet parseStructFieldInfo "parseStructFieldInfo(fname string, stag string)"
parseStructFieldInfo( ${1:fname string}, ${2:stag string})
endsnippet

snippet parseStyles "parseStyles(style *html.Node)"
parseStyles( ${1:style *html.Node})
endsnippet

snippet parseSubCommand "parseSubCommand(rest string)"
parseSubCommand( ${1:rest string})
endsnippet

snippet parseSymLine "parseSymLine(line string)"
parseSymLine( ${1:line string})
endsnippet

snippet parseTOSTCByte "parseTOSTCByte(w io.Writer, r io.Reader)"
parseTOSTCByte( ${1:w io.Writer}, ${2:r io.Reader})
endsnippet

snippet parseTTL "parseTTL(cm *ControlMessage, b []byte)"
parseTTL( ${1:cm *ControlMessage}, ${2:b []byte})
endsnippet

snippet parseTaggedLists "parseTaggedLists(s string)"
parseTaggedLists( ${1:s string})
endsnippet

snippet parseTime "parseTime(text string)"
parseTime( ${1:text string})
endsnippet

snippet parseTimeExceeded "parseTimeExceeded(b []byte)"
parseTimeExceeded( ${1:b []byte})
endsnippet

snippet parseTimeout "parseTimeout(s string)"
parseTimeout( ${1:s string})
endsnippet

snippet parseTrafficClass "parseTrafficClass(cm *ControlMessage, b []byte)"
parseTrafficClass( ${1:cm *ControlMessage}, ${2:b []byte})
endsnippet

snippet parseTypeSpec "parseTypeSpec(p *parser, doc *ast.CommentGroup, decl *ast.GenDecl, _ int)"
parseTypeSpec( ${1:p *parser}, ${2:doc *ast.CommentGroup}, ${3:decl *ast.GenDecl}, ${4:_ int})
endsnippet

snippet parseURL "parseURL(text string)"
parseURL( ${1:text string})
endsnippet

snippet parseUint "parseUint(s string, base, bitSize int)"
parseUint( ${1:s string}, ${2:base}, ${3:bitSize int})
endsnippet

snippet parseVarSpec "parseVarSpec(p *parser, doc *ast.CommentGroup, decl *ast.GenDecl, _ int)"
parseVarSpec( ${1:p *parser}, ${2:doc *ast.CommentGroup}, ${3:decl *ast.GenDecl}, ${4:_ int})
endsnippet

snippet parseVolumesFromSpec "parseVolumesFromSpec(daemon *Daemon, spec string)"
parseVolumesFromSpec( ${1:daemon *Daemon}, ${2:spec string})
endsnippet

snippet parse_conditions_string_to_map "parse_conditions_string_to_map(str string)"
parse_conditions_string_to_map( ${1:str string})
endsnippet

snippet parse_decl_list "parse_decl_list(fset *token.FileSet, data []byte)"
parse_decl_list( ${1:fset *token.FileSet}, ${2:data []byte})
endsnippet

snippet parse_escape_sequence "parse_escape_sequence(event *Event, buf []byte)"
parse_escape_sequence( ${1:event *Event}, ${2:buf []byte})
endsnippet

snippet parse_import_data "parse_import_data(data []byte)"
parse_import_data( ${1:data []byte})
endsnippet

snippet partsToHash "partsToHash(c *Commit, p []string)"
partsToHash( ${1:c *Commit}, ${2:p []string})
endsnippet

snippet partsToResult "partsToResult(c *Commit, p []string)"
partsToResult( ${1:c *Commit}, ${2:p []string})
endsnippet

snippet passThru "passThru(w io.Writer, req *http.Request)"
passThru( ${1:w io.Writer}, ${2:req *http.Request})
endsnippet

snippet pathExists "pathExists(pth string)"
pathExists( ${1:pth string})
endsnippet

snippet pathToString "pathToString(path []ast.Node)"
pathToString( ${1:path []ast.Node})
endsnippet

snippet path_and_alias "path_and_alias(imp *ast.ImportSpec)"
path_and_alias( ${1:imp *ast.ImportSpec})
endsnippet

snippet paths "paths(fs vfs.NameSpace, pres *Presentation, path string)"
paths( ${1:fs vfs.NameSpace}, ${2:pres *Presentation}, ${3:path string})
endsnippet

snippet pause "pause(t int)"
pause( ${1:t int})
endsnippet

snippet pauseAction "pauseAction(context *cli.Context)"
pauseAction( ${1:context *cli.Context})
endsnippet

snippet paxHeader "paxHeader(msg string)"
paxHeader( ${1:msg string})
endsnippet

snippet pbit16 "pbit16(b []byte, x uint16)"
pbit16( ${1:b []byte}, ${2:x uint16})
endsnippet

snippet pbit32 "pbit32(b []byte, i int)"
pbit32( ${1:b []byte}, ${2:i int})
endsnippet

snippet pbit64 "pbit64(b []byte, x uint64)"
pbit64( ${1:b []byte}, ${2:x uint64})
endsnippet

snippet pbit8 "pbit8(b []byte, x uint8)"
pbit8( ${1:b []byte}, ${2:x uint8})
endsnippet

snippet pbool "pbool(b []byte, x bool)"
pbool( ${1:b []byte}, ${2:x bool})
endsnippet

snippet pbytes "pbytes(b, s []byte)"
pbytes( ${1:b}, ${2:s []byte})
endsnippet

snippet pdir "pdir(b []byte, d *Dir)"
pdir( ${1:b []byte}, ${2:d *Dir})
endsnippet

snippet peers "peers(o *Oracle, qpos *QueryPos)"
peers( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet percentCovered "percentCovered(p *cover.Profile)"
percentCovered( ${1:p *cover.Profile})
endsnippet

snippet perfChangeStyle "perfChangeStyle(pc *PerfConfig, v float64, builder, benchmark, metric string)"
perfChangeStyle( ${1:pc *PerfConfig}, ${2:v float64}, ${3:builder}, ${4:benchmark}, ${5:metric string})
endsnippet

snippet perfChangesHandler "perfChangesHandler(w http.ResponseWriter, r *http.Request)"
perfChangesHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet perfDetailUIHandler "perfDetailUIHandler(w http.ResponseWriter, r *http.Request)"
perfDetailUIHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet perfDiff "perfDiff(old, new uint64)"
perfDiff( ${1:old}, ${2:new uint64})
endsnippet

snippet perfGraphHandler "perfGraphHandler(w http.ResponseWriter, r *http.Request)"
perfGraphHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet perfLearnHandler "perfLearnHandler(w http.ResponseWriter, r *http.Request)"
perfLearnHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet perfResultHandler "perfResultHandler(r *http.Request)"
perfResultHandler( ${1:r *http.Request})
endsnippet

snippet perfResultSplit "perfResultSplit(s string)"
perfResultSplit( ${1:s string})
endsnippet

snippet perfTodo "perfTodo(c appengine.Context, builder string)"
perfTodo( ${1:c appengine.Context}, ${2:builder string})
endsnippet

snippet performErrorTest "performErrorTest(t *testing.T, testCase errorTestCase)"
performErrorTest( ${1:t *testing.T}, ${2:testCase errorTestCase})
endsnippet

snippet performFileTest "performFileTest(t *testing.T, binder handlerFunc, testCase fileTestCase)"
performFileTest( ${1:t *testing.T}, ${2:binder handlerFunc}, ${3:testCase fileTestCase})
endsnippet

snippet performFormTest "performFormTest(t *testing.T, binder handlerFunc, testCase formTestCase)"
performFormTest( ${1:t *testing.T}, ${2:binder handlerFunc}, ${3:testCase formTestCase})
endsnippet

snippet performJsonTest "performJsonTest(t *testing.T, binder handlerFunc, testCase jsonTestCase)"
performJsonTest( ${1:t *testing.T}, ${2:binder handlerFunc}, ${3:testCase jsonTestCase})
endsnippet

snippet performMultipartFormTest "performMultipartFormTest(t *testing.T, binder handlerFunc, testCase multipartFormTestCase)"
performMultipartFormTest( ${1:t *testing.T}, ${2:binder handlerFunc}, ${3:testCase multipartFormTestCase})
endsnippet

snippet performValidationTest "performValidationTest(t *testing.T, testCase validationTestCase)"
performValidationTest( ${1:t *testing.T}, ${2:testCase validationTestCase})
endsnippet

snippet permToString "permToString(perm uint32)"
permToString( ${1:perm uint32})
endsnippet

snippet permuteFloat32NBuf "permuteFloat32NBuf(b0, b1 Buffer, p []int)"
permuteFloat32NBuf( ${1:b0}, ${2:b1 Buffer}, ${3:p []int})
endsnippet

snippet permuteNFloat32Buf "permuteNFloat32Buf(b0, b1 Buffer, p []int)"
permuteNFloat32Buf( ${1:b0}, ${2:b1 Buffer}, ${3:p []int})
endsnippet

snippet phiIsLive "phiIsLive(phi *Phi)"
phiIsLive( ${1:phi *Phi})
endsnippet

snippet ping "ping(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
ping( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet pint16 "pint16(val uint16, buf []byte)"
pint16( ${1:val uint16}, ${2:buf []byte})
endsnippet

snippet pint32 "pint32(val uint32, buf []byte)"
pint32( ${1:val uint32}, ${2:buf []byte})
endsnippet

snippet pint64 "pint64(val uint64, buf []byte)"
pint64( ${1:val uint64}, ${2:buf []byte})
endsnippet

snippet pint8 "pint8(val uint8, buf []byte)"
pint8( ${1:val uint8}, ${2:buf []byte})
endsnippet

snippet pixel2fixPoint "pixel2fixPoint(p image.Point)"
pixel2fixPoint( ${1:p image.Point})
endsnippet

snippet pkgContainsFile "pkgContainsFile(bp *build.Package, filename string)"
pkgContainsFile( ${1:bp *build.Package}, ${2:filename string})
endsnippet

snippet pkgFilenames "pkgFilenames(dir string)"
pkgFilenames( ${1:dir string})
endsnippet

snippet pkgFiles "pkgFiles(fset *token.FileSet, path string)"
pkgFiles( ${1:fset *token.FileSet}, ${2:path string})
endsnippet

snippet pkgFor "pkgFor(path, source string, info *Info)"
pkgFor( ${1:path}, ${2:source string}, ${3:info *Info})
endsnippet

snippet pkgForPath "pkgForPath(path string)"
pkgForPath( ${1:path string})
endsnippet

snippet pkgForSource "pkgForSource(src string)"
pkgForSource( ${1:src string})
endsnippet

snippet pkgLinkFunc "pkgLinkFunc(path string)"
pkgLinkFunc( ${1:path string})
endsnippet

snippet pkgName "pkgName(filename string)"
pkgName( ${1:filename string})
endsnippet

snippet pkgPath "pkgPath(f *File, pkgName string)"
pkgPath( ${1:f *File}, ${2:pkgName string})
endsnippet

snippet pkgString "pkgString(pkg *types.Package)"
pkgString( ${1:pkg *types.Package})
endsnippet

snippet playScript "playScript(root, transport string)"
playScript( ${1:root}, ${2:transport string})
endsnippet

snippet playable "playable(c present.Code)"
playable( ${1:c present.Code})
endsnippet

snippet plural "plural(n int)"
plural( ${1:n int})
endsnippet

snippet pointsto "pointsto(o *Oracle, qpos *QueryPos)"
pointsto( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet poorMansImporter "poorMansImporter(imports map[string]*ast.Object, path string)"
poorMansImporter( ${1:imports map[string]*ast.Object}, ${2:path string})
endsnippet

snippet pop "pop(msg []string)"
pop( ${1:msg []string})
endsnippet

snippet popMsg "popMsg(msgs [][]string)"
popMsg( ${1:msgs [][]string})
endsnippet

snippet popStr "popStr(ss []string)"
popStr( ${1:ss []string})
endsnippet

snippet popWorker "popWorker(workers []*Worker)"
popWorker( ${1:workers []*Worker})
endsnippet

snippet popcount "popcount(x word)"
popcount( ${1:x word})
endsnippet

snippet populateCommand "populateCommand(c *Container, env []string)"
populateCommand( ${1:c *Container}, ${2:env []string})
endsnippet

snippet posStr "posStr(pos token.Position)"
posStr( ${1:pos token.Position})
endsnippet

snippet posix_openpt "posix_openpt(oflag int)"
posix_openpt( ${1:oflag int})
endsnippet

snippet postAuth "postAuth(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postAuth( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postBuild "postBuild(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postBuild( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postCommit "postCommit(key, pkg string, l *HgLog)"
postCommit( ${1:key}, ${2:pkg string}, ${3:l *HgLog})
endsnippet

snippet postCommits "postCommits(hashes []string)"
postCommits( ${1:hashes []string})
endsnippet

snippet postContainerExecCreate "postContainerExecCreate(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainerExecCreate( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainerExecResize "postContainerExecResize(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainerExecResize( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainerExecStart "postContainerExecStart(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainerExecStart( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersAttach "postContainersAttach(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersAttach( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersCopy "postContainersCopy(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersCopy( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersCreate "postContainersCreate(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersCreate( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersKill "postContainersKill(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersKill( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersPause "postContainersPause(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersPause( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersResize "postContainersResize(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersResize( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersRestart "postContainersRestart(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersRestart( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersStart "postContainersStart(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersStart( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersStop "postContainersStop(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersStop( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersUnpause "postContainersUnpause(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersUnpause( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postContainersWait "postContainersWait(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postContainersWait( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postImagesCreate "postImagesCreate(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postImagesCreate( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postImagesLoad "postImagesLoad(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postImagesLoad( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postImagesPush "postImagesPush(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postImagesPush( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet postImagesTag "postImagesTag(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
postImagesTag( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet pperm "pperm(b []byte, p Perm)"
pperm( ${1:b []byte}, ${2:p Perm})
endsnippet

snippet pqid "pqid(b []byte, q Qid)"
pqid( ${1:b []byte}, ${2:q Qid})
endsnippet

snippet prctl "prctl(option int, arg2, arg3, arg4, arg5 uintptr)"
prctl( ${1:option int}, ${2:arg2}, ${3:arg3}, ${4:arg4}, ${5:arg5 uintptr})
endsnippet

snippet predString "predString(tv TypeAndValue)"
predString( ${1:tv TypeAndValue})
endsnippet

snippet predecl "predecl(name string)"
predecl( ${1:name string})
endsnippet

snippet prefixDirectory "prefixDirectory(directory string, names []string)"
prefixDirectory( ${1:directory string}, ${2:names []string})
endsnippet

snippet prefixFieldClashes "prefixFieldClashes(data Fields)"
prefixFieldClashes( ${1:data Fields})
endsnippet

snippet prefixFor "prefixFor(name string)"
prefixFor( ${1:name string})
endsnippet

snippet prefixLen "prefixLen(x, y []string)"
prefixLen( ${1:x}, ${2:y []string})
endsnippet

snippet prefixedNames "prefixedNames(fullName string)"
prefixedNames( ${1:fullName string})
endsnippet

snippet preload "preload(context *cli.Context)"
preload( ${1:context *cli.Context})
endsnippet

snippet prepareCall "prepareCall(fr *frame, call *ssa.CallCommon)"
prepareCall( ${1:fr *frame}, ${2:call *ssa.CallCommon})
endsnippet

snippet prepareCharset "prepareCharset(charset string)"
prepareCharset( ${1:charset string})
endsnippet

snippet prepareCommand "prepareCommand(path string)"
prepareCommand( ${1:path string})
endsnippet

snippet prepareFiles "prepareFiles(t *testing.T)"
prepareFiles( ${1:t *testing.T})
endsnippet

snippet prepareOptions "prepareOptions(options []Options)"
prepareOptions( ${1:options []Options})
endsnippet

snippet prepareStaticOptions "prepareStaticOptions(options []StaticOptions)"
prepareStaticOptions( ${1:options []StaticOptions})
endsnippet

snippet prepareUntarSourceDirectory "prepareUntarSourceDirectory(numberOfFiles int, targetPath string, makeLinks bool)"
prepareUntarSourceDirectory( ${1:numberOfFiles int}, ${2:targetPath string}, ${3:makeLinks bool})
endsnippet

snippet prescan "prescan(content []byte)"
prescan( ${1:content []byte})
endsnippet

snippet pretty "pretty(n ast.Node)"
pretty( ${1:n ast.Node})
endsnippet

snippet prettyFunc "prettyFunc(this *types.Package, fn *ssa.Function)"
prettyFunc( ${1:this *types.Package}, ${2:fn *ssa.Function})
endsnippet

snippet pretty_print_func_field_list "pretty_print_func_field_list(out io.Writer, f *ast.FieldList)"
pretty_print_func_field_list( ${1:out io.Writer}, ${2:f *ast.FieldList})
endsnippet

snippet pretty_print_func_field_list_using_args "pretty_print_func_field_list_using_args(out io.Writer, f *ast.FieldList)"
pretty_print_func_field_list_using_args( ${1:out io.Writer}, ${2:f *ast.FieldList})
endsnippet

snippet pretty_print_mouse "pretty_print_mouse(ev *termbox.Event)"
pretty_print_mouse( ${1:ev *termbox.Event})
endsnippet

snippet pretty_print_press "pretty_print_press(ev *termbox.Event)"
pretty_print_press( ${1:ev *termbox.Event})
endsnippet

snippet pretty_print_resize "pretty_print_resize(ev *termbox.Event)"
pretty_print_resize( ${1:ev *termbox.Event})
endsnippet

snippet pretty_print_type_expr "pretty_print_type_expr(out io.Writer, e ast.Expr)"
pretty_print_type_expr( ${1:out io.Writer}, ${2:e ast.Expr})
endsnippet

snippet print "print(t *testing.T, name string, f *ast.File)"
print( ${1:t *testing.T}, ${2:name string}, ${3:f *ast.File})
endsnippet

snippet printCall "printCall(v *CallCommon, prefix string, instr Instruction)"
printCall( ${1:v *CallCommon}, ${2:prefix string}, ${3:instr Instruction})
endsnippet

snippet printColored "printColored(b *bytes.Buffer, entry *Entry, keys []string)"
printColored( ${1:b *bytes.Buffer}, ${2:entry *Entry}, ${3:keys []string})
endsnippet

snippet printConv "printConv(prefix string, v, x Value)"
printConv( ${1:prefix string}, ${2:v}, ${3:x Value})
endsnippet

snippet printDictionary "printDictionary(dict *Dictionary)"
printDictionary( ${1:dict *Dictionary})
endsnippet

snippet printDomTreeDot "printDomTreeDot(buf *bytes.Buffer, f *Function)"
printDomTreeDot( ${1:buf *bytes.Buffer}, ${2:f *Function})
endsnippet

snippet printDomTreeText "printDomTreeText(buf *bytes.Buffer, v *BasicBlock, indent int)"
printDomTreeText( ${1:buf *bytes.Buffer}, ${2:v *BasicBlock}, ${3:indent int})
endsnippet

snippet printFPadding "printFPadding(padding int, format string, a ...interface{})"
printFPadding( ${1:padding int}, ${2:format string}, ${3:a ...interface{}})
endsnippet

snippet printFailures "printFailures(failures []string)"
printFailures( ${1:failures []string})
endsnippet

snippet printGC "printGC(memStats *runtime.MemStats, gcstats *debug.GCStats)"
printGC( ${1:memStats *runtime.MemStats}, ${2:gcstats *debug.GCStats})
endsnippet

snippet printGraph "printGraph(cg *callgraph.Graph, from *types.Package)"
printGraph( ${1:cg *callgraph.Graph}, ${2:from *types.Package})
endsnippet

snippet printHelp "printHelp(templ string, data interface{})"
printHelp( ${1:templ string}, ${2:data interface{}})
endsnippet

snippet printItem "printItem(prefix Prefix, item Item)"
printItem( ${1:prefix Prefix}, ${2:item Item})
endsnippet

snippet printLabels "printLabels(printf printfFunc, labels []*pointer.Label, prefix string)"
printLabels( ${1:printf printfFunc}, ${2:labels []*pointer.Label}, ${3:prefix string})
endsnippet

snippet printNode "printNode(w io.Writer, n *node)"
printNode( ${1:w io.Writer}, ${2:n *node})
endsnippet

snippet printNodeLabel "printNodeLabel(w io.Writer, n *node)"
printNodeLabel( ${1:w io.Writer}, ${2:n *node})
endsnippet

snippet printNodes "printNodes(nodes []*node)"
printNodes( ${1:nodes []*node})
endsnippet

snippet printReal "printReal(w io.Writer, n *node)"
printReal( ${1:w io.Writer}, ${2:n *node})
endsnippet

snippet printResult "printResult(res *rta.Result, from *types.Package)"
printResult( ${1:res *rta.Result}, ${2:from *types.Package})
endsnippet

snippet printStamp "printStamp(w io.Writer, d time.Duration)"
printStamp( ${1:w io.Writer}, ${2:d time.Duration})
endsnippet

snippet printStats "printStats(d time.Duration)"
printStats( ${1:d time.Duration})
endsnippet

snippet printTest "printTest(w io.Writer, n *node)"
printTest( ${1:w io.Writer}, ${2:n *node})
endsnippet

snippet printTokens "printTokens(tokens []*Token, numTokens int)"
printTokens( ${1:tokens []*Token}, ${2:numTokens int})
endsnippet

snippet printVersion "printVersion(c *Context)"
printVersion( ${1:c *Context})
endsnippet

snippet print_backtrace "print_backtrace(err interface{})"
print_backtrace( ${1:err interface{}})
endsnippet

snippet print_combinations_table "print_combinations_table(sx, sy int, attrs []termbox.Attribute)"
print_combinations_table( ${1:sx}, ${2:sy int}, ${3:attrs []termbox.Attribute})
endsnippet

snippet print_helper "print_helper(n *Node, indent int)"
print_helper( ${1:n *Node}, ${2:indent int})
endsnippet

snippet print_tb "print_tb(x, y int, fg, bg termbox.Attribute, msg string)"
print_tb( ${1:x}, ${2:y int}, ${3:fg}, ${4:bg termbox.Attribute}, ${5:msg string})
endsnippet

snippet print_wide "print_wide(x, y int, s string)"
print_wide( ${1:x}, ${2:y int}, ${3:s string})
endsnippet

snippet printf "printf(format string, args ...interface{})"
printf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet printf_tb "printf_tb(x, y int, fg, bg termbox.Attribute, format string, args ...interface{})"
printf_tb( ${1:x}, ${2:y int}, ${3:fg}, ${4:bg termbox.Attribute}, ${5:format string}, ${6:args ...interface{}})
endsnippet

snippet processCgoFiles "processCgoFiles(bp *build.Package, fset *token.FileSet, DisplayPath func(path string)"
processCgoFiles( ${1:bp *build.Package}, ${2:fset *token.FileSet}, ${3:DisplayPath func(path string})
endsnippet

snippet processExitCode "processExitCode(err error)"
processExitCode( ${1:err error})
endsnippet

snippet processFile "processFile(filename string, in io.Reader, out io.Writer, stdin bool)"
processFile( ${1:filename string}, ${2:in io.Reader}, ${3:out io.Writer}, ${4:stdin bool})
endsnippet

snippet process_file "process_file(out io.Writer, filename string)"
process_file( ${1:out io.Writer}, ${2:filename string})
endsnippet

snippet process_rank "process_rank(args zmq_args.Request)"
process_rank( ${1:args zmq_args.Request})
endsnippet

snippet program "program(n int, out string)"
program( ${1:n int}, ${2:out string})
endsnippet

snippet propDependency "propDependency(name string, units []string)"
propDependency( ${1:name string}, ${2:units []string})
endsnippet

snippet propagateCancel "propagateCancel(parent Context, child canceler)"
propagateCancel( ${1:parent Context}, ${2:child canceler})
endsnippet

snippet protect "protect(imp types.Importer)"
protect( ${1:imp types.Importer})
endsnippet

snippet protocolNotSupported "protocolNotSupported(err error)"
protocolNotSupported( ${1:err error})
endsnippet

snippet pruneSignExt "pruneSignExt(v []byte, pos bool)"
pruneSignExt( ${1:v []byte}, ${2:pos bool})
endsnippet

snippet pstat "pstat(d *Dir, buf []byte, dotu bool)"
pstat( ${1:d *Dir}, ${2:buf []byte}, ${3:dotu bool})
endsnippet

snippet pstr "pstr(val string, buf []byte)"
pstr( ${1:val string}, ${2:buf []byte})
endsnippet

snippet pstring "pstring(b []byte, s string)"
pstring( ${1:b []byte}, ${2:s string})
endsnippet

snippet ptrAnalysis "ptrAnalysis(o *Oracle)"
ptrAnalysis( ${1:o *Oracle})
endsnippet

snippet ptrRecv "ptrRecv(f *Func)"
ptrRecv( ${1:f *Func})
endsnippet

snippet ptsname "ptsname(f *os.File)"
ptsname( ${1:f *os.File})
endsnippet

snippet pubKeyFromPEMBlock "pubKeyFromPEMBlock(pemBlock *pem.Block)"
pubKeyFromPEMBlock( ${1:pemBlock *pem.Block})
endsnippet

snippet publicscreen "publicscreen(d *Display, id, pix uint32)"
publicscreen( ${1:d *Display}, ${2:id}, ${3:pix uint32})
endsnippet

snippet publisher "publisher(pipe <-chan string)"
publisher( ${1:pipe <-chan string})
endsnippet

snippet pullImageIfNotExist "pullImageIfNotExist(image string)"
pullImageIfNotExist( ${1:image string})
endsnippet

snippet putCommit "putCommit(c appengine.Context, com *Commit)"
putCommit( ${1:c appengine.Context}, ${2:com *Commit})
endsnippet

snippet queryLinkFunc "queryLinkFunc(s, query string, line int)"
queryLinkFunc( ${1:s}, ${2:query string}, ${3:line int})
endsnippet

snippet queryString "queryString(opts interface{})"
queryString( ${1:opts interface{}})
endsnippet

snippet quitter "quitter(c <-chan bool)"
quitter( ${1:c <-chan bool})
endsnippet

snippet quote "quote(s string)"
quote( ${1:s string})
endsnippet

snippet quoteAttribute "quoteAttribute(s string)"
quoteAttribute( ${1:s string})
endsnippet

snippet quotedLength "quotedLength(input string)"
quotedLength( ${1:input string})
endsnippet

snippet rV2T "rV2T(v value)"
rV2T( ${1:v value})
endsnippet

snippet rV2V "rV2V(v value)"
rV2V( ${1:v value})
endsnippet

snippet randPoint "randPoint(size image.Point)"
randPoint( ${1:size image.Point})
endsnippet

snippet randomPset "randomPset(prng *rand.Rand, maxSize int)"
randomPset( ${1:prng *rand.Rand}, ${2:maxSize int})
endsnippet

snippet rangeIter "rangeIter(x value, t types.Type)"
rangeIter( ${1:x value}, ${2:t types.Type})
endsnippet

snippet range_predicate "range_predicate(v ast.Expr)"
range_predicate( ${1:v ast.Expr})
endsnippet

snippet rasterBbox "rasterBbox(rasterizer *raster.Rasterizer)"
rasterBbox( ${1:rasterizer *raster.Rasterizer})
endsnippet

snippet rasterMaker "rasterMaker(m draw.MouseEvent, ec <-chan interface{})"
rasterMaker( ${1:m draw.MouseEvent}, ${2:ec <-chan interface{}})
endsnippet

snippet ratToFloat32 "ratToFloat32(x *big.Rat)"
ratToFloat32( ${1:x *big.Rat})
endsnippet

snippet rawCode "rawCode(lines []codeLine)"
rawCode( ${1:lines []codeLine})
endsnippet

snippet reOpenDevNull "reOpenDevNull(rootfs string)"
reOpenDevNull( ${1:rootfs string})
endsnippet

snippet readAtLeastOneByte "readAtLeastOneByte(r io.Reader, b []byte)"
readAtLeastOneByte( ${1:r io.Reader}, ${2:b []byte})
endsnippet

snippet readAuth "readAuth(displayStr string)"
readAuth( ${1:displayStr string})
endsnippet

snippet readBody "readBody(win *acme.Win)"
readBody( ${1:win *acme.Win})
endsnippet

snippet readBytes "readBytes(buf *Reader)"
readBytes( ${1:buf *Reader})
endsnippet

snippet readCon "readCon(name string)"
readCon( ${1:name string})
endsnippet

snippet readConfig "readConfig(target string)"
readConfig( ${1:target string})
endsnippet

snippet readContainerFile "readContainerFile(containerId, filename string)"
readContainerFile( ${1:containerId}, ${2:filename string})
endsnippet

snippet readEnv "readEnv(src io.Reader, t *testing.T)"
readEnv( ${1:src io.Reader}, ${2:t *testing.T})
endsnippet

snippet readFile "readFile(v string)"
readFile( ${1:v string})
endsnippet

snippet readGNUSparseMap0x1 "readGNUSparseMap0x1(headers map[string]string)"
readGNUSparseMap0x1( ${1:headers map[string]string})
endsnippet

snippet readGNUSparseMap1x0 "readGNUSparseMap1x0(r io.Reader)"
readGNUSparseMap1x0( ${1:r io.Reader})
endsnippet

snippet readGopackHeader "readGopackHeader(r *bufio.Reader)"
readGopackHeader( ${1:r *bufio.Reader})
endsnippet

snippet readHixieLength "readHixieLength(r byteReader)"
readHixieLength( ${1:r byteReader})
endsnippet

snippet readIntFromMap "readIntFromMap(key string, m map[string]interface{})"
readIntFromMap( ${1:key string}, ${2:m map[string]interface{}})
endsnippet

snippet readJSON "readJSON(r *http.Request, dest interface{})"
readJSON( ${1:r *http.Request}, ${2:dest interface{}})
endsnippet

snippet readKeyFileBytes "readKeyFileBytes(filename string)"
readKeyFileBytes( ${1:filename string})
endsnippet

snippet readLines "readLines(r io.Reader)"
readLines( ${1:r io.Reader})
endsnippet

snippet readLink "readLink(t *testing.T, name string)"
readLink( ${1:t *testing.T}, ${2:name string})
endsnippet

snippet readLockInfo "readLockInfo(r io.Reader)"
readLockInfo( ${1:r io.Reader})
endsnippet

snippet readPacket "readPacket(t *testing.T, s io.Reader, buf []byte, index int)"
readPacket( ${1:t *testing.T}, ${2:s io.Reader}, ${3:buf []byte}, ${4:index int})
endsnippet

snippet readParseTest "readParseTest(r *bufio.Reader)"
readParseTest( ${1:r *bufio.Reader})
endsnippet

snippet readRuneSegments "readRuneSegments(t *testing.T, segments []string)"
readRuneSegments( ${1:t *testing.T}, ${2:segments []string})
endsnippet

snippet readSource "readSource(filename string, src interface{})"
readSource( ${1:filename string}, ${2:src interface{}})
endsnippet

snippet readStr "readStr(r io.Reader, b []byte)"
readStr( ${1:r io.Reader}, ${2:b []byte})
endsnippet

snippet readStringFromMap "readStringFromMap(key string, m map[string]interface{})"
readStringFromMap( ${1:key string}, ${2:m map[string]interface{}})
endsnippet

snippet readSysfsNetworkStats "readSysfsNetworkStats(ethInterface, statsFile string)"
readSysfsNetworkStats( ${1:ethInterface}, ${2:statsFile string})
endsnippet

snippet readTable "readTable(path string)"
readTable( ${1:path string})
endsnippet

snippet readTemplate "readTemplate(name string)"
readTemplate( ${1:name string})
endsnippet

snippet readTemplates "readTemplates(p *godoc.Presentation, html bool)"
readTemplates( ${1:p *godoc.Presentation}, ${2:html bool})
endsnippet

snippet readU16BE "readU16BE(r io.Reader, b []byte)"
readU16BE( ${1:r io.Reader}, ${2:b []byte})
endsnippet

snippet readU16LE "readU16LE(r io.Reader, b []byte)"
readU16LE( ${1:r io.Reader}, ${2:b []byte})
endsnippet

snippet readU32LE "readU32LE(r io.Reader, b []byte)"
readU32LE( ${1:r io.Reader}, ${2:b []byte})
endsnippet

snippet readU8 "readU8(r io.Reader, b []byte)"
readU8( ${1:r io.Reader}, ${2:b []byte})
endsnippet

snippet readUses "readUses(pkgArgs []string)"
readUses( ${1:pkgArgs []string})
endsnippet

snippet read_console_input "read_console_input(h syscall.Handle, record *input_record)"
read_console_input( ${1:h syscall.Handle}, ${2:record *input_record})
endsnippet

snippet read_import_data "read_import_data(import_path string)"
read_import_data( ${1:import_path string})
endsnippet

snippet readcmd "readcmd(client *ncrpc.Client, paths []string)"
readcmd( ${1:client *ncrpc.Client}, ${2:paths []string})
endsnippet

snippet reads "reads(buf *Reader, m int)"
reads( ${1:buf *Reader}, ${2:m int})
endsnippet

snippet real "real(c ComplexType)"
real( ${1:c ComplexType})
endsnippet

snippet receive "receive(c *net.TCPConn)"
receive( ${1:c *net.TCPConn})
endsnippet

snippet receive_a_packet_without_notify "receive_a_packet_without_notify(c *net.TCPConn, t *testing.T, echo_str string)"
receive_a_packet_without_notify( ${1:c *net.TCPConn}, ${2:t *testing.T}, ${3:echo_str string})
endsnippet

snippet receive_without_notify "receive_without_notify(c *net.TCPConn, conn *net.TCPConn, t *testing.T, echo_str string)"
receive_without_notify( ${1:c *net.TCPConn}, ${2:conn *net.TCPConn}, ${3:t *testing.T}, ${4:echo_str string})
endsnippet

snippet receiverType "receiverType(fn *ast.FuncDecl)"
receiverType( ${1:fn *ast.FuncDecl})
endsnippet

snippet reconstruct_path "reconstruct_path(came_from map[int]int, current_pos int)"
reconstruct_path( ${1:came_from map[int]int}, ${2:current_pos int})
endsnippet

snippet recruit_soldier "recruit_soldier(F_type string, F_count int32, F_force_finish bool, conn *net.TCPConn, t *testing.T)"
recruit_soldier( ${1:F_type string}, ${2:F_count int32}, ${3:F_force_finish bool}, ${4:conn *net.TCPConn}, ${5:t *testing.T})
endsnippet

snippet recruit_soldier_speed_up "recruit_soldier_speed_up(conn *net.TCPConn, t *testing.T)"
recruit_soldier_speed_up( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet recv "recv(meth *types.Func)"
recv( ${1:meth *types.Func})
endsnippet

snippet recvType "recvType(obj *types.Func)"
recvType( ${1:obj *types.Func})
endsnippet

snippet redir "redir(w http.ResponseWriter, r *http.Request)"
redir( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet redirect "redirect(w http.ResponseWriter, r *http.Request)"
redirect( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet redirectFile "redirectFile(w http.ResponseWriter, r *http.Request)"
redirectFile( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet redraw "redraw(new bool)"
redraw( ${1:new bool})
endsnippet

snippet reduce "reduce(h0 RunList)"
reduce( ${1:h0 RunList})
endsnippet

snippet reduceDepth "reduceDepth(depth int)"
reduceDepth( ${1:depth int})
endsnippet

snippet reduceScope "reduceScope(pos string, conf *loader.Config)"
reduceScope( ${1:pos string}, ${2:conf *loader.Config})
endsnippet

snippet reduce_soldier_population "reduce_soldier_population(user *User, alliance *Alliance, soldier_map map[string]*soldier.Soldier)"
reduce_soldier_population( ${1:user *User}, ${2:alliance *Alliance}, ${3:soldier_map map[string]*soldier.Soldier})
endsnippet

snippet referrers "referrers(o *Oracle, qpos *QueryPos)"
referrers( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet refersTo "refersTo(n ast.Node, x *ast.Ident)"
refersTo( ${1:n ast.Node}, ${2:x *ast.Ident})
endsnippet

snippet reflectCall "reflectCall(a *analysis, cgn *cgnode, dotdotdot bool)"
reflectCall( ${1:a *analysis}, ${2:cgn *cgnode}, ${3:dotdotdot bool})
endsnippet

snippet reflectCallImpl "reflectCallImpl(a *analysis, cgn *cgnode, site *callsite, recv, arg nodeid, dotdotdot bool)"
reflectCallImpl( ${1:a *analysis}, ${2:cgn *cgnode}, ${3:site *callsite}, ${4:recv}, ${5:arg nodeid}, ${6:dotdotdot bool})
endsnippet

snippet reflectKind "reflectKind(t types.Type)"
reflectKind( ${1:t types.Type})
endsnippet

snippet reflectValue "reflectValue(v interface{})"
reflectValue( ${1:v interface{}})
endsnippet

snippet refresh_hero_list "refresh_hero_list(conn *net.TCPConn, t *testing.T)"
refresh_hero_list( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet refute "refute(t *testing.T, a interface{}, b interface{})"
refute( ${1:t *testing.T}, ${2:a interface{}}, ${3:b interface{}})
endsnippet

snippet regex "regex(s string)"
regex( ${1:s string})
endsnippet

snippet regexpReplace "regexpReplace(data []byte, re string, replacement string)"
regexpReplace( ${1:data []byte}, ${2:re string}, ${3:replacement string})
endsnippet

snippet regexpSelection "regexpSelection(text []byte, expr string)"
regexpSelection( ${1:text []byte}, ${2:expr string})
endsnippet

snippet register "register(src string, imp types.Importer)"
register( ${1:src string}, ${2:imp types.Importer})
endsnippet

snippet registerHandlers "registerHandlers(pres *godoc.Presentation)"
registerHandlers( ${1:pres *godoc.Presentation})
endsnippet

snippet registertests "registertests(t *testing.T)"
registertests( ${1:t *testing.T})
endsnippet

snippet regress1 "regress1(x error)"
regress1( ${1:x error})
endsnippet

snippet relName "relName(v Value, i Instruction)"
relName( ${1:v Value}, ${2:i Instruction})
endsnippet

snippet relString "relString(m Member, from *types.Package)"
relString( ${1:m Member}, ${2:from *types.Package})
endsnippet

snippet relType "relType(t types.Type, from *types.Package)"
relType( ${1:t types.Type}, ${2:from *types.Package})
endsnippet

snippet relativeToParent "relativeToParent(parent, child string)"
relativeToParent( ${1:parent}, ${2:child string})
endsnippet

snippet reloadHandler "reloadHandler(sig os.Signal)"
reloadHandler( ${1:sig os.Signal})
endsnippet

snippet remote "remote(eng *engine.Engine)"
remote( ${1:eng *engine.Engine})
endsnippet

snippet remoteSearch "remoteSearch(query string)"
remoteSearch( ${1:query string})
endsnippet

snippet remoteSearchURL "remoteSearchURL(query string, html bool)"
remoteSearchURL( ${1:query string}, ${2:html bool})
endsnippet

snippet remove "remove(dir string)"
remove( ${1:dir string})
endsnippet

snippet removeCommitFromPerfTodo "removeCommitFromPerfTodo(c appengine.Context, builder string, num int)"
removeCommitFromPerfTodo( ${1:c appengine.Context}, ${2:builder string}, ${3:num int})
endsnippet

snippet removeInEdge "removeInEdge(edge *Edge)"
removeInEdge( ${1:edge *Edge})
endsnippet

snippet removeInstr "removeInstr(refs []Instruction, instr Instruction)"
removeInstr( ${1:refs []Instruction}, ${2:instr Instruction})
endsnippet

snippet removeOutEdge "removeOutEdge(edge *Edge)"
removeOutEdge( ${1:edge *Edge})
endsnippet

snippet removePath "removePath(path string)"
removePath( ${1:path string})
endsnippet

snippet removeSocket "removeSocket(sockets []*mongoSocket, socket *mongoSocket)"
removeSocket( ${1:sockets []*mongoSocket}, ${2:socket *mongoSocket})
endsnippet

snippet rename "rename(u *BasicBlock, renaming []Value, newPhis newPhiMap)"
rename( ${1:u *BasicBlock}, ${2:renaming []Value}, ${3:newPhis newPhiMap})
endsnippet

snippet renameFix "renameFix(tab []rename)"
renameFix( ${1:tab []rename})
endsnippet

snippet renameFixTab "renameFixTab(f *ast.File, tab []rename)"
renameFixTab( ${1:f *ast.File}, ${2:tab []rename})
endsnippet

snippet renameTop "renameTop(f *ast.File, old, new string)"
renameTop( ${1:f *ast.File}, ${2:old}, ${3:new string})
endsnippet

snippet renamed "renamed(renaming []Value, alloc *Alloc)"
renamed( ${1:renaming []Value}, ${2:alloc *Alloc})
endsnippet

snippet render "render(w writer, n *Node)"
render( ${1:w writer}, ${2:n *Node})
endsnippet

snippet render1 "render1(w writer, n *Node)"
render1( ${1:w writer}, ${2:n *Node})
endsnippet

snippet renderDoc "renderDoc(w io.Writer, docFile string)"
renderDoc( ${1:w io.Writer}, ${2:docFile string})
endsnippet

snippet renderElem "renderElem(t *template.Template, e Elem)"
renderElem( ${1:t *template.Template}, ${2:e Elem})
endsnippet

snippet renderLink "renderLink(href, text string)"
renderLink( ${1:href}, ${2:text string})
endsnippet

snippet renderSumForHeader "renderSumForHeader(v Version, h *tar.Header, data []byte)"
renderSumForHeader( ${1:v Version}, ${2:h *tar.Header}, ${3:data []byte})
endsnippet

snippet rep_socket_monitor "rep_socket_monitor(addr string)"
rep_socket_monitor( ${1:addr string})
endsnippet

snippet reparentChildren "reparentChildren(dst, src *Node)"
reparentChildren( ${1:dst}, ${2:src *Node})
endsnippet

snippet replaceAll "replaceAll(x, y Value)"
replaceAll( ${1:x}, ${2:y Value})
endsnippet

snippet replaceLinePrefixCommentsWithBlankLine "replaceLinePrefixCommentsWithBlankLine(src []byte)"
replaceLinePrefixCommentsWithBlankLine( ${1:src []byte})
endsnippet

snippet replaceLocations "replaceLocations(s string)"
replaceLocations( ${1:s string})
endsnippet

snippet repoTickler "repoTickler(repo string)"
repoTickler( ${1:repo string})
endsnippet

snippet repoURL "repoURL(dashboard, hash, packagePath string)"
repoURL( ${1:dashboard}, ${2:hash}, ${3:packagePath string})
endsnippet

snippet report "report(msg string)"
report( ${1:msg string})
endsnippet

snippet representableConst "representableConst(x exact.Value, conf *Config, as BasicKind, rounded *exact.Value)"
representableConst( ${1:x exact.Value}, ${2:conf *Config}, ${3:as BasicKind}, ${4:rounded *exact.Value})
endsnippet

snippet requestHandler "requestHandler(w http.ResponseWriter, r *http.Request)"
requestHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet requiresAuth "requiresAuth(w http.ResponseWriter, r *http.Request)"
requiresAuth( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet requiresGlobalRename "requiresGlobalRename(fromObjects []types.Object, to string)"
requiresGlobalRename( ${1:fromObjects []types.Object}, ${2:to string})
endsnippet

snippet resetFileName "resetFileName(fd int)"
resetFileName( ${1:fd int})
endsnippet

snippet resizeTty "resizeTty(master *os.File)"
resizeTty( ${1:master *os.File})
endsnippet

snippet resolve "resolve(scope *Scope, ident *Ident)"
resolve( ${1:scope *Scope}, ${2:ident *Ident})
endsnippet

snippet resolveAddr "resolveAddr(addr string)"
resolveAddr( ${1:addr string})
endsnippet

snippet restartWatcherSoon "restartWatcherSoon(conf watchConfig)"
restartWatcherSoon( ${1:conf watchConfig})
endsnippet

snippet resultHandler "resultHandler(r *http.Request)"
resultHandler( ${1:r *http.Request})
endsnippet

snippet returnbyte "returnbyte(x int)"
returnbyte( ${1:x int})
endsnippet

snippet returnnamed "returnnamed(x byte)"
returnnamed( ${1:x byte})
endsnippet

snippet returnsError "returnsError(f *ssa.Function)"
returnsError( ${1:f *ssa.Function})
endsnippet

snippet reverse "reverse(s []string)"
reverse( ${1:s []string})
endsnippet

snippet revive_soldier "revive_soldier(conn *net.TCPConn, t *testing.T)"
revive_soldier( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet revive_soldier_speed_up "revive_soldier_speed_up(conn *net.TCPConn, t *testing.T)"
revive_soldier_speed_up( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet revoke "revoke(c cmd, conn *ec2.EC2, args []string)"
revoke( ${1:c cmd}, ${2:conn *ec2.EC2}, ${3:args []string})
endsnippet

snippet rewriteImport "rewriteImport(f *ast.File, oldPath, newPath string)"
rewriteImport( ${1:f *ast.File}, ${2:oldPath}, ${3:newPath string})
endsnippet

snippet rewriteImportFn "rewriteImportFn(oldnew ...string)"
rewriteImportFn( ${1:oldnew ...string})
endsnippet

snippet rewriteImports "rewriteImports(ctxt *errgoFixContext, f *ast.File, usingErrgo bool)"
rewriteImports( ${1:ctxt *errgoFixContext}, ${2:f *ast.File}, ${3:usingErrgo bool})
endsnippet

snippet rewriteSVG "rewriteSVG(data []byte)"
rewriteSVG( ${1:data []byte})
endsnippet

snippet rewriteUses "rewriteUses(x *ast.Ident, f, fnot func(token.Pos)"
rewriteUses( ${1:x *ast.Ident}, ${2:f}, ${3:fnot func(token.Pos})
endsnippet

snippet rgb "rgb(n int)"
rgb( ${1:n int})
endsnippet

snippet rgb2cmap "rgb2cmap(cr, cg, cb int)"
rgb2cmap( ${1:cr}, ${2:cg}, ${3:cb int})
endsnippet

snippet rgba "rgba(x int)"
rgba( ${1:x int})
endsnippet

snippet rgetStructFieldInfos "rgetStructFieldInfos(rt reflect.Type, indexstack []int, sis *structFieldInfos, siInfo *structFieldInfo)"
rgetStructFieldInfos( ${1:rt reflect.Type}, ${2:indexstack []int}, ${3:sis *structFieldInfos}, ${4:siInfo *structFieldInfo})
endsnippet

snippet rgetTypeInfo "rgetTypeInfo(rt reflect.Type, indexstack []int, fnameToHastag map[string]bool,$/;"	f
rh_status	src/github.com/docker/docker/contrib/init/sysvinit-redhat/docker	/^rh_status()"
rgetTypeInfo( ${1:rt reflect.Type}, ${2:indexstack []int}, ${3:fnameToHastag map[string]bool}, ${4:$/;"	f
rh_status	src/github.com/docker/docker/contrib/init/sysvinit-redhat/docker	/^rh_status(})
endsnippet

snippet ringCopy "ringCopy(dst, samples Buffer, off, n, size int)"
ringCopy( ${1:dst}, ${2:samples Buffer}, ${3:off}, ${4:n}, ${5:size int})
endsnippet

snippet rip_off_decl "rip_off_decl(file []byte, cursor int)"
rip_off_decl( ${1:file []byte}, ${2:cursor int})
endsnippet

snippet rmone "rmone(c *g9pc.Client, f string)"
rmone( ${1:c *g9pc.Client}, ${2:f string})
endsnippet

snippet rodata "rodata(x int)"
rodata( ${1:x int})
endsnippet

snippet roller "roller(dice []int)"
roller( ${1:dice []int})
endsnippet

snippet rot13 "rot13(data []byte)"
rot13( ${1:data []byte})
endsnippet

snippet rot13proc "rot13proc(in, out Fd)"
rot13proc( ${1:in}, ${2:out Fd})
endsnippet

snippet rotate_left_callback "rotate_left_callback(n, parent *Node)"
rotate_left_callback( ${1:n}, ${2:parent *Node})
endsnippet

snippet rotate_right_callback "rotate_right_callback(n, parent *Node)"
rotate_right_callback( ${1:n}, ${2:parent *Node})
endsnippet

snippet round "round(x float64)"
round( ${1:x float64})
endsnippet

snippet roundDown "roundDown(x, size int)"
roundDown( ${1:x}, ${2:size int})
endsnippet

snippet roundFloat32 "roundFloat32(x exact.Value)"
roundFloat32( ${1:x exact.Value})
endsnippet

snippet roundFloat64 "roundFloat64(x exact.Value)"
roundFloat64( ${1:x exact.Value})
endsnippet

snippet routableIP "routableIP(network string, ip net.IP)"
routableIP( ${1:network string}, ${2:ip net.IP})
endsnippet

snippet rsaPKCS1v15SignatureAlgorithmForHashID "rsaPKCS1v15SignatureAlgorithmForHashID(hashID crypto.Hash)"
rsaPKCS1v15SignatureAlgorithmForHashID( ${1:hashID crypto.Hash})
endsnippet

snippet rsaPrivateKeyFromMap "rsaPrivateKeyFromMap(jwk map[string]interface{})"
rsaPrivateKeyFromMap( ${1:jwk map[string]interface{}})
endsnippet

snippet rsaPublicKeyFromMap "rsaPublicKeyFromMap(jwk map[string]interface{})"
rsaPublicKeyFromMap( ${1:jwk map[string]interface{}})
endsnippet

snippet rsaSignatureAlgorithmByName "rsaSignatureAlgorithmByName(alg string)"
rsaSignatureAlgorithmByName( ${1:alg string})
endsnippet

snippet rtaAlignOf "rtaAlignOf(attrlen int)"
rtaAlignOf( ${1:attrlen int})
endsnippet

snippet run "run(c *exec.Cmd, t *testing.T)"
run( ${1:c *exec.Cmd}, ${2:t *testing.T})
endsnippet

snippet runBin "runBin(ctx *cli.Context)"
runBin( ${1:ctx *cli.Context})
endsnippet

snippet runBuild "runBuild(ctx *cli.Context)"
runBuild( ${1:ctx *cli.Context})
endsnippet

snippet runCgo "runCgo(bp *build.Package, pkgdir, tmpdir string)"
runCgo( ${1:bp *build.Package}, ${2:pkgdir}, ${3:tmpdir string})
endsnippet

snippet runClean "runClean(ctx *cli.Context)"
runClean( ${1:ctx *cli.Context})
endsnippet

snippet runCmd "runCmd(dir string, name string, args ...string)"
runCmd( ${1:dir string}, ${2:name string}, ${3:args ...string})
endsnippet

snippet runCommand "runCommand(cmd *exec.Cmd)"
runCommand( ${1:cmd *exec.Cmd})
endsnippet

snippet runCommandAndReadContainerFile "runCommandAndReadContainerFile(filename string, cmd *exec.Cmd)"
runCommandAndReadContainerFile( ${1:filename string}, ${2:cmd *exec.Cmd})
endsnippet

snippet runCommandWithOutput "runCommandWithOutput(cmd *exec.Cmd)"
runCommandWithOutput( ${1:cmd *exec.Cmd})
endsnippet

snippet runCommandWithOutputAndTimeout "runCommandWithOutputAndTimeout(cmd *exec.Cmd, timeout time.Duration)"
runCommandWithOutputAndTimeout( ${1:cmd *exec.Cmd}, ${2:timeout time.Duration})
endsnippet

snippet runCommandWithStdoutStderr "runCommandWithStdoutStderr(cmd *exec.Cmd)"
runCommandWithStdoutStderr( ${1:cmd *exec.Cmd})
endsnippet

snippet runConfig "runConfig(ctx *cli.Context)"
runConfig( ${1:ctx *cli.Context})
endsnippet

snippet runConfigGet "runConfigGet(ctx *cli.Context)"
runConfigGet( ${1:ctx *cli.Context})
endsnippet

snippet runConfigSet "runConfigSet(ctx *cli.Context)"
runConfigSet( ${1:ctx *cli.Context})
endsnippet

snippet runConfigSetGitHub "runConfigSetGitHub(ctx *cli.Context)"
runConfigSetGitHub( ${1:ctx *cli.Context})
endsnippet

snippet runConfigSetProxy "runConfigSetProxy(ctx *cli.Context)"
runConfigSetProxy( ${1:ctx *cli.Context})
endsnippet

snippet runConfigUnset "runConfigUnset(ctx *cli.Context)"
runConfigUnset( ${1:ctx *cli.Context})
endsnippet

snippet runContainer "runContainer(eng *engine.Engine, r *daemon.Daemon, args []string, t *testing.T)"
runContainer( ${1:eng *engine.Engine}, ${2:r *daemon.Daemon}, ${3:args []string}, ${4:t *testing.T})
endsnippet

snippet runDir "runDir(dir string)"
runDir( ${1:dir string})
endsnippet

snippet runEnv "runEnv(env []string)"
runEnv( ${1:env []string})
endsnippet

snippet runFrame "runFrame(fr *frame)"
runFrame( ${1:fr *frame})
endsnippet

snippet runFunc "runFunc(f *rFunc)"
runFunc( ${1:f *rFunc})
endsnippet

snippet runGen "runGen(ctx *cli.Context)"
runGen( ${1:ctx *cli.Context})
endsnippet

snippet runGet "runGet(ctx *cli.Context)"
runGet( ${1:ctx *cli.Context})
endsnippet

snippet runImporterTest "runImporterTest(t *testing.T, imp types.Importer, initmap map[*types.Package]InitData, test *importerTest)"
runImporterTest( ${1:t *testing.T}, ${2:imp types.Importer}, ${3:initmap map[*types.Package]InitData}, ${4:test *importerTest})
endsnippet

snippet runInstall "runInstall(ctx *cli.Context)"
runInstall( ${1:ctx *cli.Context})
endsnippet

snippet runList "runList(ctx *cli.Context)"
runList( ${1:ctx *cli.Context})
endsnippet

snippet runPTA "runPTA(o *Oracle, v ssa.Value, isAddr bool)"
runPTA( ${1:o *Oracle}, ${2:v ssa.Value}, ${3:isAddr bool})
endsnippet

snippet runPollServer "runPollServer(t *testing.T)"
runPollServer( ${1:t *testing.T})
endsnippet

snippet runRun "runRun(ctx *cli.Context)"
runRun( ${1:ctx *cli.Context})
endsnippet

snippet runServer "runServer(t *testing.T, c *Context, callback func(s *Socket)"
runServer( ${1:t *testing.T}, ${2:c *Context}, ${3:callback func(s *Socket})
endsnippet

snippet runSimpleFilter "runSimpleFilter(ctxt *context, f func(string)"
runSimpleFilter( ${1:ctxt *context}, ${2:f func(string})
endsnippet

snippet runStreamConnServer "runStreamConnServer(t *testing.T, network, laddr string, listening chan<- string, done chan<- int)"
runStreamConnServer( ${1:t *testing.T}, ${2:network}, ${3:laddr string}, ${4:listening chan<- string}, ${5:done chan<- int})
endsnippet

snippet runTest "runTest(ctx *cli.Context)"
runTest( ${1:ctx *cli.Context})
endsnippet

snippet runTimeout "runTimeout(timeout time.Duration)"
runTimeout( ${1:timeout time.Duration})
endsnippet

snippet runUpdate "runUpdate(ctx *cli.Context)"
runUpdate( ${1:ctx *cli.Context})
endsnippet

snippet runbench "runbench(t *testing.T, path string, ignoreFuncBodies bool)"
runbench( ${1:t *testing.T}, ${2:path string}, ${3:ignoreFuncBodies bool})
endsnippet

snippet runcheck "runcheck(t *testing.T, source, golden string, mode checkMode)"
runcheck( ${1:t *testing.T}, ${2:source}, ${3:golden string}, ${4:mode checkMode})
endsnippet

snippet runeOffset2ByteOffset "runeOffset2ByteOffset(b []byte, off int)"
runeOffset2ByteOffset( ${1:b []byte}, ${2:off int})
endsnippet

snippet rune_advance_len "rune_advance_len(r rune, pos int)"
rune_advance_len( ${1:r rune}, ${2:pos int})
endsnippet

snippet runner "runner(runc <-chan []string)"
runner( ${1:runc <-chan []string})
endsnippet

snippet rvToExpr "rvToExpr(rv reflect.Value)"
rvToExpr( ${1:rv reflect.Value})
endsnippet

snippet s_worker_new "s_worker_new(identity string)"
s_worker_new( ${1:identity string})
endsnippet

snippet s_worker_ready "s_worker_ready(self worker_t, workers []worker_t)"
s_worker_ready( ${1:self worker_t}, ${2:workers []worker_t})
endsnippet

snippet s_workers_purge "s_workers_purge(workers []worker_t)"
s_workers_purge( ${1:workers []worker_t})
endsnippet

snippet safeString "safeString(b []byte)"
safeString( ${1:b []byte})
endsnippet

snippet sameFile "sameFile(x, y string)"
sameFile( ${1:x}, ${2:y string})
endsnippet

snippet sameFsTime "sameFsTime(a, b time.Time)"
sameFsTime( ${1:a}, ${2:b time.Time})
endsnippet

snippet sameFsTimeSpec "sameFsTimeSpec(a, b syscall.Timespec)"
sameFsTimeSpec( ${1:a}, ${2:b syscall.Timespec})
endsnippet

snippet sameObj "sameObj(x, y types.Object)"
sameObj( ${1:x}, ${2:y types.Object})
endsnippet

snippet sameSlice "sameSlice(a, b []int)"
sameSlice( ${1:a}, ${2:b []int})
endsnippet

snippet sameType "sameType(x, y types.Type)"
sameType( ${1:x}, ${2:y types.Type})
endsnippet

snippet samples2bytes "samples2bytes(s []float32, b []byte)"
samples2bytes( ${1:s []float32}, ${2:b []byte})
endsnippet

snippet sanitize "sanitize(b []byte)"
sanitize( ${1:b []byte})
endsnippet

snippet sanitizeFunc "sanitizeFunc(src string)"
sanitizeFunc( ${1:src string})
endsnippet

snippet sanityCheck "sanityCheck(fn *Function, reporter io.Writer)"
sanityCheck( ${1:fn *Function}, ${2:reporter io.Writer})
endsnippet

snippet sanityCheckDomTree "sanityCheckDomTree(f *Function)"
sanityCheckDomTree( ${1:f *Function})
endsnippet

snippet sanityCheckPackage "sanityCheckPackage(pkg *Package)"
sanityCheckPackage( ${1:pkg *Package})
endsnippet

snippet saslError "saslError(rc C.int, conn *C.sasl_conn_t, msg string)"
saslError( ${1:rc C.int}, ${2:conn *C.sasl_conn_t}, ${3:msg string})
endsnippet

snippet saslNew "saslNew(cred Credential, host string)"
saslNew( ${1:cred Credential}, ${2:host string})
endsnippet

snippet saveFileName "saveFileName(fd int, name string)"
saveFileName( ${1:fd int}, ${2:name string})
endsnippet

snippet scanDirectory "scanDirectory(path, srcDir string)"
scanDirectory( ${1:path}, ${2:srcDir string})
endsnippet

snippet scanForAPIVersion "scanForAPIVersion(hostname string)"
scanForAPIVersion( ${1:hostname string})
endsnippet

snippet scannerMode "scannerMode(mode uint)"
scannerMode( ${1:mode uint})
endsnippet

snippet score "score(p int)"
score( ${1:p int})
endsnippet

snippet searchDefs "searchDefs(info *types.Info, name string)"
searchDefs( ${1:info *types.Info}, ${2:name string})
endsnippet

snippet searchFiles "searchFiles(a []*File, x int)"
searchFiles( ${1:a []*File}, ${2:x int})
endsnippet

snippet searchLineInfos "searchLineInfos(a []lineInfo, x int)"
searchLineInfos( ${1:a []lineInfo}, ${2:x int})
endsnippet

snippet searchUints "searchUints(a []int, x int)"
searchUints( ${1:a []int}, ${2:x int})
endsnippet

snippet sectioned "sectioned(d *present.Doc)"
sectioned( ${1:d *present.Doc})
endsnippet

snippet segments "segments(path string)"
segments( ${1:path string})
endsnippet

snippet selectionTag "selectionTag(w io.Writer, text []byte, selections int)"
selectionTag( ${1:w io.Writer}, ${2:text []byte}, ${3:selections int})
endsnippet

snippet selectorExprList "selectorExprList(expr ast.Expr)"
selectorExprList( ${1:expr ast.Expr})
endsnippet

snippet selinuxFreeLxcContexts "selinuxFreeLxcContexts(label string)"
selinuxFreeLxcContexts( ${1:label string})
endsnippet

snippet sell_resource "sell_resource(new_conn *net.TCPConn, t *testing.T)"
sell_resource( ${1:new_conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet sendFailMail "sendFailMail(c appengine.Context, com *Commit, builder, logHash string)"
sendFailMail( ${1:c appengine.Context}, ${2:com *Commit}, ${3:builder}, ${4:logHash string})
endsnippet

snippet sendPerfFailMail "sendPerfFailMail(c appengine.Context, builder string, res *PerfResult)"
sendPerfFailMail( ${1:c appengine.Context}, ${2:builder string}, ${3:res *PerfResult})
endsnippet

snippet sendPerfMailFunc "sendPerfMailFunc(c appengine.Context, com *Commit, prevCommitHash, builder string, changes []*PerfChange)"
sendPerfMailFunc( ${1:c appengine.Context}, ${2:com *Commit}, ${3:prevCommitHash}, ${4:builder string}, ${5:changes []*PerfChange})
endsnippet

snippet send_and_recive_normal_req "send_and_recive_normal_req(code int16, U interface{}, echo_str string, conn *net.TCPConn, t *testing.T)"
send_and_recive_normal_req( ${1:code int16}, ${2:U interface{}}, ${3:echo_str string}, ${4:conn *net.TCPConn}, ${5:t *testing.T})
endsnippet

snippet send_and_recive_without_notify_req "send_and_recive_without_notify_req(code int16, U interface{}, echo_str string, conn *net.TCPConn, t *testing.T)"
send_and_recive_without_notify_req( ${1:code int16}, ${2:U interface{}}, ${3:echo_str string}, ${4:conn *net.TCPConn}, ${5:t *testing.T})
endsnippet

snippet send_attack_user_req "send_attack_user_req(conn *net.TCPConn, U *attack_user_indicate)"
send_attack_user_req( ${1:conn *net.TCPConn}, ${2:U *attack_user_indicate})
endsnippet

snippet send_attr "send_attr(fg, bg Attribute)"
send_attr( ${1:fg}, ${2:bg Attribute})
endsnippet

snippet send_build_collect_req "send_build_collect_req(conn *net.TCPConn, building_type string)"
send_build_collect_req( ${1:conn *net.TCPConn}, ${2:building_type string})
endsnippet

snippet send_build_config_worker_req "send_build_config_worker_req(conn *net.TCPConn, building_type string)"
send_build_config_worker_req( ${1:conn *net.TCPConn}, ${2:building_type string})
endsnippet

snippet send_build_level_up_req "send_build_level_up_req(conn *net.TCPConn, building_type string)"
send_build_level_up_req( ${1:conn *net.TCPConn}, ${2:building_type string})
endsnippet

snippet send_build_speed_up_req "send_build_speed_up_req(conn *net.TCPConn, building_type string)"
send_build_speed_up_req( ${1:conn *net.TCPConn}, ${2:building_type string})
endsnippet

snippet send_char "send_char(x, y int, ch rune)"
send_char( ${1:x}, ${2:y int}, ${3:ch rune})
endsnippet

snippet send_create_alliance_req "send_create_alliance_req(conn *net.TCPConn, U *create_alliance_request)"
send_create_alliance_req( ${1:conn *net.TCPConn}, ${2:U *create_alliance_request})
endsnippet

snippet send_defense_city_req "send_defense_city_req(conn *net.TCPConn, U *defense_city_indicate)"
send_defense_city_req( ${1:conn *net.TCPConn}, ${2:U *defense_city_indicate})
endsnippet

snippet send_gacha_hero_req "send_gacha_hero_req(conn *net.TCPConn, level T_level)"
send_gacha_hero_req( ${1:conn *net.TCPConn}, ${2:level T_level})
endsnippet

snippet send_hugz "send_hugz(srv *clonesrv_t)"
send_hugz( ${1:srv *clonesrv_t})
endsnippet

snippet send_recruit_soldier_req "send_recruit_soldier_req(conn *net.TCPConn, soldier_type string)"
send_recruit_soldier_req( ${1:conn *net.TCPConn}, ${2:soldier_type string})
endsnippet

snippet send_recruit_soldier_speed_up_req "send_recruit_soldier_speed_up_req(conn *net.TCPConn, building_type string)"
send_recruit_soldier_speed_up_req( ${1:conn *net.TCPConn}, ${2:building_type string})
endsnippet

snippet send_refresh_user_req "send_refresh_user_req(conn *net.TCPConn)"
send_refresh_user_req( ${1:conn *net.TCPConn})
endsnippet

snippet send_req "send_req(code int16, U interface{}, echo_str string, conn *net.TCPConn, t *testing.T)"
send_req( ${1:code int16}, ${2:U interface{}}, ${3:echo_str string}, ${4:conn *net.TCPConn}, ${5:t *testing.T})
endsnippet

snippet send_sell_hero_req "send_sell_hero_req(conn *net.TCPConn, hero_ids string)"
send_sell_hero_req( ${1:conn *net.TCPConn}, ${2:hero_ids string})
endsnippet

snippet send_swallow_hero_req "send_swallow_hero_req(conn *net.TCPConn, hero_ids string, add_exp_hero_id string)"
send_swallow_hero_req( ${1:conn *net.TCPConn}, ${2:hero_ids string}, ${3:add_exp_hero_id string})
endsnippet

snippet send_unlock_recruit_queue_req "send_unlock_recruit_queue_req(conn *net.TCPConn, building_type string)"
send_unlock_recruit_queue_req( ${1:conn *net.TCPConn}, ${2:building_type string})
endsnippet

snippet send_user_login_req "send_user_login_req(conn *net.TCPConn)"
send_user_login_req( ${1:conn *net.TCPConn})
endsnippet

snippet serializeRSAPublicExponentParam "serializeRSAPublicExponentParam(e int)"
serializeRSAPublicExponentParam( ${1:e int})
endsnippet

snippet serv_with_catch_panic "serv_with_catch_panic(listener *net.TCPListener, mh codec.MsgpackHandle)"
serv_with_catch_panic( ${1:listener *net.TCPListener}, ${2:mh codec.MsgpackHandle})
endsnippet

snippet serveFd "serveFd(addr string, job *engine.Job)"
serveFd( ${1:addr string}, ${2:job *engine.Job})
endsnippet

snippet serveRequest "serveRequest(method, target string, body io.Reader, eng *engine.Engine, t *testing.T)"
serveRequest( ${1:method}, ${2:target string}, ${3:body io.Reader}, ${4:eng *engine.Engine}, ${5:t *testing.T})
endsnippet

snippet serveRequestUsingVersion "serveRequestUsingVersion(method, target string, version version.Version, body io.Reader, eng *engine.Engine, t *testing.T)"
serveRequestUsingVersion( ${1:method}, ${2:target string}, ${3:version version.Version}, ${4:body io.Reader}, ${5:eng *engine.Engine}, ${6:t *testing.T})
endsnippet

snippet serverAddress "serverAddress(t *testing.T)"
serverAddress( ${1:t *testing.T})
endsnippet

snippet serverCursorsOpen "serverCursorsOpen(session *mgo.Session)"
serverCursorsOpen( ${1:session *mgo.Session})
endsnippet

snippet server_auto_complete "server_auto_complete(file []byte, filename string, cursor int, context_packed go_build_context)"
server_auto_complete( ${1:file []byte}, ${2:filename string}, ${3:cursor int}, ${4:context_packed go_build_context})
endsnippet

snippet server_close "server_close(notused int)"
server_close( ${1:notused int})
endsnippet

snippet server_cursor_type_pkg "server_cursor_type_pkg(file []byte, filename string, cursor int)"
server_cursor_type_pkg( ${1:file []byte}, ${2:filename string}, ${3:cursor int})
endsnippet

snippet server_drop_cache "server_drop_cache(notused int)"
server_drop_cache( ${1:notused int})
endsnippet

snippet server_new "server_new(address string, port int, subtree string)"
server_new( ${1:address string}, ${2:port int}, ${3:subtree string})
endsnippet

snippet server_set "server_set(key, value string)"
server_set( ${1:key}, ${2:value string})
endsnippet

snippet server_status "server_status(notused int)"
server_status( ${1:notused int})
endsnippet

snippet session_timeout "session_timeout(sess *Session)"
session_timeout( ${1:sess *Session})
endsnippet

snippet setAlpha "setAlpha(c color.RGBA, a uint8)"
setAlpha( ${1:c color.RGBA}, ${2:a uint8})
endsnippet

snippet setCloseOnExec "setCloseOnExec(name string)"
setCloseOnExec( ${1:name string})
endsnippet

snippet setConsoleTextAttribute "setConsoleTextAttribute(hConsoleOutput uintptr, wAttributes uint16)"
setConsoleTextAttribute( ${1:hConsoleOutput uintptr}, ${2:wAttributes uint16})
endsnippet

snippet setControlMessage "setControlMessage(fd int, opt *rawOpt, cf ControlFlags, on bool)"
setControlMessage( ${1:fd int}, ${2:opt *rawOpt}, ${3:cf ControlFlags}, ${4:on bool})
endsnippet

snippet setCounterStmt "setCounterStmt(f *File, counter ast.Expr)"
setCounterStmt( ${1:f *File}, ${2:counter ast.Expr})
endsnippet

snippet setCurrentRoute "setCurrentRoute(r *http.Request, val interface{})"
setCurrentRoute( ${1:r *http.Request}, ${2:val interface{}})
endsnippet

snippet setENV "setENV(e string)"
setENV( ${1:e string})
endsnippet

snippet setExit "setExit(err int)"
setExit( ${1:err int})
endsnippet

snippet setGlobal "setGlobal(i *interpreter, pkg *ssa.Package, name string, v value)"
setGlobal( ${1:i *interpreter}, ${2:pkg *ssa.Package}, ${3:name string}, ${4:v value})
endsnippet

snippet setGroup "setGroup(fd int, opt *sockOpt, ifi *net.Interface, grp net.IP)"
setGroup( ${1:fd int}, ${2:opt *sockOpt}, ${3:ifi *net.Interface}, ${4:grp net.IP})
endsnippet

snippet setHeaderForSpecialDevice "setHeaderForSpecialDevice(hdr *tar.Header, ta *tarAppender, name string, stat interface{})"
setHeaderForSpecialDevice( ${1:hdr *tar.Header}, ${2:ta *tarAppender}, ${3:name string}, ${4:stat interface{}})
endsnippet

snippet setICMPFilter "setICMPFilter(fd int, opt *sockOpt, f *ICMPFilter)"
setICMPFilter( ${1:fd int}, ${2:opt *sockOpt}, ${3:f *ICMPFilter})
endsnippet

snippet setIPMreqInterface "setIPMreqInterface(mreq *sysIPMreq, ifi *net.Interface)"
setIPMreqInterface( ${1:mreq *sysIPMreq}, ${2:ifi *net.Interface})
endsnippet

snippet setIPv4HeaderPrepend "setIPv4HeaderPrepend(fd int, v bool)"
setIPv4HeaderPrepend( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv4MulticastInterface "setIPv4MulticastInterface(fd int, ifi *net.Interface)"
setIPv4MulticastInterface( ${1:fd int}, ${2:ifi *net.Interface})
endsnippet

snippet setIPv4MulticastLoopback "setIPv4MulticastLoopback(fd int, v bool)"
setIPv4MulticastLoopback( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv4MulticastTTL "setIPv4MulticastTTL(fd int, v int)"
setIPv4MulticastTTL( ${1:fd int}, ${2:v int})
endsnippet

snippet setIPv4PacketInfo "setIPv4PacketInfo(fd int, v bool)"
setIPv4PacketInfo( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv4ReceiveDestinationAddress "setIPv4ReceiveDestinationAddress(fd int, v bool)"
setIPv4ReceiveDestinationAddress( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv4ReceiveInterface "setIPv4ReceiveInterface(fd int, v bool)"
setIPv4ReceiveInterface( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv4ReceiveTOS "setIPv4ReceiveTOS(fd int, v bool)"
setIPv4ReceiveTOS( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv4ReceiveTTL "setIPv4ReceiveTTL(fd int, v bool)"
setIPv4ReceiveTTL( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv4SendSourceAddress "setIPv4SendSourceAddress(fd int, v bool)"
setIPv4SendSourceAddress( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv4TOS "setIPv4TOS(fd int, v int)"
setIPv4TOS( ${1:fd int}, ${2:v int})
endsnippet

snippet setIPv4TTL "setIPv4TTL(fd int, v int)"
setIPv4TTL( ${1:fd int}, ${2:v int})
endsnippet

snippet setIPv6Checksum "setIPv6Checksum(fd int, on bool, offset int)"
setIPv6Checksum( ${1:fd int}, ${2:on bool}, ${3:offset int})
endsnippet

snippet setIPv6HopLimit "setIPv6HopLimit(fd, v int)"
setIPv6HopLimit( ${1:fd}, ${2:v int})
endsnippet

snippet setIPv6ICMPFilter "setIPv6ICMPFilter(fd int, f *ICMPFilter)"
setIPv6ICMPFilter( ${1:fd int}, ${2:f *ICMPFilter})
endsnippet

snippet setIPv6MulticastHopLimit "setIPv6MulticastHopLimit(fd, v int)"
setIPv6MulticastHopLimit( ${1:fd}, ${2:v int})
endsnippet

snippet setIPv6MulticastInterface "setIPv6MulticastInterface(fd int, ifi *net.Interface)"
setIPv6MulticastInterface( ${1:fd int}, ${2:ifi *net.Interface})
endsnippet

snippet setIPv6MulticastLoopback "setIPv6MulticastLoopback(fd int, v bool)"
setIPv6MulticastLoopback( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv6ReceiveHopLimit "setIPv6ReceiveHopLimit(fd int, v bool)"
setIPv6ReceiveHopLimit( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv6ReceivePacketInfo "setIPv6ReceivePacketInfo(fd int, v bool)"
setIPv6ReceivePacketInfo( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv6ReceivePathMTU "setIPv6ReceivePathMTU(fd int, v bool)"
setIPv6ReceivePathMTU( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv6ReceiveTrafficClass "setIPv6ReceiveTrafficClass(fd int, v bool)"
setIPv6ReceiveTrafficClass( ${1:fd int}, ${2:v bool})
endsnippet

snippet setIPv6TrafficClass "setIPv6TrafficClass(fd, v int)"
setIPv6TrafficClass( ${1:fd}, ${2:v int})
endsnippet

snippet setInDoc "setInDoc(doc bson.D, set bson.D)"
setInDoc( ${1:doc bson.D}, ${2:set bson.D})
endsnippet

snippet setInt "setInt(fd int, opt *sockOpt, v int)"
setInt( ${1:fd int}, ${2:opt *sockOpt}, ${3:v int})
endsnippet

snippet setInt32 "setInt32(b []byte, pos int, i int32)"
setInt32( ${1:b []byte}, ${2:pos int}, ${3:i int32})
endsnippet

snippet setInterface "setInterface(fd int, opt *sockOpt, ifi *net.Interface)"
setInterface( ${1:fd int}, ${2:opt *sockOpt}, ${3:ifi *net.Interface})
endsnippet

snippet setLastTo "setLastTo(t *testing.T, network *net.IPNet, ip net.IP)"
setLastTo( ${1:t *testing.T}, ${2:network *net.IPNet}, ${3:ip net.IP})
endsnippet

snippet setLocation "setLocation(err error, callDepth int)"
setLocation( ${1:err error}, ${2:callDepth int})
endsnippet

snippet setOpt "setOpt(opt *Options, attr string, t unit)"
setOpt( ${1:opt *Options}, ${2:attr string}, ${3:t unit})
endsnippet

snippet setOption "setOption(ctx *Context, o C.int, n int)"
setOption( ${1:ctx *Context}, ${2:o C.int}, ${3:n int})
endsnippet

snippet setPkgName "setPkgName(cases []testCase)"
setPkgName( ${1:cases []testCase})
endsnippet

snippet setRaw "setRaw(t *testing.T, c *daemon.Container)"
setRaw( ${1:t *testing.T}, ${2:c *daemon.Container})
endsnippet

snippet setSocketGroup "setSocketGroup(addr, group string)"
setSocketGroup( ${1:addr}, ${2:group string})
endsnippet

snippet setSourceGroup "setSourceGroup(fd int, opt *sockOpt, ifi *net.Interface, grp, src net.IP)"
setSourceGroup( ${1:fd int}, ${2:opt *sockOpt}, ${3:ifi *net.Interface}, ${4:grp}, ${5:src net.IP})
endsnippet

snippet setStatus "setStatus(work builderRev, st *buildStatus)"
setStatus( ${1:work builderRev}, ${2:st *buildStatus})
endsnippet

snippet setSyscallIPMreq "setSyscallIPMreq(mreq *syscall.IPMreq, ifi *net.Interface)"
setSyscallIPMreq( ${1:mreq *syscall.IPMreq}, ${2:ifi *net.Interface})
endsnippet

snippet setTimeout "setTimeout(t *testing.T, msg string, d time.Duration, f func()"
setTimeout( ${1:t *testing.T}, ${2:msg string}, ${3:d time.Duration}, ${4:f func(})
endsnippet

snippet setTokenAuth "setTokenAuth(req *http.Request, token []string)"
setTokenAuth( ${1:req *http.Request}, ${2:token []string})
endsnippet

snippet setU32LE "setU32LE(b []byte, u uint32)"
setU32LE( ${1:b []byte}, ${2:u uint32})
endsnippet

snippet setUpFiles "setUpFiles(t *testing.T)"
setUpFiles( ${1:t *testing.T})
endsnippet

snippet setValue "setValue(x, y reflect.Value)"
setValue( ${1:x}, ${2:y reflect.Value})
endsnippet

snippet setVars "setVars(r *http.Request, val interface{})"
setVars( ${1:r *http.Request}, ${2:val interface{}})
endsnippet

snippet setVfsCap "setVfsCap(path string, data *vfscapData)"
setVfsCap( ${1:path string}, ${2:data *vfscapData})
endsnippet

snippet setWithProperType "setWithProperType(valueKind reflect.Kind, val string, structField reflect.Value, nameInTag string, errors Errors)"
setWithProperType( ${1:valueKind reflect.Kind}, ${2:val string}, ${3:structField reflect.Value}, ${4:nameInTag string}, ${5:errors Errors})
endsnippet

snippet set_console_active_screen_buffer "set_console_active_screen_buffer(h syscall.Handle)"
set_console_active_screen_buffer( ${1:h syscall.Handle})
endsnippet

snippet set_console_cursor_info "set_console_cursor_info(h syscall.Handle, info *console_cursor_info)"
set_console_cursor_info( ${1:h syscall.Handle}, ${2:info *console_cursor_info})
endsnippet

snippet set_console_cursor_position "set_console_cursor_position(h syscall.Handle, pos coord)"
set_console_cursor_position( ${1:h syscall.Handle}, ${2:pos coord})
endsnippet

snippet set_console_mode "set_console_mode(h syscall.Handle, mode dword)"
set_console_mode( ${1:h syscall.Handle}, ${2:mode dword})
endsnippet

snippet set_console_screen_buffer_size "set_console_screen_buffer_size(h syscall.Handle, size coord)"
set_console_screen_buffer_size( ${1:h syscall.Handle}, ${2:size coord})
endsnippet

snippet set_event "set_event(ev syscall.Handle)"
set_event( ${1:ev syscall.Handle})
endsnippet

snippet set_id "set_id(soc *zmq.Socket)"
set_id( ${1:soc *zmq.Socket})
endsnippet

snippet set_value "set_value(v reflect.Value, value string)"
set_value( ${1:v reflect.Value}, ${2:value string})
endsnippet

snippet setdrawop "setdrawop(d *Display, op Op)"
setdrawop( ${1:d *Display}, ${2:op Op})
endsnippet

snippet setpiece "setpiece(p *Piece)"
setpiece( ${1:p *Piece})
endsnippet

snippet setsockopt "setsockopt(fd, level, name int, v unsafe.Pointer, l sysSockoptLen)"
setsockopt( ${1:fd}, ${2:level}, ${3:name int}, ${4:v unsafe.Pointer}, ${5:l sysSockoptLen})
endsnippet

snippet setsockoptGroupReq "setsockoptGroupReq(fd, name int, ifi *net.Interface, grp net.IP)"
setsockoptGroupReq( ${1:fd}, ${2:name int}, ${3:ifi *net.Interface}, ${4:grp net.IP})
endsnippet

snippet setsockoptGroupSourceReq "setsockoptGroupSourceReq(fd, name int, ifi *net.Interface, grp, src net.IP)"
setsockoptGroupSourceReq( ${1:fd}, ${2:name int}, ${3:ifi *net.Interface}, ${4:grp}, ${5:src net.IP})
endsnippet

snippet setsockoptIPMreq "setsockoptIPMreq(fd, name int, ifi *net.Interface, grp net.IP)"
setsockoptIPMreq( ${1:fd}, ${2:name int}, ${3:ifi *net.Interface}, ${4:grp net.IP})
endsnippet

snippet setsockoptIPMreqn "setsockoptIPMreqn(fd, name int, ifi *net.Interface, grp net.IP)"
setsockoptIPMreqn( ${1:fd}, ${2:name int}, ${3:ifi *net.Interface}, ${4:grp net.IP})
endsnippet

snippet setsockoptInterface "setsockoptInterface(fd, name int, ifi *net.Interface)"
setsockoptInterface( ${1:fd}, ${2:name int}, ${3:ifi *net.Interface})
endsnippet

snippet settableValueOf "settableValueOf(i interface{})"
settableValueOf( ${1:i interface{}})
endsnippet

snippet setup "setup(ctx *cli.Context)"
setup( ${1:ctx *cli.Context})
endsnippet

snippet setupConn "setupConn(t *testing.T)"
setupConn( ${1:t *testing.T})
endsnippet

snippet setupDevSymlinks "setupDevSymlinks(rootfs string)"
setupDevSymlinks( ${1:rootfs string})
endsnippet

snippet setupEnv "setupEnv(args *InitArgs)"
setupEnv( ${1:args *InitArgs})
endsnippet

snippet setupGoroot "setupGoroot(t *testing.T)"
setupGoroot( ${1:t *testing.T})
endsnippet

snippet setupIPTables "setupIPTables(addr net.Addr, icc, ipmasq bool)"
setupIPTables( ${1:addr net.Addr}, ${2:icc}, ${3:ipmasq bool})
endsnippet

snippet setupNamespace "setupNamespace(args *InitArgs)"
setupNamespace( ${1:args *InitArgs})
endsnippet

snippet setupNetwork "setupNetwork(container *libcontainer.Config, networkState *network.NetworkState)"
setupNetwork( ${1:container *libcontainer.Config}, ${2:networkState *network.NetworkState})
endsnippet

snippet setupRlimits "setupRlimits(container *libcontainer.Config)"
setupRlimits( ${1:container *libcontainer.Config})
endsnippet

snippet setupRoute "setupRoute(container *libcontainer.Config)"
setupRoute( ${1:container *libcontainer.Config})
endsnippet

snippet setupTcpHttp "setupTcpHttp(addr string, job *engine.Job)"
setupTcpHttp( ${1:addr string}, ${2:job *engine.Job})
endsnippet

snippet setupTls "setupTls(cert, key, ca string, l net.Listener)"
setupTls( ${1:cert}, ${2:key}, ${3:ca string}, ${4:l net.Listener})
endsnippet

snippet setupUnit "setupUnit(target string, conn *Conn, t *testing.T)"
setupUnit( ${1:target string}, ${2:conn *Conn}, ${3:t *testing.T})
endsnippet

snippet setupUnixHttp "setupUnixHttp(addr string, job *engine.Job)"
setupUnixHttp( ${1:addr string}, ${2:job *engine.Job})
endsnippet

snippet setupWorkingDirectory "setupWorkingDirectory(args *InitArgs)"
setupWorkingDirectory( ${1:args *InitArgs})
endsnippet

snippet shallowCopy "shallowCopy(dst, obj reflect.Value, _ *infoStore, _ *memRanges)"
shallowCopy( ${1:dst}, ${2:obj reflect.Value}, ${3:_ *infoStore}, ${4:_ *memRanges})
endsnippet

snippet shebang "shebang(body string)"
shebang( ${1:body string})
endsnippet

snippet shortDesc "shortDesc(desc string)"
shortDesc( ${1:desc string})
endsnippet

snippet shortHash "shortHash(hash string)"
shortHash( ${1:hash string})
endsnippet

snippet shortUser "shortUser(user string)"
shortUser( ${1:user string})
endsnippet

snippet shouldRedirect "shouldRedirect(response *http.Response)"
shouldRedirect( ${1:response *http.Response})
endsnippet

snippet showDir "showDir(n string)"
showDir( ${1:n string})
endsnippet

snippet showFile "showFile(n string)"
showFile( ${1:n string})
endsnippet

snippet showSettingString "showSettingString(section, key string)"
showSettingString( ${1:section}, ${2:key string})
endsnippet

snippet showSystemStat "showSystemStat(interval time.Duration, count int)"
showSystemStat( ${1:interval time.Duration}, ${2:count int})
endsnippet

snippet show_cursor "show_cursor(visible bool)"
show_cursor( ${1:visible bool})
endsnippet

snippet sibling "sibling(n *Node)"
sibling( ${1:n *Node})
endsnippet

snippet significantPerfChanges "significantPerfChanges(pc *PerfConfig, builder string, prevRes, res *PerfResult)"
significantPerfChanges( ${1:pc *PerfConfig}, ${2:builder string}, ${3:prevRes}, ${4:res *PerfResult})
endsnippet

snippet sigtermDefaultHandler "sigtermDefaultHandler(sig os.Signal)"
sigtermDefaultHandler( ${1:sig os.Signal})
endsnippet

snippet simpleEq "simpleEq(v0, v1 interface{})"
simpleEq( ${1:v0}, ${2:v1 interface{}})
endsnippet

snippet simpleIndexKey "simpleIndexKey(realKey bson.D)"
simpleIndexKey( ${1:realKey bson.D})
endsnippet

snippet simulate "simulate(c *C, params params)"
simulate( ${1:c *C}, ${2:params params})
endsnippet

snippet sin "sin(x float64)"
sin( ${1:x float64})
endsnippet

snippet sizedTar "sizedTar(opts sizedOptions)"
sizedTar( ${1:opts sizedOptions})
endsnippet

snippet sizeof "sizeof(x interface{})"
sizeof( ${1:x interface{}})
endsnippet

snippet skip "skip(b []byte)"
skip( ${1:b []byte})
endsnippet

snippet slashdir "slashdir(p string)"
slashdir( ${1:p string})
endsnippet

snippet slice "slice(x, lo, hi, max value)"
slice( ${1:x}, ${2:lo}, ${3:hi}, ${4:max value})
endsnippet

snippet slice3 "slice3(x *ast.SliceExpr)"
slice3( ${1:x *ast.SliceExpr})
endsnippet

snippet sliceMax "sliceMax(x *ast.SliceExpr)"
sliceMax( ${1:x *ast.SliceExpr})
endsnippet

snippet slicePacket "slicePacket(b []byte)"
slicePacket( ${1:b []byte})
endsnippet

snippet sliceToArray "sliceToArray(slice types.Type)"
sliceToArray( ${1:slice types.Type})
endsnippet

snippet slope "slope(buf Float32Buf, p0 int64, t0 int64, start, delta float32)"
slope( ${1:buf Float32Buf}, ${2:p0 int64}, ${3:t0 int64}, ${4:start}, ${5:delta float32})
endsnippet

snippet slowOperationWithTimeout "slowOperationWithTimeout(ctx context.Context)"
slowOperationWithTimeout( ${1:ctx context.Context})
endsnippet

snippet slowPublicSuffix "slowPublicSuffix(domain string)"
slowPublicSuffix( ${1:domain string})
endsnippet

snippet snapshots "snapshots(srv *clonesrv_t)"
snapshots( ${1:srv *clonesrv_t})
endsnippet

snippet sockRequest "sockRequest(method, endpoint string, data interface{})"
sockRequest( ${1:method}, ${2:endpoint string}, ${3:data interface{}})
endsnippet

snippet sockaddr "sockaddr(family int, address string)"
sockaddr( ${1:family int}, ${2:address string})
endsnippet

snippet socketHandler "socketHandler(c *websocket.Conn)"
socketHandler( ${1:c *websocket.Conn})
endsnippet

snippet socketInPolled "socketInPolled(s *zmq.Socket, p []zmq.Polled)"
socketInPolled( ${1:s *zmq.Socket}, ${2:p []zmq.Polled})
endsnippet

snippet socketcall "socketcall(call int, a0, a1, a2, a3, a4, a5 uintptr)"
socketcall( ${1:call int}, ${2:a0}, ${3:a1}, ${4:a2}, ${5:a3}, ${6:a4}, ${7:a5 uintptr})
endsnippet

snippet socks5Gateway "socks5Gateway(t *testing.T, gateway, endSystem net.Listener, typ byte, wg *sync.WaitGroup)"
socks5Gateway( ${1:t *testing.T}, ${2:gateway}, ${3:endSystem net.Listener}, ${4:typ byte}, ${5:wg *sync.WaitGroup})
endsnippet

snippet soleExpr "soleExpr(fn *ast.FuncDecl)"
soleExpr( ${1:fn *ast.FuncDecl})
endsnippet

snippet someUse "someUse(info *loader.PackageInfo, obj types.Object)"
someUse( ${1:info *loader.PackageInfo}, ${2:obj types.Object})
endsnippet

snippet sortByDepth "sortByDepth(paths []string)"
sortByDepth( ${1:paths []string})
endsnippet

snippet sortFlags "sortFlags(flags map[string]*Flag)"
sortFlags( ${1:flags map[string]*Flag})
endsnippet

snippet sortImports "sortImports(fset *token.FileSet, f *ast.File)"
sortImports( ${1:fset *token.FileSet}, ${2:f *ast.File})
endsnippet

snippet sortSpecs "sortSpecs(fset *token.FileSet, f *ast.File, specs []ast.Spec)"
sortSpecs( ${1:fset *token.FileSet}, ${2:f *ast.File}, ${3:specs []ast.Spec})
endsnippet

snippet sortedLines "sortedLines(s string)"
sortedLines( ${1:s string})
endsnippet

snippet source "source(lines [][]byte, n int)"
source( ${1:lines [][]byte}, ${2:n int})
endsnippet

snippet sourceImporter "sourceImporter(packages map[string]*types.Package, path string)"
sourceImporter( ${1:packages map[string]*types.Package}, ${2:path string})
endsnippet

snippet spans2ys "spans2ys(ss []raster.Span)"
spans2ys( ${1:ss []raster.Span})
endsnippet

snippet spawnHttpsDaemon "spawnHttpsDaemon(addr, cacert, cert, key string)"
spawnHttpsDaemon( ${1:addr}, ${2:cacert}, ${3:cert}, ${4:key string})
endsnippet

snippet spawnTestRegistrySession "spawnTestRegistrySession(t *testing.T)"
spawnTestRegistrySession( ${1:t *testing.T})
endsnippet

snippet specExports "specExports(spec Spec)"
specExports( ${1:spec Spec})
endsnippet

snippet specListExports "specListExports(list []Spec)"
specListExports( ${1:list []Spec})
endsnippet

snippet speed_up_building "speed_up_building(F_position_id string, conn *net.TCPConn, t *testing.T)"
speed_up_building( ${1:F_position_id string}, ${2:conn *net.TCPConn}, ${3:t *testing.T})
endsnippet

snippet split "split(s, sep string)"
split( ${1:s}, ${2:sep string})
endsnippet

snippet splitAtLastDot "splitAtLastDot(s string)"
splitAtLastDot( ${1:s string})
endsnippet

snippet splitBench "splitBench(benchProcs string)"
splitBench( ${1:benchProcs string})
endsnippet

snippet splitBlkioStatLine "splitBlkioStatLine(r rune)"
splitBlkioStatLine( ${1:r rune})
endsnippet

snippet splitCommand "splitCommand(line string)"
splitCommand( ${1:line string})
endsnippet

snippet splitConstDecl "splitConstDecl(name string, decl *ast.GenDecl)"
splitConstDecl( ${1:name string}, ${2:decl *ast.GenDecl})
endsnippet

snippet splitDash "splitDash(s string)"
splitDash( ${1:s string})
endsnippet

snippet splitDecl "splitDecl(obj *ast.Object, id *ast.Ident)"
splitDecl( ${1:obj *ast.Object}, ${2:id *ast.Ident})
endsnippet

snippet splitError "splitError(err error)"
splitError( ${1:err error})
endsnippet

snippet splitExampleName "splitExampleName(s string)"
splitExampleName( ${1:s string})
endsnippet

snippet splitFunc "splitFunc(s string)"
splitFunc( ${1:s string})
endsnippet

snippet splitIntoRuns "splitIntoRuns(values []Value)"
splitIntoRuns( ${1:values []Value})
endsnippet

snippet splitParam "splitParam(remaining string)"
splitParam( ${1:remaining string})
endsnippet

snippet splitPath "splitPath(p string)"
splitPath( ${1:p string})
endsnippet

snippet splitPathIdent "splitPathIdent(arg string)"
splitPathIdent( ${1:arg string})
endsnippet

snippet splitRelaxed "splitRelaxed(remaining string)"
splitRelaxed( ${1:remaining string})
endsnippet

snippet splitSelector "splitSelector(expr ast.Expr)"
splitSelector( ${1:expr ast.Expr})
endsnippet

snippet splitTextToWords "splitTextToWords(text Text)"
splitTextToWords( ${1:text Text})
endsnippet

snippet srcLine "srcLine(src []byte, p token.Position)"
srcLine( ${1:src []byte}, ${2:p token.Position})
endsnippet

snippet srcLinkFunc "srcLinkFunc(s string)"
srcLinkFunc( ${1:s string})
endsnippet

snippet srcPkgHandler "srcPkgHandler(w http.ResponseWriter, r *http.Request)"
srcPkgHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet srcPosLinkFunc "srcPosLinkFunc(s string, line, low, high int)"
srcPosLinkFunc( ${1:s string}, ${2:line}, ${3:low}, ${4:high int})
endsnippet

snippet ssaValueForExpr "ssaValueForExpr(prog *ssa.Program, qinfo *loader.PackageInfo, path []ast.Node)"
ssaValueForExpr( ${1:prog *ssa.Program}, ${2:qinfo *loader.PackageInfo}, ${3:path []ast.Node})
endsnippet

snippet ssaValueForIdent "ssaValueForIdent(prog *ssa.Program, qinfo *loader.PackageInfo, obj types.Object, path []ast.Node)"
ssaValueForIdent( ${1:prog *ssa.Program}, ${2:qinfo *loader.PackageInfo}, ${3:obj types.Object}, ${4:path []ast.Node})
endsnippet

snippet stack "stack(skip int)"
stack( ${1:skip int})
endsnippet

snippet star_predicate "star_predicate(v ast.Expr)"
star_predicate( ${1:v ast.Expr})
endsnippet

snippet start "start(name string)"
start( ${1:name string})
endsnippet

snippet startBrowser "startBrowser(url string)"
startBrowser( ${1:url string})
endsnippet

snippet startBuilding "startBuilding(conf buildConfig, rev string)"
startBuilding( ${1:conf buildConfig}, ${2:rev string})
endsnippet

snippet startContainer "startContainer(eng *engine.Engine, id string, t Fataler)"
startContainer( ${1:eng *engine.Engine}, ${2:id string}, ${3:t Fataler})
endsnippet

snippet startEchoServerContainer "startEchoServerContainer(t *testing.T, proto string)"
startEchoServerContainer( ${1:t *testing.T}, ${2:proto string})
endsnippet

snippet startInExistingContainer "startInExistingContainer(config *libcontainer.Config, state *libcontainer.State, action string, context *cli.Context)"
startInExistingContainer( ${1:config *libcontainer.Config}, ${2:state *libcontainer.State}, ${3:action string}, ${4:context *cli.Context})
endsnippet

snippet startLongRunningContainer "startLongRunningContainer(config *libcontainer.Config)"
startLongRunningContainer( ${1:config *libcontainer.Config})
endsnippet

snippet startProcess "startProcess(id, body string, out chan<- *Message, opt *Options)"
startProcess( ${1:id}, ${2:body string}, ${3:out chan<- *Message}, ${4:opt *Options})
endsnippet

snippet startTimer "startTimer(t *runtimeTimer)"
startTimer( ${1:t *runtimeTimer})
endsnippet

snippet startWatching "startWatching(conf watchConfig)"
startWatching( ${1:conf watchConfig})
endsnippet

snippet start_flush_on "start_flush_on(server_id T_server_id, need_flush_village_ids, need_flush_npc_ids []int32)"
start_flush_on( ${1:server_id T_server_id}, ${2:need_flush_village_ids}, ${3:need_flush_npc_ids []int32})
endsnippet

snippet startsWithUppercase "startsWithUppercase(s string)"
startsWithUppercase( ${1:s string})
endsnippet

snippet statAtime "statAtime(st *syscall.Stat_t)"
statAtime( ${1:st *syscall.Stat_t})
endsnippet

snippet statCtime "statCtime(st *syscall.Stat_t)"
statCtime( ${1:st *syscall.Stat_t})
endsnippet

snippet statDir "statDir(dirPath, recPath string, includeDir, isDirOnly bool)"
statDir( ${1:dirPath}, ${2:recPath string}, ${3:includeDir}, ${4:isDirOnly bool})
endsnippet

snippet statUnix "statUnix(fi os.FileInfo, h *Header)"
statUnix( ${1:fi os.FileInfo}, ${2:h *Header})
endsnippet

snippet statone "statone(c *g9pc.Client, f string)"
statone( ${1:c *g9pc.Client}, ${2:f string})
endsnippet

snippet statsAction "statsAction(context *cli.Context)"
statsAction( ${1:context *cli.Context})
endsnippet

snippet statsz "statsz(d *Dir, dotu bool)"
statsz( ${1:d *Dir}, ${2:dotu bool})
endsnippet

snippet stdCopy "stdCopy(dstout, dsterr io.Writer, src io.Reader)"
stdCopy( ${1:dstout}, ${2:dsterr io.Writer}, ${3:src io.Reader})
endsnippet

snippet stop "stop(name string)"
stop( ${1:name string})
endsnippet

snippet store "store(ptr **int, value *int)"
store( ${1:ptr **int}, ${2:value *int})
endsnippet

snippet str4 "str4(s string, e binary.ByteOrder)"
str4( ${1:s string}, ${2:e binary.ByteOrder})
endsnippet

snippet strSet "strSet(ss []string)"
strSet( ${1:ss []string})
endsnippet

snippet strSlicesEqual "strSlicesEqual(a, b []string)"
strSlicesEqual( ${1:a}, ${2:b []string})
endsnippet

snippet streamJSON "streamJSON(job *engine.Job, w http.ResponseWriter, flush bool)"
streamJSON( ${1:job *engine.Job}, ${2:w http.ResponseWriter}, ${3:flush bool})
endsnippet

snippet use_buff_item "use_buff_item(buff_type string, conn *net.TCPConn, t *testing.T)"
use_buff_item( ${1:buff_type string}, ${2:conn *net.TCPConn}, ${3:t *testing.T})
endsnippet

snippet stringConst "stringConst(s string)"
stringConst( ${1:s string})
endsnippet

snippet stringFor "stringFor(arg interface{})"
stringFor( ${1:arg interface{}})
endsnippet

snippet stringFromMap "stringFromMap(m map[string]interface{}, key string)"
stringFromMap( ${1:m map[string]interface{}}, ${2:key string})
endsnippet

snippet stringList "stringList(args ...interface{})"
stringList( ${1:args ...interface{}})
endsnippet

snippet stringMapEqual "stringMapEqual(m1, m2 map[string]string)"
stringMapEqual( ${1:m1}, ${2:m2 map[string]string})
endsnippet

snippet stringToLoopName "stringToLoopName(src string)"
stringToLoopName( ${1:src string})
endsnippet

snippet stringerCompileAndRun "stringerCompileAndRun(t *testing.T, dir, stringer, typeName, fileName string)"
stringerCompileAndRun( ${1:t *testing.T}, ${2:dir}, ${3:stringer}, ${4:typeName}, ${5:fileName string})
endsnippet

snippet stringnwidth "stringnwidth(f *Font, s string, b []byte, r []rune)"
stringnwidth( ${1:f *Font}, ${2:s string}, ${3:b []byte}, ${4:r []rune})
endsnippet

snippet stringsfromByte "stringsfromByte(buf []byte)"
stringsfromByte( ${1:buf []byte})
endsnippet

snippet stringsize "stringsize(s string)"
stringsize( ${1:s string})
endsnippet

snippet stripComments "stripComments(line string)"
stripComments( ${1:line string})
endsnippet

snippet stripCommonPrefix "stripCommonPrefix(lines [][]byte)"
stripCommonPrefix( ${1:lines [][]byte})
endsnippet

snippet stripExampleSuffix "stripExampleSuffix(name string)"
stripExampleSuffix( ${1:name string})
endsnippet

snippet stripParens "stripParens(x ast.Expr)"
stripParens( ${1:x ast.Expr})
endsnippet

snippet stripTrailingCharacters "stripTrailingCharacters(target string)"
stripTrailingCharacters( ${1:target string})
endsnippet

snippet strip_method_receiver "strip_method_receiver(recv *ast.FieldList)"
strip_method_receiver( ${1:recv *ast.FieldList})
endsnippet

snippet strtol "strtol(b []byte)"
strtol( ${1:b []byte})
endsnippet

snippet struct_interface_predicate "struct_interface_predicate(v ast.Expr)"
struct_interface_predicate( ${1:v ast.Expr})
endsnippet

snippet struct_members_only "struct_members_only(decl *decl)"
struct_members_only( ${1:decl *decl})
endsnippet

snippet subOneInLoop "subOneInLoop(y int)"
subOneInLoop( ${1:y int})
endsnippet

snippet subProtoServer "subProtoServer(ws *Conn)"
subProtoServer( ${1:ws *Conn})
endsnippet

snippet subProtocolHandshake "subProtocolHandshake(config *Config, req *http.Request)"
subProtocolHandshake( ${1:config *Config}, ${2:req *http.Request})
endsnippet

snippet subfontname "subfontname(cfname, fname string, maxdepth int)"
subfontname( ${1:cfname}, ${2:fname string}, ${3:maxdepth int})
endsnippet

snippet subscriber "subscriber(srv *clonesrv_t)"
subscriber( ${1:srv *clonesrv_t})
endsnippet

snippet subvolCreate "subvolCreate(path, name string)"
subvolCreate( ${1:path}, ${2:name string})
endsnippet

snippet subvolDelete "subvolDelete(path, name string)"
subvolDelete( ${1:path}, ${2:name string})
endsnippet

snippet subvolSnapshot "subvolSnapshot(src, dest, name string)"
subvolSnapshot( ${1:src}, ${2:dest}, ${3:name string})
endsnippet

snippet success "success(exitcode int, output string)"
success( ${1:exitcode int}, ${2:output string})
endsnippet

snippet summary "summary(d *Doc)"
summary( ${1:d *Doc})
endsnippet

snippet supvName "supvName(host string)"
supvName( ${1:host string})
endsnippet

snippet suspend "suspend(s bool)"
suspend( ${1:s bool})
endsnippet

snippet swap "swap(x, y *int)"
swap( ${1:x}, ${2:y *int})
endsnippet

snippet switch_output_mode "switch_output_mode(direction int)"
switch_output_mode( ${1:direction int})
endsnippet

snippet syncDecl "syncDecl(p *parser)"
syncDecl( ${1:p *parser})
endsnippet

snippet syncStmt "syncStmt(p *parser)"
syncStmt( ${1:p *parser})
endsnippet

snippet sysfd "sysfd(c net.Conn)"
sysfd( ${1:c net.Conn})
endsnippet

snippet syswrite "syswrite(fd int, b []byte)"
syswrite( ${1:fd int}, ${2:b []byte})
endsnippet

snippet tCommit "tCommit(hash, parentHash, path string, bench bool)"
tCommit( ${1:hash}, ${2:parentHash}, ${3:path string}, ${4:bench bool})
endsnippet

snippet tagHandler "tagHandler(r *http.Request)"
tagHandler( ${1:r *http.Request})
endsnippet

snippet tail "tail(n int, s string)"
tail( ${1:n int}, ${2:s string})
endsnippet

snippet tarUntar "tarUntar(t *testing.T, origin string, options *TarOptions)"
tarUntar( ${1:t *testing.T}, ${2:origin string}, ${3:options *TarOptions})
endsnippet

snippet tarjanSort "tarjanSort(successors map[bson.ObjectId][]bson.ObjectId)"
tarjanSort( ${1:successors map[bson.ObjectId][]bson.ObjectId})
endsnippet

snippet tbprint "tbprint(x, y int, fg, bg termbox.Attribute, msg string)"
tbprint( ${1:x}, ${2:y int}, ${3:fg}, ${4:bg termbox.Attribute}, ${5:msg string})
endsnippet

snippet tcget "tcget(fd uintptr, p *Termios)"
tcget( ${1:fd uintptr}, ${2:p *Termios})
endsnippet

snippet tcgetattr "tcgetattr(fd uintptr, termios *syscall_Termios)"
tcgetattr( ${1:fd uintptr}, ${2:termios *syscall_Termios})
endsnippet

snippet tcpListener "tcpListener(t *testing.T, addr string, listener chan<- net.Listener)"
tcpListener( ${1:t *testing.T}, ${2:addr string}, ${3:listener chan<- net.Listener})
endsnippet

snippet tcset "tcset(fd uintptr, p *Termios)"
tcset( ${1:fd uintptr}, ${2:p *Termios})
endsnippet

snippet tcsetattr "tcsetattr(fd uintptr, termios *syscall_Termios)"
tcsetattr( ${1:fd uintptr}, ${2:termios *syscall_Termios})
endsnippet

snippet tdiff "tdiff(t *testing.T, a, b string)"
tdiff( ${1:t *testing.T}, ${2:a}, ${3:b string})
endsnippet

snippet tech_level_up "tech_level_up(conn *net.TCPConn, t *testing.T)"
tech_level_up( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet tech_speed_up "tech_speed_up(conn *net.TCPConn, t *testing.T)"
tech_speed_up( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet tempGomfile "tempGomfile(content string)"
tempGomfile( ${1:content string})
endsnippet

snippet tempGraph "tempGraph(t *testing.T)"
tempGraph( ${1:t *testing.T})
endsnippet

snippet tempfile "tempfile(filename string)"
tempfile( ${1:filename string})
endsnippet

snippet termHandler "termHandler(sig os.Signal)"
termHandler( ${1:sig os.Signal})
endsnippet

snippet terminate "terminate(c cmd, conn *ec2.EC2, args []string)"
terminate( ${1:c cmd}, ${2:conn *ec2.EC2}, ${3:args []string})
endsnippet

snippet terminateLockScript "terminateLockScript(scr *script)"
terminateLockScript( ${1:scr *script})
endsnippet

snippet testArchive "testArchive(t *testing.T)"
testArchive( ${1:t *testing.T})
endsnippet

snippet testBreakout "testBreakout(untarFn string, tmpdir string, headers []*tar.Header)"
testBreakout( ${1:untarFn string}, ${2:tmpdir string}, ${3:headers []*tar.Header})
endsnippet

snippet testBuiltinSignature "testBuiltinSignature(t *testing.T, name, src0, want string)"
testBuiltinSignature( ${1:t *testing.T}, ${2:name}, ${3:src0}, ${4:want string})
endsnippet

snippet testC "testC(t *testing.T)"
testC( ${1:t *testing.T})
endsnippet

snippet testCodecEmbeddedPointer "testCodecEmbeddedPointer(t *testing.T, h Handle)"
testCodecEmbeddedPointer( ${1:t *testing.T}, ${2:h Handle})
endsnippet

snippet testCodecMiscOne "testCodecMiscOne(t *testing.T, h Handle)"
testCodecMiscOne( ${1:t *testing.T}, ${2:h Handle})
endsnippet

snippet testCodecTableOne "testCodecTableOne(t *testing.T, h Handle)"
testCodecTableOne( ${1:t *testing.T}, ${2:h Handle})
endsnippet

snippet testContents "testContents(t *T, f *File, data []byte)"
testContents( ${1:t *T}, ${2:f *File}, ${3:data []byte})
endsnippet

snippet testContextTar "testContextTar(t *testing.T, compression archive.Compression)"
testContextTar( ${1:t *testing.T}, ${2:compression archive.Compression})
endsnippet

snippet testCrossPair "testCrossPair(c *C, dump interface{}, load interface{})"
testCrossPair( ${1:c *C}, ${2:dump interface{}}, ${3:load interface{}})
endsnippet

snippet testDeadline "testDeadline(c Context, wait time.Duration, t *testing.T)"
testDeadline( ${1:c Context}, ${2:wait time.Duration}, ${3:t *testing.T})
endsnippet

snippet testDecOpts "testDecOpts(MapType reflect.Type, SliceType reflect.Type, BytesStringLiteral bool,$/;"	f
testDecode	src/code.google.com/p/rog-go/exp/filemarshal/filemarshal_test.go	/^func testDecode(t *T, dec Decoder, x interface{})"
testDecOpts( ${1:MapType reflect.Type}, ${2:SliceType reflect.Type}, ${3:BytesStringLiteral bool}, ${4:$/;"	f
testDecode	src/code.google.com/p/rog-go/exp/filemarshal/filemarshal_test.go	/^func testDecode(t *T}, ${5:dec Decoder}, ${6:x interface{}})
endsnippet

snippet testDir "testDir(t *testing.T, dir string, endTime time.Time)"
testDir( ${1:t *testing.T}, ${2:dir string}, ${3:endTime time.Time})
endsnippet

snippet testDockerClient "testDockerClient(t *testing.T)"
testDockerClient( ${1:t *testing.T})
endsnippet

snippet testE "testE(t *testing.T)"
testE( ${1:t *testing.T})
endsnippet

snippet testEncode "testEncode(t *T, enc Encoder, x interface{})"
testEncode( ${1:t *T}, ${2:enc Encoder}, ${3:x interface{}})
endsnippet

snippet testEncodeDecode "testEncodeDecode(t *T, enc Encoder, dec Decoder)"
testEncodeDecode( ${1:t *T}, ${2:enc Encoder}, ${3:dec Decoder})
endsnippet

snippet testEval "testEval(t *testing.T, pkg *Package, scope *Scope, str string, typ Type, typStr, valStr string)"
testEval( ${1:t *testing.T}, ${2:pkg *Package}, ${3:scope *Scope}, ${4:str string}, ${5:typ Type}, ${6:typStr}, ${7:valStr string})
endsnippet

snippet testEventListeners "testEventListeners(testName string, t *testing.T, buildServer func(http.Handler)"
testEventListeners( ${1:testName string}, ${2:t *testing.T}, ${3:buildServer func(http.Handler})
endsnippet

snippet testExportImport "testExportImport(t *testing.T, pkg0 *types.Package, path string)"
testExportImport( ${1:t *testing.T}, ${2:pkg0 *types.Package}, ${3:path string})
endsnippet

snippet testExpr "testExpr(t *testing.T, fset *token.FileSet, e ast.Expr, offsetMap map[int]*sym)"
testExpr( ${1:t *testing.T}, ${2:fset *token.FileSet}, ${3:e ast.Expr}, ${4:offsetMap map[int]*sym})
endsnippet

snippet testHandler "testHandler(w http.ResponseWriter, r *http.Request)"
testHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet testHybiFrame "testHybiFrame(t *testing.T, testHeader, testPayload, testMaskedPayload []byte, frameHeader *hybiFrameHeader)"
testHybiFrame( ${1:t *testing.T}, ${2:testHeader}, ${3:testPayload}, ${4:testMaskedPayload []byte}, ${5:frameHeader *hybiFrameHeader})
endsnippet

snippet testIndex "testIndex(t *testing.T, c *Corpus, ix *Index)"
testIndex( ${1:t *testing.T}, ${2:c *Corpus}, ${3:ix *Index})
endsnippet

snippet testInit "testInit(dir string, t *testing.T)"
testInit( ${1:dir string}, ${2:t *testing.T})
endsnippet

snippet testKeyFiles "testKeyFiles(t *testing.T, key PrivateKey)"
testKeyFiles( ${1:t *testing.T}, ${2:key PrivateKey})
endsnippet

snippet testLayers "testLayers(t *testing.T, seed int64, testTimeout bool)"
testLayers( ${1:t *testing.T}, ${2:seed int64}, ${3:testTimeout bool})
endsnippet

snippet testMainSlice "testMainSlice(fn *Function, testfuncs []*Function, slice types.Type)"
testMainSlice( ${1:fn *Function}, ${2:testfuncs []*Function}, ${3:slice types.Type})
endsnippet

snippet testMap "testMap(l int)"
testMap( ${1:l int})
endsnippet

snippet testMarshal "testMarshal(v interface{}, h Handle)"
testMarshal( ${1:v interface{}}, ${2:h Handle})
endsnippet

snippet testMarshalErr "testMarshalErr(v interface{}, h Handle, t *testing.T, name string)"
testMarshalErr( ${1:v interface{}}, ${2:h Handle}, ${3:t *testing.T}, ${4:name string})
endsnippet

snippet testMountMoreThan42Layers "testMountMoreThan42Layers(t *testing.T, mountPath string)"
testMountMoreThan42Layers( ${1:t *testing.T}, ${2:mountPath string})
endsnippet

snippet testMulticastSocketOptions "testMulticastSocketOptions(t *testing.T, c testIPv4MulticastConn, ifi *net.Interface, grp net.Addr)"
testMulticastSocketOptions( ${1:t *testing.T}, ${2:c testIPv4MulticastConn}, ${3:ifi *net.Interface}, ${4:grp net.Addr})
endsnippet

snippet testMulticastSockopt "testMulticastSockopt(t *testing.T, tt multicastSockoptTest, c testMulticastConn, gaddr net.Addr)"
testMulticastSockopt( ${1:t *testing.T}, ${2:tt multicastSockoptTest}, ${3:c testMulticastConn}, ${4:gaddr net.Addr})
endsnippet

snippet testNotVerified "testNotVerified(t *testing.T, g TrustGraph, k libtrust.PublicKey, keyName, target string, permission uint16)"
testNotVerified( ${1:t *testing.T}, ${2:g TrustGraph}, ${3:k libtrust.PublicKey}, ${4:keyName}, ${5:target string}, ${6:permission uint16})
endsnippet

snippet testPanic "testPanic(f *FlagSet, t *testing.T)"
testPanic( ${1:f *FlagSet}, ${2:t *testing.T})
endsnippet

snippet testParse "testParse(f *FlagSet, t *testing.T)"
testParse( ${1:f *FlagSet}, ${2:t *testing.T})
endsnippet

snippet testParseCase "testParseCase(text, want, context string)"
testParseCase( ${1:text}, ${2:want}, ${3:context string})
endsnippet

snippet testPath "testPath(t *testing.T, path string)"
testPath( ${1:t *testing.T}, ${2:path string})
endsnippet

snippet testProxy "testProxy(t *testing.T, proto string, proxy Proxy)"
testProxy( ${1:t *testing.T}, ${2:proto string}, ${3:proxy Proxy})
endsnippet

snippet testProxyAt "testProxyAt(t *testing.T, proto string, proxy Proxy, addr string)"
testProxyAt( ${1:t *testing.T}, ${2:proto string}, ${3:proxy Proxy}, ${4:addr string})
endsnippet

snippet testReadLine "testReadLine(t *testing.T, input []byte)"
testReadLine( ${1:t *testing.T}, ${2:input []byte})
endsnippet

snippet testReadLineNewlines "testReadLineNewlines(t *testing.T, input string, expect []readLineResult)"
testReadLineNewlines( ${1:t *testing.T}, ${2:input string}, ${3:expect []readLineResult})
endsnippet

snippet testRoute "testRoute(t *testing.T, test routeTest)"
testRoute( ${1:t *testing.T}, ${2:test routeTest})
endsnippet

snippet testRpc "testRpc(t *testing.T, callClose, doBasic, doCustom, doExit bool)"
testRpc( ${1:t *testing.T}, ${2:callClose}, ${3:doBasic}, ${4:doCustom}, ${5:doExit bool})
endsnippet

snippet testSetfilecon "testSetfilecon(t *testing.T)"
testSetfilecon( ${1:t *testing.T})
endsnippet

snippet testSourceSpecificMulticastSocketOptions "testSourceSpecificMulticastSocketOptions(t *testing.T, c testIPv4MulticastConn, ifi *net.Interface, grp, src net.Addr)"
testSourceSpecificMulticastSocketOptions( ${1:t *testing.T}, ${2:c testIPv4MulticastConn}, ${3:ifi *net.Interface}, ${4:grp}, ${5:src net.Addr})
endsnippet

snippet testSymlink "testSymlink(tmpdir, path, expected, scope string)"
testSymlink( ${1:tmpdir}, ${2:path}, ${3:expected}, ${4:scope string})
endsnippet

snippet testTestDir "testTestDir(t *testing.T, path string, ignore ...string)"
testTestDir( ${1:t *testing.T}, ${2:path string}, ${3:ignore ...string})
endsnippet

snippet testTrustedClientKeysFile "testTrustedClientKeysFile(t *testing.T, trustedClientKeysFilename string)"
testTrustedClientKeysFile( ${1:t *testing.T}, ${2:trustedClientKeysFilename string})
endsnippet

snippet testTrustedHostKeysFile "testTrustedHostKeysFile(t *testing.T, trustedHostKeysFilename string)"
testTrustedHostKeysFile( ${1:t *testing.T}, ${2:trustedHostKeysFilename string})
endsnippet

snippet testUnicastSocketOptions "testUnicastSocketOptions(t *testing.T, c testIPv4UnicastConn)"
testUnicastSocketOptions( ${1:t *testing.T}, ${2:c testIPv4UnicastConn})
endsnippet

snippet testUnicastSockopt "testUnicastSockopt(t *testing.T, tt unicastSockoptTest, c testUnicastConn)"
testUnicastSockopt( ${1:t *testing.T}, ${2:tt unicastSockoptTest}, ${3:c testUnicastConn})
endsnippet

snippet testUnmarshal "testUnmarshal(v interface{}, data []byte, h Handle)"
testUnmarshal( ${1:v interface{}}, ${2:data []byte}, ${3:h Handle})
endsnippet

snippet testUnmarshalErr "testUnmarshalErr(v interface{}, data []byte, h Handle, t *testing.T, name string)"
testUnmarshalErr( ${1:v interface{}}, ${2:data []byte}, ${3:h Handle}, ${4:t *testing.T}, ${5:name string})
endsnippet

snippet testVerified "testVerified(t *testing.T, g TrustGraph, k libtrust.PublicKey, keyName, target string, permission uint16)"
testVerified( ${1:t *testing.T}, ${2:g TrustGraph}, ${3:k libtrust.PublicKey}, ${4:keyName}, ${5:target string}, ${6:permission uint16})
endsnippet

snippet testVerifyVal "testVerifyVal(v interface{}, arg testVerifyArg)"
testVerifyVal( ${1:v interface{}}, ${2:arg testVerifyArg})
endsnippet

snippet testWithPrefix "testWithPrefix(t *testing.T, attrs []string, inOpts, outOpts Options, actualNet string)"
testWithPrefix( ${1:t *testing.T}, ${2:attrs []string}, ${3:inOpts}, ${4:outOpts Options}, ${5:actualNet string})
endsnippet

snippet testWithProtocol "testWithProtocol(t *testing.T, subproto []string)"
testWithProtocol( ${1:t *testing.T}, ${2:subproto []string})
endsnippet

snippet testXPoweredBy "testXPoweredBy(t *testing.T, rh *ResourceHandler, expected string)"
testXPoweredBy( ${1:t *testing.T}, ${2:rh *ResourceHandler}, ${3:expected string})
endsnippet

snippet testXattr "testXattr(t *testing.T)"
testXattr( ${1:t *testing.T})
endsnippet

snippet test_all_auto "test_all_auto(mac string, data interface{}, t *testing.T)"
test_all_auto( ${1:mac string}, ${2:data interface{}}, ${3:t *testing.T})
endsnippet

snippet test_auto "test_auto(mac string, data interface{}, t *testing.T)"
test_auto( ${1:mac string}, ${2:data interface{}}, ${3:t *testing.T})
endsnippet

snippet testequal "testequal(t *testing.T, a, b []byte, msg string)"
testequal( ${1:t *testing.T}, ${2:a}, ${3:b []byte}, ${4:msg string})
endsnippet

snippet testprint "testprint(out io.Writer, file *ast.File)"
testprint( ${1:out io.Writer}, ${2:file *ast.File})
endsnippet

snippet text "text(n *html.Node)"
text( ${1:n *html.Node})
endsnippet

snippet textIM "textIM(p *parser)"
textIM( ${1:p *parser})
endsnippet

snippet textSliceByteLength "textSliceByteLength(text []Text)"
textSliceByteLength( ${1:text []Text})
endsnippet

snippet textSliceToString "textSliceToString(text []Text)"
textSliceToString( ${1:text []Text})
endsnippet

snippet three "three(i I, j J)"
three( ${1:i I}, ${2:j J})
endsnippet

snippet ti_read_string "ti_read_string(rd *bytes.Reader, str_off, table int16)"
ti_read_string( ${1:rd *bytes.Reader}, ${2:str_off}, ${3:table int16})
endsnippet

snippet ti_try_path "ti_try_path(path string)"
ti_try_path( ${1:path string})
endsnippet

snippet timeLocUTCName "timeLocUTCName(tzint int16)"
timeLocUTCName( ${1:tzint int16})
endsnippet

snippet timeToTimespec "timeToTimespec(time time.Time)"
timeToTimespec( ${1:time time.Time})
endsnippet

snippet timeout "timeout(d time.Duration, f func()"
timeout( ${1:d time.Duration}, ${2:f func(})
endsnippet

snippet timeoutDial "timeoutDial(network, addr string)"
timeoutDial( ${1:network}, ${2:addr string})
endsnippet

snippet titleCaseName "titleCaseName(s string)"
titleCaseName( ${1:s string})
endsnippet

snippet tlsDial "tlsDial(network, addr string, config *tls.Config)"
tlsDial( ${1:network}, ${2:addr string}, ${3:config *tls.Config})
endsnippet

snippet tlsDialWithDialer "tlsDialWithDialer(dialer *net.Dialer, network, addr string, config *tls.Config)"
tlsDialWithDialer( ${1:dialer *net.Dialer}, ${2:network}, ${3:addr string}, ${4:config *tls.Config})
endsnippet

snippet toASCII "toASCII(s string)"
toASCII( ${1:s string})
endsnippet

snippet toColor "toColor(color color.Color)"
toColor( ${1:color color.Color})
endsnippet

snippet toExported "toExported(s string)"
toExported( ${1:s string})
endsnippet

snippet toH "toH(bytes uint64)"
toH( ${1:bytes uint64})
endsnippet

snippet toInt "toInt(s string)"
toInt( ${1:s string})
endsnippet

snippet toJson "toJson(data interface{}, t *testing.T)"
toJson( ${1:data interface{}}, ${2:t *testing.T})
endsnippet

snippet toLower "toLower(text []byte)"
toLower( ${1:text []byte})
endsnippet

snippet toS "toS(d time.Duration)"
toS( ${1:d time.Duration})
endsnippet

snippet toString "toString(v value)"
toString( ${1:v value})
endsnippet

snippet toUnexported "toUnexported(s string)"
toUnexported( ${1:s string})
endsnippet

snippet toWords "toWords(strings ...string)"
toWords( ${1:strings ...string})
endsnippet

snippet todoHandler "todoHandler(r *http.Request)"
todoHandler( ${1:r *http.Request})
endsnippet

snippet toggle "toggle(state cgroups.FreezerState)"
toggle( ${1:state cgroups.FreezerState})
endsnippet

snippet tok "tok(pos token.Pos, len int)"
tok( ${1:pos token.Pos}, ${2:len int})
endsnippet

snippet tokenFileContainsPos "tokenFileContainsPos(f *token.File, pos token.Pos)"
tokenFileContainsPos( ${1:f *token.File}, ${2:pos token.Pos})
endsnippet

snippet tokenFor "tokenFor(t *transaction)"
tokenFor( ${1:t *transaction})
endsnippet

snippet tokenOf "tokenOf(o types.Object)"
tokenOf( ${1:o types.Object})
endsnippet

snippet tokenSelection "tokenSelection(src []byte, sel token.Token)"
tokenSelection( ${1:src []byte}, ${2:sel token.Token})
endsnippet

snippet tokenToSlice "tokenToSlice(token *Token)"
tokenToSlice( ${1:token *Token})
endsnippet

snippet tokenToString "tokenToString(token *Token)"
tokenToString( ${1:token *Token})
endsnippet

snippet tokenclass "tokenclass(tok token.Token)"
tokenclass( ${1:tok token.Token})
endsnippet

snippet tokensToPull "tokensToPull(dqueue []token, pull map[bson.ObjectId]*transaction, dontPull token)"
tokensToPull( ${1:dqueue []token}, ${2:pull map[bson.ObjectId]*transaction}, ${3:dontPull token})
endsnippet

snippet toktext "toktext(t int)"
toktext( ${1:t int})
endsnippet

snippet topbottom "topbottom(w []*Image, top bool)"
topbottom( ${1:w []*Image}, ${2:top bool})
endsnippet

snippet topnwindows "topnwindows(w []*Image)"
topnwindows( ${1:w []*Image})
endsnippet

snippet topwindow "topwindow(w *Image)"
topwindow( ${1:w *Image})
endsnippet

snippet trace "trace(p *parser, msg string)"
trace( ${1:p *parser}, ${2:msg string})
endsnippet

snippet transfer "transfer(c io.ReadWriteCloser, raddr string)"
transfer( ${1:c io.ReadWriteCloser}, ${2:raddr string})
endsnippet

snippet transformString "transformString(t transform.Transformer, s string)"
transformString( ${1:t transform.Transformer}, ${2:s string})
endsnippet

snippet translateSymbols "translateSymbols(code []byte)"
translateSymbols( ${1:code []byte})
endsnippet

snippet transponder "transponder(t *testing.T, ln net.Listener, done chan<- bool)"
transponder( ${1:t *testing.T}, ${2:ln net.Listener}, ${3:done chan<- bool})
endsnippet

snippet treeCanMatchPattern "treeCanMatchPattern(pattern string)"
treeCanMatchPattern( ${1:pattern string})
endsnippet

snippet triStateFlag "triStateFlag(name string, value triState, usage string)"
triStateFlag( ${1:name string}, ${2:value triState}, ${3:usage string})
endsnippet

snippet trim "trim(s []string, n int)"
trim( ${1:s []string}, ${2:n int})
endsnippet

snippet trimIncompleteRune "trimIncompleteRune(b []byte)"
trimIncompleteRune( ${1:b []byte})
endsnippet

snippet trimQuotes "trimQuotes(str string)"
trimQuotes( ${1:str string})
endsnippet

snippet truncate "truncate(p []byte, size int)"
truncate( ${1:p []byte}, ${2:size int})
endsnippet

snippet trustedLocation "trustedLocation(req *http.Request)"
trustedLocation( ${1:req *http.Request})
endsnippet

snippet tryImports "tryImports(packages map[string]*types.Package, path string)"
tryImports( ${1:packages map[string]*types.Package}, ${2:path string})
endsnippet

snippet tryPrefixes "tryPrefixes(packages map[string]*types.Package, prefixes chan string, path string, imp types.Importer)"
tryPrefixes( ${1:packages map[string]*types.Package}, ${2:prefixes chan string}, ${3:path string}, ${4:imp types.Importer})
endsnippet

snippet tryRelocate "tryRelocate(oldPath, newPath string)"
tryRelocate( ${1:oldPath}, ${2:newPath string})
endsnippet

snippet try_request "try_request(endpoint string, request []string)"
try_request( ${1:endpoint string}, ${2:request []string})
endsnippet

snippet try_to_connect "try_to_connect(network, address string)"
try_to_connect( ${1:network}, ${2:address string})
endsnippet

snippet twiddlecompressed "twiddlecompressed(buf []byte)"
twiddlecompressed( ${1:buf []byte})
endsnippet

snippet two "two(i I, j J)"
two( ${1:i I}, ${2:j J})
endsnippet

snippet typeAssert "typeAssert(i *interpreter, instr *ssa.TypeAssert, itf iface)"
typeAssert( ${1:i *interpreter}, ${2:instr *ssa.TypeAssert}, ${3:itf iface})
endsnippet

snippet typeCheckFiles "typeCheckFiles(info *PackageInfo, files ...*ast.File)"
typeCheckFiles( ${1:info *PackageInfo}, ${2:files ...*ast.File})
endsnippet

snippet typeExports "typeExports(typ Expr)"
typeExports( ${1:typ Expr})
endsnippet

snippet typeFlatten "typeFlatten(l []*ast.Field)"
typeFlatten( ${1:l []*ast.Field})
endsnippet

snippet typeFor "typeFor(s string)"
typeFor( ${1:s string})
endsnippet

snippet typeHeight "typeHeight(T types.Type)"
typeHeight( ${1:T types.Type})
endsnippet

snippet typeKind "typeKind(T types.Type)"
typeKind( ${1:T types.Type})
endsnippet

snippet typeName "typeName(x interface{})"
typeName( ${1:x interface{}})
endsnippet

snippet typeStr "typeStr(obj *ast.Object, typ types.Type)"
typeStr( ${1:obj *ast.Object}, ${2:typ types.Type})
endsnippet

snippet typeSwitch "typeSwitch(sw *Switch, y ssa.Value, T types.Type, seen map[*ssa.BasicBlock]bool)"
typeSwitch( ${1:sw *Switch}, ${2:y ssa.Value}, ${3:T types.Type}, ${4:seen map[*ssa.BasicBlock]bool})
endsnippet

snippet typeSwitchVar "typeSwitchVar(info *types.Info, path []ast.Node)"
typeSwitchVar( ${1:info *types.Info}, ${2:path []ast.Node})
endsnippet

snippet typeTooHigh "typeTooHigh(T types.Type)"
typeTooHigh( ${1:T types.Type})
endsnippet

snippet type_to_decl "type_to_decl(t ast.Expr, scope *scope)"
type_to_decl( ${1:t ast.Expr}, ${2:scope *scope})
endsnippet

snippet typecheck "typecheck(path string, files ...*ast.File)"
typecheck( ${1:path string}, ${2:files ...*ast.File})
endsnippet

snippet typecheck1 "typecheck1(cfg *TypeConfig, f interface{}, typeof map[interface{}]string, assign map[string][]interface{})"
typecheck1( ${1:cfg *TypeConfig}, ${2:f interface{}}, ${3:typeof map[interface{}]string}, ${4:assign map[string][]interface{}})
endsnippet

snippet u32max "u32max(a, b uint32)"
u32max( ${1:a}, ${2:b uint32})
endsnippet

snippet uiHandler "uiHandler(w http.ResponseWriter, r *http.Request)"
uiHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet uint32Attr "uint32Attr(t int, n uint32)"
uint32Attr( ${1:t int}, ${2:n uint32})
endsnippet

snippet un "un(_ bool, rets ... interface{})"
un( ${1:_ bool}, ${2:rets ... interface{}})
endsnippet

snippet unauthorized "unauthorized(res http.ResponseWriter)"
unauthorized( ${1:res http.ResponseWriter})
endsnippet

snippet uncle "uncle(n *Node)"
uncle( ${1:n *Node})
endsnippet

snippet underlying "underlying(typ Type)"
underlying( ${1:typ Type})
endsnippet

snippet unescape "unescape(b []byte, attribute bool)"
unescape( ${1:b []byte}, ${2:attribute bool})
endsnippet

snippet unescapeEntity "unescapeEntity(b []byte, dst, src int, attribute bool)"
unescapeEntity( ${1:b []byte}, ${2:dst}, ${3:src int}, ${4:attribute bool})
endsnippet

snippet uninstallsubfont "uninstallsubfont(subfont *Subfont)"
uninstallsubfont( ${1:subfont *Subfont})
endsnippet

snippet uniqMcs "uniqMcs(catRange uint32)"
uniqMcs( ${1:catRange uint32})
endsnippet

snippet unique "unique(list []int)"
unique( ${1:list []int})
endsnippet

snippet uniqueVars "uniqueVars(s1, s2 []string)"
uniqueVars( ${1:s1}, ${2:s2 []string})
endsnippet

snippet unitsPerLine "unitsPerLine(r image.Rectangle, depth, bitsperunit int)"
unitsPerLine( ${1:r image.Rectangle}, ${2:depth}, ${3:bitsperunit int})
endsnippet

snippet unlockFileEx "unlockFileEx(h syscall.Handle, reserved, locklow, lockhigh uint32, ol *syscall.Overlapped)"
unlockFileEx( ${1:h syscall.Handle}, ${2:reserved}, ${3:locklow}, ${4:lockhigh uint32}, ${5:ol *syscall.Overlapped})
endsnippet

snippet unlockpt "unlockpt(f *os.File)"
unlockpt( ${1:f *os.File})
endsnippet

snippet unmarshal "unmarshal(msg []byte, payloadType byte, v interface{})"
unmarshal( ${1:msg []byte}, ${2:payloadType byte}, ${3:v interface{}})
endsnippet

snippet unmarshalJSON "unmarshalJSON(data []byte, result interface{})"
unmarshalJSON( ${1:data []byte}, ${2:result interface{}})
endsnippet

snippet unmount "unmount(target string, flag int)"
unmount( ${1:target string}, ${2:flag int})
endsnippet

snippet unnamedFieldName "unnamedFieldName(t ast.Node)"
unnamedFieldName( ${1:t ast.Node})
endsnippet

snippet unop "unop(instr *ssa.UnOp, x value)"
unop( ${1:instr *ssa.UnOp}, ${2:x value})
endsnippet

snippet unpack "unpack(get getter, n int, allowCommaOk bool)"
unpack( ${1:get getter}, ${2:n int}, ${3:allowCommaOk bool})
endsnippet

snippet unpackBodyTarball "unpackBodyTarball(req io.ReadCloser)"
unpackBodyTarball( ${1:req io.ReadCloser})
endsnippet

snippet unpackFileHeaderData "unpackFileHeaderData(fh *multipart.FileHeader)"
unpackFileHeaderData( ${1:fh *multipart.FileHeader})
endsnippet

snippet unpack_build_context "unpack_build_context(ctx *go_build_context)"
unpack_build_context( ${1:ctx *go_build_context})
endsnippet

snippet unpackinfo "unpackinfo(fc []Fontchar, p []byte, n int)"
unpackinfo( ${1:fc []Fontchar}, ${2:p []byte}, ${3:n int})
endsnippet

snippet unparen "unparen(e ast.Expr)"
unparen( ${1:e ast.Expr})
endsnippet

snippet unpauseAction "unpauseAction(context *cli.Context)"
unpauseAction( ${1:context *cli.Context})
endsnippet

snippet unpauseContainer "unpauseContainer(container string)"
unpauseContainer( ${1:container string})
endsnippet

snippet unquote "unquote(s string)"
unquote( ${1:s string})
endsnippet

snippet unquoteAttribute "unquoteAttribute(s string)"
unquoteAttribute( ${1:s string})
endsnippet

snippet unregister "unregister(name string)"
unregister( ${1:name string})
endsnippet

snippet unregistertests "unregistertests(t *testing.T)"
unregistertests( ${1:t *testing.T})
endsnippet

snippet unsetRaw "unsetRaw(t *testing.T, c *daemon.Container, state *term.State)"
unsetRaw( ${1:t *testing.T}, ${2:c *daemon.Container}, ${3:state *term.State})
endsnippet

snippet unsupported "unsupported(builder string)"
unsupported( ${1:builder string})
endsnippet

snippet unsupportedOS "unsupportedOS(os string)"
unsupportedOS( ${1:os string})
endsnippet

snippet untar "untar(r io.Reader, dir string)"
untar( ${1:r io.Reader}, ${2:dir string})
endsnippet

snippet until "until(space int, check func(d int)"
until( ${1:space int}, ${2:check func(d int})
endsnippet

snippet untilSatisfied "untilSatisfied(n int, check func(d int)"
untilSatisfied( ${1:n int}, ${2:check func(d int})
endsnippet

snippet unwrap "unwrap(buf *bytes.Buffer, s string)"
unwrap( ${1:buf *bytes.Buffer}, ${2:s string})
endsnippet

snippet upLink "upLink(t *testing.T, name string)"
upLink( ${1:t *testing.T}, ${2:name string})
endsnippet

snippet update "update(file string)"
update( ${1:file string})
endsnippet

snippet updateBenchmark "updateBenchmark(w http.ResponseWriter, r *http.Request)"
updateBenchmark( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet updateCL "updateCL(c appengine.Context, com *Commit, v url.Values)"
updateCL( ${1:c appengine.Context}, ${2:com *Commit}, ${3:v url.Values})
endsnippet

snippet updateJumper "updateJumper(jumper *jumper, baseDistance float32, token *Token)"
updateJumper( ${1:jumper *jumper}, ${2:baseDistance float32}, ${3:token *Token})
endsnippet

snippet updateTypeInfo "updateTypeInfo(info *types.Info, new, old ast.Expr)"
updateTypeInfo( ${1:info *types.Info}, ${2:new}, ${3:old ast.Expr})
endsnippet

snippet update_client_config "update_client_config(w rest.ResponseWriter, r *rest.Request)"
update_client_config( ${1:w rest.ResponseWriter}, ${2:r *rest.Request})
endsnippet

snippet update_packages "update_packages(ps map[string]*package_file_cache)"
update_packages( ${1:ps map[string]*package_file_cache})
endsnippet

snippet update_platform_version "update_platform_version(w rest.ResponseWriter, r *rest.Request)"
update_platform_version( ${1:w rest.ResponseWriter}, ${2:r *rest.Request})
endsnippet

snippet upsert "upsert(nodes *[]*node, word Text)"
upsert( ${1:nodes *[]*node}, ${2:word Text})
endsnippet

snippet use "use(interface{})"
use( ${1:interface{}})
endsnippet

snippet use_hero "use_hero(conn *net.TCPConn, t *testing.T)"
use_hero( ${1:conn *net.TCPConn}, ${2:t *testing.T})
endsnippet

snippet user "user(b *Builder, args []string, attributes map[string]bool, original string)"
user( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet user1_speak_in_word "user1_speak_in_word(word string, conn *net.TCPConn, t *testing.T)"
user1_speak_in_word( ${1:word string}, ${2:conn *net.TCPConn}, ${3:t *testing.T})
endsnippet

snippet user_speak_in_word "user_speak_in_word(word string, conn *net.TCPConn, t *testing.T)"
user_speak_in_word( ${1:word string}, ${2:conn *net.TCPConn}, ${3:t *testing.T})
endsnippet

snippet user_timeout "user_timeout(user *User)"
user_timeout( ${1:user *User})
endsnippet

snippet usesBuiltinMap "usesBuiltinMap(t types.Type)"
usesBuiltinMap( ${1:t types.Type})
endsnippet

snippet usesImport "usesImport(f *ast.File, path string)"
usesImport( ${1:f *ast.File}, ${2:path string})
endsnippet

snippet usize "usize(n int)"
usize( ${1:n int})
endsnippet

snippet v0TarHeaderSelect "v0TarHeaderSelect(h *tar.Header)"
v0TarHeaderSelect( ${1:h *tar.Header})
endsnippet

snippet v1TarHeaderSelect "v1TarHeaderSelect(h *tar.Header)"
v1TarHeaderSelect( ${1:h *tar.Header})
endsnippet

snippet val "val(lit string)"
val( ${1:lit string})
endsnippet

snippet valIndex "valIndex(a []*objNode)"
valIndex( ${1:a []*objNode})
endsnippet

snippet valPos "valPos(val ssa.Value)"
valPos( ${1:val ssa.Value})
endsnippet

snippet valString "valString(v exact.Value, floatFmt bool)"
valString( ${1:v exact.Value}, ${2:floatFmt bool})
endsnippet

snippet valSuffix "valSuffix(val string)"
valSuffix( ${1:val string})
endsnippet

snippet validHash "validHash(hash string)"
validHash( ${1:hash string})
endsnippet

snippet validHead "validHead(c *Commit)"
validHead( ${1:c *Commit})
endsnippet

snippet validKey "validKey(c appengine.Context, key, builder string)"
validKey( ${1:c appengine.Context}, ${2:key}, ${3:builder string})
endsnippet

snippet validMountMode "validMountMode(mode string)"
validMountMode( ${1:mode string})
endsnippet

snippet validPkgInfo "validPkgInfo(info string)"
validPkgInfo( ${1:info string})
endsnippet

snippet validRelPath "validRelPath(p string)"
validRelPath( ${1:p string})
endsnippet

snippet validSingle "validSingle(s string, depth int)"
validSingle( ${1:s string}, ${2:depth int})
endsnippet

snippet validVarName "validVarName(name string)"
validVarName( ${1:name string})
endsnippet

snippet validVersion "validVersion(version VersionInfo)"
validVersion( ${1:version VersionInfo})
endsnippet

snippet validateAndMap "validateAndMap(obj reflect.Value, context martini.Context, errors Errors, ifacePtr ...interface{})"
validateAndMap( ${1:obj reflect.Value}, ${2:context martini.Context}, ${3:errors Errors}, ${4:ifacePtr ...interface{}})
endsnippet

snippet validateContextDirectory "validateContextDirectory(srcPath string, excludes []string)"
validateContextDirectory( ${1:srcPath string}, ${2:excludes []string})
endsnippet

snippet validateDomain "validateDomain(val string)"
validateDomain( ${1:val string})
endsnippet

snippet validateHandler "validateHandler(handler Handler)"
validateHandler( ${1:handler Handler})
endsnippet

snippet validateID "validateID(id string)"
validateID( ${1:id string})
endsnippet

snippet validateProto "validateProto(proto string)"
validateProto( ${1:proto string})
endsnippet

snippet validateRepoName "validateRepoName(name string)"
validateRepoName( ${1:name string})
endsnippet

snippet validateRepositoryName "validateRepositoryName(repositoryName string)"
validateRepositoryName( ${1:repositoryName string})
endsnippet

snippet validateStruct "validateStruct(errors Errors, obj interface{})"
validateStruct( ${1:errors Errors}, ${2:obj interface{}})
endsnippet

snippet validatedImportPath "validatedImportPath(path string)"
validatedImportPath( ${1:path string})
endsnippet

snippet valueNature "valueNature(v interface{})"
valueNature( ${1:v interface{}})
endsnippet

snippet valueSwitch "valueSwitch(sw *Switch, k *ssa.Const, seen map[*ssa.BasicBlock]bool)"
valueSwitch( ${1:sw *Switch}, ${2:k *ssa.Const}, ${3:seen map[*ssa.BasicBlock]bool})
endsnippet

snippet valueToBytes "valueToBytes(v value)"
valueToBytes( ${1:v value})
endsnippet

snippet varInfer "varInfer(n varNode)"
varInfer( ${1:n varNode})
endsnippet

snippet varLex "varLex(s string)"
varLex( ${1:s string})
endsnippet

snippet varLexByteString "varLexByteString(l *varLexer)"
varLexByteString( ${1:l *varLexer})
endsnippet

snippet varLexNormal "varLexNormal(l *varLexer)"
varLexNormal( ${1:l *varLexer})
endsnippet

snippet varLexNumber "varLexNumber(l *varLexer)"
varLexNumber( ${1:l *varLexer})
endsnippet

snippet varLexString "varLexString(l *varLexer)"
varLexString( ${1:l *varLexer})
endsnippet

snippet varLexType "varLexType(l *varLexer)"
varLexType( ${1:l *varLexer})
endsnippet

snippet varMakeArrayNode "varMakeArrayNode(p *varParser, sig Signature)"
varMakeArrayNode( ${1:p *varParser}, ${2:sig Signature})
endsnippet

snippet varMakeDictNode "varMakeDictNode(p *varParser, sig Signature)"
varMakeDictNode( ${1:p *varParser}, ${2:sig Signature})
endsnippet

snippet varMakeNode "varMakeNode(p *varParser)"
varMakeNode( ${1:p *varParser})
endsnippet

snippet varMakeNumNode "varMakeNumNode(tok varToken, sig Signature)"
varMakeNumNode( ${1:tok varToken}, ${2:sig Signature})
endsnippet

snippet varMakeStringNode "varMakeStringNode(tok varToken, sig Signature)"
varMakeStringNode( ${1:tok varToken}, ${2:sig Signature})
endsnippet

snippet varMakeVariantNode "varMakeVariantNode(p *varParser, sig Signature)"
varMakeVariantNode( ${1:p *varParser}, ${2:sig Signature})
endsnippet

snippet varNumAs "varNumAs(s string, sig Signature)"
varNumAs( ${1:s string}, ${2:sig Signature})
endsnippet

snippet varParseByteString "varParseByteString(s string)"
varParseByteString( ${1:s string})
endsnippet

snippet varParseString "varParseString(s string)"
varParseString( ${1:s string})
endsnippet

snippet vcsExec "vcsExec(dir string, args ...string)"
vcsExec( ${1:dir string}, ${2:args ...string})
endsnippet

snippet verSuffix "verSuffix(gf *goconfig.ConfigFile, name string)"
verSuffix( ${1:gf *goconfig.ConfigFile}, ${2:name string})
endsnippet

snippet verifyBase "verifyBase(t *testing.T, driver graphdriver.Driver, name string)"
verifyBase( ${1:t *testing.T}, ${2:driver graphdriver.Driver}, ${3:name string})
endsnippet

snippet verifyCheckAndGet "verifyCheckAndGet(b *testing.B, ts0 *TestStruc)"
verifyCheckAndGet( ${1:b *testing.B}, ${2:ts0 *TestStruc})
endsnippet

snippet verifyFile "verifyFile(t *testing.T, path string, mode os.FileMode, uid, gid uint32)"
verifyFile( ${1:t *testing.T}, ${2:path string}, ${3:mode os.FileMode}, ${4:uid}, ${5:gid uint32})
endsnippet

snippet verifyOneOne "verifyOneOne(b *testing.B, ts *TestStruc)"
verifyOneOne( ${1:b *testing.B}, ${2:ts *TestStruc})
endsnippet

snippet verifyPositions "verifyPositions(t *testing.T, fset *FileSet, f *File, lines []int)"
verifyPositions( ${1:t *testing.T}, ${2:fset *FileSet}, ${3:f *File}, ${4:lines []int})
endsnippet

snippet verifyTsTree "verifyTsTree(b *testing.B, ts *TestStruc)"
verifyTsTree( ${1:b *testing.B}, ${2:ts *TestStruc})
endsnippet

snippet vet "vet(name string)"
vet( ${1:name string})
endsnippet

snippet vgradAlpha "vgradAlpha(alpha int)"
vgradAlpha( ${1:alpha int})
endsnippet

snippet vgradGreen "vgradGreen(alpha int)"
vgradGreen( ${1:alpha int})
endsnippet

snippet visit "visit(path string, f os.FileInfo, err error)"
visit( ${1:path string}, ${2:f os.FileInfo}, ${3:err error})
endsnippet

snippet visitFile "visitFile(path string, f os.FileInfo, err error)"
visitFile( ${1:path string}, ${2:f os.FileInfo}, ${3:err error})
endsnippet

snippet visitInstr "visitInstr(fr *frame, instr ssa.Instruction)"
visitInstr( ${1:fr *frame}, ${2:instr ssa.Instruction})
endsnippet

snippet voffset_coffset "voffset_coffset(text []byte, boffset int)"
voffset_coffset( ${1:text []byte}, ${2:boffset int})
endsnippet

snippet volume "volume(b *Builder, args []string, attributes map[string]bool, original string)"
volume( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet volumnType "volumnType(dir string)"
volumnType( ${1:dir string})
endsnippet

snippet wait "wait(waitChan <-chan struct{}, timeout time.Duration)"
wait( ${1:waitChan <-chan struct{}}, ${2:timeout time.Duration})
endsnippet

snippet waitContainerStart "waitContainerStart(t *testing.T, timeout time.Duration)"
waitContainerStart( ${1:t *testing.T}, ${2:timeout time.Duration})
endsnippet

snippet waitForContainer "waitForContainer(contID string, args ...string)"
waitForContainer( ${1:contID string}, ${2:args ...string})
endsnippet

snippet waitForEvent "waitForEvent(t *testing.T, monitor *Socket)"
waitForEvent( ${1:t *testing.T}, ${2:monitor *Socket})
endsnippet

snippet waitForExit "waitForExit(cli *DockerCli, containerId string)"
waitForExit( ${1:cli *DockerCli}, ${2:containerId string})
endsnippet

snippet waitForServer "waitForServer(t *testing.T, address string)"
waitForServer( ${1:t *testing.T}, ${2:address string})
endsnippet

snippet waitRun "waitRun(contID string)"
waitRun( ${1:contID string})
endsnippet

snippet wait_for_multiple_objects "wait_for_multiple_objects(objects []syscall.Handle)"
wait_for_multiple_objects( ${1:objects []syscall.Handle})
endsnippet

snippet walk "walk(n *html.Node, fn selector)"
walk( ${1:n *html.Node}, ${2:fn selector})
endsnippet

snippet walkBeforeAfter "walkBeforeAfter(x interface{}, before, after func(interface{})"
walkBeforeAfter( ${1:x interface{}}, ${2:before}, ${3:after func(interface{}})
endsnippet

snippet walkBinary "walkBinary(e *ast.BinaryExpr)"
walkBinary( ${1:e *ast.BinaryExpr})
endsnippet

snippet walkDeclList "walkDeclList(v Visitor, list []Decl)"
walkDeclList( ${1:v Visitor}, ${2:list []Decl})
endsnippet

snippet walkDeps "walkDeps(paths []string, includeTests bool, visit func(*build.Package, error)"
walkDeps( ${1:paths []string}, ${2:includeTests bool}, ${3:visit func(*build.Package}, ${4:error})
endsnippet

snippet walkDir "walkDir(dirname, prefix string, out chan string)"
walkDir( ${1:dirname}, ${2:prefix string}, ${3:out chan string})
endsnippet

snippet walkDirs "walkDirs(t *testing.T, dir string)"
walkDirs( ${1:t *testing.T}, ${2:dir string})
endsnippet

snippet walkExprList "walkExprList(v Visitor, list []Expr)"
walkExprList( ${1:v Visitor}, ${2:list []Expr})
endsnippet

snippet walkIdentList "walkIdentList(v Visitor, list []*Ident)"
walkIdentList( ${1:v Visitor}, ${2:list []*Ident})
endsnippet

snippet walkStmtList "walkStmtList(v Visitor, list []Stmt)"
walkStmtList( ${1:v Visitor}, ${2:list []Stmt})
endsnippet

snippet walkone "walkone(c *g9pc.Client, s string)"
walkone( ${1:c *g9pc.Client}, ${2:s string})
endsnippet

snippet warn "warn(pos token.Pos, msg string, args ...interface{})"
warn( ${1:pos token.Pos}, ${2:msg string}, ${3:args ...interface{}})
endsnippet

snippet warnf "warnf(format string, args ...interface{})"
warnf( ${1:format string}, ${2:args ...interface{}})
endsnippet

snippet warp "warp(p image.Point, x int)"
warp( ${1:p image.Point}, ${2:x int})
endsnippet

snippet watchDog "watchDog(done chan bool)"
watchDog( ${1:done chan bool})
endsnippet

snippet watchdog "watchdog(confProv <-chan Config)"
watchdog( ${1:confProv <-chan Config})
endsnippet

snippet what "what(posFlag string, buildContext *build.Context)"
what( ${1:posFlag string}, ${2:buildContext *build.Context})
endsnippet

snippet whicherrs "whicherrs(o *Oracle, qpos *QueryPos)"
whicherrs( ${1:o *Oracle}, ${2:qpos *QueryPos})
endsnippet

snippet widen "widen(x value)"
widen( ${1:x value})
endsnippet

snippet wildcardStr "wildcardStr(wildcard bool)"
wildcardStr( ${1:wildcard bool})
endsnippet

snippet windowrect "windowrect(ws *winsize, fd uintptr)"
windowrect( ${1:ws *winsize}, ${2:fd uintptr})
endsnippet

snippet wipe "wipe(builder, hash string)"
wipe( ${1:builder}, ${2:hash string})
endsnippet

snippet withEnvHint "withEnvHint(envVar, str string)"
withEnvHint( ${1:envVar}, ${2:str string})
endsnippet

snippet wordMask "wordMask(i uint)"
wordMask( ${1:i uint})
endsnippet

snippet words "words(arg []op)"
words( ${1:arg []op})
endsnippet

snippet wordwin "wordwin(def *dict.Defn)"
wordwin( ${1:def *dict.Defn})
endsnippet

snippet workdir "workdir(b *Builder, args []string, attributes map[string]bool, original string)"
workdir( ${1:b *Builder}, ${2:args []string}, ${3:attributes map[string]bool}, ${4:original string})
endsnippet

snippet worker_task "worker_task(name string, i int)"
worker_task( ${1:name string}, ${2:i int})
endsnippet

snippet wrapError "wrapError(err error)"
wrapError( ${1:err error})
endsnippet

snippet wrapFileServer "wrapFileServer(delegate http.Handler)"
wrapFileServer( ${1:delegate http.Handler})
endsnippet

snippet wrapHandlerFunc "wrapHandlerFunc(delegate handlerFunc)"
wrapHandlerFunc( ${1:delegate handlerFunc})
endsnippet

snippet wrapInDoc "wrapInDoc(data string)"
wrapInDoc( ${1:data string})
endsnippet

snippet wrapWebSocket "wrapWebSocket(delegate http.Handler)"
wrapWebSocket( ${1:delegate http.Handler})
endsnippet

snippet wrap_function "wrap_function(out io.Writer, fun *ast.FuncDecl)"
wrap_function( ${1:out io.Writer}, ${2:fun *ast.FuncDecl})
endsnippet

snippet wrapper "wrapper(x int)"
wrapper( ${1:x int})
endsnippet

snippet write "write(fd int, b []byte)"
write( ${1:fd int}, ${2:b []byte})
endsnippet

snippet writeCloudStorageObject "writeCloudStorageObject(httpClient *http.Client)"
writeCloudStorageObject( ${1:httpClient *http.Client})
endsnippet

snippet writeCon "writeCon(name string, val string)"
writeCon( ${1:name string}, ${2:val string})
endsnippet

snippet writeConfig "writeConfig(config *libcontainer.Config)"
writeConfig( ${1:config *libcontainer.Config})
endsnippet

snippet writeControlFrameHeader "writeControlFrameHeader(w io.Writer, h ControlFrameHeader)"
writeControlFrameHeader( ${1:w io.Writer}, ${2:h ControlFrameHeader})
endsnippet

snippet writeCorsHeaders "writeCorsHeaders(w http.ResponseWriter, r *http.Request)"
writeCorsHeaders( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet writeData "writeData(win *acme.Win, data []byte)"
writeData( ${1:win *acme.Win}, ${2:data []byte})
endsnippet

snippet writeError "writeError(err error)"
writeError( ${1:err error})
endsnippet

snippet writeEvent "writeEvent(job *engine.Job, event *utils.JSONMessage, eventFilters filters.Args)"
writeEvent( ${1:job *engine.Job}, ${2:event *utils.JSONMessage}, ${3:eventFilters filters.Args})
endsnippet

snippet writeFieldList "writeFieldList(buf *bytes.Buffer, fields *ast.FieldList, sep string, iface bool)"
writeFieldList( ${1:buf *bytes.Buffer}, ${2:fields *ast.FieldList}, ${3:sep string}, ${4:iface bool})
endsnippet

snippet writeFile "writeFile(dst, content string, t *testing.T)"
writeFile( ${1:dst}, ${2:content string}, ${3:t *testing.T})
endsnippet

snippet writeFuncName "writeFuncName(buf *bytes.Buffer, this *Package, f *Func)"
writeFuncName( ${1:buf *bytes.Buffer}, ${2:this *Package}, ${3:f *Func})
endsnippet

snippet writeHeaderValueBlock "writeHeaderValueBlock(w io.Writer, h http.Header)"
writeHeaderValueBlock( ${1:w io.Writer}, ${2:h http.Header})
endsnippet

snippet writeHeaders "writeHeaders(w http.ResponseWriter)"
writeHeaders( ${1:w http.ResponseWriter})
endsnippet

snippet writeJSON "writeJSON(w http.ResponseWriter, code int, v engine.Env)"
writeJSON( ${1:w http.ResponseWriter}, ${2:code int}, ${3:v engine.Env})
endsnippet

snippet writeLockInfo "writeLockInfo(w io.Writer, token string, ld LockDetails)"
writeLockInfo( ${1:w io.Writer}, ${2:token string}, ${3:ld LockDetails})
endsnippet

snippet writeNValues "writeNValues(t *testing.T, s io.Writer, n int, buf []byte, period time.Duration)"
writeNValues( ${1:t *testing.T}, ${2:s io.Writer}, ${3:n int}, ${4:buf []byte}, ${5:period time.Duration})
endsnippet

snippet writeObject "writeObject(buf *bytes.Buffer, this *Package, obj Object)"
writeObject( ${1:buf *bytes.Buffer}, ${2:this *Package}, ${3:obj Object})
endsnippet

snippet writePackageFile "writePackageFile(fileName string, pkgIdent string, version string, deps []string)"
writePackageFile( ${1:fileName string}, ${2:pkgIdent string}, ${3:version string}, ${4:deps []string})
endsnippet

snippet writePackages "writePackages(c *C, rootDir string, version string, pkgs map[string]packageSpec)"
writePackages( ${1:c *C}, ${2:rootDir string}, ${3:version string}, ${4:pkgs map[string]packageSpec})
endsnippet

snippet writePacket "writePacket(t *testing.T, s io.Writer, buf []byte, index int)"
writePacket( ${1:t *testing.T}, ${2:s io.Writer}, ${3:buf []byte}, ${4:index int})
endsnippet

snippet writeQuoted "writeQuoted(w writer, s string)"
writeQuoted( ${1:w writer}, ${2:s string})
endsnippet

snippet writeResponse "writeResponse(w http.ResponseWriter, message interface{}, code int)"
writeResponse( ${1:w http.ResponseWriter}, ${2:message interface{}}, ${3:code int})
endsnippet

snippet writeSVG "writeSVG(w io.Writer, summary *Summary)"
writeSVG( ${1:w io.Writer}, ${2:summary *Summary})
endsnippet

snippet writeSigExpr "writeSigExpr(buf *bytes.Buffer, sig *ast.FuncType)"
writeSigExpr( ${1:buf *bytes.Buffer}, ${2:sig *ast.FuncType})
endsnippet

snippet writeSignature "writeSignature(buf *bytes.Buffer, from *types.Package, name string, sig *types.Signature, params []*Parameter)"
writeSignature( ${1:buf *bytes.Buffer}, ${2:from *types.Package}, ${3:name string}, ${4:sig *types.Signature}, ${5:params []*Parameter})
endsnippet

snippet writeThenReadDatagram "writeThenReadDatagram(t *testing.T, i int, c *ipv4.RawConn, wb []byte, src, dst net.Addr)"
writeThenReadDatagram( ${1:t *testing.T}, ${2:i int}, ${3:c *ipv4.RawConn}, ${4:wb []byte}, ${5:src}, ${6:dst net.Addr})
endsnippet

snippet writeThenReadPayload "writeThenReadPayload(t *testing.T, i int, c *ipv4.PacketConn, wb []byte, dst net.Addr)"
writeThenReadPayload( ${1:t *testing.T}, ${2:i int}, ${3:c *ipv4.PacketConn}, ${4:wb []byte}, ${5:dst net.Addr})
endsnippet

snippet writeTuple "writeTuple(buf *bytes.Buffer, this *Package, tup *Tuple, variadic bool, visited []Type)"
writeTuple( ${1:buf *bytes.Buffer}, ${2:this *Package}, ${3:tup *Tuple}, ${4:variadic bool}, ${5:visited []Type})
endsnippet

snippet writeType "writeType(buf *bytes.Buffer, this *Package, typ Type, visited []Type)"
writeType( ${1:buf *bytes.Buffer}, ${2:this *Package}, ${3:typ Type}, ${4:visited []Type})
endsnippet

snippet writeValue "writeValue(buf *bytes.Buffer, v value)"
writeValue( ${1:buf *bytes.Buffer}, ${2:v value})
endsnippet

snippet write_console_output_attribute "write_console_output_attribute(h syscall.Handle, attrs []word, pos coord)"
write_console_output_attribute( ${1:h syscall.Handle}, ${2:attrs []word}, ${3:pos coord})
endsnippet

snippet write_console_output_character "write_console_output_character(h syscall.Handle, chars []wchar, pos coord)"
write_console_output_character( ${1:h syscall.Handle}, ${2:chars []wchar}, ${3:pos coord})
endsnippet

snippet write_cursor "write_cursor(x, y int)"
write_cursor( ${1:x}, ${2:y int})
endsnippet

snippet write_sgr "write_sgr(fg, bg Attribute)"
write_sgr( ${1:fg}, ${2:bg Attribute})
endsnippet

snippet write_sgr_bg "write_sgr_bg(a Attribute)"
write_sgr_bg( ${1:a Attribute})
endsnippet

snippet write_sgr_fg "write_sgr_fg(a Attribute)"
write_sgr_fg( ${1:a Attribute})
endsnippet

snippet writeone "writeone(c *g9pc.Client, f, s string)"
writeone( ${1:c *g9pc.Client}, ${2:f}, ${3:s string})
endsnippet

snippet wsContainersAttach "wsContainersAttach(eng *engine.Engine, version version.Version, w http.ResponseWriter, r *http.Request, vars map[string]string)"
wsContainersAttach( ${1:eng *engine.Engine}, ${2:version version.Version}, ${3:w http.ResponseWriter}, ${4:r *http.Request}, ${5:vars map[string]string})
endsnippet

snippet xHandler "xHandler(w http.ResponseWriter, r *http.Request)"
xHandler( ${1:w http.ResponseWriter}, ${2:r *http.Request})
endsnippet

snippet xTestParser "xTestParser(t *testing.T)"
xTestParser( ${1:t *testing.T})
endsnippet

snippet xTestReadWriteWav "xTestReadWriteWav(t *testing.T)"
xTestReadWriteWav( ${1:t *testing.T})
endsnippet

snippet xzDecompress "xzDecompress(archive io.Reader)"
xzDecompress( ${1:archive io.Reader})
endsnippet

snippet zero "zero(t types.Type)"
zero( ${1:t types.Type})
endsnippet

snippet zeroConst "zeroConst(t types.Type)"
zeroConst( ${1:t types.Type})
endsnippet

snippet zeroTerminated "zeroTerminated(s string)"
zeroTerminated( ${1:s string})
endsnippet

snippet zeroValue "zeroValue(f *Function, t types.Type)"
zeroValue( ${1:f *Function}, ${2:t types.Type})
endsnippet

snippet zipPath "zipPath(name string)"
zipPath( ${1:name string})
endsnippet

snippet zmqstruct "zmqstruct(f *ast.File)"
zmqstruct( ${1:f *ast.File})
endsnippet

snippet zmqstructtype "zmqstructtype(zmq string, n ast.Expr)"
zmqstructtype( ${1:zmq string}, ${2:n ast.Expr})
endsnippet

snippet zoneToUint32 "zoneToUint32(zone string)"
zoneToUint32( ${1:zone string})
endsnippet

